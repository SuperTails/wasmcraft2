TODO: Unknown section CustomSection { name: "name", data_offset: 4701, range: Range { start: 4696, end: 5053 }, data: "..." }
TODO: Unknown section CustomSection { name: "producers", data_offset: 5065, range: Range { start: 5055, end: 5102 }, data: "..." }
TypeList { types: [Func(FuncType { params: [I32], returns: [] }), Func(FuncType { params: [], returns: [] }), Func(FuncType { params: [I32], returns: [I32] }), Func(FuncType { params: [I32, I32, I32], returns: [I32] }), Func(FuncType { params: [], returns: [I32] })] }
GlobalList { globals: [Global { ty: GlobalType { content_type: I32, mutable: true }, init_expr: InitExpr { offset: 144, data: [65, 176, 187, 4, 11] } }] }
MemoryList { memory: [MemoryType { memory64: false, shared: false, initial: 2, maximum: None }] }
ExportList { exports: [Export { field: "memory", kind: Memory, index: 0 }, Export { field: "_start", kind: Function, index: 17 }] }
ImportList { func_imports: [FuncImport { module: "env", field: Some("turtle_z"), ty: 0 }, FuncImport { module: "env", field: Some("turtle_y"), ty: 0 }, FuncImport { module: "env", field: Some("turtle_x"), ty: 0 }, FuncImport { module: "env", field: Some("turtle_set"), ty: 0 }, FuncImport { module: "env", field: Some("sleep"), ty: 1 }], global_imports: [] }
DataList { data: [Data { kind: Active { memory_index: 0, init_expr: InitExpr { offset: 4353, data: [65, 128, 8, 11] } }, data: [106, 2, 107, 12, 108, 63, 109, 12, 162, 234, 218, 182, 220, 214, 110, 0, 34, 212, 102, 3, 104, 2, 96, 96, 240, 21, 240, 7, 48, 0, 18, 26, 199, 23, 119, 8, 105, 255, 162, 240, 214, 113, 162, 234, 218, 182, 220, 214, 96, 1, 224, 161, 123, 254, 96, 4, 224, 161, 123, 2, 96, 31, 139, 2, 218, 182, 96, 12, 224, 161, 125, 254, 96, 13, 224, 161, 125, 2, 96, 31, 141, 2, 220, 214, 162, 240, 214, 113, 134, 132, 135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 70, 2, 18, 120, 70, 63, 18, 130, 71, 31, 105, 255, 71, 0, 105, 1, 214, 113, 18, 42, 104, 2, 99, 1, 128, 112, 128, 181, 18, 138, 104, 254, 99, 10, 128, 112, 128, 213, 63, 1, 18, 162, 97, 2, 128, 21, 63, 1, 18, 186, 128, 21, 63, 1, 18, 200, 128, 21, 63, 1, 18, 194, 96, 32, 240, 24, 34, 212, 142, 52, 34, 212, 102, 62, 51, 1, 102, 3, 104, 254, 51, 1, 104, 2, 18, 22, 121, 255, 73, 254, 105, 255, 18, 200, 121, 1, 73, 2, 105, 1, 96, 4, 240, 24, 118, 1, 70, 64, 118, 254, 18, 108, 162, 242, 254, 51, 242, 101, 241, 41, 100, 20, 101, 0, 212, 85, 116, 21, 242, 41, 212, 85, 0, 238, 128, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0], range: Range { start: 4352, end: 4607 } }, Data { kind: Active { memory_index: 0, init_expr: InitExpr { offset: 4608, data: [65, 128, 10, 11] } }, data: [240, 144, 144, 144, 240, 32, 96, 32, 32, 112, 240, 16, 240, 128, 240, 240, 16, 240, 16, 240, 144, 144, 240, 16, 16, 240, 128, 240, 16, 240, 240, 128, 240, 144, 240, 240, 16, 32, 64, 64, 240, 144, 240, 144, 240, 240, 144, 240, 16, 240, 240, 144, 240, 144, 144, 224, 144, 224, 144, 224, 240, 128, 128, 128, 240, 224, 144, 144, 144, 224, 240, 128, 240, 128, 240, 240, 128, 240, 128, 128], range: Range { start: 4607, end: 4693 } }] }
TableList { tables: [TableType { element_type: FuncRef, initial: 2, maximum: Some(2) }] }
<elements>
FunctionList { functions: [0, 0, 0, 0, 1, 1, 2, 2, 3, 0, 3, 3, 0, 4, 4, 1, 3, 4] }
13
FuncType { params: [], returns: [] }
ControlStack([])
ValueStack([])

==== block BlockId { func: 5, block: 0 } ==== 
parameters: []
Call { function_index: 15, params: [], returns: [] }
Jump(JumpTarget { label: BlockId { func: 5, block: 1 }, params: [] })

==== block BlockId { func: 5, block: 1 } ==== 
parameters: []
Return([])

FuncType { params: [I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(1, I32))])

==== block BlockId { func: 6, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 0)
Jump(JumpTarget { label: BlockId { func: 6, block: 1 }, params: [TypedSsaVar(0, I32)] })

==== block BlockId { func: 6, block: 1 } ==== 
parameters: [TypedSsaVar(1, I32)]
Return([TypedSsaVar(1, I32)])

FuncType { params: [I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(1, I32))])

==== block BlockId { func: 7, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 0)
Jump(JumpTarget { label: BlockId { func: 7, block: 1 }, params: [TypedSsaVar(0, I32)] })

==== block BlockId { func: 7, block: 1 } ==== 
parameters: [TypedSsaVar(1, I32)]
Return([TypedSsaVar(1, I32)])

FuncType { params: [I32, I32, I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(36, I32))])

==== block BlockId { func: 8, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 0)
I32Set(TypedSsaVar(1, I32), 512)
Store16(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(1, I32), TypedSsaVar(0, I32))
LocalGet(TypedSsaVar(2, I32), 0)
I32Set(TypedSsaVar(3, I32), 40)
Add(TypedSsaVar(4, I32), TypedSsaVar(2, I32), TypedSsaVar(3, I32))
I32Set(TypedSsaVar(5, I32), 1280)
I32Set(TypedSsaVar(6, I32), 80)
Call { function_index: 11, params: [TypedSsaVar(4, I32), TypedSsaVar(5, I32), TypedSsaVar(6, I32)], returns: [TypedSsaVar(7, I32)] }
LocalGet(TypedSsaVar(8, I32), 2)
I32Set(TypedSsaVar(9, I32), -1)
Add(TypedSsaVar(10, I32), TypedSsaVar(8, I32), TypedSsaVar(9, I32))
I32Set(TypedSsaVar(11, I32), 3582)
GtU(TypedSsaVar(12, I32), TypedSsaVar(10, I32), TypedSsaVar(11, I32))
BranchIf { cond: TypedSsaVar(12, I32), true_target: JumpTarget { label: BlockId { func: 8, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 8, block: 3 }, params: [] } }

==== block BlockId { func: 8, block: 3 } ==== 
parameters: []
LocalGet(TypedSsaVar(13, I32), 2)
I32Set(TypedSsaVar(14, I32), 4)
Add(TypedSsaVar(15, I32), TypedSsaVar(13, I32), TypedSsaVar(14, I32))
LocalSet(3, TypedSsaVar(15, I32))
LocalGet(TypedSsaVar(16, I32), 0)
I32Set(TypedSsaVar(17, I32), 552)
Add(TypedSsaVar(18, I32), TypedSsaVar(16, I32), TypedSsaVar(17, I32))
LocalSet(0, TypedSsaVar(18, I32))
Jump(JumpTarget { label: BlockId { func: 8, block: 4 }, params: [] })

==== block BlockId { func: 8, block: 4 } ==== 
parameters: []
LocalGet(TypedSsaVar(19, I32), 0)
LocalGet(TypedSsaVar(20, I32), 1)
Load32S(MemoryImmediate { align: 2, offset: 0, memory: 0 }, TypedSsaVar(21, I32), TypedSsaVar(20, I32))
Store32(MemoryImmediate { align: 2, offset: 0, memory: 0 }, TypedSsaVar(21, I32), TypedSsaVar(19, I32))
LocalGet(TypedSsaVar(22, I32), 0)
I32Set(TypedSsaVar(23, I32), 4)
Add(TypedSsaVar(24, I32), TypedSsaVar(22, I32), TypedSsaVar(23, I32))
LocalSet(0, TypedSsaVar(24, I32))
LocalGet(TypedSsaVar(25, I32), 1)
I32Set(TypedSsaVar(26, I32), 4)
Add(TypedSsaVar(27, I32), TypedSsaVar(25, I32), TypedSsaVar(26, I32))
LocalSet(1, TypedSsaVar(27, I32))
LocalGet(TypedSsaVar(28, I32), 3)
I32Set(TypedSsaVar(29, I32), -4)
Add(TypedSsaVar(30, I32), TypedSsaVar(28, I32), TypedSsaVar(29, I32))
LocalSet(3, TypedSsaVar(30, I32))
I32Set(TypedSsaVar(31, I32), 4)
GtS(TypedSsaVar(32, I32), TypedSsaVar(30, I32), TypedSsaVar(31, I32))
BranchIf { cond: TypedSsaVar(32, I32), true_target: JumpTarget { label: BlockId { func: 8, block: 4 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 8, block: 5 }, params: [] } }

==== block BlockId { func: 8, block: 5 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 8, block: 2 }, params: [] })

==== block BlockId { func: 8, block: 2 } ==== 
parameters: []
LocalGet(TypedSsaVar(33, I32), 2)
I32Set(TypedSsaVar(34, I32), 3584)
LtS(TypedSsaVar(35, I32), TypedSsaVar(33, I32), TypedSsaVar(34, I32))
Jump(JumpTarget { label: BlockId { func: 8, block: 1 }, params: [TypedSsaVar(35, I32)] })

==== block BlockId { func: 8, block: 1 } ==== 
parameters: [TypedSsaVar(36, I32)]
Return([TypedSsaVar(36, I32)])

FuncType { params: [I32], returns: [] }
ControlStack([])
ValueStack([])

==== block BlockId { func: 9, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 0)
LocalGet(TypedSsaVar(1, I32), 0)
LocalGet(TypedSsaVar(2, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(3, I32), TypedSsaVar(2, I32))
LocalSet(1, TypedSsaVar(3, I32))
Add(TypedSsaVar(4, I32), TypedSsaVar(1, I32), TypedSsaVar(3, I32))
LocalSet(2, TypedSsaVar(4, I32))
I32Set(TypedSsaVar(5, I32), 40)
Add(TypedSsaVar(6, I32), TypedSsaVar(4, I32), TypedSsaVar(5, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(7, I32), TypedSsaVar(6, I32))
LocalSet(3, TypedSsaVar(7, I32))
I32Set(TypedSsaVar(8, I32), 8)
Shl(TypedSsaVar(9, I32), TypedSsaVar(7, I32), TypedSsaVar(8, I32))
LocalGet(TypedSsaVar(10, I32), 2)
I32Set(TypedSsaVar(11, I32), 41)
Add(TypedSsaVar(12, I32), TypedSsaVar(10, I32), TypedSsaVar(11, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(13, I32), TypedSsaVar(12, I32))
LocalSet(4, TypedSsaVar(13, I32))
Or(TypedSsaVar(14, I32), TypedSsaVar(9, I32), TypedSsaVar(13, I32))
LocalSet(2, TypedSsaVar(14, I32))
Store16(MemoryImmediate { align: 1, offset: 4154, memory: 0 }, TypedSsaVar(14, I32), TypedSsaVar(0, I32))
LocalGet(TypedSsaVar(15, I32), 2)
I32Set(TypedSsaVar(16, I32), 12)
ShrU(TypedSsaVar(17, I32), TypedSsaVar(15, I32), TypedSsaVar(16, I32))
BranchTable { cond: TypedSsaVar(17, I32), default: JumpTarget { label: BlockId { func: 9, block: 22 }, params: [] }, arms: [JumpTarget { label: BlockId { func: 9, block: 22 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 21 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 20 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 19 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 18 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 17 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 16 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 15 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 14 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 13 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 12 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 11 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 10 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 9 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 8 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 7 }, params: [] }] }

==== block BlockId { func: 9, block: 23 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 22 }, params: [] })

==== block BlockId { func: 9, block: 22 } ==== 
parameters: []
LocalGet(TypedSsaVar(18, I32), 2)
I32Set(TypedSsaVar(19, I32), 15)
And(TypedSsaVar(20, I32), TypedSsaVar(18, I32), Var(TypedSsaVar(19, I32)))
BranchTable { cond: TypedSsaVar(20, I32), default: JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, arms: [JumpTarget { label: BlockId { func: 9, block: 6 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 24 }, params: [] }] }

==== block BlockId { func: 9, block: 25 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 24 }, params: [] })

==== block BlockId { func: 9, block: 24 } ==== 
parameters: []
LocalGet(TypedSsaVar(21, I32), 0)
LocalGet(TypedSsaVar(22, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 32, memory: 0 }, TypedSsaVar(23, I32), TypedSsaVar(22, I32))
I32Set(TypedSsaVar(24, I32), -1)
Add(TypedSsaVar(25, I32), TypedSsaVar(23, I32), TypedSsaVar(24, I32))
LocalSet(2, TypedSsaVar(25, I32))
Store16(MemoryImmediate { align: 1, offset: 32, memory: 0 }, TypedSsaVar(25, I32), TypedSsaVar(21, I32))
LocalGet(TypedSsaVar(26, I32), 0)
LocalGet(TypedSsaVar(27, I32), 2)
I32Set(TypedSsaVar(28, I32), 65535)
And(TypedSsaVar(29, I32), TypedSsaVar(27, I32), Var(TypedSsaVar(28, I32)))
I32Set(TypedSsaVar(30, I32), 1)
Shl(TypedSsaVar(31, I32), TypedSsaVar(29, I32), TypedSsaVar(30, I32))
Add(TypedSsaVar(32, I32), TypedSsaVar(26, I32), TypedSsaVar(31, I32))
Load16U(MemoryImmediate { align: 1, offset: 0, memory: 0 }, TypedSsaVar(33, I32), TypedSsaVar(32, I32))
I32Set(TypedSsaVar(34, I32), 2)
Add(TypedSsaVar(35, I32), TypedSsaVar(33, I32), TypedSsaVar(34, I32))
LocalSet(2, TypedSsaVar(35, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 26 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 21 }, params: [] })

==== block BlockId { func: 9, block: 21 } ==== 
parameters: []
LocalGet(TypedSsaVar(36, I32), 2)
I32Set(TypedSsaVar(37, I32), 4095)
And(TypedSsaVar(38, I32), TypedSsaVar(36, I32), Var(TypedSsaVar(37, I32)))
LocalSet(2, TypedSsaVar(38, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 27 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 20 }, params: [] })

==== block BlockId { func: 9, block: 20 } ==== 
parameters: []
LocalGet(TypedSsaVar(39, I32), 0)
LocalGet(TypedSsaVar(40, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 32, memory: 0 }, TypedSsaVar(41, I32), TypedSsaVar(40, I32))
I32Set(TypedSsaVar(42, I32), 1)
Shl(TypedSsaVar(43, I32), TypedSsaVar(41, I32), TypedSsaVar(42, I32))
Add(TypedSsaVar(44, I32), TypedSsaVar(39, I32), TypedSsaVar(43, I32))
LocalGet(TypedSsaVar(45, I32), 1)
Store16(MemoryImmediate { align: 1, offset: 0, memory: 0 }, TypedSsaVar(45, I32), TypedSsaVar(44, I32))
LocalGet(TypedSsaVar(46, I32), 0)
LocalGet(TypedSsaVar(47, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 32, memory: 0 }, TypedSsaVar(48, I32), TypedSsaVar(47, I32))
I32Set(TypedSsaVar(49, I32), 1)
Add(TypedSsaVar(50, I32), TypedSsaVar(48, I32), TypedSsaVar(49, I32))
Store16(MemoryImmediate { align: 1, offset: 32, memory: 0 }, TypedSsaVar(50, I32), TypedSsaVar(46, I32))
LocalGet(TypedSsaVar(51, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4154, memory: 0 }, TypedSsaVar(52, I32), TypedSsaVar(51, I32))
I32Set(TypedSsaVar(53, I32), 4095)
And(TypedSsaVar(54, I32), TypedSsaVar(52, I32), Var(TypedSsaVar(53, I32)))
LocalSet(2, TypedSsaVar(54, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 28 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 19 }, params: [] })

==== block BlockId { func: 9, block: 19 } ==== 
parameters: []
LocalGet(TypedSsaVar(55, I32), 0)
LocalGet(TypedSsaVar(56, I32), 2)
I32Set(TypedSsaVar(57, I32), 8)
ShrU(TypedSsaVar(58, I32), TypedSsaVar(56, I32), TypedSsaVar(57, I32))
I32Set(TypedSsaVar(59, I32), 15)
And(TypedSsaVar(60, I32), TypedSsaVar(58, I32), Var(TypedSsaVar(59, I32)))
Add(TypedSsaVar(61, I32), TypedSsaVar(55, I32), TypedSsaVar(60, I32))
I32Set(TypedSsaVar(62, I32), 4136)
Add(TypedSsaVar(63, I32), TypedSsaVar(61, I32), TypedSsaVar(62, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(64, I32), TypedSsaVar(63, I32))
LocalGet(TypedSsaVar(65, I32), 4)
Ne(TypedSsaVar(66, I32), TypedSsaVar(64, I32), TypedSsaVar(65, I32))
BranchIf { cond: TypedSsaVar(66, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 29 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 30 }, params: [] } }

==== block BlockId { func: 9, block: 30 } ==== 
parameters: []
LocalGet(TypedSsaVar(67, I32), 1)
I32Set(TypedSsaVar(68, I32), 4)
Add(TypedSsaVar(69, I32), TypedSsaVar(67, I32), TypedSsaVar(68, I32))
LocalSet(2, TypedSsaVar(69, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 31 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 29 }, params: [] })

==== block BlockId { func: 9, block: 29 } ==== 
parameters: []
LocalGet(TypedSsaVar(70, I32), 1)
I32Set(TypedSsaVar(71, I32), 2)
Add(TypedSsaVar(72, I32), TypedSsaVar(70, I32), TypedSsaVar(71, I32))
LocalSet(2, TypedSsaVar(72, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 32 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 18 }, params: [] })

==== block BlockId { func: 9, block: 18 } ==== 
parameters: []
LocalGet(TypedSsaVar(73, I32), 0)
LocalGet(TypedSsaVar(74, I32), 2)
I32Set(TypedSsaVar(75, I32), 8)
ShrU(TypedSsaVar(76, I32), TypedSsaVar(74, I32), TypedSsaVar(75, I32))
I32Set(TypedSsaVar(77, I32), 15)
And(TypedSsaVar(78, I32), TypedSsaVar(76, I32), Var(TypedSsaVar(77, I32)))
Add(TypedSsaVar(79, I32), TypedSsaVar(73, I32), TypedSsaVar(78, I32))
I32Set(TypedSsaVar(80, I32), 4136)
Add(TypedSsaVar(81, I32), TypedSsaVar(79, I32), TypedSsaVar(80, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(82, I32), TypedSsaVar(81, I32))
LocalGet(TypedSsaVar(83, I32), 4)
Eq(TypedSsaVar(84, I32), TypedSsaVar(82, I32), TypedSsaVar(83, I32))
BranchIf { cond: TypedSsaVar(84, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 33 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 34 }, params: [] } }

==== block BlockId { func: 9, block: 34 } ==== 
parameters: []
LocalGet(TypedSsaVar(85, I32), 1)
I32Set(TypedSsaVar(86, I32), 4)
Add(TypedSsaVar(87, I32), TypedSsaVar(85, I32), TypedSsaVar(86, I32))
LocalSet(2, TypedSsaVar(87, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 35 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 33 }, params: [] })

==== block BlockId { func: 9, block: 33 } ==== 
parameters: []
LocalGet(TypedSsaVar(88, I32), 1)
I32Set(TypedSsaVar(89, I32), 2)
Add(TypedSsaVar(90, I32), TypedSsaVar(88, I32), TypedSsaVar(89, I32))
LocalSet(2, TypedSsaVar(90, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 36 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 17 }, params: [] })

==== block BlockId { func: 9, block: 17 } ==== 
parameters: []
LocalGet(TypedSsaVar(91, I32), 0)
I32Set(TypedSsaVar(92, I32), 4136)
Add(TypedSsaVar(93, I32), TypedSsaVar(91, I32), TypedSsaVar(92, I32))
LocalSet(4, TypedSsaVar(93, I32))
LocalGet(TypedSsaVar(94, I32), 2)
I32Set(TypedSsaVar(95, I32), 8)
ShrU(TypedSsaVar(96, I32), TypedSsaVar(94, I32), TypedSsaVar(95, I32))
I32Set(TypedSsaVar(97, I32), 15)
And(TypedSsaVar(98, I32), TypedSsaVar(96, I32), Var(TypedSsaVar(97, I32)))
Add(TypedSsaVar(99, I32), TypedSsaVar(93, I32), TypedSsaVar(98, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(100, I32), TypedSsaVar(99, I32))
LocalGet(TypedSsaVar(101, I32), 4)
LocalGet(TypedSsaVar(102, I32), 2)
I32Set(TypedSsaVar(103, I32), 4)
ShrU(TypedSsaVar(104, I32), TypedSsaVar(102, I32), TypedSsaVar(103, I32))
I32Set(TypedSsaVar(105, I32), 15)
And(TypedSsaVar(106, I32), TypedSsaVar(104, I32), Var(TypedSsaVar(105, I32)))
Add(TypedSsaVar(107, I32), TypedSsaVar(101, I32), TypedSsaVar(106, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(108, I32), TypedSsaVar(107, I32))
Ne(TypedSsaVar(109, I32), TypedSsaVar(100, I32), TypedSsaVar(108, I32))
BranchIf { cond: TypedSsaVar(109, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 37 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 38 }, params: [] } }

==== block BlockId { func: 9, block: 38 } ==== 
parameters: []
LocalGet(TypedSsaVar(110, I32), 1)
I32Set(TypedSsaVar(111, I32), 4)
Add(TypedSsaVar(112, I32), TypedSsaVar(110, I32), TypedSsaVar(111, I32))
LocalSet(2, TypedSsaVar(112, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 39 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 37 }, params: [] })

==== block BlockId { func: 9, block: 37 } ==== 
parameters: []
LocalGet(TypedSsaVar(113, I32), 1)
I32Set(TypedSsaVar(114, I32), 2)
Add(TypedSsaVar(115, I32), TypedSsaVar(113, I32), TypedSsaVar(114, I32))
LocalSet(2, TypedSsaVar(115, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 40 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 16 }, params: [] })

==== block BlockId { func: 9, block: 16 } ==== 
parameters: []
LocalGet(TypedSsaVar(116, I32), 0)
LocalGet(TypedSsaVar(117, I32), 2)
I32Set(TypedSsaVar(118, I32), 8)
ShrU(TypedSsaVar(119, I32), TypedSsaVar(117, I32), TypedSsaVar(118, I32))
I32Set(TypedSsaVar(120, I32), 15)
And(TypedSsaVar(121, I32), TypedSsaVar(119, I32), Var(TypedSsaVar(120, I32)))
Add(TypedSsaVar(122, I32), TypedSsaVar(116, I32), TypedSsaVar(121, I32))
I32Set(TypedSsaVar(123, I32), 4136)
Add(TypedSsaVar(124, I32), TypedSsaVar(122, I32), TypedSsaVar(123, I32))
LocalGet(TypedSsaVar(125, I32), 4)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(125, I32), TypedSsaVar(124, I32))
LocalGet(TypedSsaVar(126, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(127, I32), TypedSsaVar(126, I32))
I32Set(TypedSsaVar(128, I32), 2)
Add(TypedSsaVar(129, I32), TypedSsaVar(127, I32), TypedSsaVar(128, I32))
LocalSet(2, TypedSsaVar(129, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 41 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 15 }, params: [] })

==== block BlockId { func: 9, block: 15 } ==== 
parameters: []
LocalGet(TypedSsaVar(130, I32), 0)
LocalGet(TypedSsaVar(131, I32), 2)
I32Set(TypedSsaVar(132, I32), 8)
ShrU(TypedSsaVar(133, I32), TypedSsaVar(131, I32), TypedSsaVar(132, I32))
I32Set(TypedSsaVar(134, I32), 15)
And(TypedSsaVar(135, I32), TypedSsaVar(133, I32), Var(TypedSsaVar(134, I32)))
Add(TypedSsaVar(136, I32), TypedSsaVar(130, I32), TypedSsaVar(135, I32))
I32Set(TypedSsaVar(137, I32), 4136)
Add(TypedSsaVar(138, I32), TypedSsaVar(136, I32), TypedSsaVar(137, I32))
LocalSet(2, TypedSsaVar(138, I32))
LocalGet(TypedSsaVar(139, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(140, I32), TypedSsaVar(139, I32))
LocalGet(TypedSsaVar(141, I32), 4)
Add(TypedSsaVar(142, I32), TypedSsaVar(140, I32), TypedSsaVar(141, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(142, I32), TypedSsaVar(138, I32))
LocalGet(TypedSsaVar(143, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(144, I32), TypedSsaVar(143, I32))
I32Set(TypedSsaVar(145, I32), 2)
Add(TypedSsaVar(146, I32), TypedSsaVar(144, I32), TypedSsaVar(145, I32))
LocalSet(2, TypedSsaVar(146, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 42 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 14 }, params: [] })

==== block BlockId { func: 9, block: 14 } ==== 
parameters: []
LocalGet(TypedSsaVar(147, I32), 2)
I32Set(TypedSsaVar(148, I32), 15)
And(TypedSsaVar(149, I32), TypedSsaVar(147, I32), Var(TypedSsaVar(148, I32)))
BranchTable { cond: TypedSsaVar(149, I32), default: JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, arms: [JumpTarget { label: BlockId { func: 9, block: 51 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 50 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 49 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 48 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 47 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 46 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 45 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 44 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 43 }, params: [] }] }

==== block BlockId { func: 9, block: 52 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 51 }, params: [] })

==== block BlockId { func: 9, block: 51 } ==== 
parameters: []
LocalGet(TypedSsaVar(150, I32), 0)
I32Set(TypedSsaVar(151, I32), 4136)
Add(TypedSsaVar(152, I32), TypedSsaVar(150, I32), TypedSsaVar(151, I32))
LocalSet(4, TypedSsaVar(152, I32))
LocalGet(TypedSsaVar(153, I32), 2)
I32Set(TypedSsaVar(154, I32), 8)
ShrU(TypedSsaVar(155, I32), TypedSsaVar(153, I32), TypedSsaVar(154, I32))
I32Set(TypedSsaVar(156, I32), 15)
And(TypedSsaVar(157, I32), TypedSsaVar(155, I32), Var(TypedSsaVar(156, I32)))
Add(TypedSsaVar(158, I32), TypedSsaVar(152, I32), TypedSsaVar(157, I32))
LocalGet(TypedSsaVar(159, I32), 4)
LocalGet(TypedSsaVar(160, I32), 2)
I32Set(TypedSsaVar(161, I32), 4)
ShrU(TypedSsaVar(162, I32), TypedSsaVar(160, I32), TypedSsaVar(161, I32))
I32Set(TypedSsaVar(163, I32), 15)
And(TypedSsaVar(164, I32), TypedSsaVar(162, I32), Var(TypedSsaVar(163, I32)))
Add(TypedSsaVar(165, I32), TypedSsaVar(159, I32), TypedSsaVar(164, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(166, I32), TypedSsaVar(165, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(166, I32), TypedSsaVar(158, I32))
LocalGet(TypedSsaVar(167, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(168, I32), TypedSsaVar(167, I32))
I32Set(TypedSsaVar(169, I32), 2)
Add(TypedSsaVar(170, I32), TypedSsaVar(168, I32), TypedSsaVar(169, I32))
LocalSet(2, TypedSsaVar(170, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 53 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 50 }, params: [] })

==== block BlockId { func: 9, block: 50 } ==== 
parameters: []
LocalGet(TypedSsaVar(171, I32), 0)
I32Set(TypedSsaVar(172, I32), 4136)
Add(TypedSsaVar(173, I32), TypedSsaVar(171, I32), TypedSsaVar(172, I32))
LocalSet(4, TypedSsaVar(173, I32))
LocalGet(TypedSsaVar(174, I32), 2)
I32Set(TypedSsaVar(175, I32), 8)
ShrU(TypedSsaVar(176, I32), TypedSsaVar(174, I32), TypedSsaVar(175, I32))
I32Set(TypedSsaVar(177, I32), 15)
And(TypedSsaVar(178, I32), TypedSsaVar(176, I32), Var(TypedSsaVar(177, I32)))
Add(TypedSsaVar(179, I32), TypedSsaVar(173, I32), TypedSsaVar(178, I32))
LocalSet(3, TypedSsaVar(179, I32))
LocalGet(TypedSsaVar(180, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(181, I32), TypedSsaVar(180, I32))
LocalGet(TypedSsaVar(182, I32), 4)
LocalGet(TypedSsaVar(183, I32), 2)
I32Set(TypedSsaVar(184, I32), 4)
ShrU(TypedSsaVar(185, I32), TypedSsaVar(183, I32), TypedSsaVar(184, I32))
I32Set(TypedSsaVar(186, I32), 15)
And(TypedSsaVar(187, I32), TypedSsaVar(185, I32), Var(TypedSsaVar(186, I32)))
Add(TypedSsaVar(188, I32), TypedSsaVar(182, I32), TypedSsaVar(187, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(189, I32), TypedSsaVar(188, I32))
Or(TypedSsaVar(190, I32), TypedSsaVar(181, I32), TypedSsaVar(189, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(190, I32), TypedSsaVar(179, I32))
LocalGet(TypedSsaVar(191, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(192, I32), TypedSsaVar(191, I32))
I32Set(TypedSsaVar(193, I32), 2)
Add(TypedSsaVar(194, I32), TypedSsaVar(192, I32), TypedSsaVar(193, I32))
LocalSet(2, TypedSsaVar(194, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 54 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 49 }, params: [] })

==== block BlockId { func: 9, block: 49 } ==== 
parameters: []
LocalGet(TypedSsaVar(195, I32), 0)
I32Set(TypedSsaVar(196, I32), 4136)
Add(TypedSsaVar(197, I32), TypedSsaVar(195, I32), TypedSsaVar(196, I32))
LocalSet(4, TypedSsaVar(197, I32))
LocalGet(TypedSsaVar(198, I32), 2)
I32Set(TypedSsaVar(199, I32), 8)
ShrU(TypedSsaVar(200, I32), TypedSsaVar(198, I32), TypedSsaVar(199, I32))
I32Set(TypedSsaVar(201, I32), 15)
And(TypedSsaVar(202, I32), TypedSsaVar(200, I32), Var(TypedSsaVar(201, I32)))
Add(TypedSsaVar(203, I32), TypedSsaVar(197, I32), TypedSsaVar(202, I32))
LocalSet(3, TypedSsaVar(203, I32))
LocalGet(TypedSsaVar(204, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(205, I32), TypedSsaVar(204, I32))
LocalGet(TypedSsaVar(206, I32), 4)
LocalGet(TypedSsaVar(207, I32), 2)
I32Set(TypedSsaVar(208, I32), 4)
ShrU(TypedSsaVar(209, I32), TypedSsaVar(207, I32), TypedSsaVar(208, I32))
I32Set(TypedSsaVar(210, I32), 15)
And(TypedSsaVar(211, I32), TypedSsaVar(209, I32), Var(TypedSsaVar(210, I32)))
Add(TypedSsaVar(212, I32), TypedSsaVar(206, I32), TypedSsaVar(211, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(213, I32), TypedSsaVar(212, I32))
And(TypedSsaVar(214, I32), TypedSsaVar(205, I32), Var(TypedSsaVar(213, I32)))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(214, I32), TypedSsaVar(203, I32))
LocalGet(TypedSsaVar(215, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(216, I32), TypedSsaVar(215, I32))
I32Set(TypedSsaVar(217, I32), 2)
Add(TypedSsaVar(218, I32), TypedSsaVar(216, I32), TypedSsaVar(217, I32))
LocalSet(2, TypedSsaVar(218, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 55 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 48 }, params: [] })

==== block BlockId { func: 9, block: 48 } ==== 
parameters: []
LocalGet(TypedSsaVar(219, I32), 0)
I32Set(TypedSsaVar(220, I32), 4136)
Add(TypedSsaVar(221, I32), TypedSsaVar(219, I32), TypedSsaVar(220, I32))
LocalSet(4, TypedSsaVar(221, I32))
LocalGet(TypedSsaVar(222, I32), 2)
I32Set(TypedSsaVar(223, I32), 8)
ShrU(TypedSsaVar(224, I32), TypedSsaVar(222, I32), TypedSsaVar(223, I32))
I32Set(TypedSsaVar(225, I32), 15)
And(TypedSsaVar(226, I32), TypedSsaVar(224, I32), Var(TypedSsaVar(225, I32)))
Add(TypedSsaVar(227, I32), TypedSsaVar(221, I32), TypedSsaVar(226, I32))
LocalSet(3, TypedSsaVar(227, I32))
LocalGet(TypedSsaVar(228, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(229, I32), TypedSsaVar(228, I32))
LocalGet(TypedSsaVar(230, I32), 4)
LocalGet(TypedSsaVar(231, I32), 2)
I32Set(TypedSsaVar(232, I32), 4)
ShrU(TypedSsaVar(233, I32), TypedSsaVar(231, I32), TypedSsaVar(232, I32))
I32Set(TypedSsaVar(234, I32), 15)
And(TypedSsaVar(235, I32), TypedSsaVar(233, I32), Var(TypedSsaVar(234, I32)))
Add(TypedSsaVar(236, I32), TypedSsaVar(230, I32), TypedSsaVar(235, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(237, I32), TypedSsaVar(236, I32))
Xor(TypedSsaVar(238, I32), TypedSsaVar(229, I32), TypedSsaVar(237, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(238, I32), TypedSsaVar(227, I32))
LocalGet(TypedSsaVar(239, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(240, I32), TypedSsaVar(239, I32))
I32Set(TypedSsaVar(241, I32), 2)
Add(TypedSsaVar(242, I32), TypedSsaVar(240, I32), TypedSsaVar(241, I32))
LocalSet(2, TypedSsaVar(242, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 56 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 47 }, params: [] })

==== block BlockId { func: 9, block: 47 } ==== 
parameters: []
LocalGet(TypedSsaVar(243, I32), 0)
I32Set(TypedSsaVar(244, I32), 4136)
Add(TypedSsaVar(245, I32), TypedSsaVar(243, I32), TypedSsaVar(244, I32))
LocalSet(4, TypedSsaVar(245, I32))
LocalGet(TypedSsaVar(246, I32), 2)
I32Set(TypedSsaVar(247, I32), 8)
ShrU(TypedSsaVar(248, I32), TypedSsaVar(246, I32), TypedSsaVar(247, I32))
I32Set(TypedSsaVar(249, I32), 15)
And(TypedSsaVar(250, I32), TypedSsaVar(248, I32), Var(TypedSsaVar(249, I32)))
Add(TypedSsaVar(251, I32), TypedSsaVar(245, I32), TypedSsaVar(250, I32))
LocalSet(3, TypedSsaVar(251, I32))
LocalGet(TypedSsaVar(252, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(253, I32), TypedSsaVar(252, I32))
LocalGet(TypedSsaVar(254, I32), 4)
LocalGet(TypedSsaVar(255, I32), 2)
I32Set(TypedSsaVar(256, I32), 4)
ShrU(TypedSsaVar(257, I32), TypedSsaVar(255, I32), TypedSsaVar(256, I32))
I32Set(TypedSsaVar(258, I32), 15)
And(TypedSsaVar(259, I32), TypedSsaVar(257, I32), Var(TypedSsaVar(258, I32)))
Add(TypedSsaVar(260, I32), TypedSsaVar(254, I32), TypedSsaVar(259, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(261, I32), TypedSsaVar(260, I32))
Add(TypedSsaVar(262, I32), TypedSsaVar(253, I32), TypedSsaVar(261, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(262, I32), TypedSsaVar(251, I32))
LocalGet(TypedSsaVar(263, I32), 0)
I32Set(TypedSsaVar(264, I32), 4151)
Add(TypedSsaVar(265, I32), TypedSsaVar(263, I32), TypedSsaVar(264, I32))
LocalGet(TypedSsaVar(266, I32), 4)
LocalGet(TypedSsaVar(267, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4154, memory: 0 }, TypedSsaVar(268, I32), TypedSsaVar(267, I32))
LocalSet(2, TypedSsaVar(268, I32))
I32Set(TypedSsaVar(269, I32), 4)
ShrU(TypedSsaVar(270, I32), TypedSsaVar(268, I32), TypedSsaVar(269, I32))
I32Set(TypedSsaVar(271, I32), 15)
And(TypedSsaVar(272, I32), TypedSsaVar(270, I32), Var(TypedSsaVar(271, I32)))
Add(TypedSsaVar(273, I32), TypedSsaVar(266, I32), TypedSsaVar(272, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(274, I32), TypedSsaVar(273, I32))
LocalGet(TypedSsaVar(275, I32), 4)
LocalGet(TypedSsaVar(276, I32), 2)
I32Set(TypedSsaVar(277, I32), 8)
ShrU(TypedSsaVar(278, I32), TypedSsaVar(276, I32), TypedSsaVar(277, I32))
I32Set(TypedSsaVar(279, I32), 15)
And(TypedSsaVar(280, I32), TypedSsaVar(278, I32), Var(TypedSsaVar(279, I32)))
Add(TypedSsaVar(281, I32), TypedSsaVar(275, I32), TypedSsaVar(280, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(282, I32), TypedSsaVar(281, I32))
I32Set(TypedSsaVar(283, I32), 255)
Xor(TypedSsaVar(284, I32), TypedSsaVar(282, I32), TypedSsaVar(283, I32))
GtU(TypedSsaVar(285, I32), TypedSsaVar(274, I32), TypedSsaVar(284, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(285, I32), TypedSsaVar(265, I32))
LocalGet(TypedSsaVar(286, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(287, I32), TypedSsaVar(286, I32))
I32Set(TypedSsaVar(288, I32), 2)
Add(TypedSsaVar(289, I32), TypedSsaVar(287, I32), TypedSsaVar(288, I32))
LocalSet(2, TypedSsaVar(289, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 57 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 46 }, params: [] })

==== block BlockId { func: 9, block: 46 } ==== 
parameters: []
LocalGet(TypedSsaVar(290, I32), 0)
I32Set(TypedSsaVar(291, I32), 4151)
Add(TypedSsaVar(292, I32), TypedSsaVar(290, I32), TypedSsaVar(291, I32))
LocalGet(TypedSsaVar(293, I32), 0)
I32Set(TypedSsaVar(294, I32), 4136)
Add(TypedSsaVar(295, I32), TypedSsaVar(293, I32), TypedSsaVar(294, I32))
LocalSet(4, TypedSsaVar(295, I32))
LocalGet(TypedSsaVar(296, I32), 2)
I32Set(TypedSsaVar(297, I32), 4)
ShrU(TypedSsaVar(298, I32), TypedSsaVar(296, I32), TypedSsaVar(297, I32))
I32Set(TypedSsaVar(299, I32), 15)
And(TypedSsaVar(300, I32), TypedSsaVar(298, I32), Var(TypedSsaVar(299, I32)))
Add(TypedSsaVar(301, I32), TypedSsaVar(295, I32), TypedSsaVar(300, I32))
LocalSet(3, TypedSsaVar(301, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(302, I32), TypedSsaVar(301, I32))
LocalGet(TypedSsaVar(303, I32), 4)
LocalGet(TypedSsaVar(304, I32), 2)
I32Set(TypedSsaVar(305, I32), 8)
ShrU(TypedSsaVar(306, I32), TypedSsaVar(304, I32), TypedSsaVar(305, I32))
I32Set(TypedSsaVar(307, I32), 15)
And(TypedSsaVar(308, I32), TypedSsaVar(306, I32), Var(TypedSsaVar(307, I32)))
Add(TypedSsaVar(309, I32), TypedSsaVar(303, I32), TypedSsaVar(308, I32))
LocalSet(2, TypedSsaVar(309, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(310, I32), TypedSsaVar(309, I32))
LeU(TypedSsaVar(311, I32), TypedSsaVar(302, I32), TypedSsaVar(310, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(311, I32), TypedSsaVar(292, I32))
LocalGet(TypedSsaVar(312, I32), 2)
LocalGet(TypedSsaVar(313, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(314, I32), TypedSsaVar(313, I32))
LocalGet(TypedSsaVar(315, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(316, I32), TypedSsaVar(315, I32))
Sub(TypedSsaVar(317, I32), TypedSsaVar(314, I32), TypedSsaVar(316, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(317, I32), TypedSsaVar(312, I32))
LocalGet(TypedSsaVar(318, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(319, I32), TypedSsaVar(318, I32))
I32Set(TypedSsaVar(320, I32), 2)
Add(TypedSsaVar(321, I32), TypedSsaVar(319, I32), TypedSsaVar(320, I32))
LocalSet(2, TypedSsaVar(321, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 58 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 45 }, params: [] })

==== block BlockId { func: 9, block: 45 } ==== 
parameters: []
LocalGet(TypedSsaVar(322, I32), 0)
I32Set(TypedSsaVar(323, I32), 4151)
Add(TypedSsaVar(324, I32), TypedSsaVar(322, I32), TypedSsaVar(323, I32))
LocalGet(TypedSsaVar(325, I32), 0)
I32Set(TypedSsaVar(326, I32), 4136)
Add(TypedSsaVar(327, I32), TypedSsaVar(325, I32), TypedSsaVar(326, I32))
LocalSet(4, TypedSsaVar(327, I32))
LocalGet(TypedSsaVar(328, I32), 2)
I32Set(TypedSsaVar(329, I32), 8)
ShrU(TypedSsaVar(330, I32), TypedSsaVar(328, I32), TypedSsaVar(329, I32))
I32Set(TypedSsaVar(331, I32), 15)
And(TypedSsaVar(332, I32), TypedSsaVar(330, I32), Var(TypedSsaVar(331, I32)))
Add(TypedSsaVar(333, I32), TypedSsaVar(327, I32), TypedSsaVar(332, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(334, I32), TypedSsaVar(333, I32))
I32Set(TypedSsaVar(335, I32), 1)
And(TypedSsaVar(336, I32), TypedSsaVar(334, I32), Var(TypedSsaVar(335, I32)))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(336, I32), TypedSsaVar(324, I32))
LocalGet(TypedSsaVar(337, I32), 4)
LocalGet(TypedSsaVar(338, I32), 3)
I32Set(TypedSsaVar(339, I32), 15)
And(TypedSsaVar(340, I32), TypedSsaVar(338, I32), Var(TypedSsaVar(339, I32)))
Add(TypedSsaVar(341, I32), TypedSsaVar(337, I32), TypedSsaVar(340, I32))
LocalSet(2, TypedSsaVar(341, I32))
LocalGet(TypedSsaVar(342, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(343, I32), TypedSsaVar(342, I32))
I32Set(TypedSsaVar(344, I32), 1)
ShrU(TypedSsaVar(345, I32), TypedSsaVar(343, I32), TypedSsaVar(344, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(345, I32), TypedSsaVar(341, I32))
LocalGet(TypedSsaVar(346, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(347, I32), TypedSsaVar(346, I32))
I32Set(TypedSsaVar(348, I32), 2)
Add(TypedSsaVar(349, I32), TypedSsaVar(347, I32), TypedSsaVar(348, I32))
LocalSet(2, TypedSsaVar(349, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 59 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 44 }, params: [] })

==== block BlockId { func: 9, block: 44 } ==== 
parameters: []
LocalGet(TypedSsaVar(350, I32), 0)
I32Set(TypedSsaVar(351, I32), 4151)
Add(TypedSsaVar(352, I32), TypedSsaVar(350, I32), TypedSsaVar(351, I32))
LocalGet(TypedSsaVar(353, I32), 0)
I32Set(TypedSsaVar(354, I32), 4136)
Add(TypedSsaVar(355, I32), TypedSsaVar(353, I32), TypedSsaVar(354, I32))
LocalSet(3, TypedSsaVar(355, I32))
LocalGet(TypedSsaVar(356, I32), 2)
I32Set(TypedSsaVar(357, I32), 8)
ShrU(TypedSsaVar(358, I32), TypedSsaVar(356, I32), TypedSsaVar(357, I32))
I32Set(TypedSsaVar(359, I32), 15)
And(TypedSsaVar(360, I32), TypedSsaVar(358, I32), Var(TypedSsaVar(359, I32)))
Add(TypedSsaVar(361, I32), TypedSsaVar(355, I32), TypedSsaVar(360, I32))
LocalSet(4, TypedSsaVar(361, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(362, I32), TypedSsaVar(361, I32))
LocalGet(TypedSsaVar(363, I32), 3)
LocalGet(TypedSsaVar(364, I32), 2)
I32Set(TypedSsaVar(365, I32), 4)
ShrU(TypedSsaVar(366, I32), TypedSsaVar(364, I32), TypedSsaVar(365, I32))
I32Set(TypedSsaVar(367, I32), 15)
And(TypedSsaVar(368, I32), TypedSsaVar(366, I32), Var(TypedSsaVar(367, I32)))
Add(TypedSsaVar(369, I32), TypedSsaVar(363, I32), TypedSsaVar(368, I32))
LocalSet(2, TypedSsaVar(369, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(370, I32), TypedSsaVar(369, I32))
LeU(TypedSsaVar(371, I32), TypedSsaVar(362, I32), TypedSsaVar(370, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(371, I32), TypedSsaVar(352, I32))
LocalGet(TypedSsaVar(372, I32), 4)
LocalGet(TypedSsaVar(373, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(374, I32), TypedSsaVar(373, I32))
LocalGet(TypedSsaVar(375, I32), 4)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(376, I32), TypedSsaVar(375, I32))
Sub(TypedSsaVar(377, I32), TypedSsaVar(374, I32), TypedSsaVar(376, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(377, I32), TypedSsaVar(372, I32))
LocalGet(TypedSsaVar(378, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(379, I32), TypedSsaVar(378, I32))
I32Set(TypedSsaVar(380, I32), 2)
Add(TypedSsaVar(381, I32), TypedSsaVar(379, I32), TypedSsaVar(380, I32))
LocalSet(2, TypedSsaVar(381, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 60 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 43 }, params: [] })

==== block BlockId { func: 9, block: 43 } ==== 
parameters: []
LocalGet(TypedSsaVar(382, I32), 0)
I32Set(TypedSsaVar(383, I32), 4151)
Add(TypedSsaVar(384, I32), TypedSsaVar(382, I32), TypedSsaVar(383, I32))
LocalGet(TypedSsaVar(385, I32), 0)
I32Set(TypedSsaVar(386, I32), 4136)
Add(TypedSsaVar(387, I32), TypedSsaVar(385, I32), TypedSsaVar(386, I32))
LocalSet(4, TypedSsaVar(387, I32))
LocalGet(TypedSsaVar(388, I32), 2)
I32Set(TypedSsaVar(389, I32), 8)
ShrU(TypedSsaVar(390, I32), TypedSsaVar(388, I32), TypedSsaVar(389, I32))
I32Set(TypedSsaVar(391, I32), 15)
And(TypedSsaVar(392, I32), TypedSsaVar(390, I32), Var(TypedSsaVar(391, I32)))
Add(TypedSsaVar(393, I32), TypedSsaVar(387, I32), TypedSsaVar(392, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(394, I32), TypedSsaVar(393, I32))
I32Set(TypedSsaVar(395, I32), 7)
ShrU(TypedSsaVar(396, I32), TypedSsaVar(394, I32), TypedSsaVar(395, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(396, I32), TypedSsaVar(384, I32))
LocalGet(TypedSsaVar(397, I32), 4)
LocalGet(TypedSsaVar(398, I32), 3)
I32Set(TypedSsaVar(399, I32), 15)
And(TypedSsaVar(400, I32), TypedSsaVar(398, I32), Var(TypedSsaVar(399, I32)))
Add(TypedSsaVar(401, I32), TypedSsaVar(397, I32), TypedSsaVar(400, I32))
LocalSet(2, TypedSsaVar(401, I32))
LocalGet(TypedSsaVar(402, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(403, I32), TypedSsaVar(402, I32))
I32Set(TypedSsaVar(404, I32), 1)
Shl(TypedSsaVar(405, I32), TypedSsaVar(403, I32), TypedSsaVar(404, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(405, I32), TypedSsaVar(401, I32))
LocalGet(TypedSsaVar(406, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(407, I32), TypedSsaVar(406, I32))
I32Set(TypedSsaVar(408, I32), 2)
Add(TypedSsaVar(409, I32), TypedSsaVar(407, I32), TypedSsaVar(408, I32))
LocalSet(2, TypedSsaVar(409, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 61 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 13 }, params: [] })

==== block BlockId { func: 9, block: 13 } ==== 
parameters: []
LocalGet(TypedSsaVar(410, I32), 0)
I32Set(TypedSsaVar(411, I32), 4136)
Add(TypedSsaVar(412, I32), TypedSsaVar(410, I32), TypedSsaVar(411, I32))
LocalSet(4, TypedSsaVar(412, I32))
LocalGet(TypedSsaVar(413, I32), 2)
I32Set(TypedSsaVar(414, I32), 8)
ShrU(TypedSsaVar(415, I32), TypedSsaVar(413, I32), TypedSsaVar(414, I32))
I32Set(TypedSsaVar(416, I32), 15)
And(TypedSsaVar(417, I32), TypedSsaVar(415, I32), Var(TypedSsaVar(416, I32)))
Add(TypedSsaVar(418, I32), TypedSsaVar(412, I32), TypedSsaVar(417, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(419, I32), TypedSsaVar(418, I32))
LocalGet(TypedSsaVar(420, I32), 4)
LocalGet(TypedSsaVar(421, I32), 2)
I32Set(TypedSsaVar(422, I32), 4)
ShrU(TypedSsaVar(423, I32), TypedSsaVar(421, I32), TypedSsaVar(422, I32))
I32Set(TypedSsaVar(424, I32), 15)
And(TypedSsaVar(425, I32), TypedSsaVar(423, I32), Var(TypedSsaVar(424, I32)))
Add(TypedSsaVar(426, I32), TypedSsaVar(420, I32), TypedSsaVar(425, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(427, I32), TypedSsaVar(426, I32))
Eq(TypedSsaVar(428, I32), TypedSsaVar(419, I32), TypedSsaVar(427, I32))
BranchIf { cond: TypedSsaVar(428, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 62 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 63 }, params: [] } }

==== block BlockId { func: 9, block: 63 } ==== 
parameters: []
LocalGet(TypedSsaVar(429, I32), 1)
I32Set(TypedSsaVar(430, I32), 4)
Add(TypedSsaVar(431, I32), TypedSsaVar(429, I32), TypedSsaVar(430, I32))
LocalSet(2, TypedSsaVar(431, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 64 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 62 }, params: [] })

==== block BlockId { func: 9, block: 62 } ==== 
parameters: []
LocalGet(TypedSsaVar(432, I32), 1)
I32Set(TypedSsaVar(433, I32), 2)
Add(TypedSsaVar(434, I32), TypedSsaVar(432, I32), TypedSsaVar(433, I32))
LocalSet(2, TypedSsaVar(434, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 65 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 12 }, params: [] })

==== block BlockId { func: 9, block: 12 } ==== 
parameters: []
LocalGet(TypedSsaVar(435, I32), 0)
LocalGet(TypedSsaVar(436, I32), 2)
I32Set(TypedSsaVar(437, I32), 4095)
And(TypedSsaVar(438, I32), TypedSsaVar(436, I32), Var(TypedSsaVar(437, I32)))
Store16(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(438, I32), TypedSsaVar(435, I32))
LocalGet(TypedSsaVar(439, I32), 1)
I32Set(TypedSsaVar(440, I32), 2)
Add(TypedSsaVar(441, I32), TypedSsaVar(439, I32), TypedSsaVar(440, I32))
LocalSet(2, TypedSsaVar(441, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 66 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 11 }, params: [] })

==== block BlockId { func: 9, block: 11 } ==== 
parameters: []
LocalGet(TypedSsaVar(442, I32), 2)
I32Set(TypedSsaVar(443, I32), 4095)
And(TypedSsaVar(444, I32), TypedSsaVar(442, I32), Var(TypedSsaVar(443, I32)))
LocalGet(TypedSsaVar(445, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 4136, memory: 0 }, TypedSsaVar(446, I32), TypedSsaVar(445, I32))
Add(TypedSsaVar(447, I32), TypedSsaVar(444, I32), TypedSsaVar(446, I32))
LocalSet(2, TypedSsaVar(447, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 67 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 10 }, params: [] })

==== block BlockId { func: 9, block: 10 } ==== 
parameters: []
LocalGet(TypedSsaVar(448, I32), 0)
LocalGet(TypedSsaVar(449, I32), 3)
I32Set(TypedSsaVar(450, I32), 15)
And(TypedSsaVar(451, I32), TypedSsaVar(449, I32), Var(TypedSsaVar(450, I32)))
Add(TypedSsaVar(452, I32), TypedSsaVar(448, I32), TypedSsaVar(451, I32))
I32Set(TypedSsaVar(453, I32), 4136)
Add(TypedSsaVar(454, I32), TypedSsaVar(452, I32), TypedSsaVar(453, I32))
LocalGet(TypedSsaVar(455, I32), 4)
I32Set(TypedSsaVar(456, I32), 112)
And(TypedSsaVar(457, I32), TypedSsaVar(455, I32), Var(TypedSsaVar(456, I32)))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(457, I32), TypedSsaVar(454, I32))
LocalGet(TypedSsaVar(458, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(459, I32), TypedSsaVar(458, I32))
I32Set(TypedSsaVar(460, I32), 2)
Add(TypedSsaVar(461, I32), TypedSsaVar(459, I32), TypedSsaVar(460, I32))
LocalSet(2, TypedSsaVar(461, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 68 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 9 }, params: [] })

==== block BlockId { func: 9, block: 9 } ==== 
parameters: []
LocalGet(TypedSsaVar(462, I32), 0)
I32Set(TypedSsaVar(463, I32), 4136)
Add(TypedSsaVar(464, I32), TypedSsaVar(462, I32), TypedSsaVar(463, I32))
LocalSet(3, TypedSsaVar(464, I32))
LocalGet(TypedSsaVar(465, I32), 2)
I32Set(TypedSsaVar(466, I32), 4)
ShrU(TypedSsaVar(467, I32), TypedSsaVar(465, I32), TypedSsaVar(466, I32))
I32Set(TypedSsaVar(468, I32), 15)
And(TypedSsaVar(469, I32), TypedSsaVar(467, I32), Var(TypedSsaVar(468, I32)))
Add(TypedSsaVar(470, I32), TypedSsaVar(464, I32), TypedSsaVar(469, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(471, I32), TypedSsaVar(470, I32))
LocalSet(5, TypedSsaVar(471, I32))
LocalGet(TypedSsaVar(472, I32), 3)
LocalGet(TypedSsaVar(473, I32), 2)
I32Set(TypedSsaVar(474, I32), 8)
ShrU(TypedSsaVar(475, I32), TypedSsaVar(473, I32), TypedSsaVar(474, I32))
I32Set(TypedSsaVar(476, I32), 15)
And(TypedSsaVar(477, I32), TypedSsaVar(475, I32), Var(TypedSsaVar(476, I32)))
Add(TypedSsaVar(478, I32), TypedSsaVar(472, I32), TypedSsaVar(477, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(479, I32), TypedSsaVar(478, I32))
LocalSet(2, TypedSsaVar(479, I32))
I32Set(TypedSsaVar(480, I32), 0)
LocalSet(3, TypedSsaVar(480, I32))
LocalGet(TypedSsaVar(481, I32), 0)
I32Set(TypedSsaVar(482, I32), 4151)
Add(TypedSsaVar(483, I32), TypedSsaVar(481, I32), TypedSsaVar(482, I32))
I32Set(TypedSsaVar(484, I32), 0)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(484, I32), TypedSsaVar(483, I32))
LocalGet(TypedSsaVar(485, I32), 4)
I32Set(TypedSsaVar(486, I32), 15)
And(TypedSsaVar(487, I32), TypedSsaVar(485, I32), Var(TypedSsaVar(486, I32)))
LocalSet(6, TypedSsaVar(487, I32))
Eqz(TypedSsaVar(488, I32), TypedSsaVar(487, I32))
BranchIf { cond: TypedSsaVar(488, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 69 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 70 }, params: [] } }

==== block BlockId { func: 9, block: 70 } ==== 
parameters: []
LocalGet(TypedSsaVar(489, I32), 5)
I32Set(TypedSsaVar(490, I32), 6)
Shl(TypedSsaVar(491, I32), TypedSsaVar(489, I32), TypedSsaVar(490, I32))
LocalGet(TypedSsaVar(492, I32), 2)
Add(TypedSsaVar(493, I32), TypedSsaVar(491, I32), TypedSsaVar(492, I32))
LocalSet(4, TypedSsaVar(493, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 71 }, params: [] })

==== block BlockId { func: 9, block: 71 } ==== 
parameters: []
LocalGet(TypedSsaVar(494, I32), 0)
LocalGet(TypedSsaVar(495, I32), 3)
LocalGet(TypedSsaVar(496, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(497, I32), TypedSsaVar(496, I32))
Add(TypedSsaVar(498, I32), TypedSsaVar(495, I32), TypedSsaVar(497, I32))
Add(TypedSsaVar(499, I32), TypedSsaVar(494, I32), TypedSsaVar(498, I32))
I32Set(TypedSsaVar(500, I32), 40)
Add(TypedSsaVar(501, I32), TypedSsaVar(499, I32), TypedSsaVar(500, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(502, I32), TypedSsaVar(501, I32))
LocalSet(2, TypedSsaVar(502, I32))
I32Set(TypedSsaVar(503, I32), 128)
And(TypedSsaVar(504, I32), TypedSsaVar(502, I32), Var(TypedSsaVar(503, I32)))
Eqz(TypedSsaVar(505, I32), TypedSsaVar(504, I32))
BranchIf { cond: TypedSsaVar(505, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 72 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 73 }, params: [] } }

==== block BlockId { func: 9, block: 73 } ==== 
parameters: []
LocalGet(TypedSsaVar(506, I32), 0)
LocalGet(TypedSsaVar(507, I32), 4)
Add(TypedSsaVar(508, I32), TypedSsaVar(506, I32), TypedSsaVar(507, I32))
I32Set(TypedSsaVar(509, I32), 4160)
Add(TypedSsaVar(510, I32), TypedSsaVar(508, I32), TypedSsaVar(509, I32))
LocalSet(5, TypedSsaVar(510, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(511, I32), TypedSsaVar(510, I32))
LocalSet(7, TypedSsaVar(511, I32))
I32Set(TypedSsaVar(512, I32), 1)
Ne(TypedSsaVar(513, I32), TypedSsaVar(511, I32), TypedSsaVar(512, I32))
BranchIf { cond: TypedSsaVar(513, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 74 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 75 }, params: [] } }

==== block BlockId { func: 9, block: 75 } ==== 
parameters: []
LocalGet(TypedSsaVar(514, I32), 0)
I32Set(TypedSsaVar(515, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(515, I32), TypedSsaVar(514, I32))
LocalGet(TypedSsaVar(516, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(517, I32), TypedSsaVar(516, I32))
LocalSet(7, TypedSsaVar(517, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 74 }, params: [] })

==== block BlockId { func: 9, block: 74 } ==== 
parameters: []
LocalGet(TypedSsaVar(518, I32), 5)
LocalGet(TypedSsaVar(519, I32), 7)
I32Set(TypedSsaVar(520, I32), 1)
Xor(TypedSsaVar(521, I32), TypedSsaVar(519, I32), TypedSsaVar(520, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(521, I32), TypedSsaVar(518, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 72 }, params: [] })

==== block BlockId { func: 9, block: 72 } ==== 
parameters: []
LocalGet(TypedSsaVar(522, I32), 2)
I32Set(TypedSsaVar(523, I32), 64)
And(TypedSsaVar(524, I32), TypedSsaVar(522, I32), Var(TypedSsaVar(523, I32)))
Eqz(TypedSsaVar(525, I32), TypedSsaVar(524, I32))
BranchIf { cond: TypedSsaVar(525, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 76 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 77 }, params: [] } }

==== block BlockId { func: 9, block: 77 } ==== 
parameters: []
LocalGet(TypedSsaVar(526, I32), 0)
LocalGet(TypedSsaVar(527, I32), 4)
Add(TypedSsaVar(528, I32), TypedSsaVar(526, I32), TypedSsaVar(527, I32))
I32Set(TypedSsaVar(529, I32), 4161)
Add(TypedSsaVar(530, I32), TypedSsaVar(528, I32), TypedSsaVar(529, I32))
LocalSet(5, TypedSsaVar(530, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(531, I32), TypedSsaVar(530, I32))
LocalSet(7, TypedSsaVar(531, I32))
I32Set(TypedSsaVar(532, I32), 1)
Ne(TypedSsaVar(533, I32), TypedSsaVar(531, I32), TypedSsaVar(532, I32))
BranchIf { cond: TypedSsaVar(533, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 78 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 79 }, params: [] } }

==== block BlockId { func: 9, block: 79 } ==== 
parameters: []
LocalGet(TypedSsaVar(534, I32), 0)
I32Set(TypedSsaVar(535, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(535, I32), TypedSsaVar(534, I32))
LocalGet(TypedSsaVar(536, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(537, I32), TypedSsaVar(536, I32))
LocalSet(7, TypedSsaVar(537, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 78 }, params: [] })

==== block BlockId { func: 9, block: 78 } ==== 
parameters: []
LocalGet(TypedSsaVar(538, I32), 5)
LocalGet(TypedSsaVar(539, I32), 7)
I32Set(TypedSsaVar(540, I32), 1)
Xor(TypedSsaVar(541, I32), TypedSsaVar(539, I32), TypedSsaVar(540, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(541, I32), TypedSsaVar(538, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 76 }, params: [] })

==== block BlockId { func: 9, block: 76 } ==== 
parameters: []
LocalGet(TypedSsaVar(542, I32), 2)
I32Set(TypedSsaVar(543, I32), 32)
And(TypedSsaVar(544, I32), TypedSsaVar(542, I32), Var(TypedSsaVar(543, I32)))
Eqz(TypedSsaVar(545, I32), TypedSsaVar(544, I32))
BranchIf { cond: TypedSsaVar(545, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 80 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 81 }, params: [] } }

==== block BlockId { func: 9, block: 81 } ==== 
parameters: []
LocalGet(TypedSsaVar(546, I32), 0)
LocalGet(TypedSsaVar(547, I32), 4)
Add(TypedSsaVar(548, I32), TypedSsaVar(546, I32), TypedSsaVar(547, I32))
I32Set(TypedSsaVar(549, I32), 4162)
Add(TypedSsaVar(550, I32), TypedSsaVar(548, I32), TypedSsaVar(549, I32))
LocalSet(5, TypedSsaVar(550, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(551, I32), TypedSsaVar(550, I32))
LocalSet(7, TypedSsaVar(551, I32))
I32Set(TypedSsaVar(552, I32), 1)
Ne(TypedSsaVar(553, I32), TypedSsaVar(551, I32), TypedSsaVar(552, I32))
BranchIf { cond: TypedSsaVar(553, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 82 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 83 }, params: [] } }

==== block BlockId { func: 9, block: 83 } ==== 
parameters: []
LocalGet(TypedSsaVar(554, I32), 0)
I32Set(TypedSsaVar(555, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(555, I32), TypedSsaVar(554, I32))
LocalGet(TypedSsaVar(556, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(557, I32), TypedSsaVar(556, I32))
LocalSet(7, TypedSsaVar(557, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 82 }, params: [] })

==== block BlockId { func: 9, block: 82 } ==== 
parameters: []
LocalGet(TypedSsaVar(558, I32), 5)
LocalGet(TypedSsaVar(559, I32), 7)
I32Set(TypedSsaVar(560, I32), 1)
Xor(TypedSsaVar(561, I32), TypedSsaVar(559, I32), TypedSsaVar(560, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(561, I32), TypedSsaVar(558, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 80 }, params: [] })

==== block BlockId { func: 9, block: 80 } ==== 
parameters: []
LocalGet(TypedSsaVar(562, I32), 2)
I32Set(TypedSsaVar(563, I32), 16)
And(TypedSsaVar(564, I32), TypedSsaVar(562, I32), Var(TypedSsaVar(563, I32)))
Eqz(TypedSsaVar(565, I32), TypedSsaVar(564, I32))
BranchIf { cond: TypedSsaVar(565, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 84 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 85 }, params: [] } }

==== block BlockId { func: 9, block: 85 } ==== 
parameters: []
LocalGet(TypedSsaVar(566, I32), 0)
LocalGet(TypedSsaVar(567, I32), 4)
Add(TypedSsaVar(568, I32), TypedSsaVar(566, I32), TypedSsaVar(567, I32))
I32Set(TypedSsaVar(569, I32), 4163)
Add(TypedSsaVar(570, I32), TypedSsaVar(568, I32), TypedSsaVar(569, I32))
LocalSet(5, TypedSsaVar(570, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(571, I32), TypedSsaVar(570, I32))
LocalSet(7, TypedSsaVar(571, I32))
I32Set(TypedSsaVar(572, I32), 1)
Ne(TypedSsaVar(573, I32), TypedSsaVar(571, I32), TypedSsaVar(572, I32))
BranchIf { cond: TypedSsaVar(573, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 86 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 87 }, params: [] } }

==== block BlockId { func: 9, block: 87 } ==== 
parameters: []
LocalGet(TypedSsaVar(574, I32), 0)
I32Set(TypedSsaVar(575, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(575, I32), TypedSsaVar(574, I32))
LocalGet(TypedSsaVar(576, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(577, I32), TypedSsaVar(576, I32))
LocalSet(7, TypedSsaVar(577, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 86 }, params: [] })

==== block BlockId { func: 9, block: 86 } ==== 
parameters: []
LocalGet(TypedSsaVar(578, I32), 5)
LocalGet(TypedSsaVar(579, I32), 7)
I32Set(TypedSsaVar(580, I32), 1)
Xor(TypedSsaVar(581, I32), TypedSsaVar(579, I32), TypedSsaVar(580, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(581, I32), TypedSsaVar(578, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 84 }, params: [] })

==== block BlockId { func: 9, block: 84 } ==== 
parameters: []
LocalGet(TypedSsaVar(582, I32), 2)
I32Set(TypedSsaVar(583, I32), 8)
And(TypedSsaVar(584, I32), TypedSsaVar(582, I32), Var(TypedSsaVar(583, I32)))
Eqz(TypedSsaVar(585, I32), TypedSsaVar(584, I32))
BranchIf { cond: TypedSsaVar(585, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 88 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 89 }, params: [] } }

==== block BlockId { func: 9, block: 89 } ==== 
parameters: []
LocalGet(TypedSsaVar(586, I32), 0)
LocalGet(TypedSsaVar(587, I32), 4)
Add(TypedSsaVar(588, I32), TypedSsaVar(586, I32), TypedSsaVar(587, I32))
I32Set(TypedSsaVar(589, I32), 4164)
Add(TypedSsaVar(590, I32), TypedSsaVar(588, I32), TypedSsaVar(589, I32))
LocalSet(5, TypedSsaVar(590, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(591, I32), TypedSsaVar(590, I32))
LocalSet(7, TypedSsaVar(591, I32))
I32Set(TypedSsaVar(592, I32), 1)
Ne(TypedSsaVar(593, I32), TypedSsaVar(591, I32), TypedSsaVar(592, I32))
BranchIf { cond: TypedSsaVar(593, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 90 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 91 }, params: [] } }

==== block BlockId { func: 9, block: 91 } ==== 
parameters: []
LocalGet(TypedSsaVar(594, I32), 0)
I32Set(TypedSsaVar(595, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(595, I32), TypedSsaVar(594, I32))
LocalGet(TypedSsaVar(596, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(597, I32), TypedSsaVar(596, I32))
LocalSet(7, TypedSsaVar(597, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 90 }, params: [] })

==== block BlockId { func: 9, block: 90 } ==== 
parameters: []
LocalGet(TypedSsaVar(598, I32), 5)
LocalGet(TypedSsaVar(599, I32), 7)
I32Set(TypedSsaVar(600, I32), 1)
Xor(TypedSsaVar(601, I32), TypedSsaVar(599, I32), TypedSsaVar(600, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(601, I32), TypedSsaVar(598, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 88 }, params: [] })

==== block BlockId { func: 9, block: 88 } ==== 
parameters: []
LocalGet(TypedSsaVar(602, I32), 2)
I32Set(TypedSsaVar(603, I32), 4)
And(TypedSsaVar(604, I32), TypedSsaVar(602, I32), Var(TypedSsaVar(603, I32)))
Eqz(TypedSsaVar(605, I32), TypedSsaVar(604, I32))
BranchIf { cond: TypedSsaVar(605, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 92 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 93 }, params: [] } }

==== block BlockId { func: 9, block: 93 } ==== 
parameters: []
LocalGet(TypedSsaVar(606, I32), 0)
LocalGet(TypedSsaVar(607, I32), 4)
Add(TypedSsaVar(608, I32), TypedSsaVar(606, I32), TypedSsaVar(607, I32))
I32Set(TypedSsaVar(609, I32), 4165)
Add(TypedSsaVar(610, I32), TypedSsaVar(608, I32), TypedSsaVar(609, I32))
LocalSet(5, TypedSsaVar(610, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(611, I32), TypedSsaVar(610, I32))
LocalSet(7, TypedSsaVar(611, I32))
I32Set(TypedSsaVar(612, I32), 1)
Ne(TypedSsaVar(613, I32), TypedSsaVar(611, I32), TypedSsaVar(612, I32))
BranchIf { cond: TypedSsaVar(613, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 94 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 95 }, params: [] } }

==== block BlockId { func: 9, block: 95 } ==== 
parameters: []
LocalGet(TypedSsaVar(614, I32), 0)
I32Set(TypedSsaVar(615, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(615, I32), TypedSsaVar(614, I32))
LocalGet(TypedSsaVar(616, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(617, I32), TypedSsaVar(616, I32))
LocalSet(7, TypedSsaVar(617, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 94 }, params: [] })

==== block BlockId { func: 9, block: 94 } ==== 
parameters: []
LocalGet(TypedSsaVar(618, I32), 5)
LocalGet(TypedSsaVar(619, I32), 7)
I32Set(TypedSsaVar(620, I32), 1)
Xor(TypedSsaVar(621, I32), TypedSsaVar(619, I32), TypedSsaVar(620, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(621, I32), TypedSsaVar(618, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 92 }, params: [] })

==== block BlockId { func: 9, block: 92 } ==== 
parameters: []
LocalGet(TypedSsaVar(622, I32), 2)
I32Set(TypedSsaVar(623, I32), 2)
And(TypedSsaVar(624, I32), TypedSsaVar(622, I32), Var(TypedSsaVar(623, I32)))
Eqz(TypedSsaVar(625, I32), TypedSsaVar(624, I32))
BranchIf { cond: TypedSsaVar(625, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 96 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 97 }, params: [] } }

==== block BlockId { func: 9, block: 97 } ==== 
parameters: []
LocalGet(TypedSsaVar(626, I32), 0)
LocalGet(TypedSsaVar(627, I32), 4)
Add(TypedSsaVar(628, I32), TypedSsaVar(626, I32), TypedSsaVar(627, I32))
I32Set(TypedSsaVar(629, I32), 4166)
Add(TypedSsaVar(630, I32), TypedSsaVar(628, I32), TypedSsaVar(629, I32))
LocalSet(5, TypedSsaVar(630, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(631, I32), TypedSsaVar(630, I32))
LocalSet(7, TypedSsaVar(631, I32))
I32Set(TypedSsaVar(632, I32), 1)
Ne(TypedSsaVar(633, I32), TypedSsaVar(631, I32), TypedSsaVar(632, I32))
BranchIf { cond: TypedSsaVar(633, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 98 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 99 }, params: [] } }

==== block BlockId { func: 9, block: 99 } ==== 
parameters: []
LocalGet(TypedSsaVar(634, I32), 0)
I32Set(TypedSsaVar(635, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(635, I32), TypedSsaVar(634, I32))
LocalGet(TypedSsaVar(636, I32), 5)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(637, I32), TypedSsaVar(636, I32))
LocalSet(7, TypedSsaVar(637, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 98 }, params: [] })

==== block BlockId { func: 9, block: 98 } ==== 
parameters: []
LocalGet(TypedSsaVar(638, I32), 5)
LocalGet(TypedSsaVar(639, I32), 7)
I32Set(TypedSsaVar(640, I32), 1)
Xor(TypedSsaVar(641, I32), TypedSsaVar(639, I32), TypedSsaVar(640, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(641, I32), TypedSsaVar(638, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 96 }, params: [] })

==== block BlockId { func: 9, block: 96 } ==== 
parameters: []
LocalGet(TypedSsaVar(642, I32), 2)
I32Set(TypedSsaVar(643, I32), 1)
And(TypedSsaVar(644, I32), TypedSsaVar(642, I32), Var(TypedSsaVar(643, I32)))
Eqz(TypedSsaVar(645, I32), TypedSsaVar(644, I32))
BranchIf { cond: TypedSsaVar(645, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 100 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 101 }, params: [] } }

==== block BlockId { func: 9, block: 101 } ==== 
parameters: []
LocalGet(TypedSsaVar(646, I32), 0)
LocalGet(TypedSsaVar(647, I32), 4)
Add(TypedSsaVar(648, I32), TypedSsaVar(646, I32), TypedSsaVar(647, I32))
I32Set(TypedSsaVar(649, I32), 4167)
Add(TypedSsaVar(650, I32), TypedSsaVar(648, I32), TypedSsaVar(649, I32))
LocalSet(2, TypedSsaVar(650, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(651, I32), TypedSsaVar(650, I32))
LocalSet(5, TypedSsaVar(651, I32))
I32Set(TypedSsaVar(652, I32), 1)
Ne(TypedSsaVar(653, I32), TypedSsaVar(651, I32), TypedSsaVar(652, I32))
BranchIf { cond: TypedSsaVar(653, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 102 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 103 }, params: [] } }

==== block BlockId { func: 9, block: 103 } ==== 
parameters: []
LocalGet(TypedSsaVar(654, I32), 0)
I32Set(TypedSsaVar(655, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 4151, memory: 0 }, TypedSsaVar(655, I32), TypedSsaVar(654, I32))
LocalGet(TypedSsaVar(656, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(657, I32), TypedSsaVar(656, I32))
LocalSet(5, TypedSsaVar(657, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 102 }, params: [] })

==== block BlockId { func: 9, block: 102 } ==== 
parameters: []
LocalGet(TypedSsaVar(658, I32), 2)
LocalGet(TypedSsaVar(659, I32), 5)
I32Set(TypedSsaVar(660, I32), 1)
Xor(TypedSsaVar(661, I32), TypedSsaVar(659, I32), TypedSsaVar(660, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(661, I32), TypedSsaVar(658, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 100 }, params: [] })

==== block BlockId { func: 9, block: 100 } ==== 
parameters: []
LocalGet(TypedSsaVar(662, I32), 4)
I32Set(TypedSsaVar(663, I32), 64)
Add(TypedSsaVar(664, I32), TypedSsaVar(662, I32), TypedSsaVar(663, I32))
LocalSet(4, TypedSsaVar(664, I32))
LocalGet(TypedSsaVar(665, I32), 6)
LocalGet(TypedSsaVar(666, I32), 3)
I32Set(TypedSsaVar(667, I32), 1)
Add(TypedSsaVar(668, I32), TypedSsaVar(666, I32), TypedSsaVar(667, I32))
LocalSet(3, TypedSsaVar(668, I32))
Ne(TypedSsaVar(669, I32), TypedSsaVar(665, I32), TypedSsaVar(668, I32))
BranchIf { cond: TypedSsaVar(669, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 71 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 104 }, params: [] } }

==== block BlockId { func: 9, block: 104 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 69 }, params: [] })

==== block BlockId { func: 9, block: 69 } ==== 
parameters: []
LocalGet(TypedSsaVar(670, I32), 0)
I32Set(TypedSsaVar(671, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 6224, memory: 0 }, TypedSsaVar(671, I32), TypedSsaVar(670, I32))
LocalGet(TypedSsaVar(672, I32), 1)
I32Set(TypedSsaVar(673, I32), 2)
Add(TypedSsaVar(674, I32), TypedSsaVar(672, I32), TypedSsaVar(673, I32))
LocalSet(2, TypedSsaVar(674, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 105 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 8 }, params: [] })

==== block BlockId { func: 9, block: 8 } ==== 
parameters: []
LocalGet(TypedSsaVar(675, I32), 4)
I32Set(TypedSsaVar(676, I32), -158)
Add(TypedSsaVar(677, I32), TypedSsaVar(675, I32), TypedSsaVar(676, I32))
BranchTable { cond: TypedSsaVar(677, I32), default: JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, arms: [JumpTarget { label: BlockId { func: 9, block: 107 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 106 }, params: [] }] }

==== block BlockId { func: 9, block: 108 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 107 }, params: [] })

==== block BlockId { func: 9, block: 107 } ==== 
parameters: []
LocalGet(TypedSsaVar(678, I32), 0)
LocalGet(TypedSsaVar(679, I32), 0)
LocalGet(TypedSsaVar(680, I32), 2)
I32Set(TypedSsaVar(681, I32), 8)
ShrU(TypedSsaVar(682, I32), TypedSsaVar(680, I32), TypedSsaVar(681, I32))
I32Set(TypedSsaVar(683, I32), 15)
And(TypedSsaVar(684, I32), TypedSsaVar(682, I32), Var(TypedSsaVar(683, I32)))
Add(TypedSsaVar(685, I32), TypedSsaVar(679, I32), TypedSsaVar(684, I32))
I32Set(TypedSsaVar(686, I32), 4136)
Add(TypedSsaVar(687, I32), TypedSsaVar(685, I32), TypedSsaVar(686, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(688, I32), TypedSsaVar(687, I32))
Add(TypedSsaVar(689, I32), TypedSsaVar(678, I32), TypedSsaVar(688, I32))
I32Set(TypedSsaVar(690, I32), 6208)
Add(TypedSsaVar(691, I32), TypedSsaVar(689, I32), TypedSsaVar(690, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(692, I32), TypedSsaVar(691, I32))
Eqz(TypedSsaVar(693, I32), TypedSsaVar(692, I32))
BranchIf { cond: TypedSsaVar(693, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 109 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 110 }, params: [] } }

==== block BlockId { func: 9, block: 110 } ==== 
parameters: []
LocalGet(TypedSsaVar(694, I32), 1)
I32Set(TypedSsaVar(695, I32), 4)
Add(TypedSsaVar(696, I32), TypedSsaVar(694, I32), TypedSsaVar(695, I32))
LocalSet(2, TypedSsaVar(696, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 111 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 109 }, params: [] })

==== block BlockId { func: 9, block: 109 } ==== 
parameters: []
LocalGet(TypedSsaVar(697, I32), 1)
I32Set(TypedSsaVar(698, I32), 2)
Add(TypedSsaVar(699, I32), TypedSsaVar(697, I32), TypedSsaVar(698, I32))
LocalSet(2, TypedSsaVar(699, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 112 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 106 }, params: [] })

==== block BlockId { func: 9, block: 106 } ==== 
parameters: []
LocalGet(TypedSsaVar(700, I32), 0)
LocalGet(TypedSsaVar(701, I32), 0)
LocalGet(TypedSsaVar(702, I32), 2)
I32Set(TypedSsaVar(703, I32), 8)
ShrU(TypedSsaVar(704, I32), TypedSsaVar(702, I32), TypedSsaVar(703, I32))
I32Set(TypedSsaVar(705, I32), 15)
And(TypedSsaVar(706, I32), TypedSsaVar(704, I32), Var(TypedSsaVar(705, I32)))
Add(TypedSsaVar(707, I32), TypedSsaVar(701, I32), TypedSsaVar(706, I32))
I32Set(TypedSsaVar(708, I32), 4136)
Add(TypedSsaVar(709, I32), TypedSsaVar(707, I32), TypedSsaVar(708, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(710, I32), TypedSsaVar(709, I32))
Add(TypedSsaVar(711, I32), TypedSsaVar(700, I32), TypedSsaVar(710, I32))
I32Set(TypedSsaVar(712, I32), 6208)
Add(TypedSsaVar(713, I32), TypedSsaVar(711, I32), TypedSsaVar(712, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(714, I32), TypedSsaVar(713, I32))
BranchIf { cond: TypedSsaVar(714, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 113 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 114 }, params: [] } }

==== block BlockId { func: 9, block: 114 } ==== 
parameters: []
LocalGet(TypedSsaVar(715, I32), 1)
I32Set(TypedSsaVar(716, I32), 4)
Add(TypedSsaVar(717, I32), TypedSsaVar(715, I32), TypedSsaVar(716, I32))
LocalSet(2, TypedSsaVar(717, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 115 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 113 }, params: [] })

==== block BlockId { func: 9, block: 113 } ==== 
parameters: []
LocalGet(TypedSsaVar(718, I32), 1)
I32Set(TypedSsaVar(719, I32), 2)
Add(TypedSsaVar(720, I32), TypedSsaVar(718, I32), TypedSsaVar(719, I32))
LocalSet(2, TypedSsaVar(720, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 116 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 7 }, params: [] })

==== block BlockId { func: 9, block: 7 } ==== 
parameters: []
LocalGet(TypedSsaVar(721, I32), 4)
I32Set(TypedSsaVar(722, I32), -7)
Add(TypedSsaVar(723, I32), TypedSsaVar(721, I32), TypedSsaVar(722, I32))
BranchTable { cond: TypedSsaVar(723, I32), default: JumpTarget { label: BlockId { func: 9, block: 125 }, params: [] }, arms: [JumpTarget { label: BlockId { func: 9, block: 124 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 123 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 122 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 121 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 120 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 119 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 118 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, JumpTarget { label: BlockId { func: 9, block: 117 }, params: [] }] }

==== block BlockId { func: 9, block: 126 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 125 }, params: [] })

==== block BlockId { func: 9, block: 125 } ==== 
parameters: []
LocalGet(TypedSsaVar(724, I32), 4)
I32Set(TypedSsaVar(725, I32), 101)
Ne(TypedSsaVar(726, I32), TypedSsaVar(724, I32), TypedSsaVar(725, I32))
BranchIf { cond: TypedSsaVar(726, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 127 }, params: [] } }

==== block BlockId { func: 9, block: 127 } ==== 
parameters: []
I32Set(TypedSsaVar(727, I32), 4136)
LocalSet(2, TypedSsaVar(727, I32))
LocalGet(TypedSsaVar(728, I32), 0)
I32Set(TypedSsaVar(729, I32), 4155)
Add(TypedSsaVar(730, I32), TypedSsaVar(728, I32), TypedSsaVar(729, I32))
LocalSet(3, TypedSsaVar(730, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 128 }, params: [] })

==== block BlockId { func: 9, block: 128 } ==== 
parameters: []
LocalGet(TypedSsaVar(731, I32), 0)
LocalGet(TypedSsaVar(732, I32), 2)
Add(TypedSsaVar(733, I32), TypedSsaVar(731, I32), TypedSsaVar(732, I32))
LocalGet(TypedSsaVar(734, I32), 0)
LocalGet(TypedSsaVar(735, I32), 2)
LocalGet(TypedSsaVar(736, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(737, I32), TypedSsaVar(736, I32))
Add(TypedSsaVar(738, I32), TypedSsaVar(735, I32), TypedSsaVar(737, I32))
Add(TypedSsaVar(739, I32), TypedSsaVar(734, I32), TypedSsaVar(738, I32))
I32Set(TypedSsaVar(740, I32), -4096)
Add(TypedSsaVar(741, I32), TypedSsaVar(739, I32), TypedSsaVar(740, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(742, I32), TypedSsaVar(741, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(742, I32), TypedSsaVar(733, I32))
LocalGet(TypedSsaVar(743, I32), 2)
I32Set(TypedSsaVar(744, I32), -4136)
Add(TypedSsaVar(745, I32), TypedSsaVar(743, I32), TypedSsaVar(744, I32))
LocalSet(4, TypedSsaVar(745, I32))
LocalGet(TypedSsaVar(746, I32), 2)
I32Set(TypedSsaVar(747, I32), 1)
Add(TypedSsaVar(748, I32), TypedSsaVar(746, I32), TypedSsaVar(747, I32))
LocalSet(2, TypedSsaVar(748, I32))
LocalGet(TypedSsaVar(749, I32), 4)
LocalGet(TypedSsaVar(750, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(751, I32), TypedSsaVar(750, I32))
I32Set(TypedSsaVar(752, I32), 15)
And(TypedSsaVar(753, I32), TypedSsaVar(751, I32), Var(TypedSsaVar(752, I32)))
LocalSet(5, TypedSsaVar(753, I32))
LtU(TypedSsaVar(754, I32), TypedSsaVar(749, I32), TypedSsaVar(753, I32))
BranchIf { cond: TypedSsaVar(754, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 128 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 129 }, params: [] } }

==== block BlockId { func: 9, block: 129 } ==== 
parameters: []
LocalGet(TypedSsaVar(755, I32), 0)
LocalGet(TypedSsaVar(756, I32), 5)
LocalGet(TypedSsaVar(757, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(758, I32), TypedSsaVar(757, I32))
Add(TypedSsaVar(759, I32), TypedSsaVar(756, I32), TypedSsaVar(758, I32))
I32Set(TypedSsaVar(760, I32), 1)
Add(TypedSsaVar(761, I32), TypedSsaVar(759, I32), TypedSsaVar(760, I32))
Store16(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(761, I32), TypedSsaVar(755, I32))
LocalGet(TypedSsaVar(762, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(763, I32), TypedSsaVar(762, I32))
I32Set(TypedSsaVar(764, I32), 2)
Add(TypedSsaVar(765, I32), TypedSsaVar(763, I32), TypedSsaVar(764, I32))
LocalSet(2, TypedSsaVar(765, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 130 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 124 }, params: [] })

==== block BlockId { func: 9, block: 124 } ==== 
parameters: []
LocalGet(TypedSsaVar(766, I32), 0)
LocalGet(TypedSsaVar(767, I32), 2)
I32Set(TypedSsaVar(768, I32), 8)
ShrU(TypedSsaVar(769, I32), TypedSsaVar(767, I32), TypedSsaVar(768, I32))
I32Set(TypedSsaVar(770, I32), 15)
And(TypedSsaVar(771, I32), TypedSsaVar(769, I32), Var(TypedSsaVar(770, I32)))
Add(TypedSsaVar(772, I32), TypedSsaVar(766, I32), TypedSsaVar(771, I32))
I32Set(TypedSsaVar(773, I32), 4136)
Add(TypedSsaVar(774, I32), TypedSsaVar(772, I32), TypedSsaVar(773, I32))
LocalGet(TypedSsaVar(775, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 4158, memory: 0 }, TypedSsaVar(776, I32), TypedSsaVar(775, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(776, I32), TypedSsaVar(774, I32))
LocalGet(TypedSsaVar(777, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(778, I32), TypedSsaVar(777, I32))
I32Set(TypedSsaVar(779, I32), 2)
Add(TypedSsaVar(780, I32), TypedSsaVar(778, I32), TypedSsaVar(779, I32))
LocalSet(2, TypedSsaVar(780, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 131 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 123 }, params: [] })

==== block BlockId { func: 9, block: 123 } ==== 
parameters: []
LocalGet(TypedSsaVar(781, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 6208, memory: 0 }, TypedSsaVar(782, I32), TypedSsaVar(781, I32))
LocalSet(2, TypedSsaVar(782, I32))
Eqz(TypedSsaVar(783, I32), TypedSsaVar(782, I32))
BranchIf { cond: TypedSsaVar(783, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 132 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 133 }, params: [] } }

==== block BlockId { func: 9, block: 133 } ==== 
parameters: []
LocalGet(TypedSsaVar(784, I32), 0)
LocalGet(TypedSsaVar(785, I32), 3)
I32Set(TypedSsaVar(786, I32), 15)
And(TypedSsaVar(787, I32), TypedSsaVar(785, I32), Var(TypedSsaVar(786, I32)))
Add(TypedSsaVar(788, I32), TypedSsaVar(784, I32), TypedSsaVar(787, I32))
I32Set(TypedSsaVar(789, I32), 4136)
Add(TypedSsaVar(790, I32), TypedSsaVar(788, I32), TypedSsaVar(789, I32))
I32Set(TypedSsaVar(791, I32), 0)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(791, I32), TypedSsaVar(790, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 132 }, params: [] })

==== block BlockId { func: 9, block: 132 } ==== 
parameters: []
LocalGet(TypedSsaVar(792, I32), 0)
I32Set(TypedSsaVar(793, I32), 6209)
Add(TypedSsaVar(794, I32), TypedSsaVar(792, I32), TypedSsaVar(793, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(795, I32), TypedSsaVar(794, I32))
BranchIf { cond: TypedSsaVar(795, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 5 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 134 }, params: [] } }

==== block BlockId { func: 9, block: 134 } ==== 
parameters: []
LocalGet(TypedSsaVar(796, I32), 2)
I32Set(TypedSsaVar(797, I32), 0)
Ne(TypedSsaVar(798, I32), TypedSsaVar(796, I32), TypedSsaVar(797, I32))
LocalSet(2, TypedSsaVar(798, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 4 }, params: [] })

==== block BlockId { func: 9, block: 135 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 122 }, params: [] })

==== block BlockId { func: 9, block: 122 } ==== 
parameters: []
LocalGet(TypedSsaVar(799, I32), 0)
LocalGet(TypedSsaVar(800, I32), 0)
LocalGet(TypedSsaVar(801, I32), 2)
I32Set(TypedSsaVar(802, I32), 8)
ShrU(TypedSsaVar(803, I32), TypedSsaVar(801, I32), TypedSsaVar(802, I32))
I32Set(TypedSsaVar(804, I32), 15)
And(TypedSsaVar(805, I32), TypedSsaVar(803, I32), Var(TypedSsaVar(804, I32)))
Add(TypedSsaVar(806, I32), TypedSsaVar(800, I32), TypedSsaVar(805, I32))
I32Set(TypedSsaVar(807, I32), 4136)
Add(TypedSsaVar(808, I32), TypedSsaVar(806, I32), TypedSsaVar(807, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(809, I32), TypedSsaVar(808, I32))
Store8(MemoryImmediate { align: 0, offset: 4158, memory: 0 }, TypedSsaVar(809, I32), TypedSsaVar(799, I32))
LocalGet(TypedSsaVar(810, I32), 1)
I32Set(TypedSsaVar(811, I32), 2)
Add(TypedSsaVar(812, I32), TypedSsaVar(810, I32), TypedSsaVar(811, I32))
LocalSet(2, TypedSsaVar(812, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 136 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 121 }, params: [] })

==== block BlockId { func: 9, block: 121 } ==== 
parameters: []
LocalGet(TypedSsaVar(813, I32), 0)
LocalGet(TypedSsaVar(814, I32), 0)
LocalGet(TypedSsaVar(815, I32), 2)
I32Set(TypedSsaVar(816, I32), 8)
ShrU(TypedSsaVar(817, I32), TypedSsaVar(815, I32), TypedSsaVar(816, I32))
I32Set(TypedSsaVar(818, I32), 15)
And(TypedSsaVar(819, I32), TypedSsaVar(817, I32), Var(TypedSsaVar(818, I32)))
Add(TypedSsaVar(820, I32), TypedSsaVar(814, I32), TypedSsaVar(819, I32))
I32Set(TypedSsaVar(821, I32), 4136)
Add(TypedSsaVar(822, I32), TypedSsaVar(820, I32), TypedSsaVar(821, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(823, I32), TypedSsaVar(822, I32))
Store8(MemoryImmediate { align: 0, offset: 4159, memory: 0 }, TypedSsaVar(823, I32), TypedSsaVar(813, I32))
LocalGet(TypedSsaVar(824, I32), 1)
I32Set(TypedSsaVar(825, I32), 2)
Add(TypedSsaVar(826, I32), TypedSsaVar(824, I32), TypedSsaVar(825, I32))
LocalSet(2, TypedSsaVar(826, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 137 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 120 }, params: [] })

==== block BlockId { func: 9, block: 120 } ==== 
parameters: []
LocalGet(TypedSsaVar(827, I32), 0)
I32Set(TypedSsaVar(828, I32), 4151)
Add(TypedSsaVar(829, I32), TypedSsaVar(827, I32), TypedSsaVar(828, I32))
LocalGet(TypedSsaVar(830, I32), 0)
I32Set(TypedSsaVar(831, I32), 4136)
Add(TypedSsaVar(832, I32), TypedSsaVar(830, I32), TypedSsaVar(831, I32))
LocalSet(4, TypedSsaVar(832, I32))
LocalGet(TypedSsaVar(833, I32), 2)
I32Set(TypedSsaVar(834, I32), 8)
ShrU(TypedSsaVar(835, I32), TypedSsaVar(833, I32), TypedSsaVar(834, I32))
I32Set(TypedSsaVar(836, I32), 15)
And(TypedSsaVar(837, I32), TypedSsaVar(835, I32), Var(TypedSsaVar(836, I32)))
Add(TypedSsaVar(838, I32), TypedSsaVar(832, I32), TypedSsaVar(837, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(839, I32), TypedSsaVar(838, I32))
LocalGet(TypedSsaVar(840, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(841, I32), TypedSsaVar(840, I32))
LocalSet(2, TypedSsaVar(841, I32))
Add(TypedSsaVar(842, I32), TypedSsaVar(839, I32), TypedSsaVar(841, I32))
I32Set(TypedSsaVar(843, I32), 4095)
GtU(TypedSsaVar(844, I32), TypedSsaVar(842, I32), TypedSsaVar(843, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(844, I32), TypedSsaVar(829, I32))
LocalGet(TypedSsaVar(845, I32), 0)
LocalGet(TypedSsaVar(846, I32), 2)
LocalGet(TypedSsaVar(847, I32), 4)
LocalGet(TypedSsaVar(848, I32), 3)
I32Set(TypedSsaVar(849, I32), 15)
And(TypedSsaVar(850, I32), TypedSsaVar(848, I32), Var(TypedSsaVar(849, I32)))
Add(TypedSsaVar(851, I32), TypedSsaVar(847, I32), TypedSsaVar(850, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(852, I32), TypedSsaVar(851, I32))
Add(TypedSsaVar(853, I32), TypedSsaVar(846, I32), TypedSsaVar(852, I32))
Store16(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(853, I32), TypedSsaVar(845, I32))
LocalGet(TypedSsaVar(854, I32), 1)
I32Set(TypedSsaVar(855, I32), 2)
Add(TypedSsaVar(856, I32), TypedSsaVar(854, I32), TypedSsaVar(855, I32))
LocalSet(2, TypedSsaVar(856, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 138 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 119 }, params: [] })

==== block BlockId { func: 9, block: 119 } ==== 
parameters: []
LocalGet(TypedSsaVar(857, I32), 0)
LocalGet(TypedSsaVar(858, I32), 0)
LocalGet(TypedSsaVar(859, I32), 2)
I32Set(TypedSsaVar(860, I32), 8)
ShrU(TypedSsaVar(861, I32), TypedSsaVar(859, I32), TypedSsaVar(860, I32))
I32Set(TypedSsaVar(862, I32), 15)
And(TypedSsaVar(863, I32), TypedSsaVar(861, I32), Var(TypedSsaVar(862, I32)))
Add(TypedSsaVar(864, I32), TypedSsaVar(858, I32), TypedSsaVar(863, I32))
I32Set(TypedSsaVar(865, I32), 4136)
Add(TypedSsaVar(866, I32), TypedSsaVar(864, I32), TypedSsaVar(865, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(867, I32), TypedSsaVar(866, I32))
I32Set(TypedSsaVar(868, I32), 5)
Mul(TypedSsaVar(869, I32), TypedSsaVar(867, I32), TypedSsaVar(868, I32))
Store16(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(869, I32), TypedSsaVar(857, I32))
LocalGet(TypedSsaVar(870, I32), 1)
I32Set(TypedSsaVar(871, I32), 2)
Add(TypedSsaVar(872, I32), TypedSsaVar(870, I32), TypedSsaVar(871, I32))
LocalSet(2, TypedSsaVar(872, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 139 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 118 }, params: [] })

==== block BlockId { func: 9, block: 118 } ==== 
parameters: []
LocalGet(TypedSsaVar(873, I32), 0)
I32Set(TypedSsaVar(874, I32), 40)
Add(TypedSsaVar(875, I32), TypedSsaVar(873, I32), TypedSsaVar(874, I32))
LocalSet(4, TypedSsaVar(875, I32))
LocalGet(TypedSsaVar(876, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(877, I32), TypedSsaVar(876, I32))
Add(TypedSsaVar(878, I32), TypedSsaVar(875, I32), TypedSsaVar(877, I32))
LocalGet(TypedSsaVar(879, I32), 0)
I32Set(TypedSsaVar(880, I32), 4136)
Add(TypedSsaVar(881, I32), TypedSsaVar(879, I32), TypedSsaVar(880, I32))
LocalSet(3, TypedSsaVar(881, I32))
LocalGet(TypedSsaVar(882, I32), 2)
I32Set(TypedSsaVar(883, I32), 8)
ShrU(TypedSsaVar(884, I32), TypedSsaVar(882, I32), TypedSsaVar(883, I32))
I32Set(TypedSsaVar(885, I32), 15)
And(TypedSsaVar(886, I32), TypedSsaVar(884, I32), Var(TypedSsaVar(885, I32)))
Add(TypedSsaVar(887, I32), TypedSsaVar(881, I32), TypedSsaVar(886, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(888, I32), TypedSsaVar(887, I32))
I32Set(TypedSsaVar(889, I32), 100)
DivU(TypedSsaVar(890, I32), TypedSsaVar(888, I32), TypedSsaVar(889, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(890, I32), TypedSsaVar(878, I32))
LocalGet(TypedSsaVar(891, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(892, I32), TypedSsaVar(891, I32))
LocalGet(TypedSsaVar(893, I32), 4)
Add(TypedSsaVar(894, I32), TypedSsaVar(892, I32), TypedSsaVar(893, I32))
I32Set(TypedSsaVar(895, I32), 1)
Add(TypedSsaVar(896, I32), TypedSsaVar(894, I32), TypedSsaVar(895, I32))
LocalGet(TypedSsaVar(897, I32), 3)
LocalGet(TypedSsaVar(898, I32), 0)
I32Set(TypedSsaVar(899, I32), 4155)
Add(TypedSsaVar(900, I32), TypedSsaVar(898, I32), TypedSsaVar(899, I32))
LocalSet(2, TypedSsaVar(900, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(901, I32), TypedSsaVar(900, I32))
I32Set(TypedSsaVar(902, I32), 15)
And(TypedSsaVar(903, I32), TypedSsaVar(901, I32), Var(TypedSsaVar(902, I32)))
Add(TypedSsaVar(904, I32), TypedSsaVar(897, I32), TypedSsaVar(903, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(905, I32), TypedSsaVar(904, I32))
I32Set(TypedSsaVar(906, I32), 10)
DivU(TypedSsaVar(907, I32), TypedSsaVar(905, I32), TypedSsaVar(906, I32))
I32Set(TypedSsaVar(908, I32), 10)
RemU(TypedSsaVar(909, I32), TypedSsaVar(907, I32), TypedSsaVar(908, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(909, I32), TypedSsaVar(896, I32))
LocalGet(TypedSsaVar(910, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(911, I32), TypedSsaVar(910, I32))
LocalGet(TypedSsaVar(912, I32), 4)
Add(TypedSsaVar(913, I32), TypedSsaVar(911, I32), TypedSsaVar(912, I32))
I32Set(TypedSsaVar(914, I32), 2)
Add(TypedSsaVar(915, I32), TypedSsaVar(913, I32), TypedSsaVar(914, I32))
LocalGet(TypedSsaVar(916, I32), 3)
LocalGet(TypedSsaVar(917, I32), 2)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(918, I32), TypedSsaVar(917, I32))
I32Set(TypedSsaVar(919, I32), 15)
And(TypedSsaVar(920, I32), TypedSsaVar(918, I32), Var(TypedSsaVar(919, I32)))
Add(TypedSsaVar(921, I32), TypedSsaVar(916, I32), TypedSsaVar(920, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(922, I32), TypedSsaVar(921, I32))
I32Set(TypedSsaVar(923, I32), 10)
RemU(TypedSsaVar(924, I32), TypedSsaVar(922, I32), TypedSsaVar(923, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(924, I32), TypedSsaVar(915, I32))
LocalGet(TypedSsaVar(925, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(926, I32), TypedSsaVar(925, I32))
I32Set(TypedSsaVar(927, I32), 2)
Add(TypedSsaVar(928, I32), TypedSsaVar(926, I32), TypedSsaVar(927, I32))
LocalSet(2, TypedSsaVar(928, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 140 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 117 }, params: [] })

==== block BlockId { func: 9, block: 117 } ==== 
parameters: []
I32Set(TypedSsaVar(929, I32), 4136)
LocalSet(2, TypedSsaVar(929, I32))
LocalGet(TypedSsaVar(930, I32), 0)
I32Set(TypedSsaVar(931, I32), 4155)
Add(TypedSsaVar(932, I32), TypedSsaVar(930, I32), TypedSsaVar(931, I32))
LocalSet(3, TypedSsaVar(932, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 141 }, params: [] })

==== block BlockId { func: 9, block: 141 } ==== 
parameters: []
LocalGet(TypedSsaVar(933, I32), 0)
LocalGet(TypedSsaVar(934, I32), 2)
LocalGet(TypedSsaVar(935, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(936, I32), TypedSsaVar(935, I32))
Add(TypedSsaVar(937, I32), TypedSsaVar(934, I32), TypedSsaVar(936, I32))
Add(TypedSsaVar(938, I32), TypedSsaVar(933, I32), TypedSsaVar(937, I32))
I32Set(TypedSsaVar(939, I32), -4096)
Add(TypedSsaVar(940, I32), TypedSsaVar(938, I32), TypedSsaVar(939, I32))
LocalGet(TypedSsaVar(941, I32), 0)
LocalGet(TypedSsaVar(942, I32), 2)
Add(TypedSsaVar(943, I32), TypedSsaVar(941, I32), TypedSsaVar(942, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(944, I32), TypedSsaVar(943, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(944, I32), TypedSsaVar(940, I32))
LocalGet(TypedSsaVar(945, I32), 2)
I32Set(TypedSsaVar(946, I32), -4136)
Add(TypedSsaVar(947, I32), TypedSsaVar(945, I32), TypedSsaVar(946, I32))
LocalSet(4, TypedSsaVar(947, I32))
LocalGet(TypedSsaVar(948, I32), 2)
I32Set(TypedSsaVar(949, I32), 1)
Add(TypedSsaVar(950, I32), TypedSsaVar(948, I32), TypedSsaVar(949, I32))
LocalSet(2, TypedSsaVar(950, I32))
LocalGet(TypedSsaVar(951, I32), 4)
LocalGet(TypedSsaVar(952, I32), 3)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(953, I32), TypedSsaVar(952, I32))
I32Set(TypedSsaVar(954, I32), 15)
And(TypedSsaVar(955, I32), TypedSsaVar(953, I32), Var(TypedSsaVar(954, I32)))
LocalSet(5, TypedSsaVar(955, I32))
LtU(TypedSsaVar(956, I32), TypedSsaVar(951, I32), TypedSsaVar(955, I32))
BranchIf { cond: TypedSsaVar(956, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 141 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 142 }, params: [] } }

==== block BlockId { func: 9, block: 142 } ==== 
parameters: []
LocalGet(TypedSsaVar(957, I32), 0)
LocalGet(TypedSsaVar(958, I32), 5)
LocalGet(TypedSsaVar(959, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(960, I32), TypedSsaVar(959, I32))
Add(TypedSsaVar(961, I32), TypedSsaVar(958, I32), TypedSsaVar(960, I32))
I32Set(TypedSsaVar(962, I32), 1)
Add(TypedSsaVar(963, I32), TypedSsaVar(961, I32), TypedSsaVar(962, I32))
Store16(MemoryImmediate { align: 1, offset: 4156, memory: 0 }, TypedSsaVar(963, I32), TypedSsaVar(957, I32))
LocalGet(TypedSsaVar(964, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(965, I32), TypedSsaVar(964, I32))
I32Set(TypedSsaVar(966, I32), 2)
Add(TypedSsaVar(967, I32), TypedSsaVar(965, I32), TypedSsaVar(966, I32))
LocalSet(2, TypedSsaVar(967, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 143 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 6 }, params: [] })

==== block BlockId { func: 9, block: 6 } ==== 
parameters: []
LocalGet(TypedSsaVar(968, I32), 0)
I32Set(TypedSsaVar(969, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 6224, memory: 0 }, TypedSsaVar(969, I32), TypedSsaVar(968, I32))
LocalGet(TypedSsaVar(970, I32), 1)
I32Set(TypedSsaVar(971, I32), 2)
Add(TypedSsaVar(972, I32), TypedSsaVar(970, I32), TypedSsaVar(971, I32))
LocalSet(2, TypedSsaVar(972, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 144 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 5 }, params: [] })

==== block BlockId { func: 9, block: 5 } ==== 
parameters: []
I32Set(TypedSsaVar(973, I32), 1)
LocalSet(2, TypedSsaVar(973, I32))
LocalGet(TypedSsaVar(974, I32), 0)
LocalGet(TypedSsaVar(975, I32), 0)
I32Set(TypedSsaVar(976, I32), 4155)
Add(TypedSsaVar(977, I32), TypedSsaVar(975, I32), TypedSsaVar(976, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(978, I32), TypedSsaVar(977, I32))
I32Set(TypedSsaVar(979, I32), 15)
And(TypedSsaVar(980, I32), TypedSsaVar(978, I32), Var(TypedSsaVar(979, I32)))
Add(TypedSsaVar(981, I32), TypedSsaVar(974, I32), TypedSsaVar(980, I32))
I32Set(TypedSsaVar(982, I32), 4136)
Add(TypedSsaVar(983, I32), TypedSsaVar(981, I32), TypedSsaVar(982, I32))
I32Set(TypedSsaVar(984, I32), 1)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(984, I32), TypedSsaVar(983, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 4 }, params: [] })

==== block BlockId { func: 9, block: 4 } ==== 
parameters: []
LocalGet(TypedSsaVar(985, I32), 0)
I32Set(TypedSsaVar(986, I32), 6210)
Add(TypedSsaVar(987, I32), TypedSsaVar(985, I32), TypedSsaVar(986, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(988, I32), TypedSsaVar(987, I32))
Eqz(TypedSsaVar(989, I32), TypedSsaVar(988, I32))
BranchIf { cond: TypedSsaVar(989, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 145 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 146 }, params: [] } }

==== block BlockId { func: 9, block: 146 } ==== 
parameters: []
LocalGet(TypedSsaVar(990, I32), 0)
LocalGet(TypedSsaVar(991, I32), 0)
I32Set(TypedSsaVar(992, I32), 4155)
Add(TypedSsaVar(993, I32), TypedSsaVar(991, I32), TypedSsaVar(992, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(994, I32), TypedSsaVar(993, I32))
I32Set(TypedSsaVar(995, I32), 15)
And(TypedSsaVar(996, I32), TypedSsaVar(994, I32), Var(TypedSsaVar(995, I32)))
Add(TypedSsaVar(997, I32), TypedSsaVar(990, I32), TypedSsaVar(996, I32))
I32Set(TypedSsaVar(998, I32), 4136)
Add(TypedSsaVar(999, I32), TypedSsaVar(997, I32), TypedSsaVar(998, I32))
I32Set(TypedSsaVar(1000, I32), 2)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1000, I32), TypedSsaVar(999, I32))
I32Set(TypedSsaVar(1001, I32), 1)
LocalSet(2, TypedSsaVar(1001, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 145 }, params: [] })

==== block BlockId { func: 9, block: 145 } ==== 
parameters: []
LocalGet(TypedSsaVar(1002, I32), 0)
I32Set(TypedSsaVar(1003, I32), 6211)
Add(TypedSsaVar(1004, I32), TypedSsaVar(1002, I32), TypedSsaVar(1003, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1005, I32), TypedSsaVar(1004, I32))
Eqz(TypedSsaVar(1006, I32), TypedSsaVar(1005, I32))
BranchIf { cond: TypedSsaVar(1006, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 147 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 148 }, params: [] } }

==== block BlockId { func: 9, block: 148 } ==== 
parameters: []
LocalGet(TypedSsaVar(1007, I32), 0)
LocalGet(TypedSsaVar(1008, I32), 0)
I32Set(TypedSsaVar(1009, I32), 4155)
Add(TypedSsaVar(1010, I32), TypedSsaVar(1008, I32), TypedSsaVar(1009, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1011, I32), TypedSsaVar(1010, I32))
I32Set(TypedSsaVar(1012, I32), 15)
And(TypedSsaVar(1013, I32), TypedSsaVar(1011, I32), Var(TypedSsaVar(1012, I32)))
Add(TypedSsaVar(1014, I32), TypedSsaVar(1007, I32), TypedSsaVar(1013, I32))
I32Set(TypedSsaVar(1015, I32), 4136)
Add(TypedSsaVar(1016, I32), TypedSsaVar(1014, I32), TypedSsaVar(1015, I32))
I32Set(TypedSsaVar(1017, I32), 3)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1017, I32), TypedSsaVar(1016, I32))
I32Set(TypedSsaVar(1018, I32), 1)
LocalSet(2, TypedSsaVar(1018, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 147 }, params: [] })

==== block BlockId { func: 9, block: 147 } ==== 
parameters: []
LocalGet(TypedSsaVar(1019, I32), 0)
I32Set(TypedSsaVar(1020, I32), 6212)
Add(TypedSsaVar(1021, I32), TypedSsaVar(1019, I32), TypedSsaVar(1020, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1022, I32), TypedSsaVar(1021, I32))
Eqz(TypedSsaVar(1023, I32), TypedSsaVar(1022, I32))
BranchIf { cond: TypedSsaVar(1023, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 149 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 150 }, params: [] } }

==== block BlockId { func: 9, block: 150 } ==== 
parameters: []
LocalGet(TypedSsaVar(1024, I32), 0)
LocalGet(TypedSsaVar(1025, I32), 0)
I32Set(TypedSsaVar(1026, I32), 4155)
Add(TypedSsaVar(1027, I32), TypedSsaVar(1025, I32), TypedSsaVar(1026, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1028, I32), TypedSsaVar(1027, I32))
I32Set(TypedSsaVar(1029, I32), 15)
And(TypedSsaVar(1030, I32), TypedSsaVar(1028, I32), Var(TypedSsaVar(1029, I32)))
Add(TypedSsaVar(1031, I32), TypedSsaVar(1024, I32), TypedSsaVar(1030, I32))
I32Set(TypedSsaVar(1032, I32), 4136)
Add(TypedSsaVar(1033, I32), TypedSsaVar(1031, I32), TypedSsaVar(1032, I32))
I32Set(TypedSsaVar(1034, I32), 4)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1034, I32), TypedSsaVar(1033, I32))
I32Set(TypedSsaVar(1035, I32), 1)
LocalSet(2, TypedSsaVar(1035, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 149 }, params: [] })

==== block BlockId { func: 9, block: 149 } ==== 
parameters: []
LocalGet(TypedSsaVar(1036, I32), 0)
I32Set(TypedSsaVar(1037, I32), 6213)
Add(TypedSsaVar(1038, I32), TypedSsaVar(1036, I32), TypedSsaVar(1037, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1039, I32), TypedSsaVar(1038, I32))
Eqz(TypedSsaVar(1040, I32), TypedSsaVar(1039, I32))
BranchIf { cond: TypedSsaVar(1040, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 151 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 152 }, params: [] } }

==== block BlockId { func: 9, block: 152 } ==== 
parameters: []
LocalGet(TypedSsaVar(1041, I32), 0)
LocalGet(TypedSsaVar(1042, I32), 0)
I32Set(TypedSsaVar(1043, I32), 4155)
Add(TypedSsaVar(1044, I32), TypedSsaVar(1042, I32), TypedSsaVar(1043, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1045, I32), TypedSsaVar(1044, I32))
I32Set(TypedSsaVar(1046, I32), 15)
And(TypedSsaVar(1047, I32), TypedSsaVar(1045, I32), Var(TypedSsaVar(1046, I32)))
Add(TypedSsaVar(1048, I32), TypedSsaVar(1041, I32), TypedSsaVar(1047, I32))
I32Set(TypedSsaVar(1049, I32), 4136)
Add(TypedSsaVar(1050, I32), TypedSsaVar(1048, I32), TypedSsaVar(1049, I32))
I32Set(TypedSsaVar(1051, I32), 5)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1051, I32), TypedSsaVar(1050, I32))
I32Set(TypedSsaVar(1052, I32), 1)
LocalSet(2, TypedSsaVar(1052, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 151 }, params: [] })

==== block BlockId { func: 9, block: 151 } ==== 
parameters: []
LocalGet(TypedSsaVar(1053, I32), 0)
I32Set(TypedSsaVar(1054, I32), 6214)
Add(TypedSsaVar(1055, I32), TypedSsaVar(1053, I32), TypedSsaVar(1054, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1056, I32), TypedSsaVar(1055, I32))
Eqz(TypedSsaVar(1057, I32), TypedSsaVar(1056, I32))
BranchIf { cond: TypedSsaVar(1057, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 153 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 154 }, params: [] } }

==== block BlockId { func: 9, block: 154 } ==== 
parameters: []
LocalGet(TypedSsaVar(1058, I32), 0)
LocalGet(TypedSsaVar(1059, I32), 0)
I32Set(TypedSsaVar(1060, I32), 4155)
Add(TypedSsaVar(1061, I32), TypedSsaVar(1059, I32), TypedSsaVar(1060, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1062, I32), TypedSsaVar(1061, I32))
I32Set(TypedSsaVar(1063, I32), 15)
And(TypedSsaVar(1064, I32), TypedSsaVar(1062, I32), Var(TypedSsaVar(1063, I32)))
Add(TypedSsaVar(1065, I32), TypedSsaVar(1058, I32), TypedSsaVar(1064, I32))
I32Set(TypedSsaVar(1066, I32), 4136)
Add(TypedSsaVar(1067, I32), TypedSsaVar(1065, I32), TypedSsaVar(1066, I32))
I32Set(TypedSsaVar(1068, I32), 6)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1068, I32), TypedSsaVar(1067, I32))
I32Set(TypedSsaVar(1069, I32), 1)
LocalSet(2, TypedSsaVar(1069, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 153 }, params: [] })

==== block BlockId { func: 9, block: 153 } ==== 
parameters: []
LocalGet(TypedSsaVar(1070, I32), 0)
I32Set(TypedSsaVar(1071, I32), 6215)
Add(TypedSsaVar(1072, I32), TypedSsaVar(1070, I32), TypedSsaVar(1071, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1073, I32), TypedSsaVar(1072, I32))
Eqz(TypedSsaVar(1074, I32), TypedSsaVar(1073, I32))
BranchIf { cond: TypedSsaVar(1074, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 155 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 156 }, params: [] } }

==== block BlockId { func: 9, block: 156 } ==== 
parameters: []
LocalGet(TypedSsaVar(1075, I32), 0)
LocalGet(TypedSsaVar(1076, I32), 0)
I32Set(TypedSsaVar(1077, I32), 4155)
Add(TypedSsaVar(1078, I32), TypedSsaVar(1076, I32), TypedSsaVar(1077, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1079, I32), TypedSsaVar(1078, I32))
I32Set(TypedSsaVar(1080, I32), 15)
And(TypedSsaVar(1081, I32), TypedSsaVar(1079, I32), Var(TypedSsaVar(1080, I32)))
Add(TypedSsaVar(1082, I32), TypedSsaVar(1075, I32), TypedSsaVar(1081, I32))
I32Set(TypedSsaVar(1083, I32), 4136)
Add(TypedSsaVar(1084, I32), TypedSsaVar(1082, I32), TypedSsaVar(1083, I32))
I32Set(TypedSsaVar(1085, I32), 7)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1085, I32), TypedSsaVar(1084, I32))
I32Set(TypedSsaVar(1086, I32), 1)
LocalSet(2, TypedSsaVar(1086, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 155 }, params: [] })

==== block BlockId { func: 9, block: 155 } ==== 
parameters: []
LocalGet(TypedSsaVar(1087, I32), 0)
I32Set(TypedSsaVar(1088, I32), 6216)
Add(TypedSsaVar(1089, I32), TypedSsaVar(1087, I32), TypedSsaVar(1088, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1090, I32), TypedSsaVar(1089, I32))
Eqz(TypedSsaVar(1091, I32), TypedSsaVar(1090, I32))
BranchIf { cond: TypedSsaVar(1091, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 157 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 158 }, params: [] } }

==== block BlockId { func: 9, block: 158 } ==== 
parameters: []
LocalGet(TypedSsaVar(1092, I32), 0)
LocalGet(TypedSsaVar(1093, I32), 0)
I32Set(TypedSsaVar(1094, I32), 4155)
Add(TypedSsaVar(1095, I32), TypedSsaVar(1093, I32), TypedSsaVar(1094, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1096, I32), TypedSsaVar(1095, I32))
I32Set(TypedSsaVar(1097, I32), 15)
And(TypedSsaVar(1098, I32), TypedSsaVar(1096, I32), Var(TypedSsaVar(1097, I32)))
Add(TypedSsaVar(1099, I32), TypedSsaVar(1092, I32), TypedSsaVar(1098, I32))
I32Set(TypedSsaVar(1100, I32), 4136)
Add(TypedSsaVar(1101, I32), TypedSsaVar(1099, I32), TypedSsaVar(1100, I32))
I32Set(TypedSsaVar(1102, I32), 8)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1102, I32), TypedSsaVar(1101, I32))
I32Set(TypedSsaVar(1103, I32), 1)
LocalSet(2, TypedSsaVar(1103, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 157 }, params: [] })

==== block BlockId { func: 9, block: 157 } ==== 
parameters: []
LocalGet(TypedSsaVar(1104, I32), 0)
I32Set(TypedSsaVar(1105, I32), 6217)
Add(TypedSsaVar(1106, I32), TypedSsaVar(1104, I32), TypedSsaVar(1105, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1107, I32), TypedSsaVar(1106, I32))
Eqz(TypedSsaVar(1108, I32), TypedSsaVar(1107, I32))
BranchIf { cond: TypedSsaVar(1108, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 159 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 160 }, params: [] } }

==== block BlockId { func: 9, block: 160 } ==== 
parameters: []
LocalGet(TypedSsaVar(1109, I32), 0)
LocalGet(TypedSsaVar(1110, I32), 0)
I32Set(TypedSsaVar(1111, I32), 4155)
Add(TypedSsaVar(1112, I32), TypedSsaVar(1110, I32), TypedSsaVar(1111, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1113, I32), TypedSsaVar(1112, I32))
I32Set(TypedSsaVar(1114, I32), 15)
And(TypedSsaVar(1115, I32), TypedSsaVar(1113, I32), Var(TypedSsaVar(1114, I32)))
Add(TypedSsaVar(1116, I32), TypedSsaVar(1109, I32), TypedSsaVar(1115, I32))
I32Set(TypedSsaVar(1117, I32), 4136)
Add(TypedSsaVar(1118, I32), TypedSsaVar(1116, I32), TypedSsaVar(1117, I32))
I32Set(TypedSsaVar(1119, I32), 9)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1119, I32), TypedSsaVar(1118, I32))
I32Set(TypedSsaVar(1120, I32), 1)
LocalSet(2, TypedSsaVar(1120, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 159 }, params: [] })

==== block BlockId { func: 9, block: 159 } ==== 
parameters: []
LocalGet(TypedSsaVar(1121, I32), 0)
I32Set(TypedSsaVar(1122, I32), 6218)
Add(TypedSsaVar(1123, I32), TypedSsaVar(1121, I32), TypedSsaVar(1122, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1124, I32), TypedSsaVar(1123, I32))
Eqz(TypedSsaVar(1125, I32), TypedSsaVar(1124, I32))
BranchIf { cond: TypedSsaVar(1125, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 161 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 162 }, params: [] } }

==== block BlockId { func: 9, block: 162 } ==== 
parameters: []
LocalGet(TypedSsaVar(1126, I32), 0)
LocalGet(TypedSsaVar(1127, I32), 0)
I32Set(TypedSsaVar(1128, I32), 4155)
Add(TypedSsaVar(1129, I32), TypedSsaVar(1127, I32), TypedSsaVar(1128, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1130, I32), TypedSsaVar(1129, I32))
I32Set(TypedSsaVar(1131, I32), 15)
And(TypedSsaVar(1132, I32), TypedSsaVar(1130, I32), Var(TypedSsaVar(1131, I32)))
Add(TypedSsaVar(1133, I32), TypedSsaVar(1126, I32), TypedSsaVar(1132, I32))
I32Set(TypedSsaVar(1134, I32), 4136)
Add(TypedSsaVar(1135, I32), TypedSsaVar(1133, I32), TypedSsaVar(1134, I32))
I32Set(TypedSsaVar(1136, I32), 10)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1136, I32), TypedSsaVar(1135, I32))
I32Set(TypedSsaVar(1137, I32), 1)
LocalSet(2, TypedSsaVar(1137, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 161 }, params: [] })

==== block BlockId { func: 9, block: 161 } ==== 
parameters: []
LocalGet(TypedSsaVar(1138, I32), 0)
I32Set(TypedSsaVar(1139, I32), 6219)
Add(TypedSsaVar(1140, I32), TypedSsaVar(1138, I32), TypedSsaVar(1139, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1141, I32), TypedSsaVar(1140, I32))
Eqz(TypedSsaVar(1142, I32), TypedSsaVar(1141, I32))
BranchIf { cond: TypedSsaVar(1142, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 163 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 164 }, params: [] } }

==== block BlockId { func: 9, block: 164 } ==== 
parameters: []
LocalGet(TypedSsaVar(1143, I32), 0)
LocalGet(TypedSsaVar(1144, I32), 0)
I32Set(TypedSsaVar(1145, I32), 4155)
Add(TypedSsaVar(1146, I32), TypedSsaVar(1144, I32), TypedSsaVar(1145, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1147, I32), TypedSsaVar(1146, I32))
I32Set(TypedSsaVar(1148, I32), 15)
And(TypedSsaVar(1149, I32), TypedSsaVar(1147, I32), Var(TypedSsaVar(1148, I32)))
Add(TypedSsaVar(1150, I32), TypedSsaVar(1143, I32), TypedSsaVar(1149, I32))
I32Set(TypedSsaVar(1151, I32), 4136)
Add(TypedSsaVar(1152, I32), TypedSsaVar(1150, I32), TypedSsaVar(1151, I32))
I32Set(TypedSsaVar(1153, I32), 11)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1153, I32), TypedSsaVar(1152, I32))
I32Set(TypedSsaVar(1154, I32), 1)
LocalSet(2, TypedSsaVar(1154, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 163 }, params: [] })

==== block BlockId { func: 9, block: 163 } ==== 
parameters: []
LocalGet(TypedSsaVar(1155, I32), 0)
I32Set(TypedSsaVar(1156, I32), 6220)
Add(TypedSsaVar(1157, I32), TypedSsaVar(1155, I32), TypedSsaVar(1156, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1158, I32), TypedSsaVar(1157, I32))
Eqz(TypedSsaVar(1159, I32), TypedSsaVar(1158, I32))
BranchIf { cond: TypedSsaVar(1159, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 165 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 166 }, params: [] } }

==== block BlockId { func: 9, block: 166 } ==== 
parameters: []
LocalGet(TypedSsaVar(1160, I32), 0)
LocalGet(TypedSsaVar(1161, I32), 0)
I32Set(TypedSsaVar(1162, I32), 4155)
Add(TypedSsaVar(1163, I32), TypedSsaVar(1161, I32), TypedSsaVar(1162, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1164, I32), TypedSsaVar(1163, I32))
I32Set(TypedSsaVar(1165, I32), 15)
And(TypedSsaVar(1166, I32), TypedSsaVar(1164, I32), Var(TypedSsaVar(1165, I32)))
Add(TypedSsaVar(1167, I32), TypedSsaVar(1160, I32), TypedSsaVar(1166, I32))
I32Set(TypedSsaVar(1168, I32), 4136)
Add(TypedSsaVar(1169, I32), TypedSsaVar(1167, I32), TypedSsaVar(1168, I32))
I32Set(TypedSsaVar(1170, I32), 12)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1170, I32), TypedSsaVar(1169, I32))
I32Set(TypedSsaVar(1171, I32), 1)
LocalSet(2, TypedSsaVar(1171, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 165 }, params: [] })

==== block BlockId { func: 9, block: 165 } ==== 
parameters: []
LocalGet(TypedSsaVar(1172, I32), 0)
I32Set(TypedSsaVar(1173, I32), 6221)
Add(TypedSsaVar(1174, I32), TypedSsaVar(1172, I32), TypedSsaVar(1173, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1175, I32), TypedSsaVar(1174, I32))
Eqz(TypedSsaVar(1176, I32), TypedSsaVar(1175, I32))
BranchIf { cond: TypedSsaVar(1176, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 167 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 168 }, params: [] } }

==== block BlockId { func: 9, block: 168 } ==== 
parameters: []
LocalGet(TypedSsaVar(1177, I32), 0)
LocalGet(TypedSsaVar(1178, I32), 0)
I32Set(TypedSsaVar(1179, I32), 4155)
Add(TypedSsaVar(1180, I32), TypedSsaVar(1178, I32), TypedSsaVar(1179, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1181, I32), TypedSsaVar(1180, I32))
I32Set(TypedSsaVar(1182, I32), 15)
And(TypedSsaVar(1183, I32), TypedSsaVar(1181, I32), Var(TypedSsaVar(1182, I32)))
Add(TypedSsaVar(1184, I32), TypedSsaVar(1177, I32), TypedSsaVar(1183, I32))
I32Set(TypedSsaVar(1185, I32), 4136)
Add(TypedSsaVar(1186, I32), TypedSsaVar(1184, I32), TypedSsaVar(1185, I32))
I32Set(TypedSsaVar(1187, I32), 13)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1187, I32), TypedSsaVar(1186, I32))
I32Set(TypedSsaVar(1188, I32), 1)
LocalSet(2, TypedSsaVar(1188, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 167 }, params: [] })

==== block BlockId { func: 9, block: 167 } ==== 
parameters: []
LocalGet(TypedSsaVar(1189, I32), 0)
I32Set(TypedSsaVar(1190, I32), 6222)
Add(TypedSsaVar(1191, I32), TypedSsaVar(1189, I32), TypedSsaVar(1190, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1192, I32), TypedSsaVar(1191, I32))
Eqz(TypedSsaVar(1193, I32), TypedSsaVar(1192, I32))
BranchIf { cond: TypedSsaVar(1193, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 169 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 170 }, params: [] } }

==== block BlockId { func: 9, block: 170 } ==== 
parameters: []
LocalGet(TypedSsaVar(1194, I32), 0)
LocalGet(TypedSsaVar(1195, I32), 0)
I32Set(TypedSsaVar(1196, I32), 4155)
Add(TypedSsaVar(1197, I32), TypedSsaVar(1195, I32), TypedSsaVar(1196, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1198, I32), TypedSsaVar(1197, I32))
I32Set(TypedSsaVar(1199, I32), 15)
And(TypedSsaVar(1200, I32), TypedSsaVar(1198, I32), Var(TypedSsaVar(1199, I32)))
Add(TypedSsaVar(1201, I32), TypedSsaVar(1194, I32), TypedSsaVar(1200, I32))
I32Set(TypedSsaVar(1202, I32), 4136)
Add(TypedSsaVar(1203, I32), TypedSsaVar(1201, I32), TypedSsaVar(1202, I32))
I32Set(TypedSsaVar(1204, I32), 14)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1204, I32), TypedSsaVar(1203, I32))
I32Set(TypedSsaVar(1205, I32), 1)
LocalSet(2, TypedSsaVar(1205, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 169 }, params: [] })

==== block BlockId { func: 9, block: 169 } ==== 
parameters: []
LocalGet(TypedSsaVar(1206, I32), 0)
I32Set(TypedSsaVar(1207, I32), 6223)
Add(TypedSsaVar(1208, I32), TypedSsaVar(1206, I32), TypedSsaVar(1207, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1209, I32), TypedSsaVar(1208, I32))
Eqz(TypedSsaVar(1210, I32), TypedSsaVar(1209, I32))
BranchIf { cond: TypedSsaVar(1210, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 172 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 173 }, params: [] } }

==== block BlockId { func: 9, block: 173 } ==== 
parameters: []
LocalGet(TypedSsaVar(1211, I32), 0)
LocalGet(TypedSsaVar(1212, I32), 0)
I32Set(TypedSsaVar(1213, I32), 4155)
Add(TypedSsaVar(1214, I32), TypedSsaVar(1212, I32), TypedSsaVar(1213, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1215, I32), TypedSsaVar(1214, I32))
I32Set(TypedSsaVar(1216, I32), 15)
And(TypedSsaVar(1217, I32), TypedSsaVar(1215, I32), Var(TypedSsaVar(1216, I32)))
Add(TypedSsaVar(1218, I32), TypedSsaVar(1211, I32), TypedSsaVar(1217, I32))
I32Set(TypedSsaVar(1219, I32), 4136)
Add(TypedSsaVar(1220, I32), TypedSsaVar(1218, I32), TypedSsaVar(1219, I32))
I32Set(TypedSsaVar(1221, I32), 15)
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(1221, I32), TypedSsaVar(1220, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 171 }, params: [] })

==== block BlockId { func: 9, block: 174 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 172 }, params: [] })

==== block BlockId { func: 9, block: 172 } ==== 
parameters: []
LocalGet(TypedSsaVar(1222, I32), 2)
Eqz(TypedSsaVar(1223, I32), TypedSsaVar(1222, I32))
BranchIf { cond: TypedSsaVar(1223, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 175 }, params: [] } }

==== block BlockId { func: 9, block: 175 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 171 }, params: [] })

==== block BlockId { func: 9, block: 171 } ==== 
parameters: []
LocalGet(TypedSsaVar(1224, I32), 0)
Load16U(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(1225, I32), TypedSsaVar(1224, I32))
I32Set(TypedSsaVar(1226, I32), 2)
Add(TypedSsaVar(1227, I32), TypedSsaVar(1225, I32), TypedSsaVar(1226, I32))
LocalSet(2, TypedSsaVar(1227, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 3 }, params: [] })

==== block BlockId { func: 9, block: 3 } ==== 
parameters: []
LocalGet(TypedSsaVar(1228, I32), 0)
LocalGet(TypedSsaVar(1229, I32), 2)
Store16(MemoryImmediate { align: 1, offset: 4152, memory: 0 }, TypedSsaVar(1229, I32), TypedSsaVar(1228, I32))
LocalGet(TypedSsaVar(1230, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 4158, memory: 0 }, TypedSsaVar(1231, I32), TypedSsaVar(1230, I32))
LocalSet(2, TypedSsaVar(1231, I32))
Eqz(TypedSsaVar(1232, I32), TypedSsaVar(1231, I32))
BranchIf { cond: TypedSsaVar(1232, I32), true_target: JumpTarget { label: BlockId { func: 9, block: 176 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 9, block: 177 }, params: [] } }

==== block BlockId { func: 9, block: 177 } ==== 
parameters: []
LocalGet(TypedSsaVar(1233, I32), 0)
LocalGet(TypedSsaVar(1234, I32), 2)
I32Set(TypedSsaVar(1235, I32), -1)
Add(TypedSsaVar(1236, I32), TypedSsaVar(1234, I32), TypedSsaVar(1235, I32))
Store8(MemoryImmediate { align: 0, offset: 4158, memory: 0 }, TypedSsaVar(1236, I32), TypedSsaVar(1233, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 176 }, params: [] })

==== block BlockId { func: 9, block: 176 } ==== 
parameters: []
LocalGet(TypedSsaVar(1237, I32), 0)
LocalGet(TypedSsaVar(1238, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 4159, memory: 0 }, TypedSsaVar(1239, I32), TypedSsaVar(1238, I32))
I32Set(TypedSsaVar(1240, I32), -1)
Add(TypedSsaVar(1241, I32), TypedSsaVar(1239, I32), TypedSsaVar(1240, I32))
Store8(MemoryImmediate { align: 0, offset: 4159, memory: 0 }, TypedSsaVar(1241, I32), TypedSsaVar(1237, I32))
Jump(JumpTarget { label: BlockId { func: 9, block: 2 }, params: [] })

==== block BlockId { func: 9, block: 2 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 9, block: 1 }, params: [] })

==== block BlockId { func: 9, block: 1 } ==== 
parameters: []
Return([])

FuncType { params: [I32, I32, I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(1, I32))])

==== block BlockId { func: 10, block: 0 } ==== 
parameters: []
I32Set(TypedSsaVar(0, I32), 0)
Jump(JumpTarget { label: BlockId { func: 10, block: 1 }, params: [TypedSsaVar(0, I32)] })

==== block BlockId { func: 10, block: 1 } ==== 
parameters: [TypedSsaVar(1, I32)]
Return([TypedSsaVar(1, I32)])

FuncType { params: [I32, I32, I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(90, I32))])

==== block BlockId { func: 11, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 2)
Eqz(TypedSsaVar(1, I32), TypedSsaVar(0, I32))
BranchIf { cond: TypedSsaVar(1, I32), true_target: JumpTarget { label: BlockId { func: 11, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 11, block: 3 }, params: [] } }

==== block BlockId { func: 11, block: 3 } ==== 
parameters: []
LocalGet(TypedSsaVar(2, I32), 2)
I32Set(TypedSsaVar(3, I32), -1)
Add(TypedSsaVar(4, I32), TypedSsaVar(2, I32), TypedSsaVar(3, I32))
LocalSet(3, TypedSsaVar(4, I32))
LocalGet(TypedSsaVar(5, I32), 2)
I32Set(TypedSsaVar(6, I32), 7)
And(TypedSsaVar(7, I32), TypedSsaVar(5, I32), Var(TypedSsaVar(6, I32)))
LocalSet(4, TypedSsaVar(7, I32))
BranchIf { cond: TypedSsaVar(7, I32), true_target: JumpTarget { label: BlockId { func: 11, block: 5 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 11, block: 6 }, params: [] } }

==== block BlockId { func: 11, block: 6 } ==== 
parameters: []
LocalGet(TypedSsaVar(8, I32), 0)
LocalSet(5, TypedSsaVar(8, I32))
Jump(JumpTarget { label: BlockId { func: 11, block: 4 }, params: [] })

==== block BlockId { func: 11, block: 7 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 11, block: 5 }, params: [] })

==== block BlockId { func: 11, block: 5 } ==== 
parameters: []
LocalGet(TypedSsaVar(9, I32), 0)
LocalSet(5, TypedSsaVar(9, I32))
Jump(JumpTarget { label: BlockId { func: 11, block: 8 }, params: [] })

==== block BlockId { func: 11, block: 8 } ==== 
parameters: []
LocalGet(TypedSsaVar(10, I32), 5)
LocalGet(TypedSsaVar(11, I32), 1)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(12, I32), TypedSsaVar(11, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(12, I32), TypedSsaVar(10, I32))
LocalGet(TypedSsaVar(13, I32), 2)
I32Set(TypedSsaVar(14, I32), -1)
Add(TypedSsaVar(15, I32), TypedSsaVar(13, I32), TypedSsaVar(14, I32))
LocalSet(2, TypedSsaVar(15, I32))
LocalGet(TypedSsaVar(16, I32), 5)
I32Set(TypedSsaVar(17, I32), 1)
Add(TypedSsaVar(18, I32), TypedSsaVar(16, I32), TypedSsaVar(17, I32))
LocalSet(5, TypedSsaVar(18, I32))
LocalGet(TypedSsaVar(19, I32), 1)
I32Set(TypedSsaVar(20, I32), 1)
Add(TypedSsaVar(21, I32), TypedSsaVar(19, I32), TypedSsaVar(20, I32))
LocalSet(1, TypedSsaVar(21, I32))
LocalGet(TypedSsaVar(22, I32), 4)
I32Set(TypedSsaVar(23, I32), -1)
Add(TypedSsaVar(24, I32), TypedSsaVar(22, I32), TypedSsaVar(23, I32))
LocalSet(4, TypedSsaVar(24, I32))
BranchIf { cond: TypedSsaVar(24, I32), true_target: JumpTarget { label: BlockId { func: 11, block: 8 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 11, block: 9 }, params: [] } }

==== block BlockId { func: 11, block: 9 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 11, block: 4 }, params: [] })

==== block BlockId { func: 11, block: 4 } ==== 
parameters: []
LocalGet(TypedSsaVar(25, I32), 3)
I32Set(TypedSsaVar(26, I32), 7)
LtU(TypedSsaVar(27, I32), TypedSsaVar(25, I32), TypedSsaVar(26, I32))
BranchIf { cond: TypedSsaVar(27, I32), true_target: JumpTarget { label: BlockId { func: 11, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 11, block: 10 }, params: [] } }

==== block BlockId { func: 11, block: 10 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 11, block: 11 }, params: [] })

==== block BlockId { func: 11, block: 11 } ==== 
parameters: []
LocalGet(TypedSsaVar(28, I32), 5)
LocalGet(TypedSsaVar(29, I32), 1)
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(30, I32), TypedSsaVar(29, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(30, I32), TypedSsaVar(28, I32))
LocalGet(TypedSsaVar(31, I32), 5)
I32Set(TypedSsaVar(32, I32), 1)
Add(TypedSsaVar(33, I32), TypedSsaVar(31, I32), TypedSsaVar(32, I32))
LocalGet(TypedSsaVar(34, I32), 1)
I32Set(TypedSsaVar(35, I32), 1)
Add(TypedSsaVar(36, I32), TypedSsaVar(34, I32), TypedSsaVar(35, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(37, I32), TypedSsaVar(36, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(37, I32), TypedSsaVar(33, I32))
LocalGet(TypedSsaVar(38, I32), 5)
I32Set(TypedSsaVar(39, I32), 2)
Add(TypedSsaVar(40, I32), TypedSsaVar(38, I32), TypedSsaVar(39, I32))
LocalGet(TypedSsaVar(41, I32), 1)
I32Set(TypedSsaVar(42, I32), 2)
Add(TypedSsaVar(43, I32), TypedSsaVar(41, I32), TypedSsaVar(42, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(44, I32), TypedSsaVar(43, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(44, I32), TypedSsaVar(40, I32))
LocalGet(TypedSsaVar(45, I32), 5)
I32Set(TypedSsaVar(46, I32), 3)
Add(TypedSsaVar(47, I32), TypedSsaVar(45, I32), TypedSsaVar(46, I32))
LocalGet(TypedSsaVar(48, I32), 1)
I32Set(TypedSsaVar(49, I32), 3)
Add(TypedSsaVar(50, I32), TypedSsaVar(48, I32), TypedSsaVar(49, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(51, I32), TypedSsaVar(50, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(51, I32), TypedSsaVar(47, I32))
LocalGet(TypedSsaVar(52, I32), 5)
I32Set(TypedSsaVar(53, I32), 4)
Add(TypedSsaVar(54, I32), TypedSsaVar(52, I32), TypedSsaVar(53, I32))
LocalGet(TypedSsaVar(55, I32), 1)
I32Set(TypedSsaVar(56, I32), 4)
Add(TypedSsaVar(57, I32), TypedSsaVar(55, I32), TypedSsaVar(56, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(58, I32), TypedSsaVar(57, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(58, I32), TypedSsaVar(54, I32))
LocalGet(TypedSsaVar(59, I32), 5)
I32Set(TypedSsaVar(60, I32), 5)
Add(TypedSsaVar(61, I32), TypedSsaVar(59, I32), TypedSsaVar(60, I32))
LocalGet(TypedSsaVar(62, I32), 1)
I32Set(TypedSsaVar(63, I32), 5)
Add(TypedSsaVar(64, I32), TypedSsaVar(62, I32), TypedSsaVar(63, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(65, I32), TypedSsaVar(64, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(65, I32), TypedSsaVar(61, I32))
LocalGet(TypedSsaVar(66, I32), 5)
I32Set(TypedSsaVar(67, I32), 6)
Add(TypedSsaVar(68, I32), TypedSsaVar(66, I32), TypedSsaVar(67, I32))
LocalGet(TypedSsaVar(69, I32), 1)
I32Set(TypedSsaVar(70, I32), 6)
Add(TypedSsaVar(71, I32), TypedSsaVar(69, I32), TypedSsaVar(70, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(72, I32), TypedSsaVar(71, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(72, I32), TypedSsaVar(68, I32))
LocalGet(TypedSsaVar(73, I32), 5)
I32Set(TypedSsaVar(74, I32), 7)
Add(TypedSsaVar(75, I32), TypedSsaVar(73, I32), TypedSsaVar(74, I32))
LocalGet(TypedSsaVar(76, I32), 1)
I32Set(TypedSsaVar(77, I32), 7)
Add(TypedSsaVar(78, I32), TypedSsaVar(76, I32), TypedSsaVar(77, I32))
Load8U(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(79, I32), TypedSsaVar(78, I32))
Store8(MemoryImmediate { align: 0, offset: 0, memory: 0 }, TypedSsaVar(79, I32), TypedSsaVar(75, I32))
LocalGet(TypedSsaVar(80, I32), 5)
I32Set(TypedSsaVar(81, I32), 8)
Add(TypedSsaVar(82, I32), TypedSsaVar(80, I32), TypedSsaVar(81, I32))
LocalSet(5, TypedSsaVar(82, I32))
LocalGet(TypedSsaVar(83, I32), 1)
I32Set(TypedSsaVar(84, I32), 8)
Add(TypedSsaVar(85, I32), TypedSsaVar(83, I32), TypedSsaVar(84, I32))
LocalSet(1, TypedSsaVar(85, I32))
LocalGet(TypedSsaVar(86, I32), 2)
I32Set(TypedSsaVar(87, I32), -8)
Add(TypedSsaVar(88, I32), TypedSsaVar(86, I32), TypedSsaVar(87, I32))
LocalSet(2, TypedSsaVar(88, I32))
BranchIf { cond: TypedSsaVar(88, I32), true_target: JumpTarget { label: BlockId { func: 11, block: 11 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 11, block: 12 }, params: [] } }

==== block BlockId { func: 11, block: 12 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 11, block: 2 }, params: [] })

==== block BlockId { func: 11, block: 2 } ==== 
parameters: []
LocalGet(TypedSsaVar(89, I32), 0)
Jump(JumpTarget { label: BlockId { func: 11, block: 1 }, params: [TypedSsaVar(89, I32)] })

==== block BlockId { func: 11, block: 1 } ==== 
parameters: [TypedSsaVar(90, I32)]
Return([TypedSsaVar(90, I32)])

FuncType { params: [I32], returns: [] }
ControlStack([])
ValueStack([])

==== block BlockId { func: 12, block: 0 } ==== 
parameters: []
I32Set(TypedSsaVar(0, I32), 1360)
Call { function_index: 7, params: [TypedSsaVar(0, I32)], returns: [TypedSsaVar(1, I32)] }
Jump(JumpTarget { label: BlockId { func: 12, block: 1 }, params: [] })

==== block BlockId { func: 12, block: 1 } ==== 
parameters: []
Return([])

FuncType { params: [], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(70, I32))])

==== block BlockId { func: 13, block: 0 } ==== 
parameters: []
I32Set(TypedSsaVar(0, I32), -20)
TurtleSetZ(TypedSsaVar(0, I32))
I32Set(TypedSsaVar(1, I32), 1360)
I32Set(TypedSsaVar(2, I32), 1024)
I32Set(TypedSsaVar(3, I32), 248)
Call { function_index: 8, params: [TypedSsaVar(1, I32), TypedSsaVar(2, I32), TypedSsaVar(3, I32)], returns: [TypedSsaVar(4, I32)] }
Eqz(TypedSsaVar(5, I32), TypedSsaVar(4, I32))
BranchIf { cond: TypedSsaVar(5, I32), true_target: JumpTarget { label: BlockId { func: 13, block: 2 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 13, block: 3 }, params: [] } }

==== block BlockId { func: 13, block: 3 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 13, block: 4 }, params: [] })

==== block BlockId { func: 13, block: 4 } ==== 
parameters: []
I32Set(TypedSsaVar(6, I32), 1360)
Call { function_index: 9, params: [TypedSsaVar(6, I32)], returns: [] }
I32Set(TypedSsaVar(7, I32), 0)
Load8U(MemoryImmediate { align: 0, offset: 7588, memory: 0 }, TypedSsaVar(8, I32), TypedSsaVar(7, I32))
Eqz(TypedSsaVar(9, I32), TypedSsaVar(8, I32))
BranchIf { cond: TypedSsaVar(9, I32), true_target: JumpTarget { label: BlockId { func: 13, block: 5 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 13, block: 6 }, params: [] } }

==== block BlockId { func: 13, block: 6 } ==== 
parameters: []
I32Set(TypedSsaVar(10, I32), 0)
LocalSet(0, TypedSsaVar(10, I32))
I32Set(TypedSsaVar(11, I32), 0)
I32Set(TypedSsaVar(12, I32), 0)
Store8(MemoryImmediate { align: 0, offset: 7588, memory: 0 }, TypedSsaVar(12, I32), TypedSsaVar(11, I32))
I32Set(TypedSsaVar(13, I32), 5524)
LocalSet(1, TypedSsaVar(13, I32))
Jump(JumpTarget { label: BlockId { func: 13, block: 7 }, params: [] })

==== block BlockId { func: 13, block: 7 } ==== 
parameters: []
LocalGet(TypedSsaVar(14, I32), 0)
TurtleSetY(TypedSsaVar(14, I32))
I32Set(TypedSsaVar(15, I32), 0)
LocalSet(2, TypedSsaVar(15, I32))
Jump(JumpTarget { label: BlockId { func: 13, block: 8 }, params: [] })

==== block BlockId { func: 13, block: 8 } ==== 
parameters: []
LocalGet(TypedSsaVar(16, I32), 1)
LocalGet(TypedSsaVar(17, I32), 2)
Add(TypedSsaVar(18, I32), TypedSsaVar(16, I32), TypedSsaVar(17, I32))
Load32S(MemoryImmediate { align: 2, offset: 0, memory: 0 }, TypedSsaVar(19, I32), TypedSsaVar(18, I32))
LocalSet(3, TypedSsaVar(19, I32))
LocalGet(TypedSsaVar(20, I32), 2)
TurtleSetX(TypedSsaVar(20, I32))
I32Set(TypedSsaVar(21, I32), 1)
I32Set(TypedSsaVar(22, I32), 5)
LocalGet(TypedSsaVar(23, I32), 3)
I32Set(TypedSsaVar(24, I32), 1)
And(TypedSsaVar(25, I32), TypedSsaVar(23, I32), Var(TypedSsaVar(24, I32)))
Select { dst: TypedSsaVar(26, I32), true_var: TypedSsaVar(21, I32), false_var: TypedSsaVar(22, I32), cond: TypedSsaVar(25, I32) }
TurtleSetBlock(TypedSsaVar(26, I32))
LocalGet(TypedSsaVar(27, I32), 2)
I32Set(TypedSsaVar(28, I32), 1)
Add(TypedSsaVar(29, I32), TypedSsaVar(27, I32), TypedSsaVar(28, I32))
TurtleSetX(TypedSsaVar(29, I32))
I32Set(TypedSsaVar(30, I32), 1)
I32Set(TypedSsaVar(31, I32), 5)
LocalGet(TypedSsaVar(32, I32), 3)
I32Set(TypedSsaVar(33, I32), 256)
And(TypedSsaVar(34, I32), TypedSsaVar(32, I32), Var(TypedSsaVar(33, I32)))
Select { dst: TypedSsaVar(35, I32), true_var: TypedSsaVar(30, I32), false_var: TypedSsaVar(31, I32), cond: TypedSsaVar(34, I32) }
TurtleSetBlock(TypedSsaVar(35, I32))
LocalGet(TypedSsaVar(36, I32), 2)
I32Set(TypedSsaVar(37, I32), 2)
Add(TypedSsaVar(38, I32), TypedSsaVar(36, I32), TypedSsaVar(37, I32))
TurtleSetX(TypedSsaVar(38, I32))
I32Set(TypedSsaVar(39, I32), 1)
I32Set(TypedSsaVar(40, I32), 5)
LocalGet(TypedSsaVar(41, I32), 3)
I32Set(TypedSsaVar(42, I32), 65536)
And(TypedSsaVar(43, I32), TypedSsaVar(41, I32), Var(TypedSsaVar(42, I32)))
Select { dst: TypedSsaVar(44, I32), true_var: TypedSsaVar(39, I32), false_var: TypedSsaVar(40, I32), cond: TypedSsaVar(43, I32) }
TurtleSetBlock(TypedSsaVar(44, I32))
LocalGet(TypedSsaVar(45, I32), 2)
I32Set(TypedSsaVar(46, I32), 3)
Add(TypedSsaVar(47, I32), TypedSsaVar(45, I32), TypedSsaVar(46, I32))
TurtleSetX(TypedSsaVar(47, I32))
I32Set(TypedSsaVar(48, I32), 1)
I32Set(TypedSsaVar(49, I32), 5)
LocalGet(TypedSsaVar(50, I32), 3)
I32Set(TypedSsaVar(51, I32), 16777216)
And(TypedSsaVar(52, I32), TypedSsaVar(50, I32), Var(TypedSsaVar(51, I32)))
Select { dst: TypedSsaVar(53, I32), true_var: TypedSsaVar(48, I32), false_var: TypedSsaVar(49, I32), cond: TypedSsaVar(52, I32) }
TurtleSetBlock(TypedSsaVar(53, I32))
LocalGet(TypedSsaVar(54, I32), 2)
I32Set(TypedSsaVar(55, I32), 60)
LtU(TypedSsaVar(56, I32), TypedSsaVar(54, I32), TypedSsaVar(55, I32))
LocalSet(3, TypedSsaVar(56, I32))
LocalGet(TypedSsaVar(57, I32), 2)
I32Set(TypedSsaVar(58, I32), 4)
Add(TypedSsaVar(59, I32), TypedSsaVar(57, I32), TypedSsaVar(58, I32))
LocalSet(2, TypedSsaVar(59, I32))
LocalGet(TypedSsaVar(60, I32), 3)
BranchIf { cond: TypedSsaVar(60, I32), true_target: JumpTarget { label: BlockId { func: 13, block: 8 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 13, block: 9 }, params: [] } }

==== block BlockId { func: 13, block: 9 } ==== 
parameters: []
LocalGet(TypedSsaVar(61, I32), 1)
I32Set(TypedSsaVar(62, I32), 64)
Add(TypedSsaVar(63, I32), TypedSsaVar(61, I32), TypedSsaVar(62, I32))
LocalSet(1, TypedSsaVar(63, I32))
LocalGet(TypedSsaVar(64, I32), 0)
I32Set(TypedSsaVar(65, I32), 1)
Add(TypedSsaVar(66, I32), TypedSsaVar(64, I32), TypedSsaVar(65, I32))
LocalSet(0, TypedSsaVar(66, I32))
I32Set(TypedSsaVar(67, I32), 32)
Ne(TypedSsaVar(68, I32), TypedSsaVar(66, I32), TypedSsaVar(67, I32))
BranchIf { cond: TypedSsaVar(68, I32), true_target: JumpTarget { label: BlockId { func: 13, block: 7 }, params: [] }, false_target: JumpTarget { label: BlockId { func: 13, block: 10 }, params: [] } }

==== block BlockId { func: 13, block: 10 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 13, block: 5 }, params: [] })

==== block BlockId { func: 13, block: 5 } ==== 
parameters: []
ScheduleJump(JumpTarget { label: BlockId { func: 13, block: 11 }, params: [] }, 1)

==== block BlockId { func: 13, block: 11 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 13, block: 4 }, params: [] })

==== block BlockId { func: 13, block: 12 } ==== 
parameters: []
Jump(JumpTarget { label: BlockId { func: 13, block: 2 }, params: [] })

==== block BlockId { func: 13, block: 2 } ==== 
parameters: []
I32Set(TypedSsaVar(69, I32), 2)
Jump(JumpTarget { label: BlockId { func: 13, block: 1 }, params: [TypedSsaVar(69, I32)] })

==== block BlockId { func: 13, block: 1 } ==== 
parameters: [TypedSsaVar(70, I32)]
Return([TypedSsaVar(70, I32)])

FuncType { params: [], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(2, I32))])

==== block BlockId { func: 14, block: 0 } ==== 
parameters: []
Call { function_index: 13, params: [], returns: [TypedSsaVar(0, I32)] }
I32Set(TypedSsaVar(1, I32), 2)
Jump(JumpTarget { label: BlockId { func: 14, block: 1 }, params: [TypedSsaVar(1, I32)] })

==== block BlockId { func: 14, block: 1 } ==== 
parameters: [TypedSsaVar(2, I32)]
Return([TypedSsaVar(2, I32)])

FuncType { params: [], returns: [] }
ControlStack([])
ValueStack([])

==== block BlockId { func: 15, block: 0 } ==== 
parameters: []
I32Set(TypedSsaVar(0, I32), 1360)
Call { function_index: 6, params: [TypedSsaVar(0, I32)], returns: [TypedSsaVar(1, I32)] }
I32Set(TypedSsaVar(2, I32), 1)
I32Set(TypedSsaVar(3, I32), 0)
I32Set(TypedSsaVar(4, I32), 1024)
Call { function_index: 16, params: [TypedSsaVar(2, I32), TypedSsaVar(3, I32), TypedSsaVar(4, I32)], returns: [TypedSsaVar(5, I32)] }
Jump(JumpTarget { label: BlockId { func: 15, block: 1 }, params: [] })

==== block BlockId { func: 15, block: 1 } ==== 
parameters: []
Return([])

FuncType { params: [I32, I32, I32], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(4, I32))])

==== block BlockId { func: 16, block: 0 } ==== 
parameters: []
LocalGet(TypedSsaVar(0, I32), 0)
LocalGet(TypedSsaVar(1, I32), 1)
LocalGet(TypedSsaVar(2, I32), 2)
Call { function_index: 10, params: [TypedSsaVar(0, I32), TypedSsaVar(1, I32), TypedSsaVar(2, I32)], returns: [TypedSsaVar(3, I32)] }
Jump(JumpTarget { label: BlockId { func: 16, block: 1 }, params: [TypedSsaVar(3, I32)] })

==== block BlockId { func: 16, block: 1 } ==== 
parameters: [TypedSsaVar(4, I32)]
Return([TypedSsaVar(4, I32)])

FuncType { params: [], returns: [I32] }
ControlStack([])
ValueStack([Known(TypedSsaVar(1, I32))])

==== block BlockId { func: 17, block: 0 } ==== 
parameters: []
Call { function_index: 5, params: [], returns: [] }
Call { function_index: 14, params: [], returns: [TypedSsaVar(0, I32)] }
Jump(JumpTarget { label: BlockId { func: 17, block: 1 }, params: [TypedSsaVar(0, I32)] })

==== block BlockId { func: 17, block: 1 } ==== 
parameters: [TypedSsaVar(1, I32)]
Return([TypedSsaVar(1, I32)])

new_idom is now BlockId { func: 5, block: 0 }
new_idom is now BlockId { func: 6, block: 0 }
new_idom is now BlockId { func: 7, block: 0 }
new_idom is now BlockId { func: 8, block: 0 }
new_idom is now BlockId { func: 8, block: 3 }
new_idom is now BlockId { func: 8, block: 4 }
new_idom is now BlockId { func: 8, block: 0 }
new_idom is now BlockId { func: 8, block: 2 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 117 }
new_idom is now BlockId { func: 9, block: 141 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 123 }
new_idom is now BlockId { func: 9, block: 123 }
new_idom is now BlockId { func: 9, block: 132 }
new_idom is now BlockId { func: 9, block: 132 }
new_idom is now BlockId { func: 9, block: 132 }
new_idom is now BlockId { func: 9, block: 4 }
new_idom is now BlockId { func: 9, block: 4 }
new_idom is now BlockId { func: 9, block: 145 }
new_idom is now BlockId { func: 9, block: 145 }
new_idom is now BlockId { func: 9, block: 147 }
new_idom is now BlockId { func: 9, block: 147 }
new_idom is now BlockId { func: 9, block: 149 }
new_idom is now BlockId { func: 9, block: 149 }
new_idom is now BlockId { func: 9, block: 151 }
new_idom is now BlockId { func: 9, block: 151 }
new_idom is now BlockId { func: 9, block: 153 }
new_idom is now BlockId { func: 9, block: 153 }
new_idom is now BlockId { func: 9, block: 155 }
new_idom is now BlockId { func: 9, block: 155 }
new_idom is now BlockId { func: 9, block: 157 }
new_idom is now BlockId { func: 9, block: 157 }
new_idom is now BlockId { func: 9, block: 159 }
new_idom is now BlockId { func: 9, block: 159 }
new_idom is now BlockId { func: 9, block: 161 }
new_idom is now BlockId { func: 9, block: 161 }
new_idom is now BlockId { func: 9, block: 163 }
new_idom is now BlockId { func: 9, block: 163 }
new_idom is now BlockId { func: 9, block: 165 }
new_idom is now BlockId { func: 9, block: 165 }
new_idom is now BlockId { func: 9, block: 167 }
new_idom is now BlockId { func: 9, block: 167 }
new_idom is now BlockId { func: 9, block: 169 }
new_idom is now BlockId { func: 9, block: 169 }
new_idom is now BlockId { func: 9, block: 172 }
new_idom is now BlockId { func: 9, block: 169 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 7 }
new_idom is now BlockId { func: 9, block: 125 }
new_idom is now BlockId { func: 9, block: 127 }
new_idom is now BlockId { func: 9, block: 128 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 8 }
new_idom is now BlockId { func: 9, block: 106 }
new_idom is now BlockId { func: 9, block: 106 }
new_idom is now BlockId { func: 9, block: 8 }
new_idom is now BlockId { func: 9, block: 107 }
new_idom is now BlockId { func: 9, block: 107 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 9 }
new_idom is now BlockId { func: 9, block: 70 }
new_idom is now BlockId { func: 9, block: 71 }
new_idom is now BlockId { func: 9, block: 73 }
new_idom is now BlockId { func: 9, block: 73 }
new_idom is now BlockId { func: 9, block: 71 }
new_idom is now BlockId { func: 9, block: 72 }
new_idom is now BlockId { func: 9, block: 77 }
new_idom is now BlockId { func: 9, block: 77 }
new_idom is now BlockId { func: 9, block: 72 }
new_idom is now BlockId { func: 9, block: 76 }
new_idom is now BlockId { func: 9, block: 81 }
new_idom is now BlockId { func: 9, block: 81 }
new_idom is now BlockId { func: 9, block: 76 }
new_idom is now BlockId { func: 9, block: 80 }
new_idom is now BlockId { func: 9, block: 85 }
new_idom is now BlockId { func: 9, block: 85 }
new_idom is now BlockId { func: 9, block: 80 }
new_idom is now BlockId { func: 9, block: 84 }
new_idom is now BlockId { func: 9, block: 89 }
new_idom is now BlockId { func: 9, block: 89 }
new_idom is now BlockId { func: 9, block: 84 }
new_idom is now BlockId { func: 9, block: 88 }
new_idom is now BlockId { func: 9, block: 93 }
new_idom is now BlockId { func: 9, block: 93 }
new_idom is now BlockId { func: 9, block: 88 }
new_idom is now BlockId { func: 9, block: 92 }
new_idom is now BlockId { func: 9, block: 97 }
new_idom is now BlockId { func: 9, block: 97 }
new_idom is now BlockId { func: 9, block: 92 }
new_idom is now BlockId { func: 9, block: 96 }
new_idom is now BlockId { func: 9, block: 101 }
new_idom is now BlockId { func: 9, block: 101 }
new_idom is now BlockId { func: 9, block: 96 }
new_idom is now BlockId { func: 9, block: 100 }
new_idom is now BlockId { func: 9, block: 9 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 13 }
new_idom is now BlockId { func: 9, block: 13 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 14 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 17 }
new_idom is now BlockId { func: 9, block: 17 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 18 }
new_idom is now BlockId { func: 9, block: 18 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 19 }
new_idom is now BlockId { func: 9, block: 19 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 22 }
new_idom is now BlockId { func: 9, block: 22 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 3 }
new_idom is now BlockId { func: 9, block: 3 }
new_idom is now BlockId { func: 9, block: 0 }
new_idom is now BlockId { func: 9, block: 2 }
new_idom is now BlockId { func: 10, block: 0 }
new_idom is now BlockId { func: 11, block: 0 }
new_idom is now BlockId { func: 11, block: 3 }
new_idom is now BlockId { func: 11, block: 3 }
new_idom is now BlockId { func: 11, block: 5 }
new_idom is now BlockId { func: 11, block: 8 }
new_idom is now BlockId { func: 11, block: 3 }
new_idom is now BlockId { func: 11, block: 4 }
new_idom is now BlockId { func: 11, block: 10 }
new_idom is now BlockId { func: 11, block: 11 }
new_idom is now BlockId { func: 11, block: 0 }
new_idom is now BlockId { func: 11, block: 2 }
new_idom is now BlockId { func: 12, block: 0 }
new_idom is now BlockId { func: 13, block: 0 }
new_idom is now BlockId { func: 13, block: 3 }
new_idom is now BlockId { func: 13, block: 4 }
new_idom is now BlockId { func: 13, block: 6 }
new_idom is now BlockId { func: 13, block: 7 }
new_idom is now BlockId { func: 13, block: 8 }
new_idom is now BlockId { func: 13, block: 9 }
new_idom is now BlockId { func: 13, block: 4 }
new_idom is now BlockId { func: 13, block: 5 }
new_idom is now BlockId { func: 13, block: 0 }
new_idom is now BlockId { func: 13, block: 2 }
new_idom is now BlockId { func: 14, block: 0 }
new_idom is now BlockId { func: 15, block: 0 }
new_idom is now BlockId { func: 16, block: 0 }
new_idom is now BlockId { func: 17, block: 0 }
==== func 0 ==== 
-- block BlockId { func: 5, block: 0 } --
PushLocalFrame([])
Push([])
PushReturnAddr(BlockId { func: 5, block: 2 })
Jump(BlockId { func: 15, block: 0 })
-- block BlockId { func: 5, block: 2 } --
Pop([])
Jump(BlockId { func: 5, block: 1 })
-- block BlockId { func: 5, block: 1 } --
PopLocalFrame([])
ReturnToSaved
==== func 1 ==== 
-- block BlockId { func: 6, block: 0 } --
PushLocalFrame([I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalGet(Register { double: Work(6, 0), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(6, 0), half: Lo })
Assign(Register { double: Work(6, 1), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 6, block: 1 })
-- block BlockId { func: 6, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(6, 1), half: Lo })
PopLocalFrame([I32])
ReturnToSaved
==== func 2 ==== 
-- block BlockId { func: 7, block: 0 } --
PushLocalFrame([I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalGet(Register { double: Work(7, 0), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(7, 0), half: Lo })
Assign(Register { double: Work(7, 1), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 7, block: 1 })
-- block BlockId { func: 7, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(7, 1), half: Lo })
PopLocalFrame([I32])
ReturnToSaved
==== func 3 ==== 
-- block BlockId { func: 8, block: 0 } --
PushLocalFrame([I32, I32, I32, I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalSet(1, Lo, Register { double: Param(1), half: Lo })
LocalSet(2, Lo, Register { double: Param(2), half: Lo })
LocalSet(3, Lo, Register { double: Const(0), half: Lo })
LocalGet(Register { double: Work(8, 0), half: Lo }, 0, Lo)
Set(Register { double: Work(8, 1), half: Lo }, 512)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(8, 0), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Store16(Register { double: Work(8, 1), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(8, 2), half: Lo }, 0, Lo)
Set(Register { double: Work(8, 3), half: Lo }, 40)
Assign(Register { double: Work(8, 4), half: Lo }, Register { double: Work(8, 2), half: Lo })
Add(Register { double: Work(8, 4), half: Lo }, Register { double: Work(8, 3), half: Lo })
Set(Register { double: Work(8, 5), half: Lo }, 1280)
Set(Register { double: Work(8, 6), half: Lo }, 80)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(8, 4), half: Lo })
Assign(Register { double: Param(1), half: Lo }, Register { double: Work(8, 5), half: Lo })
Assign(Register { double: Param(2), half: Lo }, Register { double: Work(8, 6), half: Lo })
Push([Register { double: Work(8, 3), half: Lo }, Register { double: Work(8, 4), half: Lo }, Register { double: Work(8, 5), half: Lo }, Register { double: Work(8, 1), half: Lo }, Register { double: Work(8, 6), half: Lo }, Register { double: Work(8, 0), half: Lo }, Register { double: Work(8, 2), half: Lo }])
PushReturnAddr(BlockId { func: 8, block: 6 })
Jump(BlockId { func: 11, block: 0 })
-- block BlockId { func: 8, block: 6 } --
Pop([Register { double: Work(8, 3), half: Lo }, Register { double: Work(8, 4), half: Lo }, Register { double: Work(8, 5), half: Lo }, Register { double: Work(8, 1), half: Lo }, Register { double: Work(8, 6), half: Lo }, Register { double: Work(8, 0), half: Lo }, Register { double: Work(8, 2), half: Lo }])
Assign(Register { double: Work(8, 7), half: Lo }, Register { double: Return(0), half: Lo })
LocalGet(Register { double: Work(8, 8), half: Lo }, 2, Lo)
Set(Register { double: Work(8, 9), half: Lo }, -1)
Assign(Register { double: Work(8, 10), half: Lo }, Register { double: Work(8, 8), half: Lo })
Add(Register { double: Work(8, 10), half: Lo }, Register { double: Work(8, 9), half: Lo })
Set(Register { double: Work(8, 11), half: Lo }, 3582)
GtU(Register { double: Work(8, 12), half: Lo }, Register { double: Work(8, 10), half: Lo }, Register { double: Work(8, 11), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 8, block: 2 }, false_label: BlockId { func: 8, block: 3 }, cond: Register { double: Work(8, 12), half: Lo } }
-- block BlockId { func: 8, block: 3 } --
LocalGet(Register { double: Work(8, 13), half: Lo }, 2, Lo)
Set(Register { double: Work(8, 14), half: Lo }, 4)
Assign(Register { double: Work(8, 15), half: Lo }, Register { double: Work(8, 13), half: Lo })
Add(Register { double: Work(8, 15), half: Lo }, Register { double: Work(8, 14), half: Lo })
LocalSet(3, Lo, Register { double: Work(8, 15), half: Lo })
LocalGet(Register { double: Work(8, 16), half: Lo }, 0, Lo)
Set(Register { double: Work(8, 17), half: Lo }, 552)
Assign(Register { double: Work(8, 18), half: Lo }, Register { double: Work(8, 16), half: Lo })
Add(Register { double: Work(8, 18), half: Lo }, Register { double: Work(8, 17), half: Lo })
LocalSet(0, Lo, Register { double: Work(8, 18), half: Lo })
Jump(BlockId { func: 8, block: 4 })
-- block BlockId { func: 8, block: 4 } --
LocalGet(Register { double: Work(8, 19), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(8, 20), half: Lo }, 1, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(8, 20), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load32(Register { double: Work(8, 21), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(8, 19), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store32(Register { double: Work(8, 21), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(8, 22), half: Lo }, 0, Lo)
Set(Register { double: Work(8, 23), half: Lo }, 4)
Assign(Register { double: Work(8, 24), half: Lo }, Register { double: Work(8, 22), half: Lo })
Add(Register { double: Work(8, 24), half: Lo }, Register { double: Work(8, 23), half: Lo })
LocalSet(0, Lo, Register { double: Work(8, 24), half: Lo })
LocalGet(Register { double: Work(8, 25), half: Lo }, 1, Lo)
Set(Register { double: Work(8, 26), half: Lo }, 4)
Assign(Register { double: Work(8, 27), half: Lo }, Register { double: Work(8, 25), half: Lo })
Add(Register { double: Work(8, 27), half: Lo }, Register { double: Work(8, 26), half: Lo })
LocalSet(1, Lo, Register { double: Work(8, 27), half: Lo })
LocalGet(Register { double: Work(8, 28), half: Lo }, 3, Lo)
Set(Register { double: Work(8, 29), half: Lo }, -4)
Assign(Register { double: Work(8, 30), half: Lo }, Register { double: Work(8, 28), half: Lo })
Add(Register { double: Work(8, 30), half: Lo }, Register { double: Work(8, 29), half: Lo })
LocalSet(3, Lo, Register { double: Work(8, 30), half: Lo })
Set(Register { double: Work(8, 31), half: Lo }, 4)
GtS(Register { double: Work(8, 32), half: Lo }, Register { double: Work(8, 30), half: Lo }, Register { double: Work(8, 31), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 8, block: 4 }, false_label: BlockId { func: 8, block: 5 }, cond: Register { double: Work(8, 32), half: Lo } }
-- block BlockId { func: 8, block: 5 } --
Jump(BlockId { func: 8, block: 2 })
-- block BlockId { func: 8, block: 2 } --
LocalGet(Register { double: Work(8, 33), half: Lo }, 2, Lo)
Set(Register { double: Work(8, 34), half: Lo }, 3584)
LtS(Register { double: Work(8, 35), half: Lo }, Register { double: Work(8, 33), half: Lo }, Register { double: Work(8, 34), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(8, 35), half: Lo })
Assign(Register { double: Work(8, 36), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 8, block: 1 })
-- block BlockId { func: 8, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(8, 36), half: Lo })
PopLocalFrame([I32, I32, I32, I32])
ReturnToSaved
==== func 4 ==== 
-- block BlockId { func: 9, block: 0 } --
PushLocalFrame([I32, I32, I32, I32, I32, I32, I32, I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalSet(1, Lo, Register { double: Const(0), half: Lo })
LocalSet(2, Lo, Register { double: Const(0), half: Lo })
LocalSet(3, Lo, Register { double: Const(0), half: Lo })
LocalSet(4, Lo, Register { double: Const(0), half: Lo })
LocalSet(5, Lo, Register { double: Const(0), half: Lo })
LocalSet(6, Lo, Register { double: Const(0), half: Lo })
LocalSet(7, Lo, Register { double: Const(0), half: Lo })
LocalGet(Register { double: Work(9, 0), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 2), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 2), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 3), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(1, Lo, Register { double: Work(9, 3), half: Lo })
Assign(Register { double: Work(9, 4), half: Lo }, Register { double: Work(9, 1), half: Lo })
Add(Register { double: Work(9, 4), half: Lo }, Register { double: Work(9, 3), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 4), half: Lo })
Set(Register { double: Work(9, 5), half: Lo }, 40)
Assign(Register { double: Work(9, 6), half: Lo }, Register { double: Work(9, 4), half: Lo })
Add(Register { double: Work(9, 6), half: Lo }, Register { double: Work(9, 5), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 6), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 7), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 7), half: Lo })
Set(Register { double: Work(9, 8), half: Lo }, 8)
Shl(Register { double: Work(9, 9), half: Lo }, Register { double: Work(9, 7), half: Lo }, Register { double: Work(9, 8), half: Lo })
LocalGet(Register { double: Work(9, 10), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 11), half: Lo }, 41)
Assign(Register { double: Work(9, 12), half: Lo }, Register { double: Work(9, 10), half: Lo })
Add(Register { double: Work(9, 12), half: Lo }, Register { double: Work(9, 11), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 12), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 13), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 13), half: Lo })
Or(Register { double: Work(9, 14), half: Lo }, Register { double: Work(9, 9), half: Lo }, Register { double: Work(9, 13), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 14), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 0), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4154), half: Lo })
Store16(Register { double: Work(9, 14), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 15), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 16), half: Lo }, 12)
ShrU(Register { double: Work(9, 17), half: Lo }, Register { double: Work(9, 15), half: Lo }, Register { double: Work(9, 16), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpTable { arms: [Some(BlockId { func: 9, block: 22 }), Some(BlockId { func: 9, block: 21 }), Some(BlockId { func: 9, block: 20 }), Some(BlockId { func: 9, block: 19 }), Some(BlockId { func: 9, block: 18 }), Some(BlockId { func: 9, block: 17 }), Some(BlockId { func: 9, block: 16 }), Some(BlockId { func: 9, block: 15 }), Some(BlockId { func: 9, block: 14 }), Some(BlockId { func: 9, block: 13 }), Some(BlockId { func: 9, block: 12 }), Some(BlockId { func: 9, block: 11 }), Some(BlockId { func: 9, block: 10 }), Some(BlockId { func: 9, block: 9 }), Some(BlockId { func: 9, block: 8 }), Some(BlockId { func: 9, block: 7 })], default: Some(BlockId { func: 9, block: 22 }), cond: Register { double: Work(9, 17), half: Lo } }
-- block BlockId { func: 9, block: 23 } --
Jump(BlockId { func: 9, block: 22 })
-- block BlockId { func: 9, block: 22 } --
LocalGet(Register { double: Work(9, 18), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 19), half: Lo }, 15)
And(Register { double: Work(9, 20), half: Lo }, Register { double: Work(9, 18), half: Lo }, Const(15))
Set(Register { double: CondTaken, half: Lo }, 0)
JumpTable { arms: [Some(BlockId { func: 9, block: 6 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 24 })], default: Some(BlockId { func: 9, block: 2 }), cond: Register { double: Work(9, 20), half: Lo } }
-- block BlockId { func: 9, block: 25 } --
Jump(BlockId { func: 9, block: 24 })
-- block BlockId { func: 9, block: 24 } --
LocalGet(Register { double: Work(9, 21), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 22), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 22), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(32), half: Lo })
Load16(Register { double: Work(9, 23), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 24), half: Lo }, -1)
Assign(Register { double: Work(9, 25), half: Lo }, Register { double: Work(9, 23), half: Lo })
Add(Register { double: Work(9, 25), half: Lo }, Register { double: Work(9, 24), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 25), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 21), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(32), half: Lo })
Store16(Register { double: Work(9, 25), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 26), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 27), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 28), half: Lo }, 65535)
And(Register { double: Work(9, 29), half: Lo }, Register { double: Work(9, 27), half: Lo }, Const(65535))
Set(Register { double: Work(9, 30), half: Lo }, 1)
Shl(Register { double: Work(9, 31), half: Lo }, Register { double: Work(9, 29), half: Lo }, Register { double: Work(9, 30), half: Lo })
Assign(Register { double: Work(9, 32), half: Lo }, Register { double: Work(9, 26), half: Lo })
Add(Register { double: Work(9, 32), half: Lo }, Register { double: Work(9, 31), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 32), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load16(Register { double: Work(9, 33), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 34), half: Lo }, 2)
Assign(Register { double: Work(9, 35), half: Lo }, Register { double: Work(9, 33), half: Lo })
Add(Register { double: Work(9, 35), half: Lo }, Register { double: Work(9, 34), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 35), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 26 } --
Jump(BlockId { func: 9, block: 21 })
-- block BlockId { func: 9, block: 21 } --
LocalGet(Register { double: Work(9, 36), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 37), half: Lo }, 4095)
And(Register { double: Work(9, 38), half: Lo }, Register { double: Work(9, 36), half: Lo }, Const(4095))
LocalSet(2, Lo, Register { double: Work(9, 38), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 27 } --
Jump(BlockId { func: 9, block: 20 })
-- block BlockId { func: 9, block: 20 } --
LocalGet(Register { double: Work(9, 39), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 40), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 40), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(32), half: Lo })
Load16(Register { double: Work(9, 41), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 42), half: Lo }, 1)
Shl(Register { double: Work(9, 43), half: Lo }, Register { double: Work(9, 41), half: Lo }, Register { double: Work(9, 42), half: Lo })
Assign(Register { double: Work(9, 44), half: Lo }, Register { double: Work(9, 39), half: Lo })
Add(Register { double: Work(9, 44), half: Lo }, Register { double: Work(9, 43), half: Lo })
LocalGet(Register { double: Work(9, 45), half: Lo }, 1, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 44), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store16(Register { double: Work(9, 45), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 46), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 47), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 47), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(32), half: Lo })
Load16(Register { double: Work(9, 48), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 49), half: Lo }, 1)
Assign(Register { double: Work(9, 50), half: Lo }, Register { double: Work(9, 48), half: Lo })
Add(Register { double: Work(9, 50), half: Lo }, Register { double: Work(9, 49), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 46), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(32), half: Lo })
Store16(Register { double: Work(9, 50), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 51), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 51), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4154), half: Lo })
Load16(Register { double: Work(9, 52), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 53), half: Lo }, 4095)
And(Register { double: Work(9, 54), half: Lo }, Register { double: Work(9, 52), half: Lo }, Const(4095))
LocalSet(2, Lo, Register { double: Work(9, 54), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 28 } --
Jump(BlockId { func: 9, block: 19 })
-- block BlockId { func: 9, block: 19 } --
LocalGet(Register { double: Work(9, 55), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 56), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 57), half: Lo }, 8)
ShrU(Register { double: Work(9, 58), half: Lo }, Register { double: Work(9, 56), half: Lo }, Register { double: Work(9, 57), half: Lo })
Set(Register { double: Work(9, 59), half: Lo }, 15)
And(Register { double: Work(9, 60), half: Lo }, Register { double: Work(9, 58), half: Lo }, Const(15))
Assign(Register { double: Work(9, 61), half: Lo }, Register { double: Work(9, 55), half: Lo })
Add(Register { double: Work(9, 61), half: Lo }, Register { double: Work(9, 60), half: Lo })
Set(Register { double: Work(9, 62), half: Lo }, 4136)
Assign(Register { double: Work(9, 63), half: Lo }, Register { double: Work(9, 61), half: Lo })
Add(Register { double: Work(9, 63), half: Lo }, Register { double: Work(9, 62), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 63), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 64), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 65), half: Lo }, 4, Lo)
Ne(Register { double: Work(9, 66), half: Lo }, Register { double: Work(9, 64), half: Lo }, Register { double: Work(9, 65), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 29 }, false_label: BlockId { func: 9, block: 30 }, cond: Register { double: Work(9, 66), half: Lo } }
-- block BlockId { func: 9, block: 30 } --
LocalGet(Register { double: Work(9, 67), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 68), half: Lo }, 4)
Assign(Register { double: Work(9, 69), half: Lo }, Register { double: Work(9, 67), half: Lo })
Add(Register { double: Work(9, 69), half: Lo }, Register { double: Work(9, 68), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 69), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 31 } --
Jump(BlockId { func: 9, block: 29 })
-- block BlockId { func: 9, block: 29 } --
LocalGet(Register { double: Work(9, 70), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 71), half: Lo }, 2)
Assign(Register { double: Work(9, 72), half: Lo }, Register { double: Work(9, 70), half: Lo })
Add(Register { double: Work(9, 72), half: Lo }, Register { double: Work(9, 71), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 72), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 32 } --
Jump(BlockId { func: 9, block: 18 })
-- block BlockId { func: 9, block: 18 } --
LocalGet(Register { double: Work(9, 73), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 74), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 75), half: Lo }, 8)
ShrU(Register { double: Work(9, 76), half: Lo }, Register { double: Work(9, 74), half: Lo }, Register { double: Work(9, 75), half: Lo })
Set(Register { double: Work(9, 77), half: Lo }, 15)
And(Register { double: Work(9, 78), half: Lo }, Register { double: Work(9, 76), half: Lo }, Const(15))
Assign(Register { double: Work(9, 79), half: Lo }, Register { double: Work(9, 73), half: Lo })
Add(Register { double: Work(9, 79), half: Lo }, Register { double: Work(9, 78), half: Lo })
Set(Register { double: Work(9, 80), half: Lo }, 4136)
Assign(Register { double: Work(9, 81), half: Lo }, Register { double: Work(9, 79), half: Lo })
Add(Register { double: Work(9, 81), half: Lo }, Register { double: Work(9, 80), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 81), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 82), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 83), half: Lo }, 4, Lo)
Eq(Register { double: Work(9, 84), half: Lo }, Register { double: Work(9, 82), half: Lo }, Register { double: Work(9, 83), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 33 }, false_label: BlockId { func: 9, block: 34 }, cond: Register { double: Work(9, 84), half: Lo } }
-- block BlockId { func: 9, block: 34 } --
LocalGet(Register { double: Work(9, 85), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 86), half: Lo }, 4)
Assign(Register { double: Work(9, 87), half: Lo }, Register { double: Work(9, 85), half: Lo })
Add(Register { double: Work(9, 87), half: Lo }, Register { double: Work(9, 86), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 87), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 35 } --
Jump(BlockId { func: 9, block: 33 })
-- block BlockId { func: 9, block: 33 } --
LocalGet(Register { double: Work(9, 88), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 89), half: Lo }, 2)
Assign(Register { double: Work(9, 90), half: Lo }, Register { double: Work(9, 88), half: Lo })
Add(Register { double: Work(9, 90), half: Lo }, Register { double: Work(9, 89), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 90), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 36 } --
Jump(BlockId { func: 9, block: 17 })
-- block BlockId { func: 9, block: 17 } --
LocalGet(Register { double: Work(9, 91), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 92), half: Lo }, 4136)
Assign(Register { double: Work(9, 93), half: Lo }, Register { double: Work(9, 91), half: Lo })
Add(Register { double: Work(9, 93), half: Lo }, Register { double: Work(9, 92), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 93), half: Lo })
LocalGet(Register { double: Work(9, 94), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 95), half: Lo }, 8)
ShrU(Register { double: Work(9, 96), half: Lo }, Register { double: Work(9, 94), half: Lo }, Register { double: Work(9, 95), half: Lo })
Set(Register { double: Work(9, 97), half: Lo }, 15)
And(Register { double: Work(9, 98), half: Lo }, Register { double: Work(9, 96), half: Lo }, Const(15))
Assign(Register { double: Work(9, 99), half: Lo }, Register { double: Work(9, 93), half: Lo })
Add(Register { double: Work(9, 99), half: Lo }, Register { double: Work(9, 98), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 99), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 100), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 101), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 102), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 103), half: Lo }, 4)
ShrU(Register { double: Work(9, 104), half: Lo }, Register { double: Work(9, 102), half: Lo }, Register { double: Work(9, 103), half: Lo })
Set(Register { double: Work(9, 105), half: Lo }, 15)
And(Register { double: Work(9, 106), half: Lo }, Register { double: Work(9, 104), half: Lo }, Const(15))
Assign(Register { double: Work(9, 107), half: Lo }, Register { double: Work(9, 101), half: Lo })
Add(Register { double: Work(9, 107), half: Lo }, Register { double: Work(9, 106), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 107), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 108), half: Lo }, Register { double: Temp(0), half: Lo })
Ne(Register { double: Work(9, 109), half: Lo }, Register { double: Work(9, 100), half: Lo }, Register { double: Work(9, 108), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 37 }, false_label: BlockId { func: 9, block: 38 }, cond: Register { double: Work(9, 109), half: Lo } }
-- block BlockId { func: 9, block: 38 } --
LocalGet(Register { double: Work(9, 110), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 111), half: Lo }, 4)
Assign(Register { double: Work(9, 112), half: Lo }, Register { double: Work(9, 110), half: Lo })
Add(Register { double: Work(9, 112), half: Lo }, Register { double: Work(9, 111), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 112), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 39 } --
Jump(BlockId { func: 9, block: 37 })
-- block BlockId { func: 9, block: 37 } --
LocalGet(Register { double: Work(9, 113), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 114), half: Lo }, 2)
Assign(Register { double: Work(9, 115), half: Lo }, Register { double: Work(9, 113), half: Lo })
Add(Register { double: Work(9, 115), half: Lo }, Register { double: Work(9, 114), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 115), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 40 } --
Jump(BlockId { func: 9, block: 16 })
-- block BlockId { func: 9, block: 16 } --
LocalGet(Register { double: Work(9, 116), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 117), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 118), half: Lo }, 8)
ShrU(Register { double: Work(9, 119), half: Lo }, Register { double: Work(9, 117), half: Lo }, Register { double: Work(9, 118), half: Lo })
Set(Register { double: Work(9, 120), half: Lo }, 15)
And(Register { double: Work(9, 121), half: Lo }, Register { double: Work(9, 119), half: Lo }, Const(15))
Assign(Register { double: Work(9, 122), half: Lo }, Register { double: Work(9, 116), half: Lo })
Add(Register { double: Work(9, 122), half: Lo }, Register { double: Work(9, 121), half: Lo })
Set(Register { double: Work(9, 123), half: Lo }, 4136)
Assign(Register { double: Work(9, 124), half: Lo }, Register { double: Work(9, 122), half: Lo })
Add(Register { double: Work(9, 124), half: Lo }, Register { double: Work(9, 123), half: Lo })
LocalGet(Register { double: Work(9, 125), half: Lo }, 4, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 124), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 125), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 126), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 126), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 127), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 128), half: Lo }, 2)
Assign(Register { double: Work(9, 129), half: Lo }, Register { double: Work(9, 127), half: Lo })
Add(Register { double: Work(9, 129), half: Lo }, Register { double: Work(9, 128), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 129), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 41 } --
Jump(BlockId { func: 9, block: 15 })
-- block BlockId { func: 9, block: 15 } --
LocalGet(Register { double: Work(9, 130), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 131), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 132), half: Lo }, 8)
ShrU(Register { double: Work(9, 133), half: Lo }, Register { double: Work(9, 131), half: Lo }, Register { double: Work(9, 132), half: Lo })
Set(Register { double: Work(9, 134), half: Lo }, 15)
And(Register { double: Work(9, 135), half: Lo }, Register { double: Work(9, 133), half: Lo }, Const(15))
Assign(Register { double: Work(9, 136), half: Lo }, Register { double: Work(9, 130), half: Lo })
Add(Register { double: Work(9, 136), half: Lo }, Register { double: Work(9, 135), half: Lo })
Set(Register { double: Work(9, 137), half: Lo }, 4136)
Assign(Register { double: Work(9, 138), half: Lo }, Register { double: Work(9, 136), half: Lo })
Add(Register { double: Work(9, 138), half: Lo }, Register { double: Work(9, 137), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 138), half: Lo })
LocalGet(Register { double: Work(9, 139), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 139), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 140), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 141), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 142), half: Lo }, Register { double: Work(9, 140), half: Lo })
Add(Register { double: Work(9, 142), half: Lo }, Register { double: Work(9, 141), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 138), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 142), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 143), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 143), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 144), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 145), half: Lo }, 2)
Assign(Register { double: Work(9, 146), half: Lo }, Register { double: Work(9, 144), half: Lo })
Add(Register { double: Work(9, 146), half: Lo }, Register { double: Work(9, 145), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 146), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 42 } --
Jump(BlockId { func: 9, block: 14 })
-- block BlockId { func: 9, block: 14 } --
LocalGet(Register { double: Work(9, 147), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 148), half: Lo }, 15)
And(Register { double: Work(9, 149), half: Lo }, Register { double: Work(9, 147), half: Lo }, Const(15))
Set(Register { double: CondTaken, half: Lo }, 0)
JumpTable { arms: [Some(BlockId { func: 9, block: 51 }), Some(BlockId { func: 9, block: 50 }), Some(BlockId { func: 9, block: 49 }), Some(BlockId { func: 9, block: 48 }), Some(BlockId { func: 9, block: 47 }), Some(BlockId { func: 9, block: 46 }), Some(BlockId { func: 9, block: 45 }), Some(BlockId { func: 9, block: 44 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 43 })], default: Some(BlockId { func: 9, block: 2 }), cond: Register { double: Work(9, 149), half: Lo } }
-- block BlockId { func: 9, block: 52 } --
Jump(BlockId { func: 9, block: 51 })
-- block BlockId { func: 9, block: 51 } --
LocalGet(Register { double: Work(9, 150), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 151), half: Lo }, 4136)
Assign(Register { double: Work(9, 152), half: Lo }, Register { double: Work(9, 150), half: Lo })
Add(Register { double: Work(9, 152), half: Lo }, Register { double: Work(9, 151), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 152), half: Lo })
LocalGet(Register { double: Work(9, 153), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 154), half: Lo }, 8)
ShrU(Register { double: Work(9, 155), half: Lo }, Register { double: Work(9, 153), half: Lo }, Register { double: Work(9, 154), half: Lo })
Set(Register { double: Work(9, 156), half: Lo }, 15)
And(Register { double: Work(9, 157), half: Lo }, Register { double: Work(9, 155), half: Lo }, Const(15))
Assign(Register { double: Work(9, 158), half: Lo }, Register { double: Work(9, 152), half: Lo })
Add(Register { double: Work(9, 158), half: Lo }, Register { double: Work(9, 157), half: Lo })
LocalGet(Register { double: Work(9, 159), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 160), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 161), half: Lo }, 4)
ShrU(Register { double: Work(9, 162), half: Lo }, Register { double: Work(9, 160), half: Lo }, Register { double: Work(9, 161), half: Lo })
Set(Register { double: Work(9, 163), half: Lo }, 15)
And(Register { double: Work(9, 164), half: Lo }, Register { double: Work(9, 162), half: Lo }, Const(15))
Assign(Register { double: Work(9, 165), half: Lo }, Register { double: Work(9, 159), half: Lo })
Add(Register { double: Work(9, 165), half: Lo }, Register { double: Work(9, 164), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 165), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 166), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 158), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 166), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 167), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 167), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 168), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 169), half: Lo }, 2)
Assign(Register { double: Work(9, 170), half: Lo }, Register { double: Work(9, 168), half: Lo })
Add(Register { double: Work(9, 170), half: Lo }, Register { double: Work(9, 169), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 170), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 53 } --
Jump(BlockId { func: 9, block: 50 })
-- block BlockId { func: 9, block: 50 } --
LocalGet(Register { double: Work(9, 171), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 172), half: Lo }, 4136)
Assign(Register { double: Work(9, 173), half: Lo }, Register { double: Work(9, 171), half: Lo })
Add(Register { double: Work(9, 173), half: Lo }, Register { double: Work(9, 172), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 173), half: Lo })
LocalGet(Register { double: Work(9, 174), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 175), half: Lo }, 8)
ShrU(Register { double: Work(9, 176), half: Lo }, Register { double: Work(9, 174), half: Lo }, Register { double: Work(9, 175), half: Lo })
Set(Register { double: Work(9, 177), half: Lo }, 15)
And(Register { double: Work(9, 178), half: Lo }, Register { double: Work(9, 176), half: Lo }, Const(15))
Assign(Register { double: Work(9, 179), half: Lo }, Register { double: Work(9, 173), half: Lo })
Add(Register { double: Work(9, 179), half: Lo }, Register { double: Work(9, 178), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 179), half: Lo })
LocalGet(Register { double: Work(9, 180), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 180), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 181), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 182), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 183), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 184), half: Lo }, 4)
ShrU(Register { double: Work(9, 185), half: Lo }, Register { double: Work(9, 183), half: Lo }, Register { double: Work(9, 184), half: Lo })
Set(Register { double: Work(9, 186), half: Lo }, 15)
And(Register { double: Work(9, 187), half: Lo }, Register { double: Work(9, 185), half: Lo }, Const(15))
Assign(Register { double: Work(9, 188), half: Lo }, Register { double: Work(9, 182), half: Lo })
Add(Register { double: Work(9, 188), half: Lo }, Register { double: Work(9, 187), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 188), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 189), half: Lo }, Register { double: Temp(0), half: Lo })
Or(Register { double: Work(9, 190), half: Lo }, Register { double: Work(9, 181), half: Lo }, Register { double: Work(9, 189), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 179), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 190), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 191), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 191), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 192), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 193), half: Lo }, 2)
Assign(Register { double: Work(9, 194), half: Lo }, Register { double: Work(9, 192), half: Lo })
Add(Register { double: Work(9, 194), half: Lo }, Register { double: Work(9, 193), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 194), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 54 } --
Jump(BlockId { func: 9, block: 49 })
-- block BlockId { func: 9, block: 49 } --
LocalGet(Register { double: Work(9, 195), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 196), half: Lo }, 4136)
Assign(Register { double: Work(9, 197), half: Lo }, Register { double: Work(9, 195), half: Lo })
Add(Register { double: Work(9, 197), half: Lo }, Register { double: Work(9, 196), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 197), half: Lo })
LocalGet(Register { double: Work(9, 198), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 199), half: Lo }, 8)
ShrU(Register { double: Work(9, 200), half: Lo }, Register { double: Work(9, 198), half: Lo }, Register { double: Work(9, 199), half: Lo })
Set(Register { double: Work(9, 201), half: Lo }, 15)
And(Register { double: Work(9, 202), half: Lo }, Register { double: Work(9, 200), half: Lo }, Const(15))
Assign(Register { double: Work(9, 203), half: Lo }, Register { double: Work(9, 197), half: Lo })
Add(Register { double: Work(9, 203), half: Lo }, Register { double: Work(9, 202), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 203), half: Lo })
LocalGet(Register { double: Work(9, 204), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 204), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 205), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 206), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 207), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 208), half: Lo }, 4)
ShrU(Register { double: Work(9, 209), half: Lo }, Register { double: Work(9, 207), half: Lo }, Register { double: Work(9, 208), half: Lo })
Set(Register { double: Work(9, 210), half: Lo }, 15)
And(Register { double: Work(9, 211), half: Lo }, Register { double: Work(9, 209), half: Lo }, Const(15))
Assign(Register { double: Work(9, 212), half: Lo }, Register { double: Work(9, 206), half: Lo })
Add(Register { double: Work(9, 212), half: Lo }, Register { double: Work(9, 211), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 212), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 213), half: Lo }, Register { double: Temp(0), half: Lo })
And(Register { double: Work(9, 214), half: Lo }, Register { double: Work(9, 205), half: Lo }, Reg(Register { double: Work(9, 213), half: Lo }))
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 203), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 214), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 215), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 215), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 216), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 217), half: Lo }, 2)
Assign(Register { double: Work(9, 218), half: Lo }, Register { double: Work(9, 216), half: Lo })
Add(Register { double: Work(9, 218), half: Lo }, Register { double: Work(9, 217), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 218), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 55 } --
Jump(BlockId { func: 9, block: 48 })
-- block BlockId { func: 9, block: 48 } --
LocalGet(Register { double: Work(9, 219), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 220), half: Lo }, 4136)
Assign(Register { double: Work(9, 221), half: Lo }, Register { double: Work(9, 219), half: Lo })
Add(Register { double: Work(9, 221), half: Lo }, Register { double: Work(9, 220), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 221), half: Lo })
LocalGet(Register { double: Work(9, 222), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 223), half: Lo }, 8)
ShrU(Register { double: Work(9, 224), half: Lo }, Register { double: Work(9, 222), half: Lo }, Register { double: Work(9, 223), half: Lo })
Set(Register { double: Work(9, 225), half: Lo }, 15)
And(Register { double: Work(9, 226), half: Lo }, Register { double: Work(9, 224), half: Lo }, Const(15))
Assign(Register { double: Work(9, 227), half: Lo }, Register { double: Work(9, 221), half: Lo })
Add(Register { double: Work(9, 227), half: Lo }, Register { double: Work(9, 226), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 227), half: Lo })
LocalGet(Register { double: Work(9, 228), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 228), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 229), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 230), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 231), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 232), half: Lo }, 4)
ShrU(Register { double: Work(9, 233), half: Lo }, Register { double: Work(9, 231), half: Lo }, Register { double: Work(9, 232), half: Lo })
Set(Register { double: Work(9, 234), half: Lo }, 15)
And(Register { double: Work(9, 235), half: Lo }, Register { double: Work(9, 233), half: Lo }, Const(15))
Assign(Register { double: Work(9, 236), half: Lo }, Register { double: Work(9, 230), half: Lo })
Add(Register { double: Work(9, 236), half: Lo }, Register { double: Work(9, 235), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 236), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 237), half: Lo }, Register { double: Temp(0), half: Lo })
Xor(Register { double: Work(9, 238), half: Lo }, Register { double: Work(9, 229), half: Lo }, Register { double: Work(9, 237), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 227), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 238), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 239), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 239), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 240), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 241), half: Lo }, 2)
Assign(Register { double: Work(9, 242), half: Lo }, Register { double: Work(9, 240), half: Lo })
Add(Register { double: Work(9, 242), half: Lo }, Register { double: Work(9, 241), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 242), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 56 } --
Jump(BlockId { func: 9, block: 47 })
-- block BlockId { func: 9, block: 47 } --
LocalGet(Register { double: Work(9, 243), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 244), half: Lo }, 4136)
Assign(Register { double: Work(9, 245), half: Lo }, Register { double: Work(9, 243), half: Lo })
Add(Register { double: Work(9, 245), half: Lo }, Register { double: Work(9, 244), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 245), half: Lo })
LocalGet(Register { double: Work(9, 246), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 247), half: Lo }, 8)
ShrU(Register { double: Work(9, 248), half: Lo }, Register { double: Work(9, 246), half: Lo }, Register { double: Work(9, 247), half: Lo })
Set(Register { double: Work(9, 249), half: Lo }, 15)
And(Register { double: Work(9, 250), half: Lo }, Register { double: Work(9, 248), half: Lo }, Const(15))
Assign(Register { double: Work(9, 251), half: Lo }, Register { double: Work(9, 245), half: Lo })
Add(Register { double: Work(9, 251), half: Lo }, Register { double: Work(9, 250), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 251), half: Lo })
LocalGet(Register { double: Work(9, 252), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 252), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 253), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 254), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 255), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 256), half: Lo }, 4)
ShrU(Register { double: Work(9, 257), half: Lo }, Register { double: Work(9, 255), half: Lo }, Register { double: Work(9, 256), half: Lo })
Set(Register { double: Work(9, 258), half: Lo }, 15)
And(Register { double: Work(9, 259), half: Lo }, Register { double: Work(9, 257), half: Lo }, Const(15))
Assign(Register { double: Work(9, 260), half: Lo }, Register { double: Work(9, 254), half: Lo })
Add(Register { double: Work(9, 260), half: Lo }, Register { double: Work(9, 259), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 260), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 261), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 262), half: Lo }, Register { double: Work(9, 253), half: Lo })
Add(Register { double: Work(9, 262), half: Lo }, Register { double: Work(9, 261), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 251), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 262), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 263), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 264), half: Lo }, 4151)
Assign(Register { double: Work(9, 265), half: Lo }, Register { double: Work(9, 263), half: Lo })
Add(Register { double: Work(9, 265), half: Lo }, Register { double: Work(9, 264), half: Lo })
LocalGet(Register { double: Work(9, 266), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 267), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 267), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4154), half: Lo })
Load16(Register { double: Work(9, 268), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 268), half: Lo })
Set(Register { double: Work(9, 269), half: Lo }, 4)
ShrU(Register { double: Work(9, 270), half: Lo }, Register { double: Work(9, 268), half: Lo }, Register { double: Work(9, 269), half: Lo })
Set(Register { double: Work(9, 271), half: Lo }, 15)
And(Register { double: Work(9, 272), half: Lo }, Register { double: Work(9, 270), half: Lo }, Const(15))
Assign(Register { double: Work(9, 273), half: Lo }, Register { double: Work(9, 266), half: Lo })
Add(Register { double: Work(9, 273), half: Lo }, Register { double: Work(9, 272), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 273), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 274), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 275), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 276), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 277), half: Lo }, 8)
ShrU(Register { double: Work(9, 278), half: Lo }, Register { double: Work(9, 276), half: Lo }, Register { double: Work(9, 277), half: Lo })
Set(Register { double: Work(9, 279), half: Lo }, 15)
And(Register { double: Work(9, 280), half: Lo }, Register { double: Work(9, 278), half: Lo }, Const(15))
Assign(Register { double: Work(9, 281), half: Lo }, Register { double: Work(9, 275), half: Lo })
Add(Register { double: Work(9, 281), half: Lo }, Register { double: Work(9, 280), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 281), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 282), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 283), half: Lo }, 255)
Xor(Register { double: Work(9, 284), half: Lo }, Register { double: Work(9, 282), half: Lo }, Register { double: Work(9, 283), half: Lo })
GtU(Register { double: Work(9, 285), half: Lo }, Register { double: Work(9, 274), half: Lo }, Register { double: Work(9, 284), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 265), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 285), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 286), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 286), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 287), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 288), half: Lo }, 2)
Assign(Register { double: Work(9, 289), half: Lo }, Register { double: Work(9, 287), half: Lo })
Add(Register { double: Work(9, 289), half: Lo }, Register { double: Work(9, 288), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 289), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 57 } --
Jump(BlockId { func: 9, block: 46 })
-- block BlockId { func: 9, block: 46 } --
LocalGet(Register { double: Work(9, 290), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 291), half: Lo }, 4151)
Assign(Register { double: Work(9, 292), half: Lo }, Register { double: Work(9, 290), half: Lo })
Add(Register { double: Work(9, 292), half: Lo }, Register { double: Work(9, 291), half: Lo })
LocalGet(Register { double: Work(9, 293), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 294), half: Lo }, 4136)
Assign(Register { double: Work(9, 295), half: Lo }, Register { double: Work(9, 293), half: Lo })
Add(Register { double: Work(9, 295), half: Lo }, Register { double: Work(9, 294), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 295), half: Lo })
LocalGet(Register { double: Work(9, 296), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 297), half: Lo }, 4)
ShrU(Register { double: Work(9, 298), half: Lo }, Register { double: Work(9, 296), half: Lo }, Register { double: Work(9, 297), half: Lo })
Set(Register { double: Work(9, 299), half: Lo }, 15)
And(Register { double: Work(9, 300), half: Lo }, Register { double: Work(9, 298), half: Lo }, Const(15))
Assign(Register { double: Work(9, 301), half: Lo }, Register { double: Work(9, 295), half: Lo })
Add(Register { double: Work(9, 301), half: Lo }, Register { double: Work(9, 300), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 301), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 301), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 302), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 303), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 304), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 305), half: Lo }, 8)
ShrU(Register { double: Work(9, 306), half: Lo }, Register { double: Work(9, 304), half: Lo }, Register { double: Work(9, 305), half: Lo })
Set(Register { double: Work(9, 307), half: Lo }, 15)
And(Register { double: Work(9, 308), half: Lo }, Register { double: Work(9, 306), half: Lo }, Const(15))
Assign(Register { double: Work(9, 309), half: Lo }, Register { double: Work(9, 303), half: Lo })
Add(Register { double: Work(9, 309), half: Lo }, Register { double: Work(9, 308), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 309), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 309), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 310), half: Lo }, Register { double: Temp(0), half: Lo })
LeU(Register { double: Work(9, 311), half: Lo }, Register { double: Work(9, 302), half: Lo }, Register { double: Work(9, 310), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 292), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 311), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 312), half: Lo }, 2, Lo)
LocalGet(Register { double: Work(9, 313), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 313), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 314), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 315), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 315), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 316), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 317), half: Lo }, Register { double: Work(9, 314), half: Lo })
Sub(Register { double: Work(9, 317), half: Lo }, Register { double: Work(9, 316), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 312), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 317), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 318), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 318), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 319), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 320), half: Lo }, 2)
Assign(Register { double: Work(9, 321), half: Lo }, Register { double: Work(9, 319), half: Lo })
Add(Register { double: Work(9, 321), half: Lo }, Register { double: Work(9, 320), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 321), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 58 } --
Jump(BlockId { func: 9, block: 45 })
-- block BlockId { func: 9, block: 45 } --
LocalGet(Register { double: Work(9, 322), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 323), half: Lo }, 4151)
Assign(Register { double: Work(9, 324), half: Lo }, Register { double: Work(9, 322), half: Lo })
Add(Register { double: Work(9, 324), half: Lo }, Register { double: Work(9, 323), half: Lo })
LocalGet(Register { double: Work(9, 325), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 326), half: Lo }, 4136)
Assign(Register { double: Work(9, 327), half: Lo }, Register { double: Work(9, 325), half: Lo })
Add(Register { double: Work(9, 327), half: Lo }, Register { double: Work(9, 326), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 327), half: Lo })
LocalGet(Register { double: Work(9, 328), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 329), half: Lo }, 8)
ShrU(Register { double: Work(9, 330), half: Lo }, Register { double: Work(9, 328), half: Lo }, Register { double: Work(9, 329), half: Lo })
Set(Register { double: Work(9, 331), half: Lo }, 15)
And(Register { double: Work(9, 332), half: Lo }, Register { double: Work(9, 330), half: Lo }, Const(15))
Assign(Register { double: Work(9, 333), half: Lo }, Register { double: Work(9, 327), half: Lo })
Add(Register { double: Work(9, 333), half: Lo }, Register { double: Work(9, 332), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 333), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 334), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 335), half: Lo }, 1)
And(Register { double: Work(9, 336), half: Lo }, Register { double: Work(9, 334), half: Lo }, Const(1))
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 324), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 336), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 337), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 338), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 339), half: Lo }, 15)
And(Register { double: Work(9, 340), half: Lo }, Register { double: Work(9, 338), half: Lo }, Const(15))
Assign(Register { double: Work(9, 341), half: Lo }, Register { double: Work(9, 337), half: Lo })
Add(Register { double: Work(9, 341), half: Lo }, Register { double: Work(9, 340), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 341), half: Lo })
LocalGet(Register { double: Work(9, 342), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 342), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 343), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 344), half: Lo }, 1)
ShrU(Register { double: Work(9, 345), half: Lo }, Register { double: Work(9, 343), half: Lo }, Register { double: Work(9, 344), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 341), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 345), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 346), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 346), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 347), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 348), half: Lo }, 2)
Assign(Register { double: Work(9, 349), half: Lo }, Register { double: Work(9, 347), half: Lo })
Add(Register { double: Work(9, 349), half: Lo }, Register { double: Work(9, 348), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 349), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 59 } --
Jump(BlockId { func: 9, block: 44 })
-- block BlockId { func: 9, block: 44 } --
LocalGet(Register { double: Work(9, 350), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 351), half: Lo }, 4151)
Assign(Register { double: Work(9, 352), half: Lo }, Register { double: Work(9, 350), half: Lo })
Add(Register { double: Work(9, 352), half: Lo }, Register { double: Work(9, 351), half: Lo })
LocalGet(Register { double: Work(9, 353), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 354), half: Lo }, 4136)
Assign(Register { double: Work(9, 355), half: Lo }, Register { double: Work(9, 353), half: Lo })
Add(Register { double: Work(9, 355), half: Lo }, Register { double: Work(9, 354), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 355), half: Lo })
LocalGet(Register { double: Work(9, 356), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 357), half: Lo }, 8)
ShrU(Register { double: Work(9, 358), half: Lo }, Register { double: Work(9, 356), half: Lo }, Register { double: Work(9, 357), half: Lo })
Set(Register { double: Work(9, 359), half: Lo }, 15)
And(Register { double: Work(9, 360), half: Lo }, Register { double: Work(9, 358), half: Lo }, Const(15))
Assign(Register { double: Work(9, 361), half: Lo }, Register { double: Work(9, 355), half: Lo })
Add(Register { double: Work(9, 361), half: Lo }, Register { double: Work(9, 360), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 361), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 361), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 362), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 363), half: Lo }, 3, Lo)
LocalGet(Register { double: Work(9, 364), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 365), half: Lo }, 4)
ShrU(Register { double: Work(9, 366), half: Lo }, Register { double: Work(9, 364), half: Lo }, Register { double: Work(9, 365), half: Lo })
Set(Register { double: Work(9, 367), half: Lo }, 15)
And(Register { double: Work(9, 368), half: Lo }, Register { double: Work(9, 366), half: Lo }, Const(15))
Assign(Register { double: Work(9, 369), half: Lo }, Register { double: Work(9, 363), half: Lo })
Add(Register { double: Work(9, 369), half: Lo }, Register { double: Work(9, 368), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 369), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 369), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 370), half: Lo }, Register { double: Temp(0), half: Lo })
LeU(Register { double: Work(9, 371), half: Lo }, Register { double: Work(9, 362), half: Lo }, Register { double: Work(9, 370), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 352), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 371), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 372), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 373), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 373), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 374), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 375), half: Lo }, 4, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 375), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 376), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 377), half: Lo }, Register { double: Work(9, 374), half: Lo })
Sub(Register { double: Work(9, 377), half: Lo }, Register { double: Work(9, 376), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 372), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 377), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 378), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 378), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 379), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 380), half: Lo }, 2)
Assign(Register { double: Work(9, 381), half: Lo }, Register { double: Work(9, 379), half: Lo })
Add(Register { double: Work(9, 381), half: Lo }, Register { double: Work(9, 380), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 381), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 60 } --
Jump(BlockId { func: 9, block: 43 })
-- block BlockId { func: 9, block: 43 } --
LocalGet(Register { double: Work(9, 382), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 383), half: Lo }, 4151)
Assign(Register { double: Work(9, 384), half: Lo }, Register { double: Work(9, 382), half: Lo })
Add(Register { double: Work(9, 384), half: Lo }, Register { double: Work(9, 383), half: Lo })
LocalGet(Register { double: Work(9, 385), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 386), half: Lo }, 4136)
Assign(Register { double: Work(9, 387), half: Lo }, Register { double: Work(9, 385), half: Lo })
Add(Register { double: Work(9, 387), half: Lo }, Register { double: Work(9, 386), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 387), half: Lo })
LocalGet(Register { double: Work(9, 388), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 389), half: Lo }, 8)
ShrU(Register { double: Work(9, 390), half: Lo }, Register { double: Work(9, 388), half: Lo }, Register { double: Work(9, 389), half: Lo })
Set(Register { double: Work(9, 391), half: Lo }, 15)
And(Register { double: Work(9, 392), half: Lo }, Register { double: Work(9, 390), half: Lo }, Const(15))
Assign(Register { double: Work(9, 393), half: Lo }, Register { double: Work(9, 387), half: Lo })
Add(Register { double: Work(9, 393), half: Lo }, Register { double: Work(9, 392), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 393), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 394), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 395), half: Lo }, 7)
ShrU(Register { double: Work(9, 396), half: Lo }, Register { double: Work(9, 394), half: Lo }, Register { double: Work(9, 395), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 384), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 396), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 397), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 398), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 399), half: Lo }, 15)
And(Register { double: Work(9, 400), half: Lo }, Register { double: Work(9, 398), half: Lo }, Const(15))
Assign(Register { double: Work(9, 401), half: Lo }, Register { double: Work(9, 397), half: Lo })
Add(Register { double: Work(9, 401), half: Lo }, Register { double: Work(9, 400), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 401), half: Lo })
LocalGet(Register { double: Work(9, 402), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 402), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 403), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 404), half: Lo }, 1)
Shl(Register { double: Work(9, 405), half: Lo }, Register { double: Work(9, 403), half: Lo }, Register { double: Work(9, 404), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 401), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 405), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 406), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 406), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 407), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 408), half: Lo }, 2)
Assign(Register { double: Work(9, 409), half: Lo }, Register { double: Work(9, 407), half: Lo })
Add(Register { double: Work(9, 409), half: Lo }, Register { double: Work(9, 408), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 409), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 61 } --
Jump(BlockId { func: 9, block: 13 })
-- block BlockId { func: 9, block: 13 } --
LocalGet(Register { double: Work(9, 410), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 411), half: Lo }, 4136)
Assign(Register { double: Work(9, 412), half: Lo }, Register { double: Work(9, 410), half: Lo })
Add(Register { double: Work(9, 412), half: Lo }, Register { double: Work(9, 411), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 412), half: Lo })
LocalGet(Register { double: Work(9, 413), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 414), half: Lo }, 8)
ShrU(Register { double: Work(9, 415), half: Lo }, Register { double: Work(9, 413), half: Lo }, Register { double: Work(9, 414), half: Lo })
Set(Register { double: Work(9, 416), half: Lo }, 15)
And(Register { double: Work(9, 417), half: Lo }, Register { double: Work(9, 415), half: Lo }, Const(15))
Assign(Register { double: Work(9, 418), half: Lo }, Register { double: Work(9, 412), half: Lo })
Add(Register { double: Work(9, 418), half: Lo }, Register { double: Work(9, 417), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 418), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 419), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 420), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 421), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 422), half: Lo }, 4)
ShrU(Register { double: Work(9, 423), half: Lo }, Register { double: Work(9, 421), half: Lo }, Register { double: Work(9, 422), half: Lo })
Set(Register { double: Work(9, 424), half: Lo }, 15)
And(Register { double: Work(9, 425), half: Lo }, Register { double: Work(9, 423), half: Lo }, Const(15))
Assign(Register { double: Work(9, 426), half: Lo }, Register { double: Work(9, 420), half: Lo })
Add(Register { double: Work(9, 426), half: Lo }, Register { double: Work(9, 425), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 426), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 427), half: Lo }, Register { double: Temp(0), half: Lo })
Eq(Register { double: Work(9, 428), half: Lo }, Register { double: Work(9, 419), half: Lo }, Register { double: Work(9, 427), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 62 }, false_label: BlockId { func: 9, block: 63 }, cond: Register { double: Work(9, 428), half: Lo } }
-- block BlockId { func: 9, block: 63 } --
LocalGet(Register { double: Work(9, 429), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 430), half: Lo }, 4)
Assign(Register { double: Work(9, 431), half: Lo }, Register { double: Work(9, 429), half: Lo })
Add(Register { double: Work(9, 431), half: Lo }, Register { double: Work(9, 430), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 431), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 64 } --
Jump(BlockId { func: 9, block: 62 })
-- block BlockId { func: 9, block: 62 } --
LocalGet(Register { double: Work(9, 432), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 433), half: Lo }, 2)
Assign(Register { double: Work(9, 434), half: Lo }, Register { double: Work(9, 432), half: Lo })
Add(Register { double: Work(9, 434), half: Lo }, Register { double: Work(9, 433), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 434), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 65 } --
Jump(BlockId { func: 9, block: 12 })
-- block BlockId { func: 9, block: 12 } --
LocalGet(Register { double: Work(9, 435), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 436), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 437), half: Lo }, 4095)
And(Register { double: Work(9, 438), half: Lo }, Register { double: Work(9, 436), half: Lo }, Const(4095))
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 435), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Store16(Register { double: Work(9, 438), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 439), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 440), half: Lo }, 2)
Assign(Register { double: Work(9, 441), half: Lo }, Register { double: Work(9, 439), half: Lo })
Add(Register { double: Work(9, 441), half: Lo }, Register { double: Work(9, 440), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 441), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 66 } --
Jump(BlockId { func: 9, block: 11 })
-- block BlockId { func: 9, block: 11 } --
LocalGet(Register { double: Work(9, 442), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 443), half: Lo }, 4095)
And(Register { double: Work(9, 444), half: Lo }, Register { double: Work(9, 442), half: Lo }, Const(4095))
LocalGet(Register { double: Work(9, 445), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 445), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4136), half: Lo })
Load8(Register { double: Work(9, 446), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 447), half: Lo }, Register { double: Work(9, 444), half: Lo })
Add(Register { double: Work(9, 447), half: Lo }, Register { double: Work(9, 446), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 447), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 67 } --
Jump(BlockId { func: 9, block: 10 })
-- block BlockId { func: 9, block: 10 } --
LocalGet(Register { double: Work(9, 448), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 449), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 450), half: Lo }, 15)
And(Register { double: Work(9, 451), half: Lo }, Register { double: Work(9, 449), half: Lo }, Const(15))
Assign(Register { double: Work(9, 452), half: Lo }, Register { double: Work(9, 448), half: Lo })
Add(Register { double: Work(9, 452), half: Lo }, Register { double: Work(9, 451), half: Lo })
Set(Register { double: Work(9, 453), half: Lo }, 4136)
Assign(Register { double: Work(9, 454), half: Lo }, Register { double: Work(9, 452), half: Lo })
Add(Register { double: Work(9, 454), half: Lo }, Register { double: Work(9, 453), half: Lo })
LocalGet(Register { double: Work(9, 455), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 456), half: Lo }, 112)
And(Register { double: Work(9, 457), half: Lo }, Register { double: Work(9, 455), half: Lo }, Const(112))
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 454), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 457), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 458), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 458), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 459), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 460), half: Lo }, 2)
Assign(Register { double: Work(9, 461), half: Lo }, Register { double: Work(9, 459), half: Lo })
Add(Register { double: Work(9, 461), half: Lo }, Register { double: Work(9, 460), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 461), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 68 } --
Jump(BlockId { func: 9, block: 9 })
-- block BlockId { func: 9, block: 9 } --
LocalGet(Register { double: Work(9, 462), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 463), half: Lo }, 4136)
Assign(Register { double: Work(9, 464), half: Lo }, Register { double: Work(9, 462), half: Lo })
Add(Register { double: Work(9, 464), half: Lo }, Register { double: Work(9, 463), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 464), half: Lo })
LocalGet(Register { double: Work(9, 465), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 466), half: Lo }, 4)
ShrU(Register { double: Work(9, 467), half: Lo }, Register { double: Work(9, 465), half: Lo }, Register { double: Work(9, 466), half: Lo })
Set(Register { double: Work(9, 468), half: Lo }, 15)
And(Register { double: Work(9, 469), half: Lo }, Register { double: Work(9, 467), half: Lo }, Const(15))
Assign(Register { double: Work(9, 470), half: Lo }, Register { double: Work(9, 464), half: Lo })
Add(Register { double: Work(9, 470), half: Lo }, Register { double: Work(9, 469), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 470), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 471), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 471), half: Lo })
LocalGet(Register { double: Work(9, 472), half: Lo }, 3, Lo)
LocalGet(Register { double: Work(9, 473), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 474), half: Lo }, 8)
ShrU(Register { double: Work(9, 475), half: Lo }, Register { double: Work(9, 473), half: Lo }, Register { double: Work(9, 474), half: Lo })
Set(Register { double: Work(9, 476), half: Lo }, 15)
And(Register { double: Work(9, 477), half: Lo }, Register { double: Work(9, 475), half: Lo }, Const(15))
Assign(Register { double: Work(9, 478), half: Lo }, Register { double: Work(9, 472), half: Lo })
Add(Register { double: Work(9, 478), half: Lo }, Register { double: Work(9, 477), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 478), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 479), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 479), half: Lo })
Set(Register { double: Work(9, 480), half: Lo }, 0)
LocalSet(3, Lo, Register { double: Work(9, 480), half: Lo })
LocalGet(Register { double: Work(9, 481), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 482), half: Lo }, 4151)
Assign(Register { double: Work(9, 483), half: Lo }, Register { double: Work(9, 481), half: Lo })
Add(Register { double: Work(9, 483), half: Lo }, Register { double: Work(9, 482), half: Lo })
Set(Register { double: Work(9, 484), half: Lo }, 0)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 483), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 484), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 485), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 486), half: Lo }, 15)
And(Register { double: Work(9, 487), half: Lo }, Register { double: Work(9, 485), half: Lo }, Const(15))
LocalSet(6, Lo, Register { double: Work(9, 487), half: Lo })
Eqz(Register { double: Work(9, 488), half: Lo }, Register { double: Work(9, 487), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 69 }, false_label: BlockId { func: 9, block: 70 }, cond: Register { double: Work(9, 488), half: Lo } }
-- block BlockId { func: 9, block: 70 } --
LocalGet(Register { double: Work(9, 489), half: Lo }, 5, Lo)
Set(Register { double: Work(9, 490), half: Lo }, 6)
Shl(Register { double: Work(9, 491), half: Lo }, Register { double: Work(9, 489), half: Lo }, Register { double: Work(9, 490), half: Lo })
LocalGet(Register { double: Work(9, 492), half: Lo }, 2, Lo)
Assign(Register { double: Work(9, 493), half: Lo }, Register { double: Work(9, 491), half: Lo })
Add(Register { double: Work(9, 493), half: Lo }, Register { double: Work(9, 492), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 493), half: Lo })
Jump(BlockId { func: 9, block: 71 })
-- block BlockId { func: 9, block: 71 } --
LocalGet(Register { double: Work(9, 494), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 495), half: Lo }, 3, Lo)
LocalGet(Register { double: Work(9, 496), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 496), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 497), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 498), half: Lo }, Register { double: Work(9, 495), half: Lo })
Add(Register { double: Work(9, 498), half: Lo }, Register { double: Work(9, 497), half: Lo })
Assign(Register { double: Work(9, 499), half: Lo }, Register { double: Work(9, 494), half: Lo })
Add(Register { double: Work(9, 499), half: Lo }, Register { double: Work(9, 498), half: Lo })
Set(Register { double: Work(9, 500), half: Lo }, 40)
Assign(Register { double: Work(9, 501), half: Lo }, Register { double: Work(9, 499), half: Lo })
Add(Register { double: Work(9, 501), half: Lo }, Register { double: Work(9, 500), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 501), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 502), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 502), half: Lo })
Set(Register { double: Work(9, 503), half: Lo }, 128)
And(Register { double: Work(9, 504), half: Lo }, Register { double: Work(9, 502), half: Lo }, Const(128))
Eqz(Register { double: Work(9, 505), half: Lo }, Register { double: Work(9, 504), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 72 }, false_label: BlockId { func: 9, block: 73 }, cond: Register { double: Work(9, 505), half: Lo } }
-- block BlockId { func: 9, block: 73 } --
LocalGet(Register { double: Work(9, 506), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 507), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 508), half: Lo }, Register { double: Work(9, 506), half: Lo })
Add(Register { double: Work(9, 508), half: Lo }, Register { double: Work(9, 507), half: Lo })
Set(Register { double: Work(9, 509), half: Lo }, 4160)
Assign(Register { double: Work(9, 510), half: Lo }, Register { double: Work(9, 508), half: Lo })
Add(Register { double: Work(9, 510), half: Lo }, Register { double: Work(9, 509), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 510), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 510), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 511), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 511), half: Lo })
Set(Register { double: Work(9, 512), half: Lo }, 1)
Ne(Register { double: Work(9, 513), half: Lo }, Register { double: Work(9, 511), half: Lo }, Register { double: Work(9, 512), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 74 }, false_label: BlockId { func: 9, block: 75 }, cond: Register { double: Work(9, 513), half: Lo } }
-- block BlockId { func: 9, block: 75 } --
LocalGet(Register { double: Work(9, 514), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 515), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 514), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 515), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 516), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 516), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 517), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 517), half: Lo })
Jump(BlockId { func: 9, block: 74 })
-- block BlockId { func: 9, block: 74 } --
LocalGet(Register { double: Work(9, 518), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 519), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 520), half: Lo }, 1)
Xor(Register { double: Work(9, 521), half: Lo }, Register { double: Work(9, 519), half: Lo }, Register { double: Work(9, 520), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 518), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 521), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 72 })
-- block BlockId { func: 9, block: 72 } --
LocalGet(Register { double: Work(9, 522), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 523), half: Lo }, 64)
And(Register { double: Work(9, 524), half: Lo }, Register { double: Work(9, 522), half: Lo }, Const(64))
Eqz(Register { double: Work(9, 525), half: Lo }, Register { double: Work(9, 524), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 76 }, false_label: BlockId { func: 9, block: 77 }, cond: Register { double: Work(9, 525), half: Lo } }
-- block BlockId { func: 9, block: 77 } --
LocalGet(Register { double: Work(9, 526), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 527), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 528), half: Lo }, Register { double: Work(9, 526), half: Lo })
Add(Register { double: Work(9, 528), half: Lo }, Register { double: Work(9, 527), half: Lo })
Set(Register { double: Work(9, 529), half: Lo }, 4161)
Assign(Register { double: Work(9, 530), half: Lo }, Register { double: Work(9, 528), half: Lo })
Add(Register { double: Work(9, 530), half: Lo }, Register { double: Work(9, 529), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 530), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 530), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 531), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 531), half: Lo })
Set(Register { double: Work(9, 532), half: Lo }, 1)
Ne(Register { double: Work(9, 533), half: Lo }, Register { double: Work(9, 531), half: Lo }, Register { double: Work(9, 532), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 78 }, false_label: BlockId { func: 9, block: 79 }, cond: Register { double: Work(9, 533), half: Lo } }
-- block BlockId { func: 9, block: 79 } --
LocalGet(Register { double: Work(9, 534), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 535), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 534), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 535), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 536), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 536), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 537), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 537), half: Lo })
Jump(BlockId { func: 9, block: 78 })
-- block BlockId { func: 9, block: 78 } --
LocalGet(Register { double: Work(9, 538), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 539), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 540), half: Lo }, 1)
Xor(Register { double: Work(9, 541), half: Lo }, Register { double: Work(9, 539), half: Lo }, Register { double: Work(9, 540), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 538), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 541), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 76 })
-- block BlockId { func: 9, block: 76 } --
LocalGet(Register { double: Work(9, 542), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 543), half: Lo }, 32)
And(Register { double: Work(9, 544), half: Lo }, Register { double: Work(9, 542), half: Lo }, Const(32))
Eqz(Register { double: Work(9, 545), half: Lo }, Register { double: Work(9, 544), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 80 }, false_label: BlockId { func: 9, block: 81 }, cond: Register { double: Work(9, 545), half: Lo } }
-- block BlockId { func: 9, block: 81 } --
LocalGet(Register { double: Work(9, 546), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 547), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 548), half: Lo }, Register { double: Work(9, 546), half: Lo })
Add(Register { double: Work(9, 548), half: Lo }, Register { double: Work(9, 547), half: Lo })
Set(Register { double: Work(9, 549), half: Lo }, 4162)
Assign(Register { double: Work(9, 550), half: Lo }, Register { double: Work(9, 548), half: Lo })
Add(Register { double: Work(9, 550), half: Lo }, Register { double: Work(9, 549), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 550), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 550), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 551), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 551), half: Lo })
Set(Register { double: Work(9, 552), half: Lo }, 1)
Ne(Register { double: Work(9, 553), half: Lo }, Register { double: Work(9, 551), half: Lo }, Register { double: Work(9, 552), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 82 }, false_label: BlockId { func: 9, block: 83 }, cond: Register { double: Work(9, 553), half: Lo } }
-- block BlockId { func: 9, block: 83 } --
LocalGet(Register { double: Work(9, 554), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 555), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 554), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 555), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 556), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 556), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 557), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 557), half: Lo })
Jump(BlockId { func: 9, block: 82 })
-- block BlockId { func: 9, block: 82 } --
LocalGet(Register { double: Work(9, 558), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 559), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 560), half: Lo }, 1)
Xor(Register { double: Work(9, 561), half: Lo }, Register { double: Work(9, 559), half: Lo }, Register { double: Work(9, 560), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 558), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 561), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 80 })
-- block BlockId { func: 9, block: 80 } --
LocalGet(Register { double: Work(9, 562), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 563), half: Lo }, 16)
And(Register { double: Work(9, 564), half: Lo }, Register { double: Work(9, 562), half: Lo }, Const(16))
Eqz(Register { double: Work(9, 565), half: Lo }, Register { double: Work(9, 564), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 84 }, false_label: BlockId { func: 9, block: 85 }, cond: Register { double: Work(9, 565), half: Lo } }
-- block BlockId { func: 9, block: 85 } --
LocalGet(Register { double: Work(9, 566), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 567), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 568), half: Lo }, Register { double: Work(9, 566), half: Lo })
Add(Register { double: Work(9, 568), half: Lo }, Register { double: Work(9, 567), half: Lo })
Set(Register { double: Work(9, 569), half: Lo }, 4163)
Assign(Register { double: Work(9, 570), half: Lo }, Register { double: Work(9, 568), half: Lo })
Add(Register { double: Work(9, 570), half: Lo }, Register { double: Work(9, 569), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 570), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 570), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 571), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 571), half: Lo })
Set(Register { double: Work(9, 572), half: Lo }, 1)
Ne(Register { double: Work(9, 573), half: Lo }, Register { double: Work(9, 571), half: Lo }, Register { double: Work(9, 572), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 86 }, false_label: BlockId { func: 9, block: 87 }, cond: Register { double: Work(9, 573), half: Lo } }
-- block BlockId { func: 9, block: 87 } --
LocalGet(Register { double: Work(9, 574), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 575), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 574), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 575), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 576), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 576), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 577), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 577), half: Lo })
Jump(BlockId { func: 9, block: 86 })
-- block BlockId { func: 9, block: 86 } --
LocalGet(Register { double: Work(9, 578), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 579), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 580), half: Lo }, 1)
Xor(Register { double: Work(9, 581), half: Lo }, Register { double: Work(9, 579), half: Lo }, Register { double: Work(9, 580), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 578), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 581), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 84 })
-- block BlockId { func: 9, block: 84 } --
LocalGet(Register { double: Work(9, 582), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 583), half: Lo }, 8)
And(Register { double: Work(9, 584), half: Lo }, Register { double: Work(9, 582), half: Lo }, Const(8))
Eqz(Register { double: Work(9, 585), half: Lo }, Register { double: Work(9, 584), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 88 }, false_label: BlockId { func: 9, block: 89 }, cond: Register { double: Work(9, 585), half: Lo } }
-- block BlockId { func: 9, block: 89 } --
LocalGet(Register { double: Work(9, 586), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 587), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 588), half: Lo }, Register { double: Work(9, 586), half: Lo })
Add(Register { double: Work(9, 588), half: Lo }, Register { double: Work(9, 587), half: Lo })
Set(Register { double: Work(9, 589), half: Lo }, 4164)
Assign(Register { double: Work(9, 590), half: Lo }, Register { double: Work(9, 588), half: Lo })
Add(Register { double: Work(9, 590), half: Lo }, Register { double: Work(9, 589), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 590), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 590), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 591), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 591), half: Lo })
Set(Register { double: Work(9, 592), half: Lo }, 1)
Ne(Register { double: Work(9, 593), half: Lo }, Register { double: Work(9, 591), half: Lo }, Register { double: Work(9, 592), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 90 }, false_label: BlockId { func: 9, block: 91 }, cond: Register { double: Work(9, 593), half: Lo } }
-- block BlockId { func: 9, block: 91 } --
LocalGet(Register { double: Work(9, 594), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 595), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 594), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 595), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 596), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 596), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 597), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 597), half: Lo })
Jump(BlockId { func: 9, block: 90 })
-- block BlockId { func: 9, block: 90 } --
LocalGet(Register { double: Work(9, 598), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 599), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 600), half: Lo }, 1)
Xor(Register { double: Work(9, 601), half: Lo }, Register { double: Work(9, 599), half: Lo }, Register { double: Work(9, 600), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 598), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 601), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 88 })
-- block BlockId { func: 9, block: 88 } --
LocalGet(Register { double: Work(9, 602), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 603), half: Lo }, 4)
And(Register { double: Work(9, 604), half: Lo }, Register { double: Work(9, 602), half: Lo }, Const(4))
Eqz(Register { double: Work(9, 605), half: Lo }, Register { double: Work(9, 604), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 92 }, false_label: BlockId { func: 9, block: 93 }, cond: Register { double: Work(9, 605), half: Lo } }
-- block BlockId { func: 9, block: 93 } --
LocalGet(Register { double: Work(9, 606), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 607), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 608), half: Lo }, Register { double: Work(9, 606), half: Lo })
Add(Register { double: Work(9, 608), half: Lo }, Register { double: Work(9, 607), half: Lo })
Set(Register { double: Work(9, 609), half: Lo }, 4165)
Assign(Register { double: Work(9, 610), half: Lo }, Register { double: Work(9, 608), half: Lo })
Add(Register { double: Work(9, 610), half: Lo }, Register { double: Work(9, 609), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 610), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 610), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 611), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 611), half: Lo })
Set(Register { double: Work(9, 612), half: Lo }, 1)
Ne(Register { double: Work(9, 613), half: Lo }, Register { double: Work(9, 611), half: Lo }, Register { double: Work(9, 612), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 94 }, false_label: BlockId { func: 9, block: 95 }, cond: Register { double: Work(9, 613), half: Lo } }
-- block BlockId { func: 9, block: 95 } --
LocalGet(Register { double: Work(9, 614), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 615), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 614), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 615), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 616), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 616), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 617), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 617), half: Lo })
Jump(BlockId { func: 9, block: 94 })
-- block BlockId { func: 9, block: 94 } --
LocalGet(Register { double: Work(9, 618), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 619), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 620), half: Lo }, 1)
Xor(Register { double: Work(9, 621), half: Lo }, Register { double: Work(9, 619), half: Lo }, Register { double: Work(9, 620), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 618), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 621), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 92 })
-- block BlockId { func: 9, block: 92 } --
LocalGet(Register { double: Work(9, 622), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 623), half: Lo }, 2)
And(Register { double: Work(9, 624), half: Lo }, Register { double: Work(9, 622), half: Lo }, Const(2))
Eqz(Register { double: Work(9, 625), half: Lo }, Register { double: Work(9, 624), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 96 }, false_label: BlockId { func: 9, block: 97 }, cond: Register { double: Work(9, 625), half: Lo } }
-- block BlockId { func: 9, block: 97 } --
LocalGet(Register { double: Work(9, 626), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 627), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 628), half: Lo }, Register { double: Work(9, 626), half: Lo })
Add(Register { double: Work(9, 628), half: Lo }, Register { double: Work(9, 627), half: Lo })
Set(Register { double: Work(9, 629), half: Lo }, 4166)
Assign(Register { double: Work(9, 630), half: Lo }, Register { double: Work(9, 628), half: Lo })
Add(Register { double: Work(9, 630), half: Lo }, Register { double: Work(9, 629), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 630), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 630), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 631), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 631), half: Lo })
Set(Register { double: Work(9, 632), half: Lo }, 1)
Ne(Register { double: Work(9, 633), half: Lo }, Register { double: Work(9, 631), half: Lo }, Register { double: Work(9, 632), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 98 }, false_label: BlockId { func: 9, block: 99 }, cond: Register { double: Work(9, 633), half: Lo } }
-- block BlockId { func: 9, block: 99 } --
LocalGet(Register { double: Work(9, 634), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 635), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 634), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 635), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 636), half: Lo }, 5, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 636), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 637), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(7, Lo, Register { double: Work(9, 637), half: Lo })
Jump(BlockId { func: 9, block: 98 })
-- block BlockId { func: 9, block: 98 } --
LocalGet(Register { double: Work(9, 638), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 639), half: Lo }, 7, Lo)
Set(Register { double: Work(9, 640), half: Lo }, 1)
Xor(Register { double: Work(9, 641), half: Lo }, Register { double: Work(9, 639), half: Lo }, Register { double: Work(9, 640), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 638), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 641), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 96 })
-- block BlockId { func: 9, block: 96 } --
LocalGet(Register { double: Work(9, 642), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 643), half: Lo }, 1)
And(Register { double: Work(9, 644), half: Lo }, Register { double: Work(9, 642), half: Lo }, Const(1))
Eqz(Register { double: Work(9, 645), half: Lo }, Register { double: Work(9, 644), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 100 }, false_label: BlockId { func: 9, block: 101 }, cond: Register { double: Work(9, 645), half: Lo } }
-- block BlockId { func: 9, block: 101 } --
LocalGet(Register { double: Work(9, 646), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 647), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 648), half: Lo }, Register { double: Work(9, 646), half: Lo })
Add(Register { double: Work(9, 648), half: Lo }, Register { double: Work(9, 647), half: Lo })
Set(Register { double: Work(9, 649), half: Lo }, 4167)
Assign(Register { double: Work(9, 650), half: Lo }, Register { double: Work(9, 648), half: Lo })
Add(Register { double: Work(9, 650), half: Lo }, Register { double: Work(9, 649), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 650), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 650), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 651), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 651), half: Lo })
Set(Register { double: Work(9, 652), half: Lo }, 1)
Ne(Register { double: Work(9, 653), half: Lo }, Register { double: Work(9, 651), half: Lo }, Register { double: Work(9, 652), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 102 }, false_label: BlockId { func: 9, block: 103 }, cond: Register { double: Work(9, 653), half: Lo } }
-- block BlockId { func: 9, block: 103 } --
LocalGet(Register { double: Work(9, 654), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 655), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 654), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4151), half: Lo })
Store8(Register { double: Work(9, 655), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 656), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 656), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 657), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(5, Lo, Register { double: Work(9, 657), half: Lo })
Jump(BlockId { func: 9, block: 102 })
-- block BlockId { func: 9, block: 102 } --
LocalGet(Register { double: Work(9, 658), half: Lo }, 2, Lo)
LocalGet(Register { double: Work(9, 659), half: Lo }, 5, Lo)
Set(Register { double: Work(9, 660), half: Lo }, 1)
Xor(Register { double: Work(9, 661), half: Lo }, Register { double: Work(9, 659), half: Lo }, Register { double: Work(9, 660), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 658), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 661), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 100 })
-- block BlockId { func: 9, block: 100 } --
LocalGet(Register { double: Work(9, 662), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 663), half: Lo }, 64)
Assign(Register { double: Work(9, 664), half: Lo }, Register { double: Work(9, 662), half: Lo })
Add(Register { double: Work(9, 664), half: Lo }, Register { double: Work(9, 663), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 664), half: Lo })
LocalGet(Register { double: Work(9, 665), half: Lo }, 6, Lo)
LocalGet(Register { double: Work(9, 666), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 667), half: Lo }, 1)
Assign(Register { double: Work(9, 668), half: Lo }, Register { double: Work(9, 666), half: Lo })
Add(Register { double: Work(9, 668), half: Lo }, Register { double: Work(9, 667), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 668), half: Lo })
Ne(Register { double: Work(9, 669), half: Lo }, Register { double: Work(9, 665), half: Lo }, Register { double: Work(9, 668), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 71 }, false_label: BlockId { func: 9, block: 104 }, cond: Register { double: Work(9, 669), half: Lo } }
-- block BlockId { func: 9, block: 104 } --
Jump(BlockId { func: 9, block: 69 })
-- block BlockId { func: 9, block: 69 } --
LocalGet(Register { double: Work(9, 670), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 671), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 670), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(6224), half: Lo })
Store8(Register { double: Work(9, 671), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 672), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 673), half: Lo }, 2)
Assign(Register { double: Work(9, 674), half: Lo }, Register { double: Work(9, 672), half: Lo })
Add(Register { double: Work(9, 674), half: Lo }, Register { double: Work(9, 673), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 674), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 105 } --
Jump(BlockId { func: 9, block: 8 })
-- block BlockId { func: 9, block: 8 } --
LocalGet(Register { double: Work(9, 675), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 676), half: Lo }, -158)
Assign(Register { double: Work(9, 677), half: Lo }, Register { double: Work(9, 675), half: Lo })
Add(Register { double: Work(9, 677), half: Lo }, Register { double: Work(9, 676), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpTable { arms: [Some(BlockId { func: 9, block: 107 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 106 })], default: Some(BlockId { func: 9, block: 2 }), cond: Register { double: Work(9, 677), half: Lo } }
-- block BlockId { func: 9, block: 108 } --
Jump(BlockId { func: 9, block: 107 })
-- block BlockId { func: 9, block: 107 } --
LocalGet(Register { double: Work(9, 678), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 679), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 680), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 681), half: Lo }, 8)
ShrU(Register { double: Work(9, 682), half: Lo }, Register { double: Work(9, 680), half: Lo }, Register { double: Work(9, 681), half: Lo })
Set(Register { double: Work(9, 683), half: Lo }, 15)
And(Register { double: Work(9, 684), half: Lo }, Register { double: Work(9, 682), half: Lo }, Const(15))
Assign(Register { double: Work(9, 685), half: Lo }, Register { double: Work(9, 679), half: Lo })
Add(Register { double: Work(9, 685), half: Lo }, Register { double: Work(9, 684), half: Lo })
Set(Register { double: Work(9, 686), half: Lo }, 4136)
Assign(Register { double: Work(9, 687), half: Lo }, Register { double: Work(9, 685), half: Lo })
Add(Register { double: Work(9, 687), half: Lo }, Register { double: Work(9, 686), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 687), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 688), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 689), half: Lo }, Register { double: Work(9, 678), half: Lo })
Add(Register { double: Work(9, 689), half: Lo }, Register { double: Work(9, 688), half: Lo })
Set(Register { double: Work(9, 690), half: Lo }, 6208)
Assign(Register { double: Work(9, 691), half: Lo }, Register { double: Work(9, 689), half: Lo })
Add(Register { double: Work(9, 691), half: Lo }, Register { double: Work(9, 690), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 691), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 692), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 693), half: Lo }, Register { double: Work(9, 692), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 109 }, false_label: BlockId { func: 9, block: 110 }, cond: Register { double: Work(9, 693), half: Lo } }
-- block BlockId { func: 9, block: 110 } --
LocalGet(Register { double: Work(9, 694), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 695), half: Lo }, 4)
Assign(Register { double: Work(9, 696), half: Lo }, Register { double: Work(9, 694), half: Lo })
Add(Register { double: Work(9, 696), half: Lo }, Register { double: Work(9, 695), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 696), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 111 } --
Jump(BlockId { func: 9, block: 109 })
-- block BlockId { func: 9, block: 109 } --
LocalGet(Register { double: Work(9, 697), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 698), half: Lo }, 2)
Assign(Register { double: Work(9, 699), half: Lo }, Register { double: Work(9, 697), half: Lo })
Add(Register { double: Work(9, 699), half: Lo }, Register { double: Work(9, 698), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 699), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 112 } --
Jump(BlockId { func: 9, block: 106 })
-- block BlockId { func: 9, block: 106 } --
LocalGet(Register { double: Work(9, 700), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 701), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 702), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 703), half: Lo }, 8)
ShrU(Register { double: Work(9, 704), half: Lo }, Register { double: Work(9, 702), half: Lo }, Register { double: Work(9, 703), half: Lo })
Set(Register { double: Work(9, 705), half: Lo }, 15)
And(Register { double: Work(9, 706), half: Lo }, Register { double: Work(9, 704), half: Lo }, Const(15))
Assign(Register { double: Work(9, 707), half: Lo }, Register { double: Work(9, 701), half: Lo })
Add(Register { double: Work(9, 707), half: Lo }, Register { double: Work(9, 706), half: Lo })
Set(Register { double: Work(9, 708), half: Lo }, 4136)
Assign(Register { double: Work(9, 709), half: Lo }, Register { double: Work(9, 707), half: Lo })
Add(Register { double: Work(9, 709), half: Lo }, Register { double: Work(9, 708), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 709), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 710), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 711), half: Lo }, Register { double: Work(9, 700), half: Lo })
Add(Register { double: Work(9, 711), half: Lo }, Register { double: Work(9, 710), half: Lo })
Set(Register { double: Work(9, 712), half: Lo }, 6208)
Assign(Register { double: Work(9, 713), half: Lo }, Register { double: Work(9, 711), half: Lo })
Add(Register { double: Work(9, 713), half: Lo }, Register { double: Work(9, 712), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 713), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 714), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 113 }, false_label: BlockId { func: 9, block: 114 }, cond: Register { double: Work(9, 714), half: Lo } }
-- block BlockId { func: 9, block: 114 } --
LocalGet(Register { double: Work(9, 715), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 716), half: Lo }, 4)
Assign(Register { double: Work(9, 717), half: Lo }, Register { double: Work(9, 715), half: Lo })
Add(Register { double: Work(9, 717), half: Lo }, Register { double: Work(9, 716), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 717), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 115 } --
Jump(BlockId { func: 9, block: 113 })
-- block BlockId { func: 9, block: 113 } --
LocalGet(Register { double: Work(9, 718), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 719), half: Lo }, 2)
Assign(Register { double: Work(9, 720), half: Lo }, Register { double: Work(9, 718), half: Lo })
Add(Register { double: Work(9, 720), half: Lo }, Register { double: Work(9, 719), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 720), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 116 } --
Jump(BlockId { func: 9, block: 7 })
-- block BlockId { func: 9, block: 7 } --
LocalGet(Register { double: Work(9, 721), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 722), half: Lo }, -7)
Assign(Register { double: Work(9, 723), half: Lo }, Register { double: Work(9, 721), half: Lo })
Add(Register { double: Work(9, 723), half: Lo }, Register { double: Work(9, 722), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpTable { arms: [Some(BlockId { func: 9, block: 124 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 123 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 122 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 121 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 120 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 119 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 118 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 2 }), Some(BlockId { func: 9, block: 117 })], default: Some(BlockId { func: 9, block: 125 }), cond: Register { double: Work(9, 723), half: Lo } }
-- block BlockId { func: 9, block: 126 } --
Jump(BlockId { func: 9, block: 125 })
-- block BlockId { func: 9, block: 125 } --
LocalGet(Register { double: Work(9, 724), half: Lo }, 4, Lo)
Set(Register { double: Work(9, 725), half: Lo }, 101)
Ne(Register { double: Work(9, 726), half: Lo }, Register { double: Work(9, 724), half: Lo }, Register { double: Work(9, 725), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 2 }, false_label: BlockId { func: 9, block: 127 }, cond: Register { double: Work(9, 726), half: Lo } }
-- block BlockId { func: 9, block: 127 } --
Set(Register { double: Work(9, 727), half: Lo }, 4136)
LocalSet(2, Lo, Register { double: Work(9, 727), half: Lo })
LocalGet(Register { double: Work(9, 728), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 729), half: Lo }, 4155)
Assign(Register { double: Work(9, 730), half: Lo }, Register { double: Work(9, 728), half: Lo })
Add(Register { double: Work(9, 730), half: Lo }, Register { double: Work(9, 729), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 730), half: Lo })
Jump(BlockId { func: 9, block: 128 })
-- block BlockId { func: 9, block: 128 } --
LocalGet(Register { double: Work(9, 731), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 732), half: Lo }, 2, Lo)
Assign(Register { double: Work(9, 733), half: Lo }, Register { double: Work(9, 731), half: Lo })
Add(Register { double: Work(9, 733), half: Lo }, Register { double: Work(9, 732), half: Lo })
LocalGet(Register { double: Work(9, 734), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 735), half: Lo }, 2, Lo)
LocalGet(Register { double: Work(9, 736), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 736), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 737), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 738), half: Lo }, Register { double: Work(9, 735), half: Lo })
Add(Register { double: Work(9, 738), half: Lo }, Register { double: Work(9, 737), half: Lo })
Assign(Register { double: Work(9, 739), half: Lo }, Register { double: Work(9, 734), half: Lo })
Add(Register { double: Work(9, 739), half: Lo }, Register { double: Work(9, 738), half: Lo })
Set(Register { double: Work(9, 740), half: Lo }, -4096)
Assign(Register { double: Work(9, 741), half: Lo }, Register { double: Work(9, 739), half: Lo })
Add(Register { double: Work(9, 741), half: Lo }, Register { double: Work(9, 740), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 741), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 742), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 733), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 742), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 743), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 744), half: Lo }, -4136)
Assign(Register { double: Work(9, 745), half: Lo }, Register { double: Work(9, 743), half: Lo })
Add(Register { double: Work(9, 745), half: Lo }, Register { double: Work(9, 744), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 745), half: Lo })
LocalGet(Register { double: Work(9, 746), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 747), half: Lo }, 1)
Assign(Register { double: Work(9, 748), half: Lo }, Register { double: Work(9, 746), half: Lo })
Add(Register { double: Work(9, 748), half: Lo }, Register { double: Work(9, 747), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 748), half: Lo })
LocalGet(Register { double: Work(9, 749), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 750), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 750), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 751), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 752), half: Lo }, 15)
And(Register { double: Work(9, 753), half: Lo }, Register { double: Work(9, 751), half: Lo }, Const(15))
LocalSet(5, Lo, Register { double: Work(9, 753), half: Lo })
LtU(Register { double: Work(9, 754), half: Lo }, Register { double: Work(9, 749), half: Lo }, Register { double: Work(9, 753), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 128 }, false_label: BlockId { func: 9, block: 129 }, cond: Register { double: Work(9, 754), half: Lo } }
-- block BlockId { func: 9, block: 129 } --
LocalGet(Register { double: Work(9, 755), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 756), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 757), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 757), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 758), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 759), half: Lo }, Register { double: Work(9, 756), half: Lo })
Add(Register { double: Work(9, 759), half: Lo }, Register { double: Work(9, 758), half: Lo })
Set(Register { double: Work(9, 760), half: Lo }, 1)
Assign(Register { double: Work(9, 761), half: Lo }, Register { double: Work(9, 759), half: Lo })
Add(Register { double: Work(9, 761), half: Lo }, Register { double: Work(9, 760), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 755), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Store16(Register { double: Work(9, 761), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 762), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 762), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 763), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 764), half: Lo }, 2)
Assign(Register { double: Work(9, 765), half: Lo }, Register { double: Work(9, 763), half: Lo })
Add(Register { double: Work(9, 765), half: Lo }, Register { double: Work(9, 764), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 765), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 130 } --
Jump(BlockId { func: 9, block: 124 })
-- block BlockId { func: 9, block: 124 } --
LocalGet(Register { double: Work(9, 766), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 767), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 768), half: Lo }, 8)
ShrU(Register { double: Work(9, 769), half: Lo }, Register { double: Work(9, 767), half: Lo }, Register { double: Work(9, 768), half: Lo })
Set(Register { double: Work(9, 770), half: Lo }, 15)
And(Register { double: Work(9, 771), half: Lo }, Register { double: Work(9, 769), half: Lo }, Const(15))
Assign(Register { double: Work(9, 772), half: Lo }, Register { double: Work(9, 766), half: Lo })
Add(Register { double: Work(9, 772), half: Lo }, Register { double: Work(9, 771), half: Lo })
Set(Register { double: Work(9, 773), half: Lo }, 4136)
Assign(Register { double: Work(9, 774), half: Lo }, Register { double: Work(9, 772), half: Lo })
Add(Register { double: Work(9, 774), half: Lo }, Register { double: Work(9, 773), half: Lo })
LocalGet(Register { double: Work(9, 775), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 775), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4158), half: Lo })
Load8(Register { double: Work(9, 776), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 774), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 776), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 777), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 777), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 778), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 779), half: Lo }, 2)
Assign(Register { double: Work(9, 780), half: Lo }, Register { double: Work(9, 778), half: Lo })
Add(Register { double: Work(9, 780), half: Lo }, Register { double: Work(9, 779), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 780), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 131 } --
Jump(BlockId { func: 9, block: 123 })
-- block BlockId { func: 9, block: 123 } --
LocalGet(Register { double: Work(9, 781), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 781), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(6208), half: Lo })
Load8(Register { double: Work(9, 782), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 782), half: Lo })
Eqz(Register { double: Work(9, 783), half: Lo }, Register { double: Work(9, 782), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 132 }, false_label: BlockId { func: 9, block: 133 }, cond: Register { double: Work(9, 783), half: Lo } }
-- block BlockId { func: 9, block: 133 } --
LocalGet(Register { double: Work(9, 784), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 785), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 786), half: Lo }, 15)
And(Register { double: Work(9, 787), half: Lo }, Register { double: Work(9, 785), half: Lo }, Const(15))
Assign(Register { double: Work(9, 788), half: Lo }, Register { double: Work(9, 784), half: Lo })
Add(Register { double: Work(9, 788), half: Lo }, Register { double: Work(9, 787), half: Lo })
Set(Register { double: Work(9, 789), half: Lo }, 4136)
Assign(Register { double: Work(9, 790), half: Lo }, Register { double: Work(9, 788), half: Lo })
Add(Register { double: Work(9, 790), half: Lo }, Register { double: Work(9, 789), half: Lo })
Set(Register { double: Work(9, 791), half: Lo }, 0)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 790), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 791), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 132 })
-- block BlockId { func: 9, block: 132 } --
LocalGet(Register { double: Work(9, 792), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 793), half: Lo }, 6209)
Assign(Register { double: Work(9, 794), half: Lo }, Register { double: Work(9, 792), half: Lo })
Add(Register { double: Work(9, 794), half: Lo }, Register { double: Work(9, 793), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 794), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 795), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 5 }, false_label: BlockId { func: 9, block: 134 }, cond: Register { double: Work(9, 795), half: Lo } }
-- block BlockId { func: 9, block: 134 } --
LocalGet(Register { double: Work(9, 796), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 797), half: Lo }, 0)
Ne(Register { double: Work(9, 798), half: Lo }, Register { double: Work(9, 796), half: Lo }, Register { double: Work(9, 797), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 798), half: Lo })
Jump(BlockId { func: 9, block: 4 })
-- block BlockId { func: 9, block: 135 } --
Jump(BlockId { func: 9, block: 122 })
-- block BlockId { func: 9, block: 122 } --
LocalGet(Register { double: Work(9, 799), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 800), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 801), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 802), half: Lo }, 8)
ShrU(Register { double: Work(9, 803), half: Lo }, Register { double: Work(9, 801), half: Lo }, Register { double: Work(9, 802), half: Lo })
Set(Register { double: Work(9, 804), half: Lo }, 15)
And(Register { double: Work(9, 805), half: Lo }, Register { double: Work(9, 803), half: Lo }, Const(15))
Assign(Register { double: Work(9, 806), half: Lo }, Register { double: Work(9, 800), half: Lo })
Add(Register { double: Work(9, 806), half: Lo }, Register { double: Work(9, 805), half: Lo })
Set(Register { double: Work(9, 807), half: Lo }, 4136)
Assign(Register { double: Work(9, 808), half: Lo }, Register { double: Work(9, 806), half: Lo })
Add(Register { double: Work(9, 808), half: Lo }, Register { double: Work(9, 807), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 808), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 809), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 799), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4158), half: Lo })
Store8(Register { double: Work(9, 809), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 810), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 811), half: Lo }, 2)
Assign(Register { double: Work(9, 812), half: Lo }, Register { double: Work(9, 810), half: Lo })
Add(Register { double: Work(9, 812), half: Lo }, Register { double: Work(9, 811), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 812), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 136 } --
Jump(BlockId { func: 9, block: 121 })
-- block BlockId { func: 9, block: 121 } --
LocalGet(Register { double: Work(9, 813), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 814), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 815), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 816), half: Lo }, 8)
ShrU(Register { double: Work(9, 817), half: Lo }, Register { double: Work(9, 815), half: Lo }, Register { double: Work(9, 816), half: Lo })
Set(Register { double: Work(9, 818), half: Lo }, 15)
And(Register { double: Work(9, 819), half: Lo }, Register { double: Work(9, 817), half: Lo }, Const(15))
Assign(Register { double: Work(9, 820), half: Lo }, Register { double: Work(9, 814), half: Lo })
Add(Register { double: Work(9, 820), half: Lo }, Register { double: Work(9, 819), half: Lo })
Set(Register { double: Work(9, 821), half: Lo }, 4136)
Assign(Register { double: Work(9, 822), half: Lo }, Register { double: Work(9, 820), half: Lo })
Add(Register { double: Work(9, 822), half: Lo }, Register { double: Work(9, 821), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 822), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 823), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 813), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4159), half: Lo })
Store8(Register { double: Work(9, 823), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 824), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 825), half: Lo }, 2)
Assign(Register { double: Work(9, 826), half: Lo }, Register { double: Work(9, 824), half: Lo })
Add(Register { double: Work(9, 826), half: Lo }, Register { double: Work(9, 825), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 826), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 137 } --
Jump(BlockId { func: 9, block: 120 })
-- block BlockId { func: 9, block: 120 } --
LocalGet(Register { double: Work(9, 827), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 828), half: Lo }, 4151)
Assign(Register { double: Work(9, 829), half: Lo }, Register { double: Work(9, 827), half: Lo })
Add(Register { double: Work(9, 829), half: Lo }, Register { double: Work(9, 828), half: Lo })
LocalGet(Register { double: Work(9, 830), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 831), half: Lo }, 4136)
Assign(Register { double: Work(9, 832), half: Lo }, Register { double: Work(9, 830), half: Lo })
Add(Register { double: Work(9, 832), half: Lo }, Register { double: Work(9, 831), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 832), half: Lo })
LocalGet(Register { double: Work(9, 833), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 834), half: Lo }, 8)
ShrU(Register { double: Work(9, 835), half: Lo }, Register { double: Work(9, 833), half: Lo }, Register { double: Work(9, 834), half: Lo })
Set(Register { double: Work(9, 836), half: Lo }, 15)
And(Register { double: Work(9, 837), half: Lo }, Register { double: Work(9, 835), half: Lo }, Const(15))
Assign(Register { double: Work(9, 838), half: Lo }, Register { double: Work(9, 832), half: Lo })
Add(Register { double: Work(9, 838), half: Lo }, Register { double: Work(9, 837), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 838), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 839), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 840), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 840), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 841), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 841), half: Lo })
Assign(Register { double: Work(9, 842), half: Lo }, Register { double: Work(9, 839), half: Lo })
Add(Register { double: Work(9, 842), half: Lo }, Register { double: Work(9, 841), half: Lo })
Set(Register { double: Work(9, 843), half: Lo }, 4095)
GtU(Register { double: Work(9, 844), half: Lo }, Register { double: Work(9, 842), half: Lo }, Register { double: Work(9, 843), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 829), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 844), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 845), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 846), half: Lo }, 2, Lo)
LocalGet(Register { double: Work(9, 847), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 848), half: Lo }, 3, Lo)
Set(Register { double: Work(9, 849), half: Lo }, 15)
And(Register { double: Work(9, 850), half: Lo }, Register { double: Work(9, 848), half: Lo }, Const(15))
Assign(Register { double: Work(9, 851), half: Lo }, Register { double: Work(9, 847), half: Lo })
Add(Register { double: Work(9, 851), half: Lo }, Register { double: Work(9, 850), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 851), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 852), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 853), half: Lo }, Register { double: Work(9, 846), half: Lo })
Add(Register { double: Work(9, 853), half: Lo }, Register { double: Work(9, 852), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 845), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Store16(Register { double: Work(9, 853), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 854), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 855), half: Lo }, 2)
Assign(Register { double: Work(9, 856), half: Lo }, Register { double: Work(9, 854), half: Lo })
Add(Register { double: Work(9, 856), half: Lo }, Register { double: Work(9, 855), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 856), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 138 } --
Jump(BlockId { func: 9, block: 119 })
-- block BlockId { func: 9, block: 119 } --
LocalGet(Register { double: Work(9, 857), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 858), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 859), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 860), half: Lo }, 8)
ShrU(Register { double: Work(9, 861), half: Lo }, Register { double: Work(9, 859), half: Lo }, Register { double: Work(9, 860), half: Lo })
Set(Register { double: Work(9, 862), half: Lo }, 15)
And(Register { double: Work(9, 863), half: Lo }, Register { double: Work(9, 861), half: Lo }, Const(15))
Assign(Register { double: Work(9, 864), half: Lo }, Register { double: Work(9, 858), half: Lo })
Add(Register { double: Work(9, 864), half: Lo }, Register { double: Work(9, 863), half: Lo })
Set(Register { double: Work(9, 865), half: Lo }, 4136)
Assign(Register { double: Work(9, 866), half: Lo }, Register { double: Work(9, 864), half: Lo })
Add(Register { double: Work(9, 866), half: Lo }, Register { double: Work(9, 865), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 866), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 867), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 868), half: Lo }, 5)
Assign(Register { double: Work(9, 869), half: Lo }, Register { double: Work(9, 867), half: Lo })
Mul(Register { double: Work(9, 869), half: Lo }, Register { double: Work(9, 868), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 857), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Store16(Register { double: Work(9, 869), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 870), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 871), half: Lo }, 2)
Assign(Register { double: Work(9, 872), half: Lo }, Register { double: Work(9, 870), half: Lo })
Add(Register { double: Work(9, 872), half: Lo }, Register { double: Work(9, 871), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 872), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 139 } --
Jump(BlockId { func: 9, block: 118 })
-- block BlockId { func: 9, block: 118 } --
LocalGet(Register { double: Work(9, 873), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 874), half: Lo }, 40)
Assign(Register { double: Work(9, 875), half: Lo }, Register { double: Work(9, 873), half: Lo })
Add(Register { double: Work(9, 875), half: Lo }, Register { double: Work(9, 874), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 875), half: Lo })
LocalGet(Register { double: Work(9, 876), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 876), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 877), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 878), half: Lo }, Register { double: Work(9, 875), half: Lo })
Add(Register { double: Work(9, 878), half: Lo }, Register { double: Work(9, 877), half: Lo })
LocalGet(Register { double: Work(9, 879), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 880), half: Lo }, 4136)
Assign(Register { double: Work(9, 881), half: Lo }, Register { double: Work(9, 879), half: Lo })
Add(Register { double: Work(9, 881), half: Lo }, Register { double: Work(9, 880), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 881), half: Lo })
LocalGet(Register { double: Work(9, 882), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 883), half: Lo }, 8)
ShrU(Register { double: Work(9, 884), half: Lo }, Register { double: Work(9, 882), half: Lo }, Register { double: Work(9, 883), half: Lo })
Set(Register { double: Work(9, 885), half: Lo }, 15)
And(Register { double: Work(9, 886), half: Lo }, Register { double: Work(9, 884), half: Lo }, Const(15))
Assign(Register { double: Work(9, 887), half: Lo }, Register { double: Work(9, 881), half: Lo })
Add(Register { double: Work(9, 887), half: Lo }, Register { double: Work(9, 886), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 887), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 888), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 889), half: Lo }, 100)
DivU(Register { double: Work(9, 890), half: Lo }, Register { double: Work(9, 888), half: Lo }, Register { double: Work(9, 889), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 878), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 890), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 891), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 891), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 892), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 893), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 894), half: Lo }, Register { double: Work(9, 892), half: Lo })
Add(Register { double: Work(9, 894), half: Lo }, Register { double: Work(9, 893), half: Lo })
Set(Register { double: Work(9, 895), half: Lo }, 1)
Assign(Register { double: Work(9, 896), half: Lo }, Register { double: Work(9, 894), half: Lo })
Add(Register { double: Work(9, 896), half: Lo }, Register { double: Work(9, 895), half: Lo })
LocalGet(Register { double: Work(9, 897), half: Lo }, 3, Lo)
LocalGet(Register { double: Work(9, 898), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 899), half: Lo }, 4155)
Assign(Register { double: Work(9, 900), half: Lo }, Register { double: Work(9, 898), half: Lo })
Add(Register { double: Work(9, 900), half: Lo }, Register { double: Work(9, 899), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 900), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 900), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 901), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 902), half: Lo }, 15)
And(Register { double: Work(9, 903), half: Lo }, Register { double: Work(9, 901), half: Lo }, Const(15))
Assign(Register { double: Work(9, 904), half: Lo }, Register { double: Work(9, 897), half: Lo })
Add(Register { double: Work(9, 904), half: Lo }, Register { double: Work(9, 903), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 904), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 905), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 906), half: Lo }, 10)
DivU(Register { double: Work(9, 907), half: Lo }, Register { double: Work(9, 905), half: Lo }, Register { double: Work(9, 906), half: Lo })
Set(Register { double: Work(9, 908), half: Lo }, 10)
RemU(Register { double: Work(9, 909), half: Lo }, Register { double: Work(9, 907), half: Lo }, Register { double: Work(9, 908), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 896), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 909), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 910), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 910), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 911), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 912), half: Lo }, 4, Lo)
Assign(Register { double: Work(9, 913), half: Lo }, Register { double: Work(9, 911), half: Lo })
Add(Register { double: Work(9, 913), half: Lo }, Register { double: Work(9, 912), half: Lo })
Set(Register { double: Work(9, 914), half: Lo }, 2)
Assign(Register { double: Work(9, 915), half: Lo }, Register { double: Work(9, 913), half: Lo })
Add(Register { double: Work(9, 915), half: Lo }, Register { double: Work(9, 914), half: Lo })
LocalGet(Register { double: Work(9, 916), half: Lo }, 3, Lo)
LocalGet(Register { double: Work(9, 917), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 917), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 918), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 919), half: Lo }, 15)
And(Register { double: Work(9, 920), half: Lo }, Register { double: Work(9, 918), half: Lo }, Const(15))
Assign(Register { double: Work(9, 921), half: Lo }, Register { double: Work(9, 916), half: Lo })
Add(Register { double: Work(9, 921), half: Lo }, Register { double: Work(9, 920), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 921), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 922), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 923), half: Lo }, 10)
RemU(Register { double: Work(9, 924), half: Lo }, Register { double: Work(9, 922), half: Lo }, Register { double: Work(9, 923), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 915), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 924), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 925), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 925), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 926), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 927), half: Lo }, 2)
Assign(Register { double: Work(9, 928), half: Lo }, Register { double: Work(9, 926), half: Lo })
Add(Register { double: Work(9, 928), half: Lo }, Register { double: Work(9, 927), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 928), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 140 } --
Jump(BlockId { func: 9, block: 117 })
-- block BlockId { func: 9, block: 117 } --
Set(Register { double: Work(9, 929), half: Lo }, 4136)
LocalSet(2, Lo, Register { double: Work(9, 929), half: Lo })
LocalGet(Register { double: Work(9, 930), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 931), half: Lo }, 4155)
Assign(Register { double: Work(9, 932), half: Lo }, Register { double: Work(9, 930), half: Lo })
Add(Register { double: Work(9, 932), half: Lo }, Register { double: Work(9, 931), half: Lo })
LocalSet(3, Lo, Register { double: Work(9, 932), half: Lo })
Jump(BlockId { func: 9, block: 141 })
-- block BlockId { func: 9, block: 141 } --
LocalGet(Register { double: Work(9, 933), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 934), half: Lo }, 2, Lo)
LocalGet(Register { double: Work(9, 935), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 935), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 936), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 937), half: Lo }, Register { double: Work(9, 934), half: Lo })
Add(Register { double: Work(9, 937), half: Lo }, Register { double: Work(9, 936), half: Lo })
Assign(Register { double: Work(9, 938), half: Lo }, Register { double: Work(9, 933), half: Lo })
Add(Register { double: Work(9, 938), half: Lo }, Register { double: Work(9, 937), half: Lo })
Set(Register { double: Work(9, 939), half: Lo }, -4096)
Assign(Register { double: Work(9, 940), half: Lo }, Register { double: Work(9, 938), half: Lo })
Add(Register { double: Work(9, 940), half: Lo }, Register { double: Work(9, 939), half: Lo })
LocalGet(Register { double: Work(9, 941), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 942), half: Lo }, 2, Lo)
Assign(Register { double: Work(9, 943), half: Lo }, Register { double: Work(9, 941), half: Lo })
Add(Register { double: Work(9, 943), half: Lo }, Register { double: Work(9, 942), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 943), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 944), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 940), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 944), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 945), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 946), half: Lo }, -4136)
Assign(Register { double: Work(9, 947), half: Lo }, Register { double: Work(9, 945), half: Lo })
Add(Register { double: Work(9, 947), half: Lo }, Register { double: Work(9, 946), half: Lo })
LocalSet(4, Lo, Register { double: Work(9, 947), half: Lo })
LocalGet(Register { double: Work(9, 948), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 949), half: Lo }, 1)
Assign(Register { double: Work(9, 950), half: Lo }, Register { double: Work(9, 948), half: Lo })
Add(Register { double: Work(9, 950), half: Lo }, Register { double: Work(9, 949), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 950), half: Lo })
LocalGet(Register { double: Work(9, 951), half: Lo }, 4, Lo)
LocalGet(Register { double: Work(9, 952), half: Lo }, 3, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 952), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 953), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 954), half: Lo }, 15)
And(Register { double: Work(9, 955), half: Lo }, Register { double: Work(9, 953), half: Lo }, Const(15))
LocalSet(5, Lo, Register { double: Work(9, 955), half: Lo })
LtU(Register { double: Work(9, 956), half: Lo }, Register { double: Work(9, 951), half: Lo }, Register { double: Work(9, 955), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 141 }, false_label: BlockId { func: 9, block: 142 }, cond: Register { double: Work(9, 956), half: Lo } }
-- block BlockId { func: 9, block: 142 } --
LocalGet(Register { double: Work(9, 957), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 958), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(9, 959), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 959), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Load16(Register { double: Work(9, 960), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Work(9, 961), half: Lo }, Register { double: Work(9, 958), half: Lo })
Add(Register { double: Work(9, 961), half: Lo }, Register { double: Work(9, 960), half: Lo })
Set(Register { double: Work(9, 962), half: Lo }, 1)
Assign(Register { double: Work(9, 963), half: Lo }, Register { double: Work(9, 961), half: Lo })
Add(Register { double: Work(9, 963), half: Lo }, Register { double: Work(9, 962), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 957), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4156), half: Lo })
Store16(Register { double: Work(9, 963), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 964), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 964), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 965), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 966), half: Lo }, 2)
Assign(Register { double: Work(9, 967), half: Lo }, Register { double: Work(9, 965), half: Lo })
Add(Register { double: Work(9, 967), half: Lo }, Register { double: Work(9, 966), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 967), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 143 } --
Jump(BlockId { func: 9, block: 6 })
-- block BlockId { func: 9, block: 6 } --
LocalGet(Register { double: Work(9, 968), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 969), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 968), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(6224), half: Lo })
Store8(Register { double: Work(9, 969), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 970), half: Lo }, 1, Lo)
Set(Register { double: Work(9, 971), half: Lo }, 2)
Assign(Register { double: Work(9, 972), half: Lo }, Register { double: Work(9, 970), half: Lo })
Add(Register { double: Work(9, 972), half: Lo }, Register { double: Work(9, 971), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 972), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 144 } --
Jump(BlockId { func: 9, block: 5 })
-- block BlockId { func: 9, block: 5 } --
Set(Register { double: Work(9, 973), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 973), half: Lo })
LocalGet(Register { double: Work(9, 974), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 975), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 976), half: Lo }, 4155)
Assign(Register { double: Work(9, 977), half: Lo }, Register { double: Work(9, 975), half: Lo })
Add(Register { double: Work(9, 977), half: Lo }, Register { double: Work(9, 976), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 977), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 978), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 979), half: Lo }, 15)
And(Register { double: Work(9, 980), half: Lo }, Register { double: Work(9, 978), half: Lo }, Const(15))
Assign(Register { double: Work(9, 981), half: Lo }, Register { double: Work(9, 974), half: Lo })
Add(Register { double: Work(9, 981), half: Lo }, Register { double: Work(9, 980), half: Lo })
Set(Register { double: Work(9, 982), half: Lo }, 4136)
Assign(Register { double: Work(9, 983), half: Lo }, Register { double: Work(9, 981), half: Lo })
Add(Register { double: Work(9, 983), half: Lo }, Register { double: Work(9, 982), half: Lo })
Set(Register { double: Work(9, 984), half: Lo }, 1)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 983), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 984), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 4 })
-- block BlockId { func: 9, block: 4 } --
LocalGet(Register { double: Work(9, 985), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 986), half: Lo }, 6210)
Assign(Register { double: Work(9, 987), half: Lo }, Register { double: Work(9, 985), half: Lo })
Add(Register { double: Work(9, 987), half: Lo }, Register { double: Work(9, 986), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 987), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 988), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 989), half: Lo }, Register { double: Work(9, 988), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 145 }, false_label: BlockId { func: 9, block: 146 }, cond: Register { double: Work(9, 989), half: Lo } }
-- block BlockId { func: 9, block: 146 } --
LocalGet(Register { double: Work(9, 990), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 991), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 992), half: Lo }, 4155)
Assign(Register { double: Work(9, 993), half: Lo }, Register { double: Work(9, 991), half: Lo })
Add(Register { double: Work(9, 993), half: Lo }, Register { double: Work(9, 992), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 993), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 994), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 995), half: Lo }, 15)
And(Register { double: Work(9, 996), half: Lo }, Register { double: Work(9, 994), half: Lo }, Const(15))
Assign(Register { double: Work(9, 997), half: Lo }, Register { double: Work(9, 990), half: Lo })
Add(Register { double: Work(9, 997), half: Lo }, Register { double: Work(9, 996), half: Lo })
Set(Register { double: Work(9, 998), half: Lo }, 4136)
Assign(Register { double: Work(9, 999), half: Lo }, Register { double: Work(9, 997), half: Lo })
Add(Register { double: Work(9, 999), half: Lo }, Register { double: Work(9, 998), half: Lo })
Set(Register { double: Work(9, 1000), half: Lo }, 2)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 999), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1000), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1001), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1001), half: Lo })
Jump(BlockId { func: 9, block: 145 })
-- block BlockId { func: 9, block: 145 } --
LocalGet(Register { double: Work(9, 1002), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1003), half: Lo }, 6211)
Assign(Register { double: Work(9, 1004), half: Lo }, Register { double: Work(9, 1002), half: Lo })
Add(Register { double: Work(9, 1004), half: Lo }, Register { double: Work(9, 1003), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1004), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1005), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1006), half: Lo }, Register { double: Work(9, 1005), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 147 }, false_label: BlockId { func: 9, block: 148 }, cond: Register { double: Work(9, 1006), half: Lo } }
-- block BlockId { func: 9, block: 148 } --
LocalGet(Register { double: Work(9, 1007), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1008), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1009), half: Lo }, 4155)
Assign(Register { double: Work(9, 1010), half: Lo }, Register { double: Work(9, 1008), half: Lo })
Add(Register { double: Work(9, 1010), half: Lo }, Register { double: Work(9, 1009), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1010), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1011), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1012), half: Lo }, 15)
And(Register { double: Work(9, 1013), half: Lo }, Register { double: Work(9, 1011), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1014), half: Lo }, Register { double: Work(9, 1007), half: Lo })
Add(Register { double: Work(9, 1014), half: Lo }, Register { double: Work(9, 1013), half: Lo })
Set(Register { double: Work(9, 1015), half: Lo }, 4136)
Assign(Register { double: Work(9, 1016), half: Lo }, Register { double: Work(9, 1014), half: Lo })
Add(Register { double: Work(9, 1016), half: Lo }, Register { double: Work(9, 1015), half: Lo })
Set(Register { double: Work(9, 1017), half: Lo }, 3)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1016), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1017), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1018), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1018), half: Lo })
Jump(BlockId { func: 9, block: 147 })
-- block BlockId { func: 9, block: 147 } --
LocalGet(Register { double: Work(9, 1019), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1020), half: Lo }, 6212)
Assign(Register { double: Work(9, 1021), half: Lo }, Register { double: Work(9, 1019), half: Lo })
Add(Register { double: Work(9, 1021), half: Lo }, Register { double: Work(9, 1020), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1021), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1022), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1023), half: Lo }, Register { double: Work(9, 1022), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 149 }, false_label: BlockId { func: 9, block: 150 }, cond: Register { double: Work(9, 1023), half: Lo } }
-- block BlockId { func: 9, block: 150 } --
LocalGet(Register { double: Work(9, 1024), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1025), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1026), half: Lo }, 4155)
Assign(Register { double: Work(9, 1027), half: Lo }, Register { double: Work(9, 1025), half: Lo })
Add(Register { double: Work(9, 1027), half: Lo }, Register { double: Work(9, 1026), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1027), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1028), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1029), half: Lo }, 15)
And(Register { double: Work(9, 1030), half: Lo }, Register { double: Work(9, 1028), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1031), half: Lo }, Register { double: Work(9, 1024), half: Lo })
Add(Register { double: Work(9, 1031), half: Lo }, Register { double: Work(9, 1030), half: Lo })
Set(Register { double: Work(9, 1032), half: Lo }, 4136)
Assign(Register { double: Work(9, 1033), half: Lo }, Register { double: Work(9, 1031), half: Lo })
Add(Register { double: Work(9, 1033), half: Lo }, Register { double: Work(9, 1032), half: Lo })
Set(Register { double: Work(9, 1034), half: Lo }, 4)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1033), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1034), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1035), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1035), half: Lo })
Jump(BlockId { func: 9, block: 149 })
-- block BlockId { func: 9, block: 149 } --
LocalGet(Register { double: Work(9, 1036), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1037), half: Lo }, 6213)
Assign(Register { double: Work(9, 1038), half: Lo }, Register { double: Work(9, 1036), half: Lo })
Add(Register { double: Work(9, 1038), half: Lo }, Register { double: Work(9, 1037), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1038), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1039), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1040), half: Lo }, Register { double: Work(9, 1039), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 151 }, false_label: BlockId { func: 9, block: 152 }, cond: Register { double: Work(9, 1040), half: Lo } }
-- block BlockId { func: 9, block: 152 } --
LocalGet(Register { double: Work(9, 1041), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1042), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1043), half: Lo }, 4155)
Assign(Register { double: Work(9, 1044), half: Lo }, Register { double: Work(9, 1042), half: Lo })
Add(Register { double: Work(9, 1044), half: Lo }, Register { double: Work(9, 1043), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1044), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1045), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1046), half: Lo }, 15)
And(Register { double: Work(9, 1047), half: Lo }, Register { double: Work(9, 1045), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1048), half: Lo }, Register { double: Work(9, 1041), half: Lo })
Add(Register { double: Work(9, 1048), half: Lo }, Register { double: Work(9, 1047), half: Lo })
Set(Register { double: Work(9, 1049), half: Lo }, 4136)
Assign(Register { double: Work(9, 1050), half: Lo }, Register { double: Work(9, 1048), half: Lo })
Add(Register { double: Work(9, 1050), half: Lo }, Register { double: Work(9, 1049), half: Lo })
Set(Register { double: Work(9, 1051), half: Lo }, 5)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1050), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1051), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1052), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1052), half: Lo })
Jump(BlockId { func: 9, block: 151 })
-- block BlockId { func: 9, block: 151 } --
LocalGet(Register { double: Work(9, 1053), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1054), half: Lo }, 6214)
Assign(Register { double: Work(9, 1055), half: Lo }, Register { double: Work(9, 1053), half: Lo })
Add(Register { double: Work(9, 1055), half: Lo }, Register { double: Work(9, 1054), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1055), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1056), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1057), half: Lo }, Register { double: Work(9, 1056), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 153 }, false_label: BlockId { func: 9, block: 154 }, cond: Register { double: Work(9, 1057), half: Lo } }
-- block BlockId { func: 9, block: 154 } --
LocalGet(Register { double: Work(9, 1058), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1059), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1060), half: Lo }, 4155)
Assign(Register { double: Work(9, 1061), half: Lo }, Register { double: Work(9, 1059), half: Lo })
Add(Register { double: Work(9, 1061), half: Lo }, Register { double: Work(9, 1060), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1061), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1062), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1063), half: Lo }, 15)
And(Register { double: Work(9, 1064), half: Lo }, Register { double: Work(9, 1062), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1065), half: Lo }, Register { double: Work(9, 1058), half: Lo })
Add(Register { double: Work(9, 1065), half: Lo }, Register { double: Work(9, 1064), half: Lo })
Set(Register { double: Work(9, 1066), half: Lo }, 4136)
Assign(Register { double: Work(9, 1067), half: Lo }, Register { double: Work(9, 1065), half: Lo })
Add(Register { double: Work(9, 1067), half: Lo }, Register { double: Work(9, 1066), half: Lo })
Set(Register { double: Work(9, 1068), half: Lo }, 6)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1067), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1068), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1069), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1069), half: Lo })
Jump(BlockId { func: 9, block: 153 })
-- block BlockId { func: 9, block: 153 } --
LocalGet(Register { double: Work(9, 1070), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1071), half: Lo }, 6215)
Assign(Register { double: Work(9, 1072), half: Lo }, Register { double: Work(9, 1070), half: Lo })
Add(Register { double: Work(9, 1072), half: Lo }, Register { double: Work(9, 1071), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1072), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1073), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1074), half: Lo }, Register { double: Work(9, 1073), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 155 }, false_label: BlockId { func: 9, block: 156 }, cond: Register { double: Work(9, 1074), half: Lo } }
-- block BlockId { func: 9, block: 156 } --
LocalGet(Register { double: Work(9, 1075), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1076), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1077), half: Lo }, 4155)
Assign(Register { double: Work(9, 1078), half: Lo }, Register { double: Work(9, 1076), half: Lo })
Add(Register { double: Work(9, 1078), half: Lo }, Register { double: Work(9, 1077), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1078), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1079), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1080), half: Lo }, 15)
And(Register { double: Work(9, 1081), half: Lo }, Register { double: Work(9, 1079), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1082), half: Lo }, Register { double: Work(9, 1075), half: Lo })
Add(Register { double: Work(9, 1082), half: Lo }, Register { double: Work(9, 1081), half: Lo })
Set(Register { double: Work(9, 1083), half: Lo }, 4136)
Assign(Register { double: Work(9, 1084), half: Lo }, Register { double: Work(9, 1082), half: Lo })
Add(Register { double: Work(9, 1084), half: Lo }, Register { double: Work(9, 1083), half: Lo })
Set(Register { double: Work(9, 1085), half: Lo }, 7)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1084), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1085), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1086), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1086), half: Lo })
Jump(BlockId { func: 9, block: 155 })
-- block BlockId { func: 9, block: 155 } --
LocalGet(Register { double: Work(9, 1087), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1088), half: Lo }, 6216)
Assign(Register { double: Work(9, 1089), half: Lo }, Register { double: Work(9, 1087), half: Lo })
Add(Register { double: Work(9, 1089), half: Lo }, Register { double: Work(9, 1088), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1089), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1090), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1091), half: Lo }, Register { double: Work(9, 1090), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 157 }, false_label: BlockId { func: 9, block: 158 }, cond: Register { double: Work(9, 1091), half: Lo } }
-- block BlockId { func: 9, block: 158 } --
LocalGet(Register { double: Work(9, 1092), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1093), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1094), half: Lo }, 4155)
Assign(Register { double: Work(9, 1095), half: Lo }, Register { double: Work(9, 1093), half: Lo })
Add(Register { double: Work(9, 1095), half: Lo }, Register { double: Work(9, 1094), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1095), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1096), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1097), half: Lo }, 15)
And(Register { double: Work(9, 1098), half: Lo }, Register { double: Work(9, 1096), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1099), half: Lo }, Register { double: Work(9, 1092), half: Lo })
Add(Register { double: Work(9, 1099), half: Lo }, Register { double: Work(9, 1098), half: Lo })
Set(Register { double: Work(9, 1100), half: Lo }, 4136)
Assign(Register { double: Work(9, 1101), half: Lo }, Register { double: Work(9, 1099), half: Lo })
Add(Register { double: Work(9, 1101), half: Lo }, Register { double: Work(9, 1100), half: Lo })
Set(Register { double: Work(9, 1102), half: Lo }, 8)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1101), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1102), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1103), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1103), half: Lo })
Jump(BlockId { func: 9, block: 157 })
-- block BlockId { func: 9, block: 157 } --
LocalGet(Register { double: Work(9, 1104), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1105), half: Lo }, 6217)
Assign(Register { double: Work(9, 1106), half: Lo }, Register { double: Work(9, 1104), half: Lo })
Add(Register { double: Work(9, 1106), half: Lo }, Register { double: Work(9, 1105), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1106), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1107), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1108), half: Lo }, Register { double: Work(9, 1107), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 159 }, false_label: BlockId { func: 9, block: 160 }, cond: Register { double: Work(9, 1108), half: Lo } }
-- block BlockId { func: 9, block: 160 } --
LocalGet(Register { double: Work(9, 1109), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1110), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1111), half: Lo }, 4155)
Assign(Register { double: Work(9, 1112), half: Lo }, Register { double: Work(9, 1110), half: Lo })
Add(Register { double: Work(9, 1112), half: Lo }, Register { double: Work(9, 1111), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1112), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1113), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1114), half: Lo }, 15)
And(Register { double: Work(9, 1115), half: Lo }, Register { double: Work(9, 1113), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1116), half: Lo }, Register { double: Work(9, 1109), half: Lo })
Add(Register { double: Work(9, 1116), half: Lo }, Register { double: Work(9, 1115), half: Lo })
Set(Register { double: Work(9, 1117), half: Lo }, 4136)
Assign(Register { double: Work(9, 1118), half: Lo }, Register { double: Work(9, 1116), half: Lo })
Add(Register { double: Work(9, 1118), half: Lo }, Register { double: Work(9, 1117), half: Lo })
Set(Register { double: Work(9, 1119), half: Lo }, 9)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1118), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1119), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1120), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1120), half: Lo })
Jump(BlockId { func: 9, block: 159 })
-- block BlockId { func: 9, block: 159 } --
LocalGet(Register { double: Work(9, 1121), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1122), half: Lo }, 6218)
Assign(Register { double: Work(9, 1123), half: Lo }, Register { double: Work(9, 1121), half: Lo })
Add(Register { double: Work(9, 1123), half: Lo }, Register { double: Work(9, 1122), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1123), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1124), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1125), half: Lo }, Register { double: Work(9, 1124), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 161 }, false_label: BlockId { func: 9, block: 162 }, cond: Register { double: Work(9, 1125), half: Lo } }
-- block BlockId { func: 9, block: 162 } --
LocalGet(Register { double: Work(9, 1126), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1127), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1128), half: Lo }, 4155)
Assign(Register { double: Work(9, 1129), half: Lo }, Register { double: Work(9, 1127), half: Lo })
Add(Register { double: Work(9, 1129), half: Lo }, Register { double: Work(9, 1128), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1129), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1130), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1131), half: Lo }, 15)
And(Register { double: Work(9, 1132), half: Lo }, Register { double: Work(9, 1130), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1133), half: Lo }, Register { double: Work(9, 1126), half: Lo })
Add(Register { double: Work(9, 1133), half: Lo }, Register { double: Work(9, 1132), half: Lo })
Set(Register { double: Work(9, 1134), half: Lo }, 4136)
Assign(Register { double: Work(9, 1135), half: Lo }, Register { double: Work(9, 1133), half: Lo })
Add(Register { double: Work(9, 1135), half: Lo }, Register { double: Work(9, 1134), half: Lo })
Set(Register { double: Work(9, 1136), half: Lo }, 10)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1135), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1136), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1137), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1137), half: Lo })
Jump(BlockId { func: 9, block: 161 })
-- block BlockId { func: 9, block: 161 } --
LocalGet(Register { double: Work(9, 1138), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1139), half: Lo }, 6219)
Assign(Register { double: Work(9, 1140), half: Lo }, Register { double: Work(9, 1138), half: Lo })
Add(Register { double: Work(9, 1140), half: Lo }, Register { double: Work(9, 1139), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1140), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1141), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1142), half: Lo }, Register { double: Work(9, 1141), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 163 }, false_label: BlockId { func: 9, block: 164 }, cond: Register { double: Work(9, 1142), half: Lo } }
-- block BlockId { func: 9, block: 164 } --
LocalGet(Register { double: Work(9, 1143), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1144), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1145), half: Lo }, 4155)
Assign(Register { double: Work(9, 1146), half: Lo }, Register { double: Work(9, 1144), half: Lo })
Add(Register { double: Work(9, 1146), half: Lo }, Register { double: Work(9, 1145), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1146), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1147), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1148), half: Lo }, 15)
And(Register { double: Work(9, 1149), half: Lo }, Register { double: Work(9, 1147), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1150), half: Lo }, Register { double: Work(9, 1143), half: Lo })
Add(Register { double: Work(9, 1150), half: Lo }, Register { double: Work(9, 1149), half: Lo })
Set(Register { double: Work(9, 1151), half: Lo }, 4136)
Assign(Register { double: Work(9, 1152), half: Lo }, Register { double: Work(9, 1150), half: Lo })
Add(Register { double: Work(9, 1152), half: Lo }, Register { double: Work(9, 1151), half: Lo })
Set(Register { double: Work(9, 1153), half: Lo }, 11)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1152), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1153), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1154), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1154), half: Lo })
Jump(BlockId { func: 9, block: 163 })
-- block BlockId { func: 9, block: 163 } --
LocalGet(Register { double: Work(9, 1155), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1156), half: Lo }, 6220)
Assign(Register { double: Work(9, 1157), half: Lo }, Register { double: Work(9, 1155), half: Lo })
Add(Register { double: Work(9, 1157), half: Lo }, Register { double: Work(9, 1156), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1157), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1158), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1159), half: Lo }, Register { double: Work(9, 1158), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 165 }, false_label: BlockId { func: 9, block: 166 }, cond: Register { double: Work(9, 1159), half: Lo } }
-- block BlockId { func: 9, block: 166 } --
LocalGet(Register { double: Work(9, 1160), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1161), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1162), half: Lo }, 4155)
Assign(Register { double: Work(9, 1163), half: Lo }, Register { double: Work(9, 1161), half: Lo })
Add(Register { double: Work(9, 1163), half: Lo }, Register { double: Work(9, 1162), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1163), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1164), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1165), half: Lo }, 15)
And(Register { double: Work(9, 1166), half: Lo }, Register { double: Work(9, 1164), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1167), half: Lo }, Register { double: Work(9, 1160), half: Lo })
Add(Register { double: Work(9, 1167), half: Lo }, Register { double: Work(9, 1166), half: Lo })
Set(Register { double: Work(9, 1168), half: Lo }, 4136)
Assign(Register { double: Work(9, 1169), half: Lo }, Register { double: Work(9, 1167), half: Lo })
Add(Register { double: Work(9, 1169), half: Lo }, Register { double: Work(9, 1168), half: Lo })
Set(Register { double: Work(9, 1170), half: Lo }, 12)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1169), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1170), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1171), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1171), half: Lo })
Jump(BlockId { func: 9, block: 165 })
-- block BlockId { func: 9, block: 165 } --
LocalGet(Register { double: Work(9, 1172), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1173), half: Lo }, 6221)
Assign(Register { double: Work(9, 1174), half: Lo }, Register { double: Work(9, 1172), half: Lo })
Add(Register { double: Work(9, 1174), half: Lo }, Register { double: Work(9, 1173), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1174), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1175), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1176), half: Lo }, Register { double: Work(9, 1175), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 167 }, false_label: BlockId { func: 9, block: 168 }, cond: Register { double: Work(9, 1176), half: Lo } }
-- block BlockId { func: 9, block: 168 } --
LocalGet(Register { double: Work(9, 1177), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1178), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1179), half: Lo }, 4155)
Assign(Register { double: Work(9, 1180), half: Lo }, Register { double: Work(9, 1178), half: Lo })
Add(Register { double: Work(9, 1180), half: Lo }, Register { double: Work(9, 1179), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1180), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1181), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1182), half: Lo }, 15)
And(Register { double: Work(9, 1183), half: Lo }, Register { double: Work(9, 1181), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1184), half: Lo }, Register { double: Work(9, 1177), half: Lo })
Add(Register { double: Work(9, 1184), half: Lo }, Register { double: Work(9, 1183), half: Lo })
Set(Register { double: Work(9, 1185), half: Lo }, 4136)
Assign(Register { double: Work(9, 1186), half: Lo }, Register { double: Work(9, 1184), half: Lo })
Add(Register { double: Work(9, 1186), half: Lo }, Register { double: Work(9, 1185), half: Lo })
Set(Register { double: Work(9, 1187), half: Lo }, 13)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1186), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1187), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1188), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1188), half: Lo })
Jump(BlockId { func: 9, block: 167 })
-- block BlockId { func: 9, block: 167 } --
LocalGet(Register { double: Work(9, 1189), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1190), half: Lo }, 6222)
Assign(Register { double: Work(9, 1191), half: Lo }, Register { double: Work(9, 1189), half: Lo })
Add(Register { double: Work(9, 1191), half: Lo }, Register { double: Work(9, 1190), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1191), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1192), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1193), half: Lo }, Register { double: Work(9, 1192), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 169 }, false_label: BlockId { func: 9, block: 170 }, cond: Register { double: Work(9, 1193), half: Lo } }
-- block BlockId { func: 9, block: 170 } --
LocalGet(Register { double: Work(9, 1194), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1195), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1196), half: Lo }, 4155)
Assign(Register { double: Work(9, 1197), half: Lo }, Register { double: Work(9, 1195), half: Lo })
Add(Register { double: Work(9, 1197), half: Lo }, Register { double: Work(9, 1196), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1197), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1198), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1199), half: Lo }, 15)
And(Register { double: Work(9, 1200), half: Lo }, Register { double: Work(9, 1198), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1201), half: Lo }, Register { double: Work(9, 1194), half: Lo })
Add(Register { double: Work(9, 1201), half: Lo }, Register { double: Work(9, 1200), half: Lo })
Set(Register { double: Work(9, 1202), half: Lo }, 4136)
Assign(Register { double: Work(9, 1203), half: Lo }, Register { double: Work(9, 1201), half: Lo })
Add(Register { double: Work(9, 1203), half: Lo }, Register { double: Work(9, 1202), half: Lo })
Set(Register { double: Work(9, 1204), half: Lo }, 14)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1203), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1204), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1205), half: Lo }, 1)
LocalSet(2, Lo, Register { double: Work(9, 1205), half: Lo })
Jump(BlockId { func: 9, block: 169 })
-- block BlockId { func: 9, block: 169 } --
LocalGet(Register { double: Work(9, 1206), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1207), half: Lo }, 6223)
Assign(Register { double: Work(9, 1208), half: Lo }, Register { double: Work(9, 1206), half: Lo })
Add(Register { double: Work(9, 1208), half: Lo }, Register { double: Work(9, 1207), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1208), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1209), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(9, 1210), half: Lo }, Register { double: Work(9, 1209), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 172 }, false_label: BlockId { func: 9, block: 173 }, cond: Register { double: Work(9, 1210), half: Lo } }
-- block BlockId { func: 9, block: 173 } --
LocalGet(Register { double: Work(9, 1211), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1212), half: Lo }, 0, Lo)
Set(Register { double: Work(9, 1213), half: Lo }, 4155)
Assign(Register { double: Work(9, 1214), half: Lo }, Register { double: Work(9, 1212), half: Lo })
Add(Register { double: Work(9, 1214), half: Lo }, Register { double: Work(9, 1213), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1214), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(9, 1215), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1216), half: Lo }, 15)
And(Register { double: Work(9, 1217), half: Lo }, Register { double: Work(9, 1215), half: Lo }, Const(15))
Assign(Register { double: Work(9, 1218), half: Lo }, Register { double: Work(9, 1211), half: Lo })
Add(Register { double: Work(9, 1218), half: Lo }, Register { double: Work(9, 1217), half: Lo })
Set(Register { double: Work(9, 1219), half: Lo }, 4136)
Assign(Register { double: Work(9, 1220), half: Lo }, Register { double: Work(9, 1218), half: Lo })
Add(Register { double: Work(9, 1220), half: Lo }, Register { double: Work(9, 1219), half: Lo })
Set(Register { double: Work(9, 1221), half: Lo }, 15)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1220), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(9, 1221), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 171 })
-- block BlockId { func: 9, block: 174 } --
Jump(BlockId { func: 9, block: 172 })
-- block BlockId { func: 9, block: 172 } --
LocalGet(Register { double: Work(9, 1222), half: Lo }, 2, Lo)
Eqz(Register { double: Work(9, 1223), half: Lo }, Register { double: Work(9, 1222), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 2 }, false_label: BlockId { func: 9, block: 175 }, cond: Register { double: Work(9, 1223), half: Lo } }
-- block BlockId { func: 9, block: 175 } --
Jump(BlockId { func: 9, block: 171 })
-- block BlockId { func: 9, block: 171 } --
LocalGet(Register { double: Work(9, 1224), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1224), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Load16(Register { double: Work(9, 1225), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1226), half: Lo }, 2)
Assign(Register { double: Work(9, 1227), half: Lo }, Register { double: Work(9, 1225), half: Lo })
Add(Register { double: Work(9, 1227), half: Lo }, Register { double: Work(9, 1226), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 1227), half: Lo })
Jump(BlockId { func: 9, block: 3 })
-- block BlockId { func: 9, block: 3 } --
LocalGet(Register { double: Work(9, 1228), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1229), half: Lo }, 2, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1228), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4152), half: Lo })
Store16(Register { double: Work(9, 1229), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(9, 1230), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1230), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4158), half: Lo })
Load8(Register { double: Work(9, 1231), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(2, Lo, Register { double: Work(9, 1231), half: Lo })
Eqz(Register { double: Work(9, 1232), half: Lo }, Register { double: Work(9, 1231), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 9, block: 176 }, false_label: BlockId { func: 9, block: 177 }, cond: Register { double: Work(9, 1232), half: Lo } }
-- block BlockId { func: 9, block: 177 } --
LocalGet(Register { double: Work(9, 1233), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1234), half: Lo }, 2, Lo)
Set(Register { double: Work(9, 1235), half: Lo }, -1)
Assign(Register { double: Work(9, 1236), half: Lo }, Register { double: Work(9, 1234), half: Lo })
Add(Register { double: Work(9, 1236), half: Lo }, Register { double: Work(9, 1235), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1233), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4158), half: Lo })
Store8(Register { double: Work(9, 1236), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 176 })
-- block BlockId { func: 9, block: 176 } --
LocalGet(Register { double: Work(9, 1237), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(9, 1238), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1238), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4159), half: Lo })
Load8(Register { double: Work(9, 1239), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(9, 1240), half: Lo }, -1)
Assign(Register { double: Work(9, 1241), half: Lo }, Register { double: Work(9, 1239), half: Lo })
Add(Register { double: Work(9, 1241), half: Lo }, Register { double: Work(9, 1240), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(9, 1237), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(4159), half: Lo })
Store8(Register { double: Work(9, 1241), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 9, block: 2 })
-- block BlockId { func: 9, block: 2 } --
Jump(BlockId { func: 9, block: 1 })
-- block BlockId { func: 9, block: 1 } --
PopLocalFrame([I32, I32, I32, I32, I32, I32, I32, I32])
ReturnToSaved
==== func 5 ==== 
-- block BlockId { func: 10, block: 0 } --
PushLocalFrame([I32, I32, I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalSet(1, Lo, Register { double: Param(1), half: Lo })
LocalSet(2, Lo, Register { double: Param(2), half: Lo })
Set(Register { double: Work(10, 0), half: Lo }, 0)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(10, 0), half: Lo })
Assign(Register { double: Work(10, 1), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 10, block: 1 })
-- block BlockId { func: 10, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(10, 1), half: Lo })
PopLocalFrame([I32, I32, I32])
ReturnToSaved
==== func 6 ==== 
-- block BlockId { func: 11, block: 0 } --
PushLocalFrame([I32, I32, I32, I32, I32, I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalSet(1, Lo, Register { double: Param(1), half: Lo })
LocalSet(2, Lo, Register { double: Param(2), half: Lo })
LocalSet(3, Lo, Register { double: Const(0), half: Lo })
LocalSet(4, Lo, Register { double: Const(0), half: Lo })
LocalSet(5, Lo, Register { double: Const(0), half: Lo })
LocalGet(Register { double: Work(11, 0), half: Lo }, 2, Lo)
Eqz(Register { double: Work(11, 1), half: Lo }, Register { double: Work(11, 0), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 11, block: 2 }, false_label: BlockId { func: 11, block: 3 }, cond: Register { double: Work(11, 1), half: Lo } }
-- block BlockId { func: 11, block: 3 } --
LocalGet(Register { double: Work(11, 2), half: Lo }, 2, Lo)
Set(Register { double: Work(11, 3), half: Lo }, -1)
Assign(Register { double: Work(11, 4), half: Lo }, Register { double: Work(11, 2), half: Lo })
Add(Register { double: Work(11, 4), half: Lo }, Register { double: Work(11, 3), half: Lo })
LocalSet(3, Lo, Register { double: Work(11, 4), half: Lo })
LocalGet(Register { double: Work(11, 5), half: Lo }, 2, Lo)
Set(Register { double: Work(11, 6), half: Lo }, 7)
And(Register { double: Work(11, 7), half: Lo }, Register { double: Work(11, 5), half: Lo }, Const(7))
LocalSet(4, Lo, Register { double: Work(11, 7), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 11, block: 5 }, false_label: BlockId { func: 11, block: 6 }, cond: Register { double: Work(11, 7), half: Lo } }
-- block BlockId { func: 11, block: 6 } --
LocalGet(Register { double: Work(11, 8), half: Lo }, 0, Lo)
LocalSet(5, Lo, Register { double: Work(11, 8), half: Lo })
Jump(BlockId { func: 11, block: 4 })
-- block BlockId { func: 11, block: 7 } --
Jump(BlockId { func: 11, block: 5 })
-- block BlockId { func: 11, block: 5 } --
LocalGet(Register { double: Work(11, 9), half: Lo }, 0, Lo)
LocalSet(5, Lo, Register { double: Work(11, 9), half: Lo })
Jump(BlockId { func: 11, block: 8 })
-- block BlockId { func: 11, block: 8 } --
LocalGet(Register { double: Work(11, 10), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(11, 11), half: Lo }, 1, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 11), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 12), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 10), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 12), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 13), half: Lo }, 2, Lo)
Set(Register { double: Work(11, 14), half: Lo }, -1)
Assign(Register { double: Work(11, 15), half: Lo }, Register { double: Work(11, 13), half: Lo })
Add(Register { double: Work(11, 15), half: Lo }, Register { double: Work(11, 14), half: Lo })
LocalSet(2, Lo, Register { double: Work(11, 15), half: Lo })
LocalGet(Register { double: Work(11, 16), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 17), half: Lo }, 1)
Assign(Register { double: Work(11, 18), half: Lo }, Register { double: Work(11, 16), half: Lo })
Add(Register { double: Work(11, 18), half: Lo }, Register { double: Work(11, 17), half: Lo })
LocalSet(5, Lo, Register { double: Work(11, 18), half: Lo })
LocalGet(Register { double: Work(11, 19), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 20), half: Lo }, 1)
Assign(Register { double: Work(11, 21), half: Lo }, Register { double: Work(11, 19), half: Lo })
Add(Register { double: Work(11, 21), half: Lo }, Register { double: Work(11, 20), half: Lo })
LocalSet(1, Lo, Register { double: Work(11, 21), half: Lo })
LocalGet(Register { double: Work(11, 22), half: Lo }, 4, Lo)
Set(Register { double: Work(11, 23), half: Lo }, -1)
Assign(Register { double: Work(11, 24), half: Lo }, Register { double: Work(11, 22), half: Lo })
Add(Register { double: Work(11, 24), half: Lo }, Register { double: Work(11, 23), half: Lo })
LocalSet(4, Lo, Register { double: Work(11, 24), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 11, block: 8 }, false_label: BlockId { func: 11, block: 9 }, cond: Register { double: Work(11, 24), half: Lo } }
-- block BlockId { func: 11, block: 9 } --
Jump(BlockId { func: 11, block: 4 })
-- block BlockId { func: 11, block: 4 } --
LocalGet(Register { double: Work(11, 25), half: Lo }, 3, Lo)
Set(Register { double: Work(11, 26), half: Lo }, 7)
LtU(Register { double: Work(11, 27), half: Lo }, Register { double: Work(11, 25), half: Lo }, Register { double: Work(11, 26), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 11, block: 2 }, false_label: BlockId { func: 11, block: 10 }, cond: Register { double: Work(11, 27), half: Lo } }
-- block BlockId { func: 11, block: 10 } --
Jump(BlockId { func: 11, block: 11 })
-- block BlockId { func: 11, block: 11 } --
LocalGet(Register { double: Work(11, 28), half: Lo }, 5, Lo)
LocalGet(Register { double: Work(11, 29), half: Lo }, 1, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 29), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 30), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 28), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 30), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 31), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 32), half: Lo }, 1)
Assign(Register { double: Work(11, 33), half: Lo }, Register { double: Work(11, 31), half: Lo })
Add(Register { double: Work(11, 33), half: Lo }, Register { double: Work(11, 32), half: Lo })
LocalGet(Register { double: Work(11, 34), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 35), half: Lo }, 1)
Assign(Register { double: Work(11, 36), half: Lo }, Register { double: Work(11, 34), half: Lo })
Add(Register { double: Work(11, 36), half: Lo }, Register { double: Work(11, 35), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 36), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 37), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 33), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 37), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 38), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 39), half: Lo }, 2)
Assign(Register { double: Work(11, 40), half: Lo }, Register { double: Work(11, 38), half: Lo })
Add(Register { double: Work(11, 40), half: Lo }, Register { double: Work(11, 39), half: Lo })
LocalGet(Register { double: Work(11, 41), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 42), half: Lo }, 2)
Assign(Register { double: Work(11, 43), half: Lo }, Register { double: Work(11, 41), half: Lo })
Add(Register { double: Work(11, 43), half: Lo }, Register { double: Work(11, 42), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 43), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 44), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 40), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 44), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 45), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 46), half: Lo }, 3)
Assign(Register { double: Work(11, 47), half: Lo }, Register { double: Work(11, 45), half: Lo })
Add(Register { double: Work(11, 47), half: Lo }, Register { double: Work(11, 46), half: Lo })
LocalGet(Register { double: Work(11, 48), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 49), half: Lo }, 3)
Assign(Register { double: Work(11, 50), half: Lo }, Register { double: Work(11, 48), half: Lo })
Add(Register { double: Work(11, 50), half: Lo }, Register { double: Work(11, 49), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 50), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 51), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 47), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 51), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 52), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 53), half: Lo }, 4)
Assign(Register { double: Work(11, 54), half: Lo }, Register { double: Work(11, 52), half: Lo })
Add(Register { double: Work(11, 54), half: Lo }, Register { double: Work(11, 53), half: Lo })
LocalGet(Register { double: Work(11, 55), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 56), half: Lo }, 4)
Assign(Register { double: Work(11, 57), half: Lo }, Register { double: Work(11, 55), half: Lo })
Add(Register { double: Work(11, 57), half: Lo }, Register { double: Work(11, 56), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 57), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 58), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 54), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 58), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 59), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 60), half: Lo }, 5)
Assign(Register { double: Work(11, 61), half: Lo }, Register { double: Work(11, 59), half: Lo })
Add(Register { double: Work(11, 61), half: Lo }, Register { double: Work(11, 60), half: Lo })
LocalGet(Register { double: Work(11, 62), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 63), half: Lo }, 5)
Assign(Register { double: Work(11, 64), half: Lo }, Register { double: Work(11, 62), half: Lo })
Add(Register { double: Work(11, 64), half: Lo }, Register { double: Work(11, 63), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 64), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 65), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 61), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 65), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 66), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 67), half: Lo }, 6)
Assign(Register { double: Work(11, 68), half: Lo }, Register { double: Work(11, 66), half: Lo })
Add(Register { double: Work(11, 68), half: Lo }, Register { double: Work(11, 67), half: Lo })
LocalGet(Register { double: Work(11, 69), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 70), half: Lo }, 6)
Assign(Register { double: Work(11, 71), half: Lo }, Register { double: Work(11, 69), half: Lo })
Add(Register { double: Work(11, 71), half: Lo }, Register { double: Work(11, 70), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 71), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 72), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 68), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 72), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 73), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 74), half: Lo }, 7)
Assign(Register { double: Work(11, 75), half: Lo }, Register { double: Work(11, 73), half: Lo })
Add(Register { double: Work(11, 75), half: Lo }, Register { double: Work(11, 74), half: Lo })
LocalGet(Register { double: Work(11, 76), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 77), half: Lo }, 7)
Assign(Register { double: Work(11, 78), half: Lo }, Register { double: Work(11, 76), half: Lo })
Add(Register { double: Work(11, 78), half: Lo }, Register { double: Work(11, 77), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 78), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load8(Register { double: Work(11, 79), half: Lo }, Register { double: Temp(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 75), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Store8(Register { double: Work(11, 79), half: Lo }, Register { double: Temp(0), half: Lo })
LocalGet(Register { double: Work(11, 80), half: Lo }, 5, Lo)
Set(Register { double: Work(11, 81), half: Lo }, 8)
Assign(Register { double: Work(11, 82), half: Lo }, Register { double: Work(11, 80), half: Lo })
Add(Register { double: Work(11, 82), half: Lo }, Register { double: Work(11, 81), half: Lo })
LocalSet(5, Lo, Register { double: Work(11, 82), half: Lo })
LocalGet(Register { double: Work(11, 83), half: Lo }, 1, Lo)
Set(Register { double: Work(11, 84), half: Lo }, 8)
Assign(Register { double: Work(11, 85), half: Lo }, Register { double: Work(11, 83), half: Lo })
Add(Register { double: Work(11, 85), half: Lo }, Register { double: Work(11, 84), half: Lo })
LocalSet(1, Lo, Register { double: Work(11, 85), half: Lo })
LocalGet(Register { double: Work(11, 86), half: Lo }, 2, Lo)
Set(Register { double: Work(11, 87), half: Lo }, -8)
Assign(Register { double: Work(11, 88), half: Lo }, Register { double: Work(11, 86), half: Lo })
Add(Register { double: Work(11, 88), half: Lo }, Register { double: Work(11, 87), half: Lo })
LocalSet(2, Lo, Register { double: Work(11, 88), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 11, block: 11 }, false_label: BlockId { func: 11, block: 12 }, cond: Register { double: Work(11, 88), half: Lo } }
-- block BlockId { func: 11, block: 12 } --
Jump(BlockId { func: 11, block: 2 })
-- block BlockId { func: 11, block: 2 } --
LocalGet(Register { double: Work(11, 89), half: Lo }, 0, Lo)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(11, 89), half: Lo })
Assign(Register { double: Work(11, 90), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 11, block: 1 })
-- block BlockId { func: 11, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(11, 90), half: Lo })
PopLocalFrame([I32, I32, I32, I32, I32, I32])
ReturnToSaved
==== func 7 ==== 
-- block BlockId { func: 12, block: 0 } --
PushLocalFrame([I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
Set(Register { double: Work(12, 0), half: Lo }, 1360)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(12, 0), half: Lo })
Push([Register { double: Work(12, 0), half: Lo }])
PushReturnAddr(BlockId { func: 12, block: 2 })
Jump(BlockId { func: 7, block: 0 })
-- block BlockId { func: 12, block: 2 } --
Pop([Register { double: Work(12, 0), half: Lo }])
Assign(Register { double: Work(12, 1), half: Lo }, Register { double: Return(0), half: Lo })
Jump(BlockId { func: 12, block: 1 })
-- block BlockId { func: 12, block: 1 } --
PopLocalFrame([I32])
ReturnToSaved
==== func 8 ==== 
-- block BlockId { func: 13, block: 0 } --
PushLocalFrame([I32, I32, I32, I32])
LocalSet(0, Lo, Register { double: Const(0), half: Lo })
LocalSet(1, Lo, Register { double: Const(0), half: Lo })
LocalSet(2, Lo, Register { double: Const(0), half: Lo })
LocalSet(3, Lo, Register { double: Const(0), half: Lo })
Set(Register { double: Work(13, 0), half: Lo }, -20)
TurtleSetZ(Register { double: Work(13, 0), half: Lo })
Set(Register { double: Work(13, 1), half: Lo }, 1360)
Set(Register { double: Work(13, 2), half: Lo }, 1024)
Set(Register { double: Work(13, 3), half: Lo }, 248)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(13, 1), half: Lo })
Assign(Register { double: Param(1), half: Lo }, Register { double: Work(13, 2), half: Lo })
Assign(Register { double: Param(2), half: Lo }, Register { double: Work(13, 3), half: Lo })
Push([Register { double: Work(13, 1), half: Lo }, Register { double: Work(13, 3), half: Lo }, Register { double: Work(13, 0), half: Lo }, Register { double: Work(13, 2), half: Lo }])
PushReturnAddr(BlockId { func: 13, block: 13 })
Jump(BlockId { func: 8, block: 0 })
-- block BlockId { func: 13, block: 13 } --
Pop([Register { double: Work(13, 1), half: Lo }, Register { double: Work(13, 3), half: Lo }, Register { double: Work(13, 0), half: Lo }, Register { double: Work(13, 2), half: Lo }])
Assign(Register { double: Work(13, 4), half: Lo }, Register { double: Return(0), half: Lo })
Eqz(Register { double: Work(13, 5), half: Lo }, Register { double: Work(13, 4), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 13, block: 2 }, false_label: BlockId { func: 13, block: 3 }, cond: Register { double: Work(13, 5), half: Lo } }
-- block BlockId { func: 13, block: 3 } --
Jump(BlockId { func: 13, block: 4 })
-- block BlockId { func: 13, block: 4 } --
Set(Register { double: Work(13, 6), half: Lo }, 1360)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(13, 6), half: Lo })
Push([Register { double: Work(13, 1), half: Lo }, Register { double: Work(13, 6), half: Lo }, Register { double: Work(13, 3), half: Lo }, Register { double: Work(13, 0), half: Lo }, Register { double: Work(13, 2), half: Lo }, Register { double: Work(13, 4), half: Lo }, Register { double: Work(13, 5), half: Lo }])
PushReturnAddr(BlockId { func: 13, block: 14 })
Jump(BlockId { func: 9, block: 0 })
-- block BlockId { func: 13, block: 14 } --
Pop([Register { double: Work(13, 1), half: Lo }, Register { double: Work(13, 6), half: Lo }, Register { double: Work(13, 3), half: Lo }, Register { double: Work(13, 0), half: Lo }, Register { double: Work(13, 2), half: Lo }, Register { double: Work(13, 4), half: Lo }, Register { double: Work(13, 5), half: Lo }])
Set(Register { double: Work(13, 7), half: Lo }, 0)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(13, 7), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(7588), half: Lo })
Load8(Register { double: Work(13, 8), half: Lo }, Register { double: Temp(0), half: Lo })
Eqz(Register { double: Work(13, 9), half: Lo }, Register { double: Work(13, 8), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 13, block: 5 }, false_label: BlockId { func: 13, block: 6 }, cond: Register { double: Work(13, 9), half: Lo } }
-- block BlockId { func: 13, block: 6 } --
Set(Register { double: Work(13, 10), half: Lo }, 0)
LocalSet(0, Lo, Register { double: Work(13, 10), half: Lo })
Set(Register { double: Work(13, 11), half: Lo }, 0)
Set(Register { double: Work(13, 12), half: Lo }, 0)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(13, 11), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(7588), half: Lo })
Store8(Register { double: Work(13, 12), half: Lo }, Register { double: Temp(0), half: Lo })
Set(Register { double: Work(13, 13), half: Lo }, 5524)
LocalSet(1, Lo, Register { double: Work(13, 13), half: Lo })
Jump(BlockId { func: 13, block: 7 })
-- block BlockId { func: 13, block: 7 } --
LocalGet(Register { double: Work(13, 14), half: Lo }, 0, Lo)
TurtleSetY(Register { double: Work(13, 14), half: Lo })
Set(Register { double: Work(13, 15), half: Lo }, 0)
LocalSet(2, Lo, Register { double: Work(13, 15), half: Lo })
Jump(BlockId { func: 13, block: 8 })
-- block BlockId { func: 13, block: 8 } --
LocalGet(Register { double: Work(13, 16), half: Lo }, 1, Lo)
LocalGet(Register { double: Work(13, 17), half: Lo }, 2, Lo)
Assign(Register { double: Work(13, 18), half: Lo }, Register { double: Work(13, 16), half: Lo })
Add(Register { double: Work(13, 18), half: Lo }, Register { double: Work(13, 17), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(13, 18), half: Lo })
Add(Register { double: Temp(0), half: Lo }, Register { double: Const(0), half: Lo })
Load32(Register { double: Work(13, 19), half: Lo }, Register { double: Temp(0), half: Lo })
LocalSet(3, Lo, Register { double: Work(13, 19), half: Lo })
LocalGet(Register { double: Work(13, 20), half: Lo }, 2, Lo)
TurtleSetX(Register { double: Work(13, 20), half: Lo })
Set(Register { double: Work(13, 21), half: Lo }, 1)
Set(Register { double: Work(13, 22), half: Lo }, 5)
LocalGet(Register { double: Work(13, 23), half: Lo }, 3, Lo)
Set(Register { double: Work(13, 24), half: Lo }, 1)
And(Register { double: Work(13, 25), half: Lo }, Register { double: Work(13, 23), half: Lo }, Const(1))
Select { dst: Register { double: Work(13, 26), half: Lo }, true_reg: Register { double: Work(13, 21), half: Lo }, false_reg: Register { double: Work(13, 22), half: Lo }, cond: Register { double: Work(13, 25), half: Lo } }
TurtleSetBlock(Register { double: Work(13, 26), half: Lo })
LocalGet(Register { double: Work(13, 27), half: Lo }, 2, Lo)
Set(Register { double: Work(13, 28), half: Lo }, 1)
Assign(Register { double: Work(13, 29), half: Lo }, Register { double: Work(13, 27), half: Lo })
Add(Register { double: Work(13, 29), half: Lo }, Register { double: Work(13, 28), half: Lo })
TurtleSetX(Register { double: Work(13, 29), half: Lo })
Set(Register { double: Work(13, 30), half: Lo }, 1)
Set(Register { double: Work(13, 31), half: Lo }, 5)
LocalGet(Register { double: Work(13, 32), half: Lo }, 3, Lo)
Set(Register { double: Work(13, 33), half: Lo }, 256)
And(Register { double: Work(13, 34), half: Lo }, Register { double: Work(13, 32), half: Lo }, Const(256))
Select { dst: Register { double: Work(13, 35), half: Lo }, true_reg: Register { double: Work(13, 30), half: Lo }, false_reg: Register { double: Work(13, 31), half: Lo }, cond: Register { double: Work(13, 34), half: Lo } }
TurtleSetBlock(Register { double: Work(13, 35), half: Lo })
LocalGet(Register { double: Work(13, 36), half: Lo }, 2, Lo)
Set(Register { double: Work(13, 37), half: Lo }, 2)
Assign(Register { double: Work(13, 38), half: Lo }, Register { double: Work(13, 36), half: Lo })
Add(Register { double: Work(13, 38), half: Lo }, Register { double: Work(13, 37), half: Lo })
TurtleSetX(Register { double: Work(13, 38), half: Lo })
Set(Register { double: Work(13, 39), half: Lo }, 1)
Set(Register { double: Work(13, 40), half: Lo }, 5)
LocalGet(Register { double: Work(13, 41), half: Lo }, 3, Lo)
Set(Register { double: Work(13, 42), half: Lo }, 65536)
And(Register { double: Work(13, 43), half: Lo }, Register { double: Work(13, 41), half: Lo }, Const(65536))
Select { dst: Register { double: Work(13, 44), half: Lo }, true_reg: Register { double: Work(13, 39), half: Lo }, false_reg: Register { double: Work(13, 40), half: Lo }, cond: Register { double: Work(13, 43), half: Lo } }
TurtleSetBlock(Register { double: Work(13, 44), half: Lo })
LocalGet(Register { double: Work(13, 45), half: Lo }, 2, Lo)
Set(Register { double: Work(13, 46), half: Lo }, 3)
Assign(Register { double: Work(13, 47), half: Lo }, Register { double: Work(13, 45), half: Lo })
Add(Register { double: Work(13, 47), half: Lo }, Register { double: Work(13, 46), half: Lo })
TurtleSetX(Register { double: Work(13, 47), half: Lo })
Set(Register { double: Work(13, 48), half: Lo }, 1)
Set(Register { double: Work(13, 49), half: Lo }, 5)
LocalGet(Register { double: Work(13, 50), half: Lo }, 3, Lo)
Set(Register { double: Work(13, 51), half: Lo }, 16777216)
And(Register { double: Work(13, 52), half: Lo }, Register { double: Work(13, 50), half: Lo }, Const(16777216))
Select { dst: Register { double: Work(13, 53), half: Lo }, true_reg: Register { double: Work(13, 48), half: Lo }, false_reg: Register { double: Work(13, 49), half: Lo }, cond: Register { double: Work(13, 52), half: Lo } }
TurtleSetBlock(Register { double: Work(13, 53), half: Lo })
LocalGet(Register { double: Work(13, 54), half: Lo }, 2, Lo)
Set(Register { double: Work(13, 55), half: Lo }, 60)
LtU(Register { double: Work(13, 56), half: Lo }, Register { double: Work(13, 54), half: Lo }, Register { double: Work(13, 55), half: Lo })
LocalSet(3, Lo, Register { double: Work(13, 56), half: Lo })
LocalGet(Register { double: Work(13, 57), half: Lo }, 2, Lo)
Set(Register { double: Work(13, 58), half: Lo }, 4)
Assign(Register { double: Work(13, 59), half: Lo }, Register { double: Work(13, 57), half: Lo })
Add(Register { double: Work(13, 59), half: Lo }, Register { double: Work(13, 58), half: Lo })
LocalSet(2, Lo, Register { double: Work(13, 59), half: Lo })
LocalGet(Register { double: Work(13, 60), half: Lo }, 3, Lo)
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 13, block: 8 }, false_label: BlockId { func: 13, block: 9 }, cond: Register { double: Work(13, 60), half: Lo } }
-- block BlockId { func: 13, block: 9 } --
LocalGet(Register { double: Work(13, 61), half: Lo }, 1, Lo)
Set(Register { double: Work(13, 62), half: Lo }, 64)
Assign(Register { double: Work(13, 63), half: Lo }, Register { double: Work(13, 61), half: Lo })
Add(Register { double: Work(13, 63), half: Lo }, Register { double: Work(13, 62), half: Lo })
LocalSet(1, Lo, Register { double: Work(13, 63), half: Lo })
LocalGet(Register { double: Work(13, 64), half: Lo }, 0, Lo)
Set(Register { double: Work(13, 65), half: Lo }, 1)
Assign(Register { double: Work(13, 66), half: Lo }, Register { double: Work(13, 64), half: Lo })
Add(Register { double: Work(13, 66), half: Lo }, Register { double: Work(13, 65), half: Lo })
LocalSet(0, Lo, Register { double: Work(13, 66), half: Lo })
Set(Register { double: Work(13, 67), half: Lo }, 32)
Ne(Register { double: Work(13, 68), half: Lo }, Register { double: Work(13, 66), half: Lo }, Register { double: Work(13, 67), half: Lo })
Set(Register { double: CondTaken, half: Lo }, 0)
JumpIf { true_label: BlockId { func: 13, block: 7 }, false_label: BlockId { func: 13, block: 10 }, cond: Register { double: Work(13, 68), half: Lo } }
-- block BlockId { func: 13, block: 10 } --
Jump(BlockId { func: 13, block: 5 })
-- block BlockId { func: 13, block: 5 } --
ScheduleJump(BlockId { func: 13, block: 11 }, 1)
-- block BlockId { func: 13, block: 11 } --
Jump(BlockId { func: 13, block: 4 })
-- block BlockId { func: 13, block: 12 } --
Jump(BlockId { func: 13, block: 2 })
-- block BlockId { func: 13, block: 2 } --
Set(Register { double: Work(13, 69), half: Lo }, 2)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(13, 69), half: Lo })
Assign(Register { double: Work(13, 70), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 13, block: 1 })
-- block BlockId { func: 13, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(13, 70), half: Lo })
PopLocalFrame([I32, I32, I32, I32])
ReturnToSaved
==== func 9 ==== 
-- block BlockId { func: 14, block: 0 } --
PushLocalFrame([])
Push([])
PushReturnAddr(BlockId { func: 14, block: 2 })
Jump(BlockId { func: 13, block: 0 })
-- block BlockId { func: 14, block: 2 } --
Pop([])
Assign(Register { double: Work(14, 0), half: Lo }, Register { double: Return(0), half: Lo })
Set(Register { double: Work(14, 1), half: Lo }, 2)
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(14, 1), half: Lo })
Assign(Register { double: Work(14, 2), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 14, block: 1 })
-- block BlockId { func: 14, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(14, 2), half: Lo })
PopLocalFrame([])
ReturnToSaved
==== func 10 ==== 
-- block BlockId { func: 15, block: 0 } --
PushLocalFrame([])
Set(Register { double: Work(15, 0), half: Lo }, 1360)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(15, 0), half: Lo })
Push([Register { double: Work(15, 0), half: Lo }])
PushReturnAddr(BlockId { func: 15, block: 2 })
Jump(BlockId { func: 6, block: 0 })
-- block BlockId { func: 15, block: 2 } --
Pop([Register { double: Work(15, 0), half: Lo }])
Assign(Register { double: Work(15, 1), half: Lo }, Register { double: Return(0), half: Lo })
Set(Register { double: Work(15, 2), half: Lo }, 1)
Set(Register { double: Work(15, 3), half: Lo }, 0)
Set(Register { double: Work(15, 4), half: Lo }, 1024)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(15, 2), half: Lo })
Assign(Register { double: Param(1), half: Lo }, Register { double: Work(15, 3), half: Lo })
Assign(Register { double: Param(2), half: Lo }, Register { double: Work(15, 4), half: Lo })
Push([])
PushReturnAddr(BlockId { func: 15, block: 3 })
Jump(BlockId { func: 16, block: 0 })
-- block BlockId { func: 15, block: 3 } --
Pop([])
Assign(Register { double: Work(15, 5), half: Lo }, Register { double: Return(0), half: Lo })
Jump(BlockId { func: 15, block: 1 })
-- block BlockId { func: 15, block: 1 } --
PopLocalFrame([])
ReturnToSaved
==== func 11 ==== 
-- block BlockId { func: 16, block: 0 } --
PushLocalFrame([I32, I32, I32])
LocalSet(0, Lo, Register { double: Param(0), half: Lo })
LocalSet(1, Lo, Register { double: Param(1), half: Lo })
LocalSet(2, Lo, Register { double: Param(2), half: Lo })
LocalGet(Register { double: Work(16, 0), half: Lo }, 0, Lo)
LocalGet(Register { double: Work(16, 1), half: Lo }, 1, Lo)
LocalGet(Register { double: Work(16, 2), half: Lo }, 2, Lo)
Assign(Register { double: Param(0), half: Lo }, Register { double: Work(16, 0), half: Lo })
Assign(Register { double: Param(1), half: Lo }, Register { double: Work(16, 1), half: Lo })
Assign(Register { double: Param(2), half: Lo }, Register { double: Work(16, 2), half: Lo })
Push([Register { double: Work(16, 2), half: Lo }, Register { double: Work(16, 1), half: Lo }, Register { double: Work(16, 0), half: Lo }])
PushReturnAddr(BlockId { func: 16, block: 2 })
Jump(BlockId { func: 10, block: 0 })
-- block BlockId { func: 16, block: 2 } --
Pop([Register { double: Work(16, 2), half: Lo }, Register { double: Work(16, 1), half: Lo }, Register { double: Work(16, 0), half: Lo }])
Assign(Register { double: Work(16, 3), half: Lo }, Register { double: Return(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(16, 3), half: Lo })
Assign(Register { double: Work(16, 4), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 16, block: 1 })
-- block BlockId { func: 16, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(16, 4), half: Lo })
PopLocalFrame([I32, I32, I32])
ReturnToSaved
==== func 12 ==== 
-- block BlockId { func: 17, block: 0 } --
PushLocalFrame([])
Push([])
PushReturnAddr(BlockId { func: 17, block: 2 })
Jump(BlockId { func: 5, block: 0 })
-- block BlockId { func: 17, block: 2 } --
Pop([])
Push([])
PushReturnAddr(BlockId { func: 17, block: 3 })
Jump(BlockId { func: 14, block: 0 })
-- block BlockId { func: 17, block: 3 } --
Pop([])
Assign(Register { double: Work(17, 0), half: Lo }, Register { double: Return(0), half: Lo })
Assign(Register { double: Temp(0), half: Lo }, Register { double: Work(17, 0), half: Lo })
Assign(Register { double: Work(17, 1), half: Lo }, Register { double: Temp(0), half: Lo })
Jump(BlockId { func: 17, block: 1 })
-- block BlockId { func: 17, block: 1 } --
Assign(Register { double: Return(0), half: Lo }, Register { double: Work(17, 1), half: Lo })
PopLocalFrame([])
ReturnToSaved
-------- func wasmrunner:wasm_5_0 --------
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_5_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_15_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_5_2 --------
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	function wasmrunner:wasm_5_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_5_1 --------
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_6_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result score %work%6%0%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%6%0%lo reg
	scoreboard players operation %work%6%1%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_6_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_6_1 --------
	scoreboard players operation %return%0%lo reg = %work%6%1%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_7_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result score %work%7%0%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%7%0%lo reg
	scoreboard players operation %work%7%1%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_7_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_7_1 --------
	scoreboard players operation %return%0%lo reg = %work%7%1%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %param%2%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result score %work%8%0%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%8%1%lo reg 512
	scoreboard players operation %temp%0%lo reg = %work%8%0%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%8%1%lo reg
	function intrinsic:store_halfword
	execute store result score %work%8%2%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%8%3%lo reg 40
	scoreboard players operation %work%8%4%lo reg = %work%8%2%lo reg
	scoreboard players operation %work%8%4%lo reg += %work%8%3%lo reg
	scoreboard players set %work%8%5%lo reg 1280
	scoreboard players set %work%8%6%lo reg 80
	scoreboard players operation %param%0%lo reg = %work%8%4%lo reg
	scoreboard players operation %param%1%lo reg = %work%8%5%lo reg
	scoreboard players operation %param%2%lo reg = %work%8%6%lo reg
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%8%3%lo reg
	execute store result storage wasm:scratch stack.data[1] int 1 run scoreboard players get %work%8%4%lo reg
	execute store result storage wasm:scratch stack.data[2] int 1 run scoreboard players get %work%8%5%lo reg
	execute store result storage wasm:scratch stack.data[3] int 1 run scoreboard players get %work%8%1%lo reg
	execute store result storage wasm:scratch stack.data[4] int 1 run scoreboard players get %work%8%6%lo reg
	execute store result storage wasm:scratch stack.data[5] int 1 run scoreboard players get %work%8%0%lo reg
	execute store result storage wasm:scratch stack.data[6] int 1 run scoreboard players get %work%8%2%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_8_6" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_11_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_6 --------
	execute store result score %work%8%3%lo reg run data get storage wasm:datastack stack.data[0] 1
	execute store result score %work%8%4%lo reg run data get storage wasm:datastack stack.data[1] 1
	execute store result score %work%8%5%lo reg run data get storage wasm:datastack stack.data[2] 1
	execute store result score %work%8%1%lo reg run data get storage wasm:datastack stack.data[3] 1
	execute store result score %work%8%6%lo reg run data get storage wasm:datastack stack.data[4] 1
	execute store result score %work%8%0%lo reg run data get storage wasm:datastack stack.data[5] 1
	execute store result score %work%8%2%lo reg run data get storage wasm:datastack stack.data[6] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%8%7%lo reg = %return%0%lo reg
	execute store result score %work%8%8%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%8%9%lo reg -1
	scoreboard players operation %work%8%10%lo reg = %work%8%8%lo reg
	scoreboard players operation %work%8%10%lo reg += %work%8%9%lo reg
	scoreboard players set %work%8%11%lo reg 3582
	scoreboard players set %work%8%12%lo reg 0
	execute if score %work%8%11%lo reg matches ..-1 if score %work%8%10%lo reg matches 0.. run scoreboard players set %work%8%12%lo reg 0
	execute if score %work%8%11%lo reg matches 0.. if score %work%8%10%lo reg matches ..-1 run scoreboard players set %work%8%12%lo reg 1
	execute if score %work%8%11%lo reg matches ..-1 if score %work%8%10%lo reg matches ..-1 if score %work%8%11%lo reg < %work%8%10%lo reg run scoreboard players set %work%8%12%lo reg 1
	execute if score %work%8%11%lo reg matches 0.. if score %work%8%10%lo reg matches 0.. if score %work%8%11%lo reg < %work%8%10%lo reg run scoreboard players set %work%8%12%lo reg 1
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%8%12%lo reg matches 0 run function wasmrunner:wasm_8_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_8_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_3 --------
	execute store result score %work%8%13%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%8%14%lo reg 4
	scoreboard players operation %work%8%15%lo reg = %work%8%13%lo reg
	scoreboard players operation %work%8%15%lo reg += %work%8%14%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%8%15%lo reg
	execute store result score %work%8%16%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%8%17%lo reg 552
	scoreboard players operation %work%8%18%lo reg = %work%8%16%lo reg
	scoreboard players operation %work%8%18%lo reg += %work%8%17%lo reg
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %work%8%18%lo reg
	function wasmrunner:wasm_8_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_4 --------
	execute store result score %work%8%19%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%8%20%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players operation %temp%0%lo reg = %work%8%20%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_word
	scoreboard players operation %work%8%21%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%8%19%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param0%0 reg = %work%8%21%lo reg
	function intrinsic:setptr
	function intrinsic:store_word
	execute store result score %work%8%22%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%8%23%lo reg 4
	scoreboard players operation %work%8%24%lo reg = %work%8%22%lo reg
	scoreboard players operation %work%8%24%lo reg += %work%8%23%lo reg
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %work%8%24%lo reg
	execute store result score %work%8%25%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%8%26%lo reg 4
	scoreboard players operation %work%8%27%lo reg = %work%8%25%lo reg
	scoreboard players operation %work%8%27%lo reg += %work%8%26%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%8%27%lo reg
	execute store result score %work%8%28%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%8%29%lo reg -4
	scoreboard players operation %work%8%30%lo reg = %work%8%28%lo reg
	scoreboard players operation %work%8%30%lo reg += %work%8%29%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%8%30%lo reg
	scoreboard players set %work%8%31%lo reg 4
	execute store success score %work%8%32%lo reg if score %work%8%30%lo reg > %work%8%31%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%8%32%lo reg matches 0 run function wasmrunner:wasm_8_4
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_8_5
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_5 --------
	function wasmrunner:wasm_8_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_2 --------
	execute store result score %work%8%33%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%8%34%lo reg 3584
	execute store success score %work%8%35%lo reg if score %work%8%33%lo reg < %work%8%34%lo reg
	scoreboard players operation %temp%0%lo reg = %work%8%35%lo reg
	scoreboard players operation %work%8%36%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_8_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_8_1 --------
	scoreboard players operation %return%0%lo reg = %work%8%36%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %const%0 reg
	execute store result score %work%9%0%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%2%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%2%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%3%lo reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%9%3%lo reg
	scoreboard players operation %work%9%4%lo reg = %work%9%1%lo reg
	scoreboard players operation %work%9%4%lo reg += %work%9%3%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%4%lo reg
	scoreboard players set %work%9%5%lo reg 40
	scoreboard players operation %work%9%6%lo reg = %work%9%4%lo reg
	scoreboard players operation %work%9%6%lo reg += %work%9%5%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%6%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%7%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%7%lo reg
	scoreboard players set %work%9%8%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%7%lo reg
	scoreboard players operation %param1%0 reg = %work%9%8%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:shl
	scoreboard players operation %work%9%9%lo reg = %param0%0 reg
	execute store result score %work%9%10%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%11%lo reg 41
	scoreboard players operation %work%9%12%lo reg = %work%9%10%lo reg
	scoreboard players operation %work%9%12%lo reg += %work%9%11%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%12%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%13%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%13%lo reg
	scoreboard players operation %param0%0 reg = %work%9%9%lo reg
	scoreboard players operation %param1%0 reg = %work%9%13%lo reg
	function intrinsic:or
	scoreboard players operation %work%9%14%lo reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%14%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%0%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4154 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%14%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%15%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%16%lo reg 12
	scoreboard players operation %param0%0 reg = %work%9%15%lo reg
	scoreboard players operation %param1%0 reg = %work%9%16%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%17%lo reg = %param0%0 reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 0 run function wasmrunner:wasm_9_22
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 1 run function wasmrunner:wasm_9_21
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 2 run function wasmrunner:wasm_9_20
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 3 run function wasmrunner:wasm_9_19
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 4 run function wasmrunner:wasm_9_18
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 5 run function wasmrunner:wasm_9_17
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 6 run function wasmrunner:wasm_9_16
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 7 run function wasmrunner:wasm_9_15
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 8 run function wasmrunner:wasm_9_14
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 9 run function wasmrunner:wasm_9_13
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 10 run function wasmrunner:wasm_9_12
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 11 run function wasmrunner:wasm_9_11
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 12 run function wasmrunner:wasm_9_10
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 13 run function wasmrunner:wasm_9_9
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 14 run function wasmrunner:wasm_9_8
	execute if score %condtaken reg matches 0 run execute if score %work%9%17%lo reg matches 15 run function wasmrunner:wasm_9_7
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_22
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_23 --------
	function wasmrunner:wasm_9_22
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_22 --------
	execute store result score %work%9%18%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%19%lo reg 15
	scoreboard players operation %work%9%20%lo reg = %work%9%18%lo reg
	scoreboard players operation %work%9%20%lo reg %= %const%16 reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 0 run function wasmrunner:wasm_9_6
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 1 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 2 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 3 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 4 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 5 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 6 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 7 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 8 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 9 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 10 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 11 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 12 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 13 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%20%lo reg matches 14 run function wasmrunner:wasm_9_24
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_25 --------
	function wasmrunner:wasm_9_24
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_24 --------
	execute store result score %work%9%21%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%22%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%22%lo reg
	scoreboard players operation %temp%0%lo reg += %const%32 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%23%lo reg = %return%0 reg
	scoreboard players set %work%9%24%lo reg -1
	scoreboard players operation %work%9%25%lo reg = %work%9%23%lo reg
	scoreboard players operation %work%9%25%lo reg += %work%9%24%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%25%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%21%lo reg
	scoreboard players operation %temp%0%lo reg += %const%32 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%25%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%26%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%27%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%28%lo reg 65535
	scoreboard players operation %work%9%29%lo reg = %work%9%27%lo reg
	scoreboard players operation %work%9%29%lo reg %= %const%65536 reg
	scoreboard players set %work%9%30%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%29%lo reg
	scoreboard players operation %param1%0 reg = %work%9%30%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:shl
	scoreboard players operation %work%9%31%lo reg = %param0%0 reg
	scoreboard players operation %work%9%32%lo reg = %work%9%26%lo reg
	scoreboard players operation %work%9%32%lo reg += %work%9%31%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%32%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%33%lo reg = %return%0 reg
	scoreboard players set %work%9%34%lo reg 2
	scoreboard players operation %work%9%35%lo reg = %work%9%33%lo reg
	scoreboard players operation %work%9%35%lo reg += %work%9%34%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%35%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_26 --------
	function wasmrunner:wasm_9_21
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_21 --------
	execute store result score %work%9%36%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%37%lo reg 4095
	scoreboard players operation %work%9%38%lo reg = %work%9%36%lo reg
	scoreboard players operation %work%9%38%lo reg %= %const%4096 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%38%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_27 --------
	function wasmrunner:wasm_9_20
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_20 --------
	execute store result score %work%9%39%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%40%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%40%lo reg
	scoreboard players operation %temp%0%lo reg += %const%32 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%41%lo reg = %return%0 reg
	scoreboard players set %work%9%42%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%41%lo reg
	scoreboard players operation %param1%0 reg = %work%9%42%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:shl
	scoreboard players operation %work%9%43%lo reg = %param0%0 reg
	scoreboard players operation %work%9%44%lo reg = %work%9%39%lo reg
	scoreboard players operation %work%9%44%lo reg += %work%9%43%lo reg
	execute store result score %work%9%45%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players operation %temp%0%lo reg = %work%9%44%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%45%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%46%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%47%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%47%lo reg
	scoreboard players operation %temp%0%lo reg += %const%32 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%48%lo reg = %return%0 reg
	scoreboard players set %work%9%49%lo reg 1
	scoreboard players operation %work%9%50%lo reg = %work%9%48%lo reg
	scoreboard players operation %work%9%50%lo reg += %work%9%49%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%46%lo reg
	scoreboard players operation %temp%0%lo reg += %const%32 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%50%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%51%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%51%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4154 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%52%lo reg = %return%0 reg
	scoreboard players set %work%9%53%lo reg 4095
	scoreboard players operation %work%9%54%lo reg = %work%9%52%lo reg
	scoreboard players operation %work%9%54%lo reg %= %const%4096 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%54%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_28 --------
	function wasmrunner:wasm_9_19
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_19 --------
	execute store result score %work%9%55%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%56%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%57%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%56%lo reg
	scoreboard players operation %param1%0 reg = %work%9%57%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%58%lo reg = %param0%0 reg
	scoreboard players set %work%9%59%lo reg 15
	scoreboard players operation %work%9%60%lo reg = %work%9%58%lo reg
	scoreboard players operation %work%9%60%lo reg %= %const%16 reg
	scoreboard players operation %work%9%61%lo reg = %work%9%55%lo reg
	scoreboard players operation %work%9%61%lo reg += %work%9%60%lo reg
	scoreboard players set %work%9%62%lo reg 4136
	scoreboard players operation %work%9%63%lo reg = %work%9%61%lo reg
	scoreboard players operation %work%9%63%lo reg += %work%9%62%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%63%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%64%lo reg = %param0%0 reg
	execute store result score %work%9%65%lo reg run data get storage wasm:localstack stack.data[8]
	execute store success score %work%9%66%lo reg unless score %work%9%64%lo reg = %work%9%65%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%66%lo reg matches 0 run function wasmrunner:wasm_9_29
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_30
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_30 --------
	execute store result score %work%9%67%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%68%lo reg 4
	scoreboard players operation %work%9%69%lo reg = %work%9%67%lo reg
	scoreboard players operation %work%9%69%lo reg += %work%9%68%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%69%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_31 --------
	function wasmrunner:wasm_9_29
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_29 --------
	execute store result score %work%9%70%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%71%lo reg 2
	scoreboard players operation %work%9%72%lo reg = %work%9%70%lo reg
	scoreboard players operation %work%9%72%lo reg += %work%9%71%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%72%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_32 --------
	function wasmrunner:wasm_9_18
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_18 --------
	execute store result score %work%9%73%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%74%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%75%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%74%lo reg
	scoreboard players operation %param1%0 reg = %work%9%75%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%76%lo reg = %param0%0 reg
	scoreboard players set %work%9%77%lo reg 15
	scoreboard players operation %work%9%78%lo reg = %work%9%76%lo reg
	scoreboard players operation %work%9%78%lo reg %= %const%16 reg
	scoreboard players operation %work%9%79%lo reg = %work%9%73%lo reg
	scoreboard players operation %work%9%79%lo reg += %work%9%78%lo reg
	scoreboard players set %work%9%80%lo reg 4136
	scoreboard players operation %work%9%81%lo reg = %work%9%79%lo reg
	scoreboard players operation %work%9%81%lo reg += %work%9%80%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%81%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%82%lo reg = %param0%0 reg
	execute store result score %work%9%83%lo reg run data get storage wasm:localstack stack.data[8]
	execute store success score %work%9%84%lo reg if score %work%9%82%lo reg = %work%9%83%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%84%lo reg matches 0 run function wasmrunner:wasm_9_33
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_34
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_34 --------
	execute store result score %work%9%85%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%86%lo reg 4
	scoreboard players operation %work%9%87%lo reg = %work%9%85%lo reg
	scoreboard players operation %work%9%87%lo reg += %work%9%86%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%87%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_35 --------
	function wasmrunner:wasm_9_33
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_33 --------
	execute store result score %work%9%88%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%89%lo reg 2
	scoreboard players operation %work%9%90%lo reg = %work%9%88%lo reg
	scoreboard players operation %work%9%90%lo reg += %work%9%89%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%90%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_36 --------
	function wasmrunner:wasm_9_17
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_17 --------
	execute store result score %work%9%91%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%92%lo reg 4136
	scoreboard players operation %work%9%93%lo reg = %work%9%91%lo reg
	scoreboard players operation %work%9%93%lo reg += %work%9%92%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%93%lo reg
	execute store result score %work%9%94%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%95%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%94%lo reg
	scoreboard players operation %param1%0 reg = %work%9%95%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%96%lo reg = %param0%0 reg
	scoreboard players set %work%9%97%lo reg 15
	scoreboard players operation %work%9%98%lo reg = %work%9%96%lo reg
	scoreboard players operation %work%9%98%lo reg %= %const%16 reg
	scoreboard players operation %work%9%99%lo reg = %work%9%93%lo reg
	scoreboard players operation %work%9%99%lo reg += %work%9%98%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%99%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%100%lo reg = %param0%0 reg
	execute store result score %work%9%101%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%102%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%103%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%102%lo reg
	scoreboard players operation %param1%0 reg = %work%9%103%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%104%lo reg = %param0%0 reg
	scoreboard players set %work%9%105%lo reg 15
	scoreboard players operation %work%9%106%lo reg = %work%9%104%lo reg
	scoreboard players operation %work%9%106%lo reg %= %const%16 reg
	scoreboard players operation %work%9%107%lo reg = %work%9%101%lo reg
	scoreboard players operation %work%9%107%lo reg += %work%9%106%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%107%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%108%lo reg = %param0%0 reg
	execute store success score %work%9%109%lo reg unless score %work%9%100%lo reg = %work%9%108%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%109%lo reg matches 0 run function wasmrunner:wasm_9_37
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_38
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_38 --------
	execute store result score %work%9%110%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%111%lo reg 4
	scoreboard players operation %work%9%112%lo reg = %work%9%110%lo reg
	scoreboard players operation %work%9%112%lo reg += %work%9%111%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%112%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_39 --------
	function wasmrunner:wasm_9_37
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_37 --------
	execute store result score %work%9%113%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%114%lo reg 2
	scoreboard players operation %work%9%115%lo reg = %work%9%113%lo reg
	scoreboard players operation %work%9%115%lo reg += %work%9%114%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%115%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_40 --------
	function wasmrunner:wasm_9_16
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_16 --------
	execute store result score %work%9%116%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%117%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%118%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%117%lo reg
	scoreboard players operation %param1%0 reg = %work%9%118%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%119%lo reg = %param0%0 reg
	scoreboard players set %work%9%120%lo reg 15
	scoreboard players operation %work%9%121%lo reg = %work%9%119%lo reg
	scoreboard players operation %work%9%121%lo reg %= %const%16 reg
	scoreboard players operation %work%9%122%lo reg = %work%9%116%lo reg
	scoreboard players operation %work%9%122%lo reg += %work%9%121%lo reg
	scoreboard players set %work%9%123%lo reg 4136
	scoreboard players operation %work%9%124%lo reg = %work%9%122%lo reg
	scoreboard players operation %work%9%124%lo reg += %work%9%123%lo reg
	execute store result score %work%9%125%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %temp%0%lo reg = %work%9%124%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%125%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%126%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%126%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%127%lo reg = %return%0 reg
	scoreboard players set %work%9%128%lo reg 2
	scoreboard players operation %work%9%129%lo reg = %work%9%127%lo reg
	scoreboard players operation %work%9%129%lo reg += %work%9%128%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%129%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_41 --------
	function wasmrunner:wasm_9_15
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_15 --------
	execute store result score %work%9%130%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%131%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%132%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%131%lo reg
	scoreboard players operation %param1%0 reg = %work%9%132%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%133%lo reg = %param0%0 reg
	scoreboard players set %work%9%134%lo reg 15
	scoreboard players operation %work%9%135%lo reg = %work%9%133%lo reg
	scoreboard players operation %work%9%135%lo reg %= %const%16 reg
	scoreboard players operation %work%9%136%lo reg = %work%9%130%lo reg
	scoreboard players operation %work%9%136%lo reg += %work%9%135%lo reg
	scoreboard players set %work%9%137%lo reg 4136
	scoreboard players operation %work%9%138%lo reg = %work%9%136%lo reg
	scoreboard players operation %work%9%138%lo reg += %work%9%137%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%138%lo reg
	execute store result score %work%9%139%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%139%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%140%lo reg = %param0%0 reg
	execute store result score %work%9%141%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%142%lo reg = %work%9%140%lo reg
	scoreboard players operation %work%9%142%lo reg += %work%9%141%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%138%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%142%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%143%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%143%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%144%lo reg = %return%0 reg
	scoreboard players set %work%9%145%lo reg 2
	scoreboard players operation %work%9%146%lo reg = %work%9%144%lo reg
	scoreboard players operation %work%9%146%lo reg += %work%9%145%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%146%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_42 --------
	function wasmrunner:wasm_9_14
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_14 --------
	execute store result score %work%9%147%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%148%lo reg 15
	scoreboard players operation %work%9%149%lo reg = %work%9%147%lo reg
	scoreboard players operation %work%9%149%lo reg %= %const%16 reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 0 run function wasmrunner:wasm_9_51
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 1 run function wasmrunner:wasm_9_50
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 2 run function wasmrunner:wasm_9_49
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 3 run function wasmrunner:wasm_9_48
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 4 run function wasmrunner:wasm_9_47
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 5 run function wasmrunner:wasm_9_46
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 6 run function wasmrunner:wasm_9_45
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 7 run function wasmrunner:wasm_9_44
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 8 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 9 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 10 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 11 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 12 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 13 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%149%lo reg matches 14 run function wasmrunner:wasm_9_43
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_52 --------
	function wasmrunner:wasm_9_51
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_51 --------
	execute store result score %work%9%150%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%151%lo reg 4136
	scoreboard players operation %work%9%152%lo reg = %work%9%150%lo reg
	scoreboard players operation %work%9%152%lo reg += %work%9%151%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%152%lo reg
	execute store result score %work%9%153%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%154%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%153%lo reg
	scoreboard players operation %param1%0 reg = %work%9%154%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%155%lo reg = %param0%0 reg
	scoreboard players set %work%9%156%lo reg 15
	scoreboard players operation %work%9%157%lo reg = %work%9%155%lo reg
	scoreboard players operation %work%9%157%lo reg %= %const%16 reg
	scoreboard players operation %work%9%158%lo reg = %work%9%152%lo reg
	scoreboard players operation %work%9%158%lo reg += %work%9%157%lo reg
	execute store result score %work%9%159%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%160%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%161%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%160%lo reg
	scoreboard players operation %param1%0 reg = %work%9%161%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%162%lo reg = %param0%0 reg
	scoreboard players set %work%9%163%lo reg 15
	scoreboard players operation %work%9%164%lo reg = %work%9%162%lo reg
	scoreboard players operation %work%9%164%lo reg %= %const%16 reg
	scoreboard players operation %work%9%165%lo reg = %work%9%159%lo reg
	scoreboard players operation %work%9%165%lo reg += %work%9%164%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%165%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%166%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%158%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%166%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%167%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%167%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%168%lo reg = %return%0 reg
	scoreboard players set %work%9%169%lo reg 2
	scoreboard players operation %work%9%170%lo reg = %work%9%168%lo reg
	scoreboard players operation %work%9%170%lo reg += %work%9%169%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%170%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_53 --------
	function wasmrunner:wasm_9_50
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_50 --------
	execute store result score %work%9%171%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%172%lo reg 4136
	scoreboard players operation %work%9%173%lo reg = %work%9%171%lo reg
	scoreboard players operation %work%9%173%lo reg += %work%9%172%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%173%lo reg
	execute store result score %work%9%174%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%175%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%174%lo reg
	scoreboard players operation %param1%0 reg = %work%9%175%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%176%lo reg = %param0%0 reg
	scoreboard players set %work%9%177%lo reg 15
	scoreboard players operation %work%9%178%lo reg = %work%9%176%lo reg
	scoreboard players operation %work%9%178%lo reg %= %const%16 reg
	scoreboard players operation %work%9%179%lo reg = %work%9%173%lo reg
	scoreboard players operation %work%9%179%lo reg += %work%9%178%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%179%lo reg
	execute store result score %work%9%180%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%180%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%181%lo reg = %param0%0 reg
	execute store result score %work%9%182%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%183%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%184%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%183%lo reg
	scoreboard players operation %param1%0 reg = %work%9%184%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%185%lo reg = %param0%0 reg
	scoreboard players set %work%9%186%lo reg 15
	scoreboard players operation %work%9%187%lo reg = %work%9%185%lo reg
	scoreboard players operation %work%9%187%lo reg %= %const%16 reg
	scoreboard players operation %work%9%188%lo reg = %work%9%182%lo reg
	scoreboard players operation %work%9%188%lo reg += %work%9%187%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%188%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%189%lo reg = %param0%0 reg
	scoreboard players operation %param0%0 reg = %work%9%181%lo reg
	scoreboard players operation %param1%0 reg = %work%9%189%lo reg
	function intrinsic:or
	scoreboard players operation %work%9%190%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%179%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%190%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%191%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%191%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%192%lo reg = %return%0 reg
	scoreboard players set %work%9%193%lo reg 2
	scoreboard players operation %work%9%194%lo reg = %work%9%192%lo reg
	scoreboard players operation %work%9%194%lo reg += %work%9%193%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%194%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_54 --------
	function wasmrunner:wasm_9_49
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_49 --------
	execute store result score %work%9%195%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%196%lo reg 4136
	scoreboard players operation %work%9%197%lo reg = %work%9%195%lo reg
	scoreboard players operation %work%9%197%lo reg += %work%9%196%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%197%lo reg
	execute store result score %work%9%198%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%199%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%198%lo reg
	scoreboard players operation %param1%0 reg = %work%9%199%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%200%lo reg = %param0%0 reg
	scoreboard players set %work%9%201%lo reg 15
	scoreboard players operation %work%9%202%lo reg = %work%9%200%lo reg
	scoreboard players operation %work%9%202%lo reg %= %const%16 reg
	scoreboard players operation %work%9%203%lo reg = %work%9%197%lo reg
	scoreboard players operation %work%9%203%lo reg += %work%9%202%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%203%lo reg
	execute store result score %work%9%204%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%204%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%205%lo reg = %param0%0 reg
	execute store result score %work%9%206%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%207%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%208%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%207%lo reg
	scoreboard players operation %param1%0 reg = %work%9%208%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%209%lo reg = %param0%0 reg
	scoreboard players set %work%9%210%lo reg 15
	scoreboard players operation %work%9%211%lo reg = %work%9%209%lo reg
	scoreboard players operation %work%9%211%lo reg %= %const%16 reg
	scoreboard players operation %work%9%212%lo reg = %work%9%206%lo reg
	scoreboard players operation %work%9%212%lo reg += %work%9%211%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%212%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%213%lo reg = %param0%0 reg
	scoreboard players operation %param0%0 reg = %work%9%205%lo reg
	scoreboard players operation %param1%0 reg = %work%9%213%lo reg
	function intrinsic:and
	scoreboard players operation %work%9%214%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%203%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%214%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%215%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%215%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%216%lo reg = %return%0 reg
	scoreboard players set %work%9%217%lo reg 2
	scoreboard players operation %work%9%218%lo reg = %work%9%216%lo reg
	scoreboard players operation %work%9%218%lo reg += %work%9%217%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%218%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_55 --------
	function wasmrunner:wasm_9_48
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_48 --------
	execute store result score %work%9%219%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%220%lo reg 4136
	scoreboard players operation %work%9%221%lo reg = %work%9%219%lo reg
	scoreboard players operation %work%9%221%lo reg += %work%9%220%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%221%lo reg
	execute store result score %work%9%222%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%223%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%222%lo reg
	scoreboard players operation %param1%0 reg = %work%9%223%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%224%lo reg = %param0%0 reg
	scoreboard players set %work%9%225%lo reg 15
	scoreboard players operation %work%9%226%lo reg = %work%9%224%lo reg
	scoreboard players operation %work%9%226%lo reg %= %const%16 reg
	scoreboard players operation %work%9%227%lo reg = %work%9%221%lo reg
	scoreboard players operation %work%9%227%lo reg += %work%9%226%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%227%lo reg
	execute store result score %work%9%228%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%228%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%229%lo reg = %param0%0 reg
	execute store result score %work%9%230%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%231%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%232%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%231%lo reg
	scoreboard players operation %param1%0 reg = %work%9%232%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%233%lo reg = %param0%0 reg
	scoreboard players set %work%9%234%lo reg 15
	scoreboard players operation %work%9%235%lo reg = %work%9%233%lo reg
	scoreboard players operation %work%9%235%lo reg %= %const%16 reg
	scoreboard players operation %work%9%236%lo reg = %work%9%230%lo reg
	scoreboard players operation %work%9%236%lo reg += %work%9%235%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%236%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%237%lo reg = %param0%0 reg
	scoreboard players operation %param0%0 reg = %work%9%229%lo reg
	scoreboard players operation %param1%0 reg = %work%9%237%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%238%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%227%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%238%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%239%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%239%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%240%lo reg = %return%0 reg
	scoreboard players set %work%9%241%lo reg 2
	scoreboard players operation %work%9%242%lo reg = %work%9%240%lo reg
	scoreboard players operation %work%9%242%lo reg += %work%9%241%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%242%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_56 --------
	function wasmrunner:wasm_9_47
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_47 --------
	execute store result score %work%9%243%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%244%lo reg 4136
	scoreboard players operation %work%9%245%lo reg = %work%9%243%lo reg
	scoreboard players operation %work%9%245%lo reg += %work%9%244%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%245%lo reg
	execute store result score %work%9%246%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%247%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%246%lo reg
	scoreboard players operation %param1%0 reg = %work%9%247%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%248%lo reg = %param0%0 reg
	scoreboard players set %work%9%249%lo reg 15
	scoreboard players operation %work%9%250%lo reg = %work%9%248%lo reg
	scoreboard players operation %work%9%250%lo reg %= %const%16 reg
	scoreboard players operation %work%9%251%lo reg = %work%9%245%lo reg
	scoreboard players operation %work%9%251%lo reg += %work%9%250%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%251%lo reg
	execute store result score %work%9%252%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%252%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%253%lo reg = %param0%0 reg
	execute store result score %work%9%254%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%255%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%256%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%255%lo reg
	scoreboard players operation %param1%0 reg = %work%9%256%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%257%lo reg = %param0%0 reg
	scoreboard players set %work%9%258%lo reg 15
	scoreboard players operation %work%9%259%lo reg = %work%9%257%lo reg
	scoreboard players operation %work%9%259%lo reg %= %const%16 reg
	scoreboard players operation %work%9%260%lo reg = %work%9%254%lo reg
	scoreboard players operation %work%9%260%lo reg += %work%9%259%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%260%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%261%lo reg = %param0%0 reg
	scoreboard players operation %work%9%262%lo reg = %work%9%253%lo reg
	scoreboard players operation %work%9%262%lo reg += %work%9%261%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%251%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%262%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%263%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%264%lo reg 4151
	scoreboard players operation %work%9%265%lo reg = %work%9%263%lo reg
	scoreboard players operation %work%9%265%lo reg += %work%9%264%lo reg
	execute store result score %work%9%266%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%267%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%267%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4154 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%268%lo reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%268%lo reg
	scoreboard players set %work%9%269%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%268%lo reg
	scoreboard players operation %param1%0 reg = %work%9%269%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%270%lo reg = %param0%0 reg
	scoreboard players set %work%9%271%lo reg 15
	scoreboard players operation %work%9%272%lo reg = %work%9%270%lo reg
	scoreboard players operation %work%9%272%lo reg %= %const%16 reg
	scoreboard players operation %work%9%273%lo reg = %work%9%266%lo reg
	scoreboard players operation %work%9%273%lo reg += %work%9%272%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%273%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%274%lo reg = %param0%0 reg
	execute store result score %work%9%275%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%276%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%277%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%276%lo reg
	scoreboard players operation %param1%0 reg = %work%9%277%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%278%lo reg = %param0%0 reg
	scoreboard players set %work%9%279%lo reg 15
	scoreboard players operation %work%9%280%lo reg = %work%9%278%lo reg
	scoreboard players operation %work%9%280%lo reg %= %const%16 reg
	scoreboard players operation %work%9%281%lo reg = %work%9%275%lo reg
	scoreboard players operation %work%9%281%lo reg += %work%9%280%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%281%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%282%lo reg = %param0%0 reg
	scoreboard players set %work%9%283%lo reg 255
	scoreboard players operation %param0%0 reg = %work%9%282%lo reg
	scoreboard players operation %param1%0 reg = %work%9%283%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%284%lo reg = %return%0 reg
	scoreboard players set %work%9%285%lo reg 0
	execute if score %work%9%284%lo reg matches ..-1 if score %work%9%274%lo reg matches 0.. run scoreboard players set %work%9%285%lo reg 0
	execute if score %work%9%284%lo reg matches 0.. if score %work%9%274%lo reg matches ..-1 run scoreboard players set %work%9%285%lo reg 1
	execute if score %work%9%284%lo reg matches ..-1 if score %work%9%274%lo reg matches ..-1 if score %work%9%284%lo reg < %work%9%274%lo reg run scoreboard players set %work%9%285%lo reg 1
	execute if score %work%9%284%lo reg matches 0.. if score %work%9%274%lo reg matches 0.. if score %work%9%284%lo reg < %work%9%274%lo reg run scoreboard players set %work%9%285%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%265%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%285%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%286%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%286%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%287%lo reg = %return%0 reg
	scoreboard players set %work%9%288%lo reg 2
	scoreboard players operation %work%9%289%lo reg = %work%9%287%lo reg
	scoreboard players operation %work%9%289%lo reg += %work%9%288%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%289%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_57 --------
	function wasmrunner:wasm_9_46
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_46 --------
	execute store result score %work%9%290%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%291%lo reg 4151
	scoreboard players operation %work%9%292%lo reg = %work%9%290%lo reg
	scoreboard players operation %work%9%292%lo reg += %work%9%291%lo reg
	execute store result score %work%9%293%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%294%lo reg 4136
	scoreboard players operation %work%9%295%lo reg = %work%9%293%lo reg
	scoreboard players operation %work%9%295%lo reg += %work%9%294%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%295%lo reg
	execute store result score %work%9%296%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%297%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%296%lo reg
	scoreboard players operation %param1%0 reg = %work%9%297%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%298%lo reg = %param0%0 reg
	scoreboard players set %work%9%299%lo reg 15
	scoreboard players operation %work%9%300%lo reg = %work%9%298%lo reg
	scoreboard players operation %work%9%300%lo reg %= %const%16 reg
	scoreboard players operation %work%9%301%lo reg = %work%9%295%lo reg
	scoreboard players operation %work%9%301%lo reg += %work%9%300%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%301%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%301%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%302%lo reg = %param0%0 reg
	execute store result score %work%9%303%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%304%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%305%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%304%lo reg
	scoreboard players operation %param1%0 reg = %work%9%305%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%306%lo reg = %param0%0 reg
	scoreboard players set %work%9%307%lo reg 15
	scoreboard players operation %work%9%308%lo reg = %work%9%306%lo reg
	scoreboard players operation %work%9%308%lo reg %= %const%16 reg
	scoreboard players operation %work%9%309%lo reg = %work%9%303%lo reg
	scoreboard players operation %work%9%309%lo reg += %work%9%308%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%309%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%309%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%310%lo reg = %param0%0 reg
	scoreboard players set %work%9%311%lo reg 0
	execute if score %work%9%302%lo reg matches ..-1 if score %work%9%310%lo reg matches 0.. run scoreboard players set %work%9%311%lo reg 0
	execute if score %work%9%302%lo reg matches 0.. if score %work%9%310%lo reg matches ..-1 run scoreboard players set %work%9%311%lo reg 1
	execute if score %work%9%302%lo reg matches ..-1 if score %work%9%310%lo reg matches ..-1 if score %work%9%302%lo reg < %work%9%310%lo reg run scoreboard players set %work%9%311%lo reg 1
	execute if score %work%9%302%lo reg matches 0.. if score %work%9%310%lo reg matches 0.. if score %work%9%302%lo reg < %work%9%310%lo reg run scoreboard players set %work%9%311%lo reg 1
	execute if score %work%9%311%lo reg matches 0 run execute store success score %work%9%311%lo reg if score %work%9%302%lo reg = %work%9%310%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%292%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%311%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%312%lo reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%9%313%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%313%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%314%lo reg = %param0%0 reg
	execute store result score %work%9%315%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%315%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%316%lo reg = %param0%0 reg
	scoreboard players operation %work%9%317%lo reg = %work%9%314%lo reg
	scoreboard players operation %work%9%317%lo reg -= %work%9%316%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%312%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%317%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%318%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%318%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%319%lo reg = %return%0 reg
	scoreboard players set %work%9%320%lo reg 2
	scoreboard players operation %work%9%321%lo reg = %work%9%319%lo reg
	scoreboard players operation %work%9%321%lo reg += %work%9%320%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%321%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_58 --------
	function wasmrunner:wasm_9_45
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_45 --------
	execute store result score %work%9%322%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%323%lo reg 4151
	scoreboard players operation %work%9%324%lo reg = %work%9%322%lo reg
	scoreboard players operation %work%9%324%lo reg += %work%9%323%lo reg
	execute store result score %work%9%325%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%326%lo reg 4136
	scoreboard players operation %work%9%327%lo reg = %work%9%325%lo reg
	scoreboard players operation %work%9%327%lo reg += %work%9%326%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%327%lo reg
	execute store result score %work%9%328%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%329%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%328%lo reg
	scoreboard players operation %param1%0 reg = %work%9%329%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%330%lo reg = %param0%0 reg
	scoreboard players set %work%9%331%lo reg 15
	scoreboard players operation %work%9%332%lo reg = %work%9%330%lo reg
	scoreboard players operation %work%9%332%lo reg %= %const%16 reg
	scoreboard players operation %work%9%333%lo reg = %work%9%327%lo reg
	scoreboard players operation %work%9%333%lo reg += %work%9%332%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%333%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%334%lo reg = %param0%0 reg
	scoreboard players set %work%9%335%lo reg 1
	scoreboard players operation %work%9%336%lo reg = %work%9%334%lo reg
	scoreboard players operation %work%9%336%lo reg %= %const%2 reg
	scoreboard players operation %temp%0%lo reg = %work%9%324%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%336%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%337%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%338%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%339%lo reg 15
	scoreboard players operation %work%9%340%lo reg = %work%9%338%lo reg
	scoreboard players operation %work%9%340%lo reg %= %const%16 reg
	scoreboard players operation %work%9%341%lo reg = %work%9%337%lo reg
	scoreboard players operation %work%9%341%lo reg += %work%9%340%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%341%lo reg
	execute store result score %work%9%342%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%342%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%343%lo reg = %param0%0 reg
	scoreboard players set %work%9%344%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%343%lo reg
	scoreboard players operation %param1%0 reg = %work%9%344%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%345%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%341%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%345%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%346%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%346%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%347%lo reg = %return%0 reg
	scoreboard players set %work%9%348%lo reg 2
	scoreboard players operation %work%9%349%lo reg = %work%9%347%lo reg
	scoreboard players operation %work%9%349%lo reg += %work%9%348%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%349%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_59 --------
	function wasmrunner:wasm_9_44
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_44 --------
	execute store result score %work%9%350%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%351%lo reg 4151
	scoreboard players operation %work%9%352%lo reg = %work%9%350%lo reg
	scoreboard players operation %work%9%352%lo reg += %work%9%351%lo reg
	execute store result score %work%9%353%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%354%lo reg 4136
	scoreboard players operation %work%9%355%lo reg = %work%9%353%lo reg
	scoreboard players operation %work%9%355%lo reg += %work%9%354%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%355%lo reg
	execute store result score %work%9%356%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%357%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%356%lo reg
	scoreboard players operation %param1%0 reg = %work%9%357%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%358%lo reg = %param0%0 reg
	scoreboard players set %work%9%359%lo reg 15
	scoreboard players operation %work%9%360%lo reg = %work%9%358%lo reg
	scoreboard players operation %work%9%360%lo reg %= %const%16 reg
	scoreboard players operation %work%9%361%lo reg = %work%9%355%lo reg
	scoreboard players operation %work%9%361%lo reg += %work%9%360%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%361%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%361%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%362%lo reg = %param0%0 reg
	execute store result score %work%9%363%lo reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%9%364%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%365%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%364%lo reg
	scoreboard players operation %param1%0 reg = %work%9%365%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%366%lo reg = %param0%0 reg
	scoreboard players set %work%9%367%lo reg 15
	scoreboard players operation %work%9%368%lo reg = %work%9%366%lo reg
	scoreboard players operation %work%9%368%lo reg %= %const%16 reg
	scoreboard players operation %work%9%369%lo reg = %work%9%363%lo reg
	scoreboard players operation %work%9%369%lo reg += %work%9%368%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%369%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%369%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%370%lo reg = %param0%0 reg
	scoreboard players set %work%9%371%lo reg 0
	execute if score %work%9%362%lo reg matches ..-1 if score %work%9%370%lo reg matches 0.. run scoreboard players set %work%9%371%lo reg 0
	execute if score %work%9%362%lo reg matches 0.. if score %work%9%370%lo reg matches ..-1 run scoreboard players set %work%9%371%lo reg 1
	execute if score %work%9%362%lo reg matches ..-1 if score %work%9%370%lo reg matches ..-1 if score %work%9%362%lo reg < %work%9%370%lo reg run scoreboard players set %work%9%371%lo reg 1
	execute if score %work%9%362%lo reg matches 0.. if score %work%9%370%lo reg matches 0.. if score %work%9%362%lo reg < %work%9%370%lo reg run scoreboard players set %work%9%371%lo reg 1
	execute if score %work%9%371%lo reg matches 0 run execute store success score %work%9%371%lo reg if score %work%9%362%lo reg = %work%9%370%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%352%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%371%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%372%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%373%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%373%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%374%lo reg = %param0%0 reg
	execute store result score %work%9%375%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %temp%0%lo reg = %work%9%375%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%376%lo reg = %param0%0 reg
	scoreboard players operation %work%9%377%lo reg = %work%9%374%lo reg
	scoreboard players operation %work%9%377%lo reg -= %work%9%376%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%372%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%377%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%378%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%378%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%379%lo reg = %return%0 reg
	scoreboard players set %work%9%380%lo reg 2
	scoreboard players operation %work%9%381%lo reg = %work%9%379%lo reg
	scoreboard players operation %work%9%381%lo reg += %work%9%380%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%381%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_60 --------
	function wasmrunner:wasm_9_43
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_43 --------
	execute store result score %work%9%382%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%383%lo reg 4151
	scoreboard players operation %work%9%384%lo reg = %work%9%382%lo reg
	scoreboard players operation %work%9%384%lo reg += %work%9%383%lo reg
	execute store result score %work%9%385%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%386%lo reg 4136
	scoreboard players operation %work%9%387%lo reg = %work%9%385%lo reg
	scoreboard players operation %work%9%387%lo reg += %work%9%386%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%387%lo reg
	execute store result score %work%9%388%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%389%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%388%lo reg
	scoreboard players operation %param1%0 reg = %work%9%389%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%390%lo reg = %param0%0 reg
	scoreboard players set %work%9%391%lo reg 15
	scoreboard players operation %work%9%392%lo reg = %work%9%390%lo reg
	scoreboard players operation %work%9%392%lo reg %= %const%16 reg
	scoreboard players operation %work%9%393%lo reg = %work%9%387%lo reg
	scoreboard players operation %work%9%393%lo reg += %work%9%392%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%393%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%394%lo reg = %param0%0 reg
	scoreboard players set %work%9%395%lo reg 7
	scoreboard players operation %param0%0 reg = %work%9%394%lo reg
	scoreboard players operation %param1%0 reg = %work%9%395%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%396%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%384%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%396%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%397%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%398%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%399%lo reg 15
	scoreboard players operation %work%9%400%lo reg = %work%9%398%lo reg
	scoreboard players operation %work%9%400%lo reg %= %const%16 reg
	scoreboard players operation %work%9%401%lo reg = %work%9%397%lo reg
	scoreboard players operation %work%9%401%lo reg += %work%9%400%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%401%lo reg
	execute store result score %work%9%402%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%402%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%403%lo reg = %param0%0 reg
	scoreboard players set %work%9%404%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%403%lo reg
	scoreboard players operation %param1%0 reg = %work%9%404%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:shl
	scoreboard players operation %work%9%405%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%401%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%405%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%406%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%406%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%407%lo reg = %return%0 reg
	scoreboard players set %work%9%408%lo reg 2
	scoreboard players operation %work%9%409%lo reg = %work%9%407%lo reg
	scoreboard players operation %work%9%409%lo reg += %work%9%408%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%409%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_61 --------
	function wasmrunner:wasm_9_13
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_13 --------
	execute store result score %work%9%410%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%411%lo reg 4136
	scoreboard players operation %work%9%412%lo reg = %work%9%410%lo reg
	scoreboard players operation %work%9%412%lo reg += %work%9%411%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%412%lo reg
	execute store result score %work%9%413%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%414%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%413%lo reg
	scoreboard players operation %param1%0 reg = %work%9%414%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%415%lo reg = %param0%0 reg
	scoreboard players set %work%9%416%lo reg 15
	scoreboard players operation %work%9%417%lo reg = %work%9%415%lo reg
	scoreboard players operation %work%9%417%lo reg %= %const%16 reg
	scoreboard players operation %work%9%418%lo reg = %work%9%412%lo reg
	scoreboard players operation %work%9%418%lo reg += %work%9%417%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%418%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%419%lo reg = %param0%0 reg
	execute store result score %work%9%420%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%421%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%422%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%421%lo reg
	scoreboard players operation %param1%0 reg = %work%9%422%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%423%lo reg = %param0%0 reg
	scoreboard players set %work%9%424%lo reg 15
	scoreboard players operation %work%9%425%lo reg = %work%9%423%lo reg
	scoreboard players operation %work%9%425%lo reg %= %const%16 reg
	scoreboard players operation %work%9%426%lo reg = %work%9%420%lo reg
	scoreboard players operation %work%9%426%lo reg += %work%9%425%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%426%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%427%lo reg = %param0%0 reg
	execute store success score %work%9%428%lo reg if score %work%9%419%lo reg = %work%9%427%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%428%lo reg matches 0 run function wasmrunner:wasm_9_62
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_63
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_63 --------
	execute store result score %work%9%429%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%430%lo reg 4
	scoreboard players operation %work%9%431%lo reg = %work%9%429%lo reg
	scoreboard players operation %work%9%431%lo reg += %work%9%430%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%431%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_64 --------
	function wasmrunner:wasm_9_62
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_62 --------
	execute store result score %work%9%432%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%433%lo reg 2
	scoreboard players operation %work%9%434%lo reg = %work%9%432%lo reg
	scoreboard players operation %work%9%434%lo reg += %work%9%433%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%434%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_65 --------
	function wasmrunner:wasm_9_12
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_12 --------
	execute store result score %work%9%435%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%436%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%437%lo reg 4095
	scoreboard players operation %work%9%438%lo reg = %work%9%436%lo reg
	scoreboard players operation %work%9%438%lo reg %= %const%4096 reg
	scoreboard players operation %temp%0%lo reg = %work%9%435%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%438%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%439%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%440%lo reg 2
	scoreboard players operation %work%9%441%lo reg = %work%9%439%lo reg
	scoreboard players operation %work%9%441%lo reg += %work%9%440%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%441%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_66 --------
	function wasmrunner:wasm_9_11
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_11 --------
	execute store result score %work%9%442%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%443%lo reg 4095
	scoreboard players operation %work%9%444%lo reg = %work%9%442%lo reg
	scoreboard players operation %work%9%444%lo reg %= %const%4096 reg
	execute store result score %work%9%445%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%445%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4136 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%446%lo reg = %param0%0 reg
	scoreboard players operation %work%9%447%lo reg = %work%9%444%lo reg
	scoreboard players operation %work%9%447%lo reg += %work%9%446%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%447%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_67 --------
	function wasmrunner:wasm_9_10
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_10 --------
	execute store result score %work%9%448%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%449%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%450%lo reg 15
	scoreboard players operation %work%9%451%lo reg = %work%9%449%lo reg
	scoreboard players operation %work%9%451%lo reg %= %const%16 reg
	scoreboard players operation %work%9%452%lo reg = %work%9%448%lo reg
	scoreboard players operation %work%9%452%lo reg += %work%9%451%lo reg
	scoreboard players set %work%9%453%lo reg 4136
	scoreboard players operation %work%9%454%lo reg = %work%9%452%lo reg
	scoreboard players operation %work%9%454%lo reg += %work%9%453%lo reg
	execute store result score %work%9%455%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%456%lo reg 112
	scoreboard players operation %work%9%457%lo reg = %work%9%455%lo reg
	scoreboard players operation %work%9%457%lo reg %= %const%128 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%455%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%16 reg
	scoreboard players operation %work%9%457%lo reg -= %temp%1234%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%454%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%457%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%458%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%458%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%459%lo reg = %return%0 reg
	scoreboard players set %work%9%460%lo reg 2
	scoreboard players operation %work%9%461%lo reg = %work%9%459%lo reg
	scoreboard players operation %work%9%461%lo reg += %work%9%460%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%461%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_68 --------
	function wasmrunner:wasm_9_9
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_9 --------
	execute store result score %work%9%462%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%463%lo reg 4136
	scoreboard players operation %work%9%464%lo reg = %work%9%462%lo reg
	scoreboard players operation %work%9%464%lo reg += %work%9%463%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%464%lo reg
	execute store result score %work%9%465%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%466%lo reg 4
	scoreboard players operation %param0%0 reg = %work%9%465%lo reg
	scoreboard players operation %param1%0 reg = %work%9%466%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%467%lo reg = %param0%0 reg
	scoreboard players set %work%9%468%lo reg 15
	scoreboard players operation %work%9%469%lo reg = %work%9%467%lo reg
	scoreboard players operation %work%9%469%lo reg %= %const%16 reg
	scoreboard players operation %work%9%470%lo reg = %work%9%464%lo reg
	scoreboard players operation %work%9%470%lo reg += %work%9%469%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%470%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%471%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%471%lo reg
	execute store result score %work%9%472%lo reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%9%473%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%474%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%473%lo reg
	scoreboard players operation %param1%0 reg = %work%9%474%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%475%lo reg = %param0%0 reg
	scoreboard players set %work%9%476%lo reg 15
	scoreboard players operation %work%9%477%lo reg = %work%9%475%lo reg
	scoreboard players operation %work%9%477%lo reg %= %const%16 reg
	scoreboard players operation %work%9%478%lo reg = %work%9%472%lo reg
	scoreboard players operation %work%9%478%lo reg += %work%9%477%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%478%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%479%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%479%lo reg
	scoreboard players set %work%9%480%lo reg 0
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%480%lo reg
	execute store result score %work%9%481%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%482%lo reg 4151
	scoreboard players operation %work%9%483%lo reg = %work%9%481%lo reg
	scoreboard players operation %work%9%483%lo reg += %work%9%482%lo reg
	scoreboard players set %work%9%484%lo reg 0
	scoreboard players operation %temp%0%lo reg = %work%9%483%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%484%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%485%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%486%lo reg 15
	scoreboard players operation %work%9%487%lo reg = %work%9%485%lo reg
	scoreboard players operation %work%9%487%lo reg %= %const%16 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%9%487%lo reg
	execute store success score %work%9%488%lo reg if score %work%9%487%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%488%lo reg matches 0 run function wasmrunner:wasm_9_69
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_70
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_70 --------
	execute store result score %work%9%489%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%9%490%lo reg 6
	scoreboard players operation %param0%0 reg = %work%9%489%lo reg
	scoreboard players operation %param1%0 reg = %work%9%490%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:shl
	scoreboard players operation %work%9%491%lo reg = %param0%0 reg
	execute store result score %work%9%492%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %work%9%493%lo reg = %work%9%491%lo reg
	scoreboard players operation %work%9%493%lo reg += %work%9%492%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%493%lo reg
	function wasmrunner:wasm_9_71
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_71 --------
	execute store result score %work%9%494%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%495%lo reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%9%496%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%496%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%497%lo reg = %return%0 reg
	scoreboard players operation %work%9%498%lo reg = %work%9%495%lo reg
	scoreboard players operation %work%9%498%lo reg += %work%9%497%lo reg
	scoreboard players operation %work%9%499%lo reg = %work%9%494%lo reg
	scoreboard players operation %work%9%499%lo reg += %work%9%498%lo reg
	scoreboard players set %work%9%500%lo reg 40
	scoreboard players operation %work%9%501%lo reg = %work%9%499%lo reg
	scoreboard players operation %work%9%501%lo reg += %work%9%500%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%501%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%502%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%502%lo reg
	scoreboard players set %work%9%503%lo reg 128
	scoreboard players operation %work%9%504%lo reg = %work%9%502%lo reg
	scoreboard players operation %work%9%504%lo reg %= %const%256 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%502%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%128 reg
	scoreboard players operation %work%9%504%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%505%lo reg if score %work%9%504%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%505%lo reg matches 0 run function wasmrunner:wasm_9_72
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_73
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_73 --------
	execute store result score %work%9%506%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%507%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%508%lo reg = %work%9%506%lo reg
	scoreboard players operation %work%9%508%lo reg += %work%9%507%lo reg
	scoreboard players set %work%9%509%lo reg 4160
	scoreboard players operation %work%9%510%lo reg = %work%9%508%lo reg
	scoreboard players operation %work%9%510%lo reg += %work%9%509%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%510%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%510%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%511%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%511%lo reg
	scoreboard players set %work%9%512%lo reg 1
	execute store success score %work%9%513%lo reg unless score %work%9%511%lo reg = %work%9%512%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%513%lo reg matches 0 run function wasmrunner:wasm_9_74
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_75
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_75 --------
	execute store result score %work%9%514%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%515%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%514%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%515%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%516%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%516%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%517%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%517%lo reg
	function wasmrunner:wasm_9_74
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_74 --------
	execute store result score %work%9%518%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%519%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%520%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%519%lo reg
	scoreboard players operation %param1%0 reg = %work%9%520%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%521%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%518%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%521%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_72
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_72 --------
	execute store result score %work%9%522%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%523%lo reg 64
	scoreboard players operation %work%9%524%lo reg = %work%9%522%lo reg
	scoreboard players operation %work%9%524%lo reg %= %const%128 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%522%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%64 reg
	scoreboard players operation %work%9%524%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%525%lo reg if score %work%9%524%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%525%lo reg matches 0 run function wasmrunner:wasm_9_76
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_77
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_77 --------
	execute store result score %work%9%526%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%527%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%528%lo reg = %work%9%526%lo reg
	scoreboard players operation %work%9%528%lo reg += %work%9%527%lo reg
	scoreboard players set %work%9%529%lo reg 4161
	scoreboard players operation %work%9%530%lo reg = %work%9%528%lo reg
	scoreboard players operation %work%9%530%lo reg += %work%9%529%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%530%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%530%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%531%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%531%lo reg
	scoreboard players set %work%9%532%lo reg 1
	execute store success score %work%9%533%lo reg unless score %work%9%531%lo reg = %work%9%532%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%533%lo reg matches 0 run function wasmrunner:wasm_9_78
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_79
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_79 --------
	execute store result score %work%9%534%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%535%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%534%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%535%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%536%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%536%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%537%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%537%lo reg
	function wasmrunner:wasm_9_78
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_78 --------
	execute store result score %work%9%538%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%539%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%540%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%539%lo reg
	scoreboard players operation %param1%0 reg = %work%9%540%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%541%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%538%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%541%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_76
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_76 --------
	execute store result score %work%9%542%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%543%lo reg 32
	scoreboard players operation %work%9%544%lo reg = %work%9%542%lo reg
	scoreboard players operation %work%9%544%lo reg %= %const%64 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%542%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%32 reg
	scoreboard players operation %work%9%544%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%545%lo reg if score %work%9%544%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%545%lo reg matches 0 run function wasmrunner:wasm_9_80
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_81
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_81 --------
	execute store result score %work%9%546%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%547%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%548%lo reg = %work%9%546%lo reg
	scoreboard players operation %work%9%548%lo reg += %work%9%547%lo reg
	scoreboard players set %work%9%549%lo reg 4162
	scoreboard players operation %work%9%550%lo reg = %work%9%548%lo reg
	scoreboard players operation %work%9%550%lo reg += %work%9%549%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%550%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%550%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%551%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%551%lo reg
	scoreboard players set %work%9%552%lo reg 1
	execute store success score %work%9%553%lo reg unless score %work%9%551%lo reg = %work%9%552%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%553%lo reg matches 0 run function wasmrunner:wasm_9_82
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_83
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_83 --------
	execute store result score %work%9%554%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%555%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%554%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%555%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%556%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%556%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%557%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%557%lo reg
	function wasmrunner:wasm_9_82
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_82 --------
	execute store result score %work%9%558%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%559%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%560%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%559%lo reg
	scoreboard players operation %param1%0 reg = %work%9%560%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%561%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%558%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%561%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_80
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_80 --------
	execute store result score %work%9%562%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%563%lo reg 16
	scoreboard players operation %work%9%564%lo reg = %work%9%562%lo reg
	scoreboard players operation %work%9%564%lo reg %= %const%32 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%562%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%16 reg
	scoreboard players operation %work%9%564%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%565%lo reg if score %work%9%564%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%565%lo reg matches 0 run function wasmrunner:wasm_9_84
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_85
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_85 --------
	execute store result score %work%9%566%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%567%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%568%lo reg = %work%9%566%lo reg
	scoreboard players operation %work%9%568%lo reg += %work%9%567%lo reg
	scoreboard players set %work%9%569%lo reg 4163
	scoreboard players operation %work%9%570%lo reg = %work%9%568%lo reg
	scoreboard players operation %work%9%570%lo reg += %work%9%569%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%570%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%570%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%571%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%571%lo reg
	scoreboard players set %work%9%572%lo reg 1
	execute store success score %work%9%573%lo reg unless score %work%9%571%lo reg = %work%9%572%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%573%lo reg matches 0 run function wasmrunner:wasm_9_86
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_87
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_87 --------
	execute store result score %work%9%574%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%575%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%574%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%575%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%576%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%576%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%577%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%577%lo reg
	function wasmrunner:wasm_9_86
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_86 --------
	execute store result score %work%9%578%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%579%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%580%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%579%lo reg
	scoreboard players operation %param1%0 reg = %work%9%580%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%581%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%578%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%581%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_84
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_84 --------
	execute store result score %work%9%582%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%583%lo reg 8
	scoreboard players operation %work%9%584%lo reg = %work%9%582%lo reg
	scoreboard players operation %work%9%584%lo reg %= %const%16 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%582%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%8 reg
	scoreboard players operation %work%9%584%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%585%lo reg if score %work%9%584%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%585%lo reg matches 0 run function wasmrunner:wasm_9_88
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_89
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_89 --------
	execute store result score %work%9%586%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%587%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%588%lo reg = %work%9%586%lo reg
	scoreboard players operation %work%9%588%lo reg += %work%9%587%lo reg
	scoreboard players set %work%9%589%lo reg 4164
	scoreboard players operation %work%9%590%lo reg = %work%9%588%lo reg
	scoreboard players operation %work%9%590%lo reg += %work%9%589%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%590%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%590%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%591%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%591%lo reg
	scoreboard players set %work%9%592%lo reg 1
	execute store success score %work%9%593%lo reg unless score %work%9%591%lo reg = %work%9%592%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%593%lo reg matches 0 run function wasmrunner:wasm_9_90
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_91
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_91 --------
	execute store result score %work%9%594%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%595%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%594%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%595%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%596%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%596%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%597%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%597%lo reg
	function wasmrunner:wasm_9_90
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_90 --------
	execute store result score %work%9%598%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%599%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%600%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%599%lo reg
	scoreboard players operation %param1%0 reg = %work%9%600%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%601%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%598%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%601%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_88
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_88 --------
	execute store result score %work%9%602%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%603%lo reg 4
	scoreboard players operation %work%9%604%lo reg = %work%9%602%lo reg
	scoreboard players operation %work%9%604%lo reg %= %const%8 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%602%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%4 reg
	scoreboard players operation %work%9%604%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%605%lo reg if score %work%9%604%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%605%lo reg matches 0 run function wasmrunner:wasm_9_92
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_93
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_93 --------
	execute store result score %work%9%606%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%607%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%608%lo reg = %work%9%606%lo reg
	scoreboard players operation %work%9%608%lo reg += %work%9%607%lo reg
	scoreboard players set %work%9%609%lo reg 4165
	scoreboard players operation %work%9%610%lo reg = %work%9%608%lo reg
	scoreboard players operation %work%9%610%lo reg += %work%9%609%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%610%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%610%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%611%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%611%lo reg
	scoreboard players set %work%9%612%lo reg 1
	execute store success score %work%9%613%lo reg unless score %work%9%611%lo reg = %work%9%612%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%613%lo reg matches 0 run function wasmrunner:wasm_9_94
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_95
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_95 --------
	execute store result score %work%9%614%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%615%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%614%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%615%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%616%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%616%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%617%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%617%lo reg
	function wasmrunner:wasm_9_94
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_94 --------
	execute store result score %work%9%618%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%619%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%620%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%619%lo reg
	scoreboard players operation %param1%0 reg = %work%9%620%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%621%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%618%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%621%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_92
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_92 --------
	execute store result score %work%9%622%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%623%lo reg 2
	scoreboard players operation %work%9%624%lo reg = %work%9%622%lo reg
	scoreboard players operation %work%9%624%lo reg %= %const%4 reg
	scoreboard players operation %temp%1234%lo reg = %work%9%622%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%2 reg
	scoreboard players operation %work%9%624%lo reg -= %temp%1234%lo reg
	execute store success score %work%9%625%lo reg if score %work%9%624%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%625%lo reg matches 0 run function wasmrunner:wasm_9_96
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_97
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_97 --------
	execute store result score %work%9%626%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%627%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%628%lo reg = %work%9%626%lo reg
	scoreboard players operation %work%9%628%lo reg += %work%9%627%lo reg
	scoreboard players set %work%9%629%lo reg 4166
	scoreboard players operation %work%9%630%lo reg = %work%9%628%lo reg
	scoreboard players operation %work%9%630%lo reg += %work%9%629%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%630%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%630%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%631%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%631%lo reg
	scoreboard players set %work%9%632%lo reg 1
	execute store success score %work%9%633%lo reg unless score %work%9%631%lo reg = %work%9%632%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%633%lo reg matches 0 run function wasmrunner:wasm_9_98
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_99
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_99 --------
	execute store result score %work%9%634%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%635%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%634%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%635%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%636%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players operation %temp%0%lo reg = %work%9%636%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%637%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%9%637%lo reg
	function wasmrunner:wasm_9_98
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_98 --------
	execute store result score %work%9%638%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%639%lo reg run data get storage wasm:localstack stack.data[14]
	scoreboard players set %work%9%640%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%639%lo reg
	scoreboard players operation %param1%0 reg = %work%9%640%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%641%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%638%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%641%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_96
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_96 --------
	execute store result score %work%9%642%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%643%lo reg 1
	scoreboard players operation %work%9%644%lo reg = %work%9%642%lo reg
	scoreboard players operation %work%9%644%lo reg %= %const%2 reg
	execute store success score %work%9%645%lo reg if score %work%9%644%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%645%lo reg matches 0 run function wasmrunner:wasm_9_100
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_101
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_101 --------
	execute store result score %work%9%646%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%647%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%648%lo reg = %work%9%646%lo reg
	scoreboard players operation %work%9%648%lo reg += %work%9%647%lo reg
	scoreboard players set %work%9%649%lo reg 4167
	scoreboard players operation %work%9%650%lo reg = %work%9%648%lo reg
	scoreboard players operation %work%9%650%lo reg += %work%9%649%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%650%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%650%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%651%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%651%lo reg
	scoreboard players set %work%9%652%lo reg 1
	execute store success score %work%9%653%lo reg unless score %work%9%651%lo reg = %work%9%652%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%653%lo reg matches 0 run function wasmrunner:wasm_9_102
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_103
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_103 --------
	execute store result score %work%9%654%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%655%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%654%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4151 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%655%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%656%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%656%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%657%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%657%lo reg
	function wasmrunner:wasm_9_102
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_102 --------
	execute store result score %work%9%658%lo reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%9%659%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%9%660%lo reg 1
	scoreboard players operation %param0%0 reg = %work%9%659%lo reg
	scoreboard players operation %param1%0 reg = %work%9%660%lo reg
	function intrinsic:xor
	scoreboard players operation %work%9%661%lo reg = %return%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%658%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%661%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_100
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_100 --------
	execute store result score %work%9%662%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%663%lo reg 64
	scoreboard players operation %work%9%664%lo reg = %work%9%662%lo reg
	scoreboard players operation %work%9%664%lo reg += %work%9%663%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%664%lo reg
	execute store result score %work%9%665%lo reg run data get storage wasm:localstack stack.data[12]
	execute store result score %work%9%666%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%667%lo reg 1
	scoreboard players operation %work%9%668%lo reg = %work%9%666%lo reg
	scoreboard players operation %work%9%668%lo reg += %work%9%667%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%668%lo reg
	execute store success score %work%9%669%lo reg unless score %work%9%665%lo reg = %work%9%668%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%669%lo reg matches 0 run function wasmrunner:wasm_9_71
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_104
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_104 --------
	function wasmrunner:wasm_9_69
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_69 --------
	execute store result score %work%9%670%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%671%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%670%lo reg
	scoreboard players operation %temp%0%lo reg += %const%6224 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%671%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%672%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%673%lo reg 2
	scoreboard players operation %work%9%674%lo reg = %work%9%672%lo reg
	scoreboard players operation %work%9%674%lo reg += %work%9%673%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%674%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_105 --------
	function wasmrunner:wasm_9_8
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_8 --------
	execute store result score %work%9%675%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%676%lo reg -158
	scoreboard players operation %work%9%677%lo reg = %work%9%675%lo reg
	scoreboard players operation %work%9%677%lo reg += %work%9%676%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %work%9%677%lo reg matches 0 run function wasmrunner:wasm_9_107
	execute if score %condtaken reg matches 0 run execute if score %work%9%677%lo reg matches 1 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%677%lo reg matches 2 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%677%lo reg matches 3 run function wasmrunner:wasm_9_106
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_108 --------
	function wasmrunner:wasm_9_107
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_107 --------
	execute store result score %work%9%678%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%679%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%680%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%681%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%680%lo reg
	scoreboard players operation %param1%0 reg = %work%9%681%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%682%lo reg = %param0%0 reg
	scoreboard players set %work%9%683%lo reg 15
	scoreboard players operation %work%9%684%lo reg = %work%9%682%lo reg
	scoreboard players operation %work%9%684%lo reg %= %const%16 reg
	scoreboard players operation %work%9%685%lo reg = %work%9%679%lo reg
	scoreboard players operation %work%9%685%lo reg += %work%9%684%lo reg
	scoreboard players set %work%9%686%lo reg 4136
	scoreboard players operation %work%9%687%lo reg = %work%9%685%lo reg
	scoreboard players operation %work%9%687%lo reg += %work%9%686%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%687%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%688%lo reg = %param0%0 reg
	scoreboard players operation %work%9%689%lo reg = %work%9%678%lo reg
	scoreboard players operation %work%9%689%lo reg += %work%9%688%lo reg
	scoreboard players set %work%9%690%lo reg 6208
	scoreboard players operation %work%9%691%lo reg = %work%9%689%lo reg
	scoreboard players operation %work%9%691%lo reg += %work%9%690%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%691%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%692%lo reg = %param0%0 reg
	execute store success score %work%9%693%lo reg if score %work%9%692%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%693%lo reg matches 0 run function wasmrunner:wasm_9_109
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_110
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_110 --------
	execute store result score %work%9%694%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%695%lo reg 4
	scoreboard players operation %work%9%696%lo reg = %work%9%694%lo reg
	scoreboard players operation %work%9%696%lo reg += %work%9%695%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%696%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_111 --------
	function wasmrunner:wasm_9_109
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_109 --------
	execute store result score %work%9%697%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%698%lo reg 2
	scoreboard players operation %work%9%699%lo reg = %work%9%697%lo reg
	scoreboard players operation %work%9%699%lo reg += %work%9%698%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%699%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_112 --------
	function wasmrunner:wasm_9_106
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_106 --------
	execute store result score %work%9%700%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%701%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%702%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%703%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%702%lo reg
	scoreboard players operation %param1%0 reg = %work%9%703%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%704%lo reg = %param0%0 reg
	scoreboard players set %work%9%705%lo reg 15
	scoreboard players operation %work%9%706%lo reg = %work%9%704%lo reg
	scoreboard players operation %work%9%706%lo reg %= %const%16 reg
	scoreboard players operation %work%9%707%lo reg = %work%9%701%lo reg
	scoreboard players operation %work%9%707%lo reg += %work%9%706%lo reg
	scoreboard players set %work%9%708%lo reg 4136
	scoreboard players operation %work%9%709%lo reg = %work%9%707%lo reg
	scoreboard players operation %work%9%709%lo reg += %work%9%708%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%709%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%710%lo reg = %param0%0 reg
	scoreboard players operation %work%9%711%lo reg = %work%9%700%lo reg
	scoreboard players operation %work%9%711%lo reg += %work%9%710%lo reg
	scoreboard players set %work%9%712%lo reg 6208
	scoreboard players operation %work%9%713%lo reg = %work%9%711%lo reg
	scoreboard players operation %work%9%713%lo reg += %work%9%712%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%713%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%714%lo reg = %param0%0 reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%714%lo reg matches 0 run function wasmrunner:wasm_9_113
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_114
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_114 --------
	execute store result score %work%9%715%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%716%lo reg 4
	scoreboard players operation %work%9%717%lo reg = %work%9%715%lo reg
	scoreboard players operation %work%9%717%lo reg += %work%9%716%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%717%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_115 --------
	function wasmrunner:wasm_9_113
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_113 --------
	execute store result score %work%9%718%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%719%lo reg 2
	scoreboard players operation %work%9%720%lo reg = %work%9%718%lo reg
	scoreboard players operation %work%9%720%lo reg += %work%9%719%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%720%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_116 --------
	function wasmrunner:wasm_9_7
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_7 --------
	execute store result score %work%9%721%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%722%lo reg -7
	scoreboard players operation %work%9%723%lo reg = %work%9%721%lo reg
	scoreboard players operation %work%9%723%lo reg += %work%9%722%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 0 run function wasmrunner:wasm_9_124
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 1 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 2 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 3 run function wasmrunner:wasm_9_123
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 4 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 5 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 6 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 7 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 8 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 9 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 10 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 11 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 12 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 13 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 14 run function wasmrunner:wasm_9_122
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 15 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 16 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 17 run function wasmrunner:wasm_9_121
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 18 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 19 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 20 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 21 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 22 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 23 run function wasmrunner:wasm_9_120
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 24 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 25 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 26 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 27 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 28 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 29 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 30 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 31 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 32 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 33 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 34 run function wasmrunner:wasm_9_119
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 35 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 36 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 37 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 38 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 39 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 40 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 41 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 42 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 43 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 44 run function wasmrunner:wasm_9_118
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 45 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 46 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 47 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 48 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 49 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 50 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 51 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 52 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 53 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 54 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 55 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 56 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 57 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 58 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 59 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 60 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 61 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 62 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 63 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 64 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 65 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 66 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 67 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 68 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 69 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 70 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 71 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 72 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 73 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 74 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 75 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 76 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 77 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %work%9%723%lo reg matches 78 run function wasmrunner:wasm_9_117
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_125
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_126 --------
	function wasmrunner:wasm_9_125
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_125 --------
	execute store result score %work%9%724%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%9%725%lo reg 101
	execute store success score %work%9%726%lo reg unless score %work%9%724%lo reg = %work%9%725%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%726%lo reg matches 0 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_127
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_127 --------
	scoreboard players set %work%9%727%lo reg 4136
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%727%lo reg
	execute store result score %work%9%728%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%729%lo reg 4155
	scoreboard players operation %work%9%730%lo reg = %work%9%728%lo reg
	scoreboard players operation %work%9%730%lo reg += %work%9%729%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%730%lo reg
	function wasmrunner:wasm_9_128
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_128 --------
	execute store result score %work%9%731%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%732%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %work%9%733%lo reg = %work%9%731%lo reg
	scoreboard players operation %work%9%733%lo reg += %work%9%732%lo reg
	execute store result score %work%9%734%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%735%lo reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%9%736%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%736%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%737%lo reg = %return%0 reg
	scoreboard players operation %work%9%738%lo reg = %work%9%735%lo reg
	scoreboard players operation %work%9%738%lo reg += %work%9%737%lo reg
	scoreboard players operation %work%9%739%lo reg = %work%9%734%lo reg
	scoreboard players operation %work%9%739%lo reg += %work%9%738%lo reg
	scoreboard players set %work%9%740%lo reg -4096
	scoreboard players operation %work%9%741%lo reg = %work%9%739%lo reg
	scoreboard players operation %work%9%741%lo reg += %work%9%740%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%741%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%742%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%733%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%742%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%743%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%744%lo reg -4136
	scoreboard players operation %work%9%745%lo reg = %work%9%743%lo reg
	scoreboard players operation %work%9%745%lo reg += %work%9%744%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%745%lo reg
	execute store result score %work%9%746%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%747%lo reg 1
	scoreboard players operation %work%9%748%lo reg = %work%9%746%lo reg
	scoreboard players operation %work%9%748%lo reg += %work%9%747%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%748%lo reg
	execute store result score %work%9%749%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%750%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%750%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%751%lo reg = %param0%0 reg
	scoreboard players set %work%9%752%lo reg 15
	scoreboard players operation %work%9%753%lo reg = %work%9%751%lo reg
	scoreboard players operation %work%9%753%lo reg %= %const%16 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%753%lo reg
	scoreboard players set %work%9%754%lo reg 0
	execute if score %work%9%749%lo reg matches ..-1 if score %work%9%753%lo reg matches 0.. run scoreboard players set %work%9%754%lo reg 0
	execute if score %work%9%749%lo reg matches 0.. if score %work%9%753%lo reg matches ..-1 run scoreboard players set %work%9%754%lo reg 1
	execute if score %work%9%749%lo reg matches ..-1 if score %work%9%753%lo reg matches ..-1 if score %work%9%749%lo reg < %work%9%753%lo reg run scoreboard players set %work%9%754%lo reg 1
	execute if score %work%9%749%lo reg matches 0.. if score %work%9%753%lo reg matches 0.. if score %work%9%749%lo reg < %work%9%753%lo reg run scoreboard players set %work%9%754%lo reg 1
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%754%lo reg matches 0 run function wasmrunner:wasm_9_128
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_129
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_129 --------
	execute store result score %work%9%755%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%756%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%757%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%757%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%758%lo reg = %return%0 reg
	scoreboard players operation %work%9%759%lo reg = %work%9%756%lo reg
	scoreboard players operation %work%9%759%lo reg += %work%9%758%lo reg
	scoreboard players set %work%9%760%lo reg 1
	scoreboard players operation %work%9%761%lo reg = %work%9%759%lo reg
	scoreboard players operation %work%9%761%lo reg += %work%9%760%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%755%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%761%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%762%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%762%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%763%lo reg = %return%0 reg
	scoreboard players set %work%9%764%lo reg 2
	scoreboard players operation %work%9%765%lo reg = %work%9%763%lo reg
	scoreboard players operation %work%9%765%lo reg += %work%9%764%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%765%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_130 --------
	function wasmrunner:wasm_9_124
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_124 --------
	execute store result score %work%9%766%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%767%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%768%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%767%lo reg
	scoreboard players operation %param1%0 reg = %work%9%768%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%769%lo reg = %param0%0 reg
	scoreboard players set %work%9%770%lo reg 15
	scoreboard players operation %work%9%771%lo reg = %work%9%769%lo reg
	scoreboard players operation %work%9%771%lo reg %= %const%16 reg
	scoreboard players operation %work%9%772%lo reg = %work%9%766%lo reg
	scoreboard players operation %work%9%772%lo reg += %work%9%771%lo reg
	scoreboard players set %work%9%773%lo reg 4136
	scoreboard players operation %work%9%774%lo reg = %work%9%772%lo reg
	scoreboard players operation %work%9%774%lo reg += %work%9%773%lo reg
	execute store result score %work%9%775%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%775%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4158 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%776%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%774%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%776%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%777%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%777%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%778%lo reg = %return%0 reg
	scoreboard players set %work%9%779%lo reg 2
	scoreboard players operation %work%9%780%lo reg = %work%9%778%lo reg
	scoreboard players operation %work%9%780%lo reg += %work%9%779%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%780%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_131 --------
	function wasmrunner:wasm_9_123
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_123 --------
	execute store result score %work%9%781%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%781%lo reg
	scoreboard players operation %temp%0%lo reg += %const%6208 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%782%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%782%lo reg
	execute store success score %work%9%783%lo reg if score %work%9%782%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%783%lo reg matches 0 run function wasmrunner:wasm_9_132
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_133
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_133 --------
	execute store result score %work%9%784%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%785%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%786%lo reg 15
	scoreboard players operation %work%9%787%lo reg = %work%9%785%lo reg
	scoreboard players operation %work%9%787%lo reg %= %const%16 reg
	scoreboard players operation %work%9%788%lo reg = %work%9%784%lo reg
	scoreboard players operation %work%9%788%lo reg += %work%9%787%lo reg
	scoreboard players set %work%9%789%lo reg 4136
	scoreboard players operation %work%9%790%lo reg = %work%9%788%lo reg
	scoreboard players operation %work%9%790%lo reg += %work%9%789%lo reg
	scoreboard players set %work%9%791%lo reg 0
	scoreboard players operation %temp%0%lo reg = %work%9%790%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%791%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_132
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_132 --------
	execute store result score %work%9%792%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%793%lo reg 6209
	scoreboard players operation %work%9%794%lo reg = %work%9%792%lo reg
	scoreboard players operation %work%9%794%lo reg += %work%9%793%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%794%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%795%lo reg = %param0%0 reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%795%lo reg matches 0 run function wasmrunner:wasm_9_5
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_134
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_134 --------
	execute store result score %work%9%796%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%797%lo reg 0
	execute store success score %work%9%798%lo reg unless score %work%9%796%lo reg = %work%9%797%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%798%lo reg
	function wasmrunner:wasm_9_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_135 --------
	function wasmrunner:wasm_9_122
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_122 --------
	execute store result score %work%9%799%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%800%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%801%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%802%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%801%lo reg
	scoreboard players operation %param1%0 reg = %work%9%802%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%803%lo reg = %param0%0 reg
	scoreboard players set %work%9%804%lo reg 15
	scoreboard players operation %work%9%805%lo reg = %work%9%803%lo reg
	scoreboard players operation %work%9%805%lo reg %= %const%16 reg
	scoreboard players operation %work%9%806%lo reg = %work%9%800%lo reg
	scoreboard players operation %work%9%806%lo reg += %work%9%805%lo reg
	scoreboard players set %work%9%807%lo reg 4136
	scoreboard players operation %work%9%808%lo reg = %work%9%806%lo reg
	scoreboard players operation %work%9%808%lo reg += %work%9%807%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%808%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%809%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%799%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4158 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%809%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%810%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%811%lo reg 2
	scoreboard players operation %work%9%812%lo reg = %work%9%810%lo reg
	scoreboard players operation %work%9%812%lo reg += %work%9%811%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%812%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_136 --------
	function wasmrunner:wasm_9_121
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_121 --------
	execute store result score %work%9%813%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%814%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%815%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%816%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%815%lo reg
	scoreboard players operation %param1%0 reg = %work%9%816%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%817%lo reg = %param0%0 reg
	scoreboard players set %work%9%818%lo reg 15
	scoreboard players operation %work%9%819%lo reg = %work%9%817%lo reg
	scoreboard players operation %work%9%819%lo reg %= %const%16 reg
	scoreboard players operation %work%9%820%lo reg = %work%9%814%lo reg
	scoreboard players operation %work%9%820%lo reg += %work%9%819%lo reg
	scoreboard players set %work%9%821%lo reg 4136
	scoreboard players operation %work%9%822%lo reg = %work%9%820%lo reg
	scoreboard players operation %work%9%822%lo reg += %work%9%821%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%822%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%823%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%813%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4159 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%823%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%824%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%825%lo reg 2
	scoreboard players operation %work%9%826%lo reg = %work%9%824%lo reg
	scoreboard players operation %work%9%826%lo reg += %work%9%825%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%826%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_137 --------
	function wasmrunner:wasm_9_120
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_120 --------
	execute store result score %work%9%827%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%828%lo reg 4151
	scoreboard players operation %work%9%829%lo reg = %work%9%827%lo reg
	scoreboard players operation %work%9%829%lo reg += %work%9%828%lo reg
	execute store result score %work%9%830%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%831%lo reg 4136
	scoreboard players operation %work%9%832%lo reg = %work%9%830%lo reg
	scoreboard players operation %work%9%832%lo reg += %work%9%831%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%832%lo reg
	execute store result score %work%9%833%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%834%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%833%lo reg
	scoreboard players operation %param1%0 reg = %work%9%834%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%835%lo reg = %param0%0 reg
	scoreboard players set %work%9%836%lo reg 15
	scoreboard players operation %work%9%837%lo reg = %work%9%835%lo reg
	scoreboard players operation %work%9%837%lo reg %= %const%16 reg
	scoreboard players operation %work%9%838%lo reg = %work%9%832%lo reg
	scoreboard players operation %work%9%838%lo reg += %work%9%837%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%838%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%839%lo reg = %param0%0 reg
	execute store result score %work%9%840%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%840%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%841%lo reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%841%lo reg
	scoreboard players operation %work%9%842%lo reg = %work%9%839%lo reg
	scoreboard players operation %work%9%842%lo reg += %work%9%841%lo reg
	scoreboard players set %work%9%843%lo reg 4095
	scoreboard players set %work%9%844%lo reg 0
	execute if score %work%9%843%lo reg matches ..-1 if score %work%9%842%lo reg matches 0.. run scoreboard players set %work%9%844%lo reg 0
	execute if score %work%9%843%lo reg matches 0.. if score %work%9%842%lo reg matches ..-1 run scoreboard players set %work%9%844%lo reg 1
	execute if score %work%9%843%lo reg matches ..-1 if score %work%9%842%lo reg matches ..-1 if score %work%9%843%lo reg < %work%9%842%lo reg run scoreboard players set %work%9%844%lo reg 1
	execute if score %work%9%843%lo reg matches 0.. if score %work%9%842%lo reg matches 0.. if score %work%9%843%lo reg < %work%9%842%lo reg run scoreboard players set %work%9%844%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%829%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%844%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%845%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%846%lo reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%9%847%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%848%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%9%849%lo reg 15
	scoreboard players operation %work%9%850%lo reg = %work%9%848%lo reg
	scoreboard players operation %work%9%850%lo reg %= %const%16 reg
	scoreboard players operation %work%9%851%lo reg = %work%9%847%lo reg
	scoreboard players operation %work%9%851%lo reg += %work%9%850%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%851%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%852%lo reg = %param0%0 reg
	scoreboard players operation %work%9%853%lo reg = %work%9%846%lo reg
	scoreboard players operation %work%9%853%lo reg += %work%9%852%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%845%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%853%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%854%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%855%lo reg 2
	scoreboard players operation %work%9%856%lo reg = %work%9%854%lo reg
	scoreboard players operation %work%9%856%lo reg += %work%9%855%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%856%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_138 --------
	function wasmrunner:wasm_9_119
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_119 --------
	execute store result score %work%9%857%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%858%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%859%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%860%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%859%lo reg
	scoreboard players operation %param1%0 reg = %work%9%860%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%861%lo reg = %param0%0 reg
	scoreboard players set %work%9%862%lo reg 15
	scoreboard players operation %work%9%863%lo reg = %work%9%861%lo reg
	scoreboard players operation %work%9%863%lo reg %= %const%16 reg
	scoreboard players operation %work%9%864%lo reg = %work%9%858%lo reg
	scoreboard players operation %work%9%864%lo reg += %work%9%863%lo reg
	scoreboard players set %work%9%865%lo reg 4136
	scoreboard players operation %work%9%866%lo reg = %work%9%864%lo reg
	scoreboard players operation %work%9%866%lo reg += %work%9%865%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%866%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%867%lo reg = %param0%0 reg
	scoreboard players set %work%9%868%lo reg 5
	scoreboard players operation %work%9%869%lo reg = %work%9%867%lo reg
	scoreboard players operation %work%9%869%lo reg *= %work%9%868%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%857%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%869%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%870%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%871%lo reg 2
	scoreboard players operation %work%9%872%lo reg = %work%9%870%lo reg
	scoreboard players operation %work%9%872%lo reg += %work%9%871%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%872%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_139 --------
	function wasmrunner:wasm_9_118
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_118 --------
	execute store result score %work%9%873%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%874%lo reg 40
	scoreboard players operation %work%9%875%lo reg = %work%9%873%lo reg
	scoreboard players operation %work%9%875%lo reg += %work%9%874%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%875%lo reg
	execute store result score %work%9%876%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%876%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%877%lo reg = %return%0 reg
	scoreboard players operation %work%9%878%lo reg = %work%9%875%lo reg
	scoreboard players operation %work%9%878%lo reg += %work%9%877%lo reg
	execute store result score %work%9%879%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%880%lo reg 4136
	scoreboard players operation %work%9%881%lo reg = %work%9%879%lo reg
	scoreboard players operation %work%9%881%lo reg += %work%9%880%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%881%lo reg
	execute store result score %work%9%882%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%883%lo reg 8
	scoreboard players operation %param0%0 reg = %work%9%882%lo reg
	scoreboard players operation %param1%0 reg = %work%9%883%lo reg
	scoreboard players operation %param1%0 reg %= %%32 reg
	function intrinsic:lshr
	scoreboard players operation %work%9%884%lo reg = %param0%0 reg
	scoreboard players set %work%9%885%lo reg 15
	scoreboard players operation %work%9%886%lo reg = %work%9%884%lo reg
	scoreboard players operation %work%9%886%lo reg %= %const%16 reg
	scoreboard players operation %work%9%887%lo reg = %work%9%881%lo reg
	scoreboard players operation %work%9%887%lo reg += %work%9%886%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%887%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%888%lo reg = %param0%0 reg
	scoreboard players set %work%9%889%lo reg 100
	scoreboard players set %work%9%890%lo reg 0
	execute if score %work%9%888%lo reg matches 0.. if score %work%9%889%lo reg matches 0.. run scoreboard players operation %work%9%890%lo reg = %work%9%888%lo reg
	execute if score %work%9%888%lo reg matches 0.. if score %work%9%889%lo reg matches 0.. run scoreboard players operation %work%9%890%lo reg /= %work%9%889%lo reg
	scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%889%lo reg matches ..-1 if score %work%9%888%lo reg matches 0.. run scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%889%lo reg matches 0.. if score %work%9%888%lo reg matches ..-1 run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%889%lo reg matches ..-1 if score %work%9%888%lo reg matches ..-1 if score %work%9%889%lo reg < %work%9%888%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%889%lo reg matches 0.. if score %work%9%888%lo reg matches 0.. if score %work%9%889%lo reg < %work%9%888%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %temp%35%lo reg matches 0 run execute store success score %temp%35%lo reg if score %work%9%888%lo reg = %work%9%889%lo reg
	execute if score %work%9%888%lo reg matches ..-1 if score %work%9%889%lo reg matches ..-1 if score %temp%35%lo reg matches 1..1 run scoreboard players set %work%9%890%lo reg 1
	scoreboard players operation %temp%36%lo reg = %work%9%888%lo reg
	scoreboard players operation %temp%36%lo reg += %%-2147483648 reg
	scoreboard players operation %temp%30%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%30%lo reg /= %work%9%889%lo reg
	scoreboard players operation %temp%31%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%31%lo reg %= %work%9%889%lo reg
	scoreboard players set %temp%32%lo reg 2147483647
	scoreboard players operation %temp%32%lo reg /= %work%9%889%lo reg
	scoreboard players set %temp%33%lo reg 2147483647
	scoreboard players operation %temp%33%lo reg %= %work%9%889%lo reg
	scoreboard players operation %temp%31%lo reg += %temp%33%lo reg
	scoreboard players add %temp%31%lo reg 1
	scoreboard players operation %temp%34%lo reg = %temp%31%lo reg
	scoreboard players operation %temp%34%lo reg /= %work%9%889%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%32%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%34%lo reg
	execute if score %work%9%888%lo reg matches ..-1 if score %work%9%889%lo reg matches 0.. run scoreboard players operation %work%9%890%lo reg = %temp%30%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%878%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%890%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%891%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%891%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%892%lo reg = %return%0 reg
	execute store result score %work%9%893%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%894%lo reg = %work%9%892%lo reg
	scoreboard players operation %work%9%894%lo reg += %work%9%893%lo reg
	scoreboard players set %work%9%895%lo reg 1
	scoreboard players operation %work%9%896%lo reg = %work%9%894%lo reg
	scoreboard players operation %work%9%896%lo reg += %work%9%895%lo reg
	execute store result score %work%9%897%lo reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%9%898%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%899%lo reg 4155
	scoreboard players operation %work%9%900%lo reg = %work%9%898%lo reg
	scoreboard players operation %work%9%900%lo reg += %work%9%899%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%900%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%900%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%901%lo reg = %param0%0 reg
	scoreboard players set %work%9%902%lo reg 15
	scoreboard players operation %work%9%903%lo reg = %work%9%901%lo reg
	scoreboard players operation %work%9%903%lo reg %= %const%16 reg
	scoreboard players operation %work%9%904%lo reg = %work%9%897%lo reg
	scoreboard players operation %work%9%904%lo reg += %work%9%903%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%904%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%905%lo reg = %param0%0 reg
	scoreboard players set %work%9%906%lo reg 10
	scoreboard players set %work%9%907%lo reg 0
	execute if score %work%9%905%lo reg matches 0.. if score %work%9%906%lo reg matches 0.. run scoreboard players operation %work%9%907%lo reg = %work%9%905%lo reg
	execute if score %work%9%905%lo reg matches 0.. if score %work%9%906%lo reg matches 0.. run scoreboard players operation %work%9%907%lo reg /= %work%9%906%lo reg
	scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%906%lo reg matches ..-1 if score %work%9%905%lo reg matches 0.. run scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%906%lo reg matches 0.. if score %work%9%905%lo reg matches ..-1 run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%906%lo reg matches ..-1 if score %work%9%905%lo reg matches ..-1 if score %work%9%906%lo reg < %work%9%905%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%906%lo reg matches 0.. if score %work%9%905%lo reg matches 0.. if score %work%9%906%lo reg < %work%9%905%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %temp%35%lo reg matches 0 run execute store success score %temp%35%lo reg if score %work%9%905%lo reg = %work%9%906%lo reg
	execute if score %work%9%905%lo reg matches ..-1 if score %work%9%906%lo reg matches ..-1 if score %temp%35%lo reg matches 1..1 run scoreboard players set %work%9%907%lo reg 1
	scoreboard players operation %temp%36%lo reg = %work%9%905%lo reg
	scoreboard players operation %temp%36%lo reg += %%-2147483648 reg
	scoreboard players operation %temp%30%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%30%lo reg /= %work%9%906%lo reg
	scoreboard players operation %temp%31%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%31%lo reg %= %work%9%906%lo reg
	scoreboard players set %temp%32%lo reg 2147483647
	scoreboard players operation %temp%32%lo reg /= %work%9%906%lo reg
	scoreboard players set %temp%33%lo reg 2147483647
	scoreboard players operation %temp%33%lo reg %= %work%9%906%lo reg
	scoreboard players operation %temp%31%lo reg += %temp%33%lo reg
	scoreboard players add %temp%31%lo reg 1
	scoreboard players operation %temp%34%lo reg = %temp%31%lo reg
	scoreboard players operation %temp%34%lo reg /= %work%9%906%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%32%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%34%lo reg
	execute if score %work%9%905%lo reg matches ..-1 if score %work%9%906%lo reg matches 0.. run scoreboard players operation %work%9%907%lo reg = %temp%30%lo reg
	scoreboard players set %work%9%908%lo reg 10
	scoreboard players set %work%9%909%lo reg 0
	execute if score %work%9%907%lo reg matches 0.. if score %work%9%908%lo reg matches 0.. run scoreboard players operation %work%9%909%lo reg = %work%9%907%lo reg
	execute if score %work%9%907%lo reg matches 0.. if score %work%9%908%lo reg matches 0.. run scoreboard players operation %work%9%909%lo reg /= %work%9%908%lo reg
	scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%908%lo reg matches ..-1 if score %work%9%907%lo reg matches 0.. run scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%908%lo reg matches 0.. if score %work%9%907%lo reg matches ..-1 run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%908%lo reg matches ..-1 if score %work%9%907%lo reg matches ..-1 if score %work%9%908%lo reg < %work%9%907%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%908%lo reg matches 0.. if score %work%9%907%lo reg matches 0.. if score %work%9%908%lo reg < %work%9%907%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %temp%35%lo reg matches 0 run execute store success score %temp%35%lo reg if score %work%9%907%lo reg = %work%9%908%lo reg
	execute if score %work%9%907%lo reg matches ..-1 if score %work%9%908%lo reg matches ..-1 if score %temp%35%lo reg matches 1..1 run scoreboard players set %work%9%909%lo reg 1
	scoreboard players operation %temp%36%lo reg = %work%9%907%lo reg
	scoreboard players operation %temp%36%lo reg += %%-2147483648 reg
	scoreboard players operation %temp%30%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%30%lo reg /= %work%9%908%lo reg
	scoreboard players operation %temp%31%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%31%lo reg %= %work%9%908%lo reg
	scoreboard players set %temp%32%lo reg 2147483647
	scoreboard players operation %temp%32%lo reg /= %work%9%908%lo reg
	scoreboard players set %temp%33%lo reg 2147483647
	scoreboard players operation %temp%33%lo reg %= %work%9%908%lo reg
	scoreboard players operation %temp%31%lo reg += %temp%33%lo reg
	scoreboard players add %temp%31%lo reg 1
	scoreboard players operation %temp%34%lo reg = %temp%31%lo reg
	scoreboard players operation %temp%34%lo reg /= %work%9%908%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%32%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%34%lo reg
	execute if score %work%9%907%lo reg matches ..-1 if score %work%9%908%lo reg matches 0.. run scoreboard players operation %work%9%909%lo reg = %temp%30%lo reg
	scoreboard players operation %work%9%909%lo reg *= %work%9%908%lo reg
	scoreboard players operation %work%9%909%lo reg *= %%-1 reg
	scoreboard players operation %work%9%909%lo reg += %work%9%907%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%896%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%909%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%910%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%910%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%911%lo reg = %return%0 reg
	execute store result score %work%9%912%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players operation %work%9%913%lo reg = %work%9%911%lo reg
	scoreboard players operation %work%9%913%lo reg += %work%9%912%lo reg
	scoreboard players set %work%9%914%lo reg 2
	scoreboard players operation %work%9%915%lo reg = %work%9%913%lo reg
	scoreboard players operation %work%9%915%lo reg += %work%9%914%lo reg
	execute store result score %work%9%916%lo reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%9%917%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%917%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%918%lo reg = %param0%0 reg
	scoreboard players set %work%9%919%lo reg 15
	scoreboard players operation %work%9%920%lo reg = %work%9%918%lo reg
	scoreboard players operation %work%9%920%lo reg %= %const%16 reg
	scoreboard players operation %work%9%921%lo reg = %work%9%916%lo reg
	scoreboard players operation %work%9%921%lo reg += %work%9%920%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%921%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%922%lo reg = %param0%0 reg
	scoreboard players set %work%9%923%lo reg 10
	scoreboard players set %work%9%924%lo reg 0
	execute if score %work%9%922%lo reg matches 0.. if score %work%9%923%lo reg matches 0.. run scoreboard players operation %work%9%924%lo reg = %work%9%922%lo reg
	execute if score %work%9%922%lo reg matches 0.. if score %work%9%923%lo reg matches 0.. run scoreboard players operation %work%9%924%lo reg /= %work%9%923%lo reg
	scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%923%lo reg matches ..-1 if score %work%9%922%lo reg matches 0.. run scoreboard players set %temp%35%lo reg 0
	execute if score %work%9%923%lo reg matches 0.. if score %work%9%922%lo reg matches ..-1 run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%923%lo reg matches ..-1 if score %work%9%922%lo reg matches ..-1 if score %work%9%923%lo reg < %work%9%922%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %work%9%923%lo reg matches 0.. if score %work%9%922%lo reg matches 0.. if score %work%9%923%lo reg < %work%9%922%lo reg run scoreboard players set %temp%35%lo reg 1
	execute if score %temp%35%lo reg matches 0 run execute store success score %temp%35%lo reg if score %work%9%922%lo reg = %work%9%923%lo reg
	execute if score %work%9%922%lo reg matches ..-1 if score %work%9%923%lo reg matches ..-1 if score %temp%35%lo reg matches 1..1 run scoreboard players set %work%9%924%lo reg 1
	scoreboard players operation %temp%36%lo reg = %work%9%922%lo reg
	scoreboard players operation %temp%36%lo reg += %%-2147483648 reg
	scoreboard players operation %temp%30%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%30%lo reg /= %work%9%923%lo reg
	scoreboard players operation %temp%31%lo reg = %temp%36%lo reg
	scoreboard players operation %temp%31%lo reg %= %work%9%923%lo reg
	scoreboard players set %temp%32%lo reg 2147483647
	scoreboard players operation %temp%32%lo reg /= %work%9%923%lo reg
	scoreboard players set %temp%33%lo reg 2147483647
	scoreboard players operation %temp%33%lo reg %= %work%9%923%lo reg
	scoreboard players operation %temp%31%lo reg += %temp%33%lo reg
	scoreboard players add %temp%31%lo reg 1
	scoreboard players operation %temp%34%lo reg = %temp%31%lo reg
	scoreboard players operation %temp%34%lo reg /= %work%9%923%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%32%lo reg
	scoreboard players operation %temp%30%lo reg += %temp%34%lo reg
	execute if score %work%9%922%lo reg matches ..-1 if score %work%9%923%lo reg matches 0.. run scoreboard players operation %work%9%924%lo reg = %temp%30%lo reg
	scoreboard players operation %work%9%924%lo reg *= %work%9%923%lo reg
	scoreboard players operation %work%9%924%lo reg *= %%-1 reg
	scoreboard players operation %work%9%924%lo reg += %work%9%922%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%915%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%924%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%925%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%925%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%926%lo reg = %return%0 reg
	scoreboard players set %work%9%927%lo reg 2
	scoreboard players operation %work%9%928%lo reg = %work%9%926%lo reg
	scoreboard players operation %work%9%928%lo reg += %work%9%927%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%928%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_140 --------
	function wasmrunner:wasm_9_117
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_117 --------
	scoreboard players set %work%9%929%lo reg 4136
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%929%lo reg
	execute store result score %work%9%930%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%931%lo reg 4155
	scoreboard players operation %work%9%932%lo reg = %work%9%930%lo reg
	scoreboard players operation %work%9%932%lo reg += %work%9%931%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%9%932%lo reg
	function wasmrunner:wasm_9_141
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_141 --------
	execute store result score %work%9%933%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%934%lo reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%9%935%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%935%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%936%lo reg = %return%0 reg
	scoreboard players operation %work%9%937%lo reg = %work%9%934%lo reg
	scoreboard players operation %work%9%937%lo reg += %work%9%936%lo reg
	scoreboard players operation %work%9%938%lo reg = %work%9%933%lo reg
	scoreboard players operation %work%9%938%lo reg += %work%9%937%lo reg
	scoreboard players set %work%9%939%lo reg -4096
	scoreboard players operation %work%9%940%lo reg = %work%9%938%lo reg
	scoreboard players operation %work%9%940%lo reg += %work%9%939%lo reg
	execute store result score %work%9%941%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%942%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %work%9%943%lo reg = %work%9%941%lo reg
	scoreboard players operation %work%9%943%lo reg += %work%9%942%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%943%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%944%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%9%940%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%944%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%945%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%946%lo reg -4136
	scoreboard players operation %work%9%947%lo reg = %work%9%945%lo reg
	scoreboard players operation %work%9%947%lo reg += %work%9%946%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%9%947%lo reg
	execute store result score %work%9%948%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%949%lo reg 1
	scoreboard players operation %work%9%950%lo reg = %work%9%948%lo reg
	scoreboard players operation %work%9%950%lo reg += %work%9%949%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%950%lo reg
	execute store result score %work%9%951%lo reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%9%952%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players operation %temp%0%lo reg = %work%9%952%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%953%lo reg = %param0%0 reg
	scoreboard players set %work%9%954%lo reg 15
	scoreboard players operation %work%9%955%lo reg = %work%9%953%lo reg
	scoreboard players operation %work%9%955%lo reg %= %const%16 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%9%955%lo reg
	scoreboard players set %work%9%956%lo reg 0
	execute if score %work%9%951%lo reg matches ..-1 if score %work%9%955%lo reg matches 0.. run scoreboard players set %work%9%956%lo reg 0
	execute if score %work%9%951%lo reg matches 0.. if score %work%9%955%lo reg matches ..-1 run scoreboard players set %work%9%956%lo reg 1
	execute if score %work%9%951%lo reg matches ..-1 if score %work%9%955%lo reg matches ..-1 if score %work%9%951%lo reg < %work%9%955%lo reg run scoreboard players set %work%9%956%lo reg 1
	execute if score %work%9%951%lo reg matches 0.. if score %work%9%955%lo reg matches 0.. if score %work%9%951%lo reg < %work%9%955%lo reg run scoreboard players set %work%9%956%lo reg 1
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%956%lo reg matches 0 run function wasmrunner:wasm_9_141
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_142
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_142 --------
	execute store result score %work%9%957%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%958%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%9%959%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%959%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%960%lo reg = %return%0 reg
	scoreboard players operation %work%9%961%lo reg = %work%9%958%lo reg
	scoreboard players operation %work%9%961%lo reg += %work%9%960%lo reg
	scoreboard players set %work%9%962%lo reg 1
	scoreboard players operation %work%9%963%lo reg = %work%9%961%lo reg
	scoreboard players operation %work%9%963%lo reg += %work%9%962%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%957%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4156 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%963%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%964%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%964%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%965%lo reg = %return%0 reg
	scoreboard players set %work%9%966%lo reg 2
	scoreboard players operation %work%9%967%lo reg = %work%9%965%lo reg
	scoreboard players operation %work%9%967%lo reg += %work%9%966%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%967%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_143 --------
	function wasmrunner:wasm_9_6
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_6 --------
	execute store result score %work%9%968%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%969%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%968%lo reg
	scoreboard players operation %temp%0%lo reg += %const%6224 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%969%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%9%970%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%9%971%lo reg 2
	scoreboard players operation %work%9%972%lo reg = %work%9%970%lo reg
	scoreboard players operation %work%9%972%lo reg += %work%9%971%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%972%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_144 --------
	function wasmrunner:wasm_9_5
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_5 --------
	scoreboard players set %work%9%973%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%973%lo reg
	execute store result score %work%9%974%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%975%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%976%lo reg 4155
	scoreboard players operation %work%9%977%lo reg = %work%9%975%lo reg
	scoreboard players operation %work%9%977%lo reg += %work%9%976%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%977%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%978%lo reg = %param0%0 reg
	scoreboard players set %work%9%979%lo reg 15
	scoreboard players operation %work%9%980%lo reg = %work%9%978%lo reg
	scoreboard players operation %work%9%980%lo reg %= %const%16 reg
	scoreboard players operation %work%9%981%lo reg = %work%9%974%lo reg
	scoreboard players operation %work%9%981%lo reg += %work%9%980%lo reg
	scoreboard players set %work%9%982%lo reg 4136
	scoreboard players operation %work%9%983%lo reg = %work%9%981%lo reg
	scoreboard players operation %work%9%983%lo reg += %work%9%982%lo reg
	scoreboard players set %work%9%984%lo reg 1
	scoreboard players operation %temp%0%lo reg = %work%9%983%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%984%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_4 --------
	execute store result score %work%9%985%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%986%lo reg 6210
	scoreboard players operation %work%9%987%lo reg = %work%9%985%lo reg
	scoreboard players operation %work%9%987%lo reg += %work%9%986%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%987%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%988%lo reg = %param0%0 reg
	execute store success score %work%9%989%lo reg if score %work%9%988%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%989%lo reg matches 0 run function wasmrunner:wasm_9_145
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_146
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_146 --------
	execute store result score %work%9%990%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%991%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%992%lo reg 4155
	scoreboard players operation %work%9%993%lo reg = %work%9%991%lo reg
	scoreboard players operation %work%9%993%lo reg += %work%9%992%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%993%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%994%lo reg = %param0%0 reg
	scoreboard players set %work%9%995%lo reg 15
	scoreboard players operation %work%9%996%lo reg = %work%9%994%lo reg
	scoreboard players operation %work%9%996%lo reg %= %const%16 reg
	scoreboard players operation %work%9%997%lo reg = %work%9%990%lo reg
	scoreboard players operation %work%9%997%lo reg += %work%9%996%lo reg
	scoreboard players set %work%9%998%lo reg 4136
	scoreboard players operation %work%9%999%lo reg = %work%9%997%lo reg
	scoreboard players operation %work%9%999%lo reg += %work%9%998%lo reg
	scoreboard players set %work%9%1000%lo reg 2
	scoreboard players operation %temp%0%lo reg = %work%9%999%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1000%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1001%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1001%lo reg
	function wasmrunner:wasm_9_145
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_145 --------
	execute store result score %work%9%1002%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1003%lo reg 6211
	scoreboard players operation %work%9%1004%lo reg = %work%9%1002%lo reg
	scoreboard players operation %work%9%1004%lo reg += %work%9%1003%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1004%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1005%lo reg = %param0%0 reg
	execute store success score %work%9%1006%lo reg if score %work%9%1005%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1006%lo reg matches 0 run function wasmrunner:wasm_9_147
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_148
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_148 --------
	execute store result score %work%9%1007%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1008%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1009%lo reg 4155
	scoreboard players operation %work%9%1010%lo reg = %work%9%1008%lo reg
	scoreboard players operation %work%9%1010%lo reg += %work%9%1009%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1010%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1011%lo reg = %param0%0 reg
	scoreboard players set %work%9%1012%lo reg 15
	scoreboard players operation %work%9%1013%lo reg = %work%9%1011%lo reg
	scoreboard players operation %work%9%1013%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1014%lo reg = %work%9%1007%lo reg
	scoreboard players operation %work%9%1014%lo reg += %work%9%1013%lo reg
	scoreboard players set %work%9%1015%lo reg 4136
	scoreboard players operation %work%9%1016%lo reg = %work%9%1014%lo reg
	scoreboard players operation %work%9%1016%lo reg += %work%9%1015%lo reg
	scoreboard players set %work%9%1017%lo reg 3
	scoreboard players operation %temp%0%lo reg = %work%9%1016%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1017%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1018%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1018%lo reg
	function wasmrunner:wasm_9_147
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_147 --------
	execute store result score %work%9%1019%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1020%lo reg 6212
	scoreboard players operation %work%9%1021%lo reg = %work%9%1019%lo reg
	scoreboard players operation %work%9%1021%lo reg += %work%9%1020%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1021%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1022%lo reg = %param0%0 reg
	execute store success score %work%9%1023%lo reg if score %work%9%1022%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1023%lo reg matches 0 run function wasmrunner:wasm_9_149
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_150
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_150 --------
	execute store result score %work%9%1024%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1025%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1026%lo reg 4155
	scoreboard players operation %work%9%1027%lo reg = %work%9%1025%lo reg
	scoreboard players operation %work%9%1027%lo reg += %work%9%1026%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1027%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1028%lo reg = %param0%0 reg
	scoreboard players set %work%9%1029%lo reg 15
	scoreboard players operation %work%9%1030%lo reg = %work%9%1028%lo reg
	scoreboard players operation %work%9%1030%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1031%lo reg = %work%9%1024%lo reg
	scoreboard players operation %work%9%1031%lo reg += %work%9%1030%lo reg
	scoreboard players set %work%9%1032%lo reg 4136
	scoreboard players operation %work%9%1033%lo reg = %work%9%1031%lo reg
	scoreboard players operation %work%9%1033%lo reg += %work%9%1032%lo reg
	scoreboard players set %work%9%1034%lo reg 4
	scoreboard players operation %temp%0%lo reg = %work%9%1033%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1034%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1035%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1035%lo reg
	function wasmrunner:wasm_9_149
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_149 --------
	execute store result score %work%9%1036%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1037%lo reg 6213
	scoreboard players operation %work%9%1038%lo reg = %work%9%1036%lo reg
	scoreboard players operation %work%9%1038%lo reg += %work%9%1037%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1038%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1039%lo reg = %param0%0 reg
	execute store success score %work%9%1040%lo reg if score %work%9%1039%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1040%lo reg matches 0 run function wasmrunner:wasm_9_151
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_152
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_152 --------
	execute store result score %work%9%1041%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1042%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1043%lo reg 4155
	scoreboard players operation %work%9%1044%lo reg = %work%9%1042%lo reg
	scoreboard players operation %work%9%1044%lo reg += %work%9%1043%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1044%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1045%lo reg = %param0%0 reg
	scoreboard players set %work%9%1046%lo reg 15
	scoreboard players operation %work%9%1047%lo reg = %work%9%1045%lo reg
	scoreboard players operation %work%9%1047%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1048%lo reg = %work%9%1041%lo reg
	scoreboard players operation %work%9%1048%lo reg += %work%9%1047%lo reg
	scoreboard players set %work%9%1049%lo reg 4136
	scoreboard players operation %work%9%1050%lo reg = %work%9%1048%lo reg
	scoreboard players operation %work%9%1050%lo reg += %work%9%1049%lo reg
	scoreboard players set %work%9%1051%lo reg 5
	scoreboard players operation %temp%0%lo reg = %work%9%1050%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1051%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1052%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1052%lo reg
	function wasmrunner:wasm_9_151
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_151 --------
	execute store result score %work%9%1053%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1054%lo reg 6214
	scoreboard players operation %work%9%1055%lo reg = %work%9%1053%lo reg
	scoreboard players operation %work%9%1055%lo reg += %work%9%1054%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1055%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1056%lo reg = %param0%0 reg
	execute store success score %work%9%1057%lo reg if score %work%9%1056%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1057%lo reg matches 0 run function wasmrunner:wasm_9_153
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_154
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_154 --------
	execute store result score %work%9%1058%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1059%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1060%lo reg 4155
	scoreboard players operation %work%9%1061%lo reg = %work%9%1059%lo reg
	scoreboard players operation %work%9%1061%lo reg += %work%9%1060%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1061%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1062%lo reg = %param0%0 reg
	scoreboard players set %work%9%1063%lo reg 15
	scoreboard players operation %work%9%1064%lo reg = %work%9%1062%lo reg
	scoreboard players operation %work%9%1064%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1065%lo reg = %work%9%1058%lo reg
	scoreboard players operation %work%9%1065%lo reg += %work%9%1064%lo reg
	scoreboard players set %work%9%1066%lo reg 4136
	scoreboard players operation %work%9%1067%lo reg = %work%9%1065%lo reg
	scoreboard players operation %work%9%1067%lo reg += %work%9%1066%lo reg
	scoreboard players set %work%9%1068%lo reg 6
	scoreboard players operation %temp%0%lo reg = %work%9%1067%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1068%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1069%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1069%lo reg
	function wasmrunner:wasm_9_153
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_153 --------
	execute store result score %work%9%1070%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1071%lo reg 6215
	scoreboard players operation %work%9%1072%lo reg = %work%9%1070%lo reg
	scoreboard players operation %work%9%1072%lo reg += %work%9%1071%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1072%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1073%lo reg = %param0%0 reg
	execute store success score %work%9%1074%lo reg if score %work%9%1073%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1074%lo reg matches 0 run function wasmrunner:wasm_9_155
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_156
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_156 --------
	execute store result score %work%9%1075%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1076%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1077%lo reg 4155
	scoreboard players operation %work%9%1078%lo reg = %work%9%1076%lo reg
	scoreboard players operation %work%9%1078%lo reg += %work%9%1077%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1078%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1079%lo reg = %param0%0 reg
	scoreboard players set %work%9%1080%lo reg 15
	scoreboard players operation %work%9%1081%lo reg = %work%9%1079%lo reg
	scoreboard players operation %work%9%1081%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1082%lo reg = %work%9%1075%lo reg
	scoreboard players operation %work%9%1082%lo reg += %work%9%1081%lo reg
	scoreboard players set %work%9%1083%lo reg 4136
	scoreboard players operation %work%9%1084%lo reg = %work%9%1082%lo reg
	scoreboard players operation %work%9%1084%lo reg += %work%9%1083%lo reg
	scoreboard players set %work%9%1085%lo reg 7
	scoreboard players operation %temp%0%lo reg = %work%9%1084%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1085%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1086%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1086%lo reg
	function wasmrunner:wasm_9_155
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_155 --------
	execute store result score %work%9%1087%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1088%lo reg 6216
	scoreboard players operation %work%9%1089%lo reg = %work%9%1087%lo reg
	scoreboard players operation %work%9%1089%lo reg += %work%9%1088%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1089%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1090%lo reg = %param0%0 reg
	execute store success score %work%9%1091%lo reg if score %work%9%1090%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1091%lo reg matches 0 run function wasmrunner:wasm_9_157
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_158
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_158 --------
	execute store result score %work%9%1092%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1093%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1094%lo reg 4155
	scoreboard players operation %work%9%1095%lo reg = %work%9%1093%lo reg
	scoreboard players operation %work%9%1095%lo reg += %work%9%1094%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1095%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1096%lo reg = %param0%0 reg
	scoreboard players set %work%9%1097%lo reg 15
	scoreboard players operation %work%9%1098%lo reg = %work%9%1096%lo reg
	scoreboard players operation %work%9%1098%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1099%lo reg = %work%9%1092%lo reg
	scoreboard players operation %work%9%1099%lo reg += %work%9%1098%lo reg
	scoreboard players set %work%9%1100%lo reg 4136
	scoreboard players operation %work%9%1101%lo reg = %work%9%1099%lo reg
	scoreboard players operation %work%9%1101%lo reg += %work%9%1100%lo reg
	scoreboard players set %work%9%1102%lo reg 8
	scoreboard players operation %temp%0%lo reg = %work%9%1101%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1102%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1103%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1103%lo reg
	function wasmrunner:wasm_9_157
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_157 --------
	execute store result score %work%9%1104%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1105%lo reg 6217
	scoreboard players operation %work%9%1106%lo reg = %work%9%1104%lo reg
	scoreboard players operation %work%9%1106%lo reg += %work%9%1105%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1106%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1107%lo reg = %param0%0 reg
	execute store success score %work%9%1108%lo reg if score %work%9%1107%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1108%lo reg matches 0 run function wasmrunner:wasm_9_159
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_160
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_160 --------
	execute store result score %work%9%1109%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1110%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1111%lo reg 4155
	scoreboard players operation %work%9%1112%lo reg = %work%9%1110%lo reg
	scoreboard players operation %work%9%1112%lo reg += %work%9%1111%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1112%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1113%lo reg = %param0%0 reg
	scoreboard players set %work%9%1114%lo reg 15
	scoreboard players operation %work%9%1115%lo reg = %work%9%1113%lo reg
	scoreboard players operation %work%9%1115%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1116%lo reg = %work%9%1109%lo reg
	scoreboard players operation %work%9%1116%lo reg += %work%9%1115%lo reg
	scoreboard players set %work%9%1117%lo reg 4136
	scoreboard players operation %work%9%1118%lo reg = %work%9%1116%lo reg
	scoreboard players operation %work%9%1118%lo reg += %work%9%1117%lo reg
	scoreboard players set %work%9%1119%lo reg 9
	scoreboard players operation %temp%0%lo reg = %work%9%1118%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1119%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1120%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1120%lo reg
	function wasmrunner:wasm_9_159
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_159 --------
	execute store result score %work%9%1121%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1122%lo reg 6218
	scoreboard players operation %work%9%1123%lo reg = %work%9%1121%lo reg
	scoreboard players operation %work%9%1123%lo reg += %work%9%1122%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1123%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1124%lo reg = %param0%0 reg
	execute store success score %work%9%1125%lo reg if score %work%9%1124%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1125%lo reg matches 0 run function wasmrunner:wasm_9_161
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_162
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_162 --------
	execute store result score %work%9%1126%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1127%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1128%lo reg 4155
	scoreboard players operation %work%9%1129%lo reg = %work%9%1127%lo reg
	scoreboard players operation %work%9%1129%lo reg += %work%9%1128%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1129%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1130%lo reg = %param0%0 reg
	scoreboard players set %work%9%1131%lo reg 15
	scoreboard players operation %work%9%1132%lo reg = %work%9%1130%lo reg
	scoreboard players operation %work%9%1132%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1133%lo reg = %work%9%1126%lo reg
	scoreboard players operation %work%9%1133%lo reg += %work%9%1132%lo reg
	scoreboard players set %work%9%1134%lo reg 4136
	scoreboard players operation %work%9%1135%lo reg = %work%9%1133%lo reg
	scoreboard players operation %work%9%1135%lo reg += %work%9%1134%lo reg
	scoreboard players set %work%9%1136%lo reg 10
	scoreboard players operation %temp%0%lo reg = %work%9%1135%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1136%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1137%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1137%lo reg
	function wasmrunner:wasm_9_161
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_161 --------
	execute store result score %work%9%1138%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1139%lo reg 6219
	scoreboard players operation %work%9%1140%lo reg = %work%9%1138%lo reg
	scoreboard players operation %work%9%1140%lo reg += %work%9%1139%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1140%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1141%lo reg = %param0%0 reg
	execute store success score %work%9%1142%lo reg if score %work%9%1141%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1142%lo reg matches 0 run function wasmrunner:wasm_9_163
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_164
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_164 --------
	execute store result score %work%9%1143%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1144%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1145%lo reg 4155
	scoreboard players operation %work%9%1146%lo reg = %work%9%1144%lo reg
	scoreboard players operation %work%9%1146%lo reg += %work%9%1145%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1146%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1147%lo reg = %param0%0 reg
	scoreboard players set %work%9%1148%lo reg 15
	scoreboard players operation %work%9%1149%lo reg = %work%9%1147%lo reg
	scoreboard players operation %work%9%1149%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1150%lo reg = %work%9%1143%lo reg
	scoreboard players operation %work%9%1150%lo reg += %work%9%1149%lo reg
	scoreboard players set %work%9%1151%lo reg 4136
	scoreboard players operation %work%9%1152%lo reg = %work%9%1150%lo reg
	scoreboard players operation %work%9%1152%lo reg += %work%9%1151%lo reg
	scoreboard players set %work%9%1153%lo reg 11
	scoreboard players operation %temp%0%lo reg = %work%9%1152%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1153%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1154%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1154%lo reg
	function wasmrunner:wasm_9_163
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_163 --------
	execute store result score %work%9%1155%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1156%lo reg 6220
	scoreboard players operation %work%9%1157%lo reg = %work%9%1155%lo reg
	scoreboard players operation %work%9%1157%lo reg += %work%9%1156%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1157%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1158%lo reg = %param0%0 reg
	execute store success score %work%9%1159%lo reg if score %work%9%1158%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1159%lo reg matches 0 run function wasmrunner:wasm_9_165
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_166
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_166 --------
	execute store result score %work%9%1160%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1161%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1162%lo reg 4155
	scoreboard players operation %work%9%1163%lo reg = %work%9%1161%lo reg
	scoreboard players operation %work%9%1163%lo reg += %work%9%1162%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1163%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1164%lo reg = %param0%0 reg
	scoreboard players set %work%9%1165%lo reg 15
	scoreboard players operation %work%9%1166%lo reg = %work%9%1164%lo reg
	scoreboard players operation %work%9%1166%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1167%lo reg = %work%9%1160%lo reg
	scoreboard players operation %work%9%1167%lo reg += %work%9%1166%lo reg
	scoreboard players set %work%9%1168%lo reg 4136
	scoreboard players operation %work%9%1169%lo reg = %work%9%1167%lo reg
	scoreboard players operation %work%9%1169%lo reg += %work%9%1168%lo reg
	scoreboard players set %work%9%1170%lo reg 12
	scoreboard players operation %temp%0%lo reg = %work%9%1169%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1170%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1171%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1171%lo reg
	function wasmrunner:wasm_9_165
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_165 --------
	execute store result score %work%9%1172%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1173%lo reg 6221
	scoreboard players operation %work%9%1174%lo reg = %work%9%1172%lo reg
	scoreboard players operation %work%9%1174%lo reg += %work%9%1173%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1174%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1175%lo reg = %param0%0 reg
	execute store success score %work%9%1176%lo reg if score %work%9%1175%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1176%lo reg matches 0 run function wasmrunner:wasm_9_167
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_168
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_168 --------
	execute store result score %work%9%1177%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1178%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1179%lo reg 4155
	scoreboard players operation %work%9%1180%lo reg = %work%9%1178%lo reg
	scoreboard players operation %work%9%1180%lo reg += %work%9%1179%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1180%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1181%lo reg = %param0%0 reg
	scoreboard players set %work%9%1182%lo reg 15
	scoreboard players operation %work%9%1183%lo reg = %work%9%1181%lo reg
	scoreboard players operation %work%9%1183%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1184%lo reg = %work%9%1177%lo reg
	scoreboard players operation %work%9%1184%lo reg += %work%9%1183%lo reg
	scoreboard players set %work%9%1185%lo reg 4136
	scoreboard players operation %work%9%1186%lo reg = %work%9%1184%lo reg
	scoreboard players operation %work%9%1186%lo reg += %work%9%1185%lo reg
	scoreboard players set %work%9%1187%lo reg 13
	scoreboard players operation %temp%0%lo reg = %work%9%1186%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1187%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1188%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1188%lo reg
	function wasmrunner:wasm_9_167
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_167 --------
	execute store result score %work%9%1189%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1190%lo reg 6222
	scoreboard players operation %work%9%1191%lo reg = %work%9%1189%lo reg
	scoreboard players operation %work%9%1191%lo reg += %work%9%1190%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1191%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1192%lo reg = %param0%0 reg
	execute store success score %work%9%1193%lo reg if score %work%9%1192%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1193%lo reg matches 0 run function wasmrunner:wasm_9_169
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_170
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_170 --------
	execute store result score %work%9%1194%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1195%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1196%lo reg 4155
	scoreboard players operation %work%9%1197%lo reg = %work%9%1195%lo reg
	scoreboard players operation %work%9%1197%lo reg += %work%9%1196%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1197%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1198%lo reg = %param0%0 reg
	scoreboard players set %work%9%1199%lo reg 15
	scoreboard players operation %work%9%1200%lo reg = %work%9%1198%lo reg
	scoreboard players operation %work%9%1200%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1201%lo reg = %work%9%1194%lo reg
	scoreboard players operation %work%9%1201%lo reg += %work%9%1200%lo reg
	scoreboard players set %work%9%1202%lo reg 4136
	scoreboard players operation %work%9%1203%lo reg = %work%9%1201%lo reg
	scoreboard players operation %work%9%1203%lo reg += %work%9%1202%lo reg
	scoreboard players set %work%9%1204%lo reg 14
	scoreboard players operation %temp%0%lo reg = %work%9%1203%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1204%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%9%1205%lo reg 1
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1205%lo reg
	function wasmrunner:wasm_9_169
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_169 --------
	execute store result score %work%9%1206%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1207%lo reg 6223
	scoreboard players operation %work%9%1208%lo reg = %work%9%1206%lo reg
	scoreboard players operation %work%9%1208%lo reg += %work%9%1207%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1208%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1209%lo reg = %param0%0 reg
	execute store success score %work%9%1210%lo reg if score %work%9%1209%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1210%lo reg matches 0 run function wasmrunner:wasm_9_172
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_173
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_173 --------
	execute store result score %work%9%1211%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1212%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%9%1213%lo reg 4155
	scoreboard players operation %work%9%1214%lo reg = %work%9%1212%lo reg
	scoreboard players operation %work%9%1214%lo reg += %work%9%1213%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1214%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1215%lo reg = %param0%0 reg
	scoreboard players set %work%9%1216%lo reg 15
	scoreboard players operation %work%9%1217%lo reg = %work%9%1215%lo reg
	scoreboard players operation %work%9%1217%lo reg %= %const%16 reg
	scoreboard players operation %work%9%1218%lo reg = %work%9%1211%lo reg
	scoreboard players operation %work%9%1218%lo reg += %work%9%1217%lo reg
	scoreboard players set %work%9%1219%lo reg 4136
	scoreboard players operation %work%9%1220%lo reg = %work%9%1218%lo reg
	scoreboard players operation %work%9%1220%lo reg += %work%9%1219%lo reg
	scoreboard players set %work%9%1221%lo reg 15
	scoreboard players operation %temp%0%lo reg = %work%9%1220%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1221%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_171
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_174 --------
	function wasmrunner:wasm_9_172
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_172 --------
	execute store result score %work%9%1222%lo reg run data get storage wasm:localstack stack.data[4]
	execute store success score %work%9%1223%lo reg if score %work%9%1222%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1223%lo reg matches 0 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_175
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_175 --------
	function wasmrunner:wasm_9_171
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_171 --------
	execute store result score %work%9%1224%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%1224%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_halfword_unaligned
	scoreboard players operation %work%9%1225%lo reg = %return%0 reg
	scoreboard players set %work%9%1226%lo reg 2
	scoreboard players operation %work%9%1227%lo reg = %work%9%1225%lo reg
	scoreboard players operation %work%9%1227%lo reg += %work%9%1226%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1227%lo reg
	function wasmrunner:wasm_9_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_3 --------
	execute store result score %work%9%1228%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1229%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %temp%0%lo reg = %work%9%1228%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4152 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1229%lo reg
	function intrinsic:store_halfword
	execute store result score %work%9%1230%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%1230%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4158 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1231%lo reg = %param0%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%9%1231%lo reg
	execute store success score %work%9%1232%lo reg if score %work%9%1231%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%9%1232%lo reg matches 0 run function wasmrunner:wasm_9_176
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_9_177
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_177 --------
	execute store result score %work%9%1233%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1234%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%9%1235%lo reg -1
	scoreboard players operation %work%9%1236%lo reg = %work%9%1234%lo reg
	scoreboard players operation %work%9%1236%lo reg += %work%9%1235%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1233%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4158 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1236%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_176
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_176 --------
	execute store result score %work%9%1237%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%9%1238%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%9%1238%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4159 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%9%1239%lo reg = %param0%0 reg
	scoreboard players set %work%9%1240%lo reg -1
	scoreboard players operation %work%9%1241%lo reg = %work%9%1239%lo reg
	scoreboard players operation %work%9%1241%lo reg += %work%9%1240%lo reg
	scoreboard players operation %temp%0%lo reg = %work%9%1237%lo reg
	scoreboard players operation %temp%0%lo reg += %const%4159 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%9%1241%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	function wasmrunner:wasm_9_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_2 --------
	function wasmrunner:wasm_9_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_9_1 --------
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_10_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %param%2%lo reg
	scoreboard players set %work%10%0%lo reg 0
	scoreboard players operation %temp%0%lo reg = %work%10%0%lo reg
	scoreboard players operation %work%10%1%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_10_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_10_1 --------
	scoreboard players operation %return%0%lo reg = %work%10%1%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %param%2%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %const%0 reg
	execute store result score %work%11%0%lo reg run data get storage wasm:localstack stack.data[4]
	execute store success score %work%11%1%lo reg if score %work%11%0%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%11%1%lo reg matches 0 run function wasmrunner:wasm_11_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_11_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_3 --------
	execute store result score %work%11%2%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%11%3%lo reg -1
	scoreboard players operation %work%11%4%lo reg = %work%11%2%lo reg
	scoreboard players operation %work%11%4%lo reg += %work%11%3%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%11%4%lo reg
	execute store result score %work%11%5%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%11%6%lo reg 7
	scoreboard players operation %work%11%7%lo reg = %work%11%5%lo reg
	scoreboard players operation %work%11%7%lo reg %= %const%8 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%11%7%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%11%7%lo reg matches 0 run function wasmrunner:wasm_11_5
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_11_6
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_6 --------
	execute store result score %work%11%8%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%11%8%lo reg
	function wasmrunner:wasm_11_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_7 --------
	function wasmrunner:wasm_11_5
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_5 --------
	execute store result score %work%11%9%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%11%9%lo reg
	function wasmrunner:wasm_11_8
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_8 --------
	execute store result score %work%11%10%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%11%11%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players operation %temp%0%lo reg = %work%11%11%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%12%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%10%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%12%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%13%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%11%14%lo reg -1
	scoreboard players operation %work%11%15%lo reg = %work%11%13%lo reg
	scoreboard players operation %work%11%15%lo reg += %work%11%14%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%11%15%lo reg
	execute store result score %work%11%16%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%17%lo reg 1
	scoreboard players operation %work%11%18%lo reg = %work%11%16%lo reg
	scoreboard players operation %work%11%18%lo reg += %work%11%17%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%11%18%lo reg
	execute store result score %work%11%19%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%20%lo reg 1
	scoreboard players operation %work%11%21%lo reg = %work%11%19%lo reg
	scoreboard players operation %work%11%21%lo reg += %work%11%20%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%11%21%lo reg
	execute store result score %work%11%22%lo reg run data get storage wasm:localstack stack.data[8]
	scoreboard players set %work%11%23%lo reg -1
	scoreboard players operation %work%11%24%lo reg = %work%11%22%lo reg
	scoreboard players operation %work%11%24%lo reg += %work%11%23%lo reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%11%24%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%11%24%lo reg matches 0 run function wasmrunner:wasm_11_8
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_11_9
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_9 --------
	function wasmrunner:wasm_11_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_4 --------
	execute store result score %work%11%25%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%11%26%lo reg 7
	scoreboard players set %work%11%27%lo reg 0
	execute if score %work%11%25%lo reg matches ..-1 if score %work%11%26%lo reg matches 0.. run scoreboard players set %work%11%27%lo reg 0
	execute if score %work%11%25%lo reg matches 0.. if score %work%11%26%lo reg matches ..-1 run scoreboard players set %work%11%27%lo reg 1
	execute if score %work%11%25%lo reg matches ..-1 if score %work%11%26%lo reg matches ..-1 if score %work%11%25%lo reg < %work%11%26%lo reg run scoreboard players set %work%11%27%lo reg 1
	execute if score %work%11%25%lo reg matches 0.. if score %work%11%26%lo reg matches 0.. if score %work%11%25%lo reg < %work%11%26%lo reg run scoreboard players set %work%11%27%lo reg 1
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%11%27%lo reg matches 0 run function wasmrunner:wasm_11_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_11_10
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_10 --------
	function wasmrunner:wasm_11_11
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_11 --------
	execute store result score %work%11%28%lo reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%11%29%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players operation %temp%0%lo reg = %work%11%29%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%30%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%28%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%30%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%31%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%32%lo reg 1
	scoreboard players operation %work%11%33%lo reg = %work%11%31%lo reg
	scoreboard players operation %work%11%33%lo reg += %work%11%32%lo reg
	execute store result score %work%11%34%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%35%lo reg 1
	scoreboard players operation %work%11%36%lo reg = %work%11%34%lo reg
	scoreboard players operation %work%11%36%lo reg += %work%11%35%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%36%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%37%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%33%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%37%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%38%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%39%lo reg 2
	scoreboard players operation %work%11%40%lo reg = %work%11%38%lo reg
	scoreboard players operation %work%11%40%lo reg += %work%11%39%lo reg
	execute store result score %work%11%41%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%42%lo reg 2
	scoreboard players operation %work%11%43%lo reg = %work%11%41%lo reg
	scoreboard players operation %work%11%43%lo reg += %work%11%42%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%43%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%44%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%40%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%44%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%45%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%46%lo reg 3
	scoreboard players operation %work%11%47%lo reg = %work%11%45%lo reg
	scoreboard players operation %work%11%47%lo reg += %work%11%46%lo reg
	execute store result score %work%11%48%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%49%lo reg 3
	scoreboard players operation %work%11%50%lo reg = %work%11%48%lo reg
	scoreboard players operation %work%11%50%lo reg += %work%11%49%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%50%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%51%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%47%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%51%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%52%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%53%lo reg 4
	scoreboard players operation %work%11%54%lo reg = %work%11%52%lo reg
	scoreboard players operation %work%11%54%lo reg += %work%11%53%lo reg
	execute store result score %work%11%55%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%56%lo reg 4
	scoreboard players operation %work%11%57%lo reg = %work%11%55%lo reg
	scoreboard players operation %work%11%57%lo reg += %work%11%56%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%57%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%58%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%54%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%58%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%59%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%60%lo reg 5
	scoreboard players operation %work%11%61%lo reg = %work%11%59%lo reg
	scoreboard players operation %work%11%61%lo reg += %work%11%60%lo reg
	execute store result score %work%11%62%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%63%lo reg 5
	scoreboard players operation %work%11%64%lo reg = %work%11%62%lo reg
	scoreboard players operation %work%11%64%lo reg += %work%11%63%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%64%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%65%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%61%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%65%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%66%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%67%lo reg 6
	scoreboard players operation %work%11%68%lo reg = %work%11%66%lo reg
	scoreboard players operation %work%11%68%lo reg += %work%11%67%lo reg
	execute store result score %work%11%69%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%70%lo reg 6
	scoreboard players operation %work%11%71%lo reg = %work%11%69%lo reg
	scoreboard players operation %work%11%71%lo reg += %work%11%70%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%71%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%72%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%68%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%72%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%73%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%74%lo reg 7
	scoreboard players operation %work%11%75%lo reg = %work%11%73%lo reg
	scoreboard players operation %work%11%75%lo reg += %work%11%74%lo reg
	execute store result score %work%11%76%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%77%lo reg 7
	scoreboard players operation %work%11%78%lo reg = %work%11%76%lo reg
	scoreboard players operation %work%11%78%lo reg += %work%11%77%lo reg
	scoreboard players operation %temp%0%lo reg = %work%11%78%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%11%79%lo reg = %param0%0 reg
	scoreboard players operation %temp%0%lo reg = %work%11%75%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%11%79%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	execute store result score %work%11%80%lo reg run data get storage wasm:localstack stack.data[10]
	scoreboard players set %work%11%81%lo reg 8
	scoreboard players operation %work%11%82%lo reg = %work%11%80%lo reg
	scoreboard players operation %work%11%82%lo reg += %work%11%81%lo reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%11%82%lo reg
	execute store result score %work%11%83%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%11%84%lo reg 8
	scoreboard players operation %work%11%85%lo reg = %work%11%83%lo reg
	scoreboard players operation %work%11%85%lo reg += %work%11%84%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%11%85%lo reg
	execute store result score %work%11%86%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%11%87%lo reg -8
	scoreboard players operation %work%11%88%lo reg = %work%11%86%lo reg
	scoreboard players operation %work%11%88%lo reg += %work%11%87%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%11%88%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%11%88%lo reg matches 0 run function wasmrunner:wasm_11_11
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_11_12
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_12 --------
	function wasmrunner:wasm_11_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_2 --------
	execute store result score %work%11%89%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players operation %temp%0%lo reg = %work%11%89%lo reg
	scoreboard players operation %work%11%90%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_11_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_11_1 --------
	scoreboard players operation %return%0%lo reg = %work%11%90%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_12_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	scoreboard players set %work%12%0%lo reg 1360
	scoreboard players operation %param%0%lo reg = %work%12%0%lo reg
	data modify storage wasm:scratch stack.data set value [0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%12%0%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_12_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_7_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_12_2 --------
	execute store result score %work%12%0%lo reg run data get storage wasm:datastack stack.data[0] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%12%1%lo reg = %return%0%lo reg
	function wasmrunner:wasm_12_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_12_1 --------
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	scoreboard players set %work%13%0%lo reg -20
	execute as @e[tag=turtle] store result entity @s Pos[2] double 1 run scoreboard players get %work%13%0%lo reg
	scoreboard players set %work%13%1%lo reg 1360
	scoreboard players set %work%13%2%lo reg 1024
	scoreboard players set %work%13%3%lo reg 248
	scoreboard players operation %param%0%lo reg = %work%13%1%lo reg
	scoreboard players operation %param%1%lo reg = %work%13%2%lo reg
	scoreboard players operation %param%2%lo reg = %work%13%3%lo reg
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%13%1%lo reg
	execute store result storage wasm:scratch stack.data[1] int 1 run scoreboard players get %work%13%3%lo reg
	execute store result storage wasm:scratch stack.data[2] int 1 run scoreboard players get %work%13%0%lo reg
	execute store result storage wasm:scratch stack.data[3] int 1 run scoreboard players get %work%13%2%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_13_13" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_8_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_13 --------
	execute store result score %work%13%1%lo reg run data get storage wasm:datastack stack.data[0] 1
	execute store result score %work%13%3%lo reg run data get storage wasm:datastack stack.data[1] 1
	execute store result score %work%13%0%lo reg run data get storage wasm:datastack stack.data[2] 1
	execute store result score %work%13%2%lo reg run data get storage wasm:datastack stack.data[3] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%13%4%lo reg = %return%0%lo reg
	execute store success score %work%13%5%lo reg if score %work%13%4%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%13%5%lo reg matches 0 run function wasmrunner:wasm_13_2
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_13_3
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_3 --------
	function wasmrunner:wasm_13_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_4 --------
	scoreboard players set %work%13%6%lo reg 1360
	scoreboard players operation %param%0%lo reg = %work%13%6%lo reg
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%13%1%lo reg
	execute store result storage wasm:scratch stack.data[1] int 1 run scoreboard players get %work%13%6%lo reg
	execute store result storage wasm:scratch stack.data[2] int 1 run scoreboard players get %work%13%3%lo reg
	execute store result storage wasm:scratch stack.data[3] int 1 run scoreboard players get %work%13%0%lo reg
	execute store result storage wasm:scratch stack.data[4] int 1 run scoreboard players get %work%13%2%lo reg
	execute store result storage wasm:scratch stack.data[5] int 1 run scoreboard players get %work%13%4%lo reg
	execute store result storage wasm:scratch stack.data[6] int 1 run scoreboard players get %work%13%5%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_13_14" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_9_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_14 --------
	execute store result score %work%13%1%lo reg run data get storage wasm:datastack stack.data[0] 1
	execute store result score %work%13%6%lo reg run data get storage wasm:datastack stack.data[1] 1
	execute store result score %work%13%3%lo reg run data get storage wasm:datastack stack.data[2] 1
	execute store result score %work%13%0%lo reg run data get storage wasm:datastack stack.data[3] 1
	execute store result score %work%13%2%lo reg run data get storage wasm:datastack stack.data[4] 1
	execute store result score %work%13%4%lo reg run data get storage wasm:datastack stack.data[5] 1
	execute store result score %work%13%5%lo reg run data get storage wasm:datastack stack.data[6] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players set %work%13%7%lo reg 0
	scoreboard players operation %temp%0%lo reg = %work%13%7%lo reg
	scoreboard players operation %temp%0%lo reg += %const%7588 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %work%13%8%lo reg = %param0%0 reg
	execute store success score %work%13%9%lo reg if score %work%13%8%lo reg matches 0
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%13%9%lo reg matches 0 run function wasmrunner:wasm_13_5
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_13_6
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_6 --------
	scoreboard players set %work%13%10%lo reg 0
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %work%13%10%lo reg
	scoreboard players set %work%13%11%lo reg 0
	scoreboard players set %work%13%12%lo reg 0
	scoreboard players operation %temp%0%lo reg = %work%13%11%lo reg
	scoreboard players operation %temp%0%lo reg += %const%7588 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	scoreboard players operation %param2%0 reg = %work%13%12%lo reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players set %work%13%13%lo reg 5524
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%13%13%lo reg
	function wasmrunner:wasm_13_7
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_7 --------
	execute store result score %work%13%14%lo reg run data get storage wasm:localstack stack.data[0]
	execute as @e[tag=turtle] store result entity @s Pos[1] double 1 run scoreboard players get %work%13%14%lo reg
	scoreboard players set %work%13%15%lo reg 0
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%13%15%lo reg
	function wasmrunner:wasm_13_8
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_8 --------
	execute store result score %work%13%16%lo reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%13%17%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %work%13%18%lo reg = %work%13%16%lo reg
	scoreboard players operation %work%13%18%lo reg += %work%13%17%lo reg
	scoreboard players operation %temp%0%lo reg = %work%13%18%lo reg
	scoreboard players operation %temp%0%lo reg += %const%0 reg
	scoreboard players operation %ptr reg = %temp%0%lo reg
	function intrinsic:setptr
	function intrinsic:load_word
	scoreboard players operation %work%13%19%lo reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%13%19%lo reg
	execute store result score %work%13%20%lo reg run data get storage wasm:localstack stack.data[4]
	execute as @e[tag=turtle] store result entity @s Pos[0] double 1 run scoreboard players get %work%13%20%lo reg
	scoreboard players set %work%13%21%lo reg 1
	scoreboard players set %work%13%22%lo reg 5
	execute store result score %work%13%23%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%13%24%lo reg 1
	scoreboard players operation %work%13%25%lo reg = %work%13%23%lo reg
	scoreboard players operation %work%13%25%lo reg %= %const%2 reg
	scoreboard players operation %work%13%26%lo reg = %work%13%22%lo reg
	execute unless score %work%13%25%lo reg matches 0 run scoreboard players operation %work%13%26%lo reg = %work%13%21%lo reg
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 0 run setblock ~ ~ ~ minecraft:air
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 1 run setblock ~ ~ ~ minecraft:cobblestone
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 2 run setblock ~ ~ ~ minecraft:granite
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 3 run setblock ~ ~ ~ minecraft:andesite
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 4 run setblock ~ ~ ~ minecraft:diorite
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 5 run setblock ~ ~ ~ minecraft:lapis_block
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 6 run setblock ~ ~ ~ minecraft:iron_block
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 7 run setblock ~ ~ ~ minecraft:gold_block
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 8 run setblock ~ ~ ~ minecraft:diamond_block
	execute at @e[tag=turtle] if score %work%13%26%lo reg matches 9 run setblock ~ ~ ~ minecraft:redstone_block
	execute unless score %work%13%26%lo reg matches 0..9 run tellraw @a [{"text":"Attempt to set invalid block"},{"score":{"name":"%work%13%26%lo reg","objective":"reg"}}]
	execute store result score %work%13%27%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%13%28%lo reg 1
	scoreboard players operation %work%13%29%lo reg = %work%13%27%lo reg
	scoreboard players operation %work%13%29%lo reg += %work%13%28%lo reg
	execute as @e[tag=turtle] store result entity @s Pos[0] double 1 run scoreboard players get %work%13%29%lo reg
	scoreboard players set %work%13%30%lo reg 1
	scoreboard players set %work%13%31%lo reg 5
	execute store result score %work%13%32%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%13%33%lo reg 256
	scoreboard players operation %work%13%34%lo reg = %work%13%32%lo reg
	scoreboard players operation %work%13%34%lo reg %= %const%512 reg
	scoreboard players operation %temp%1234%lo reg = %work%13%32%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%256 reg
	scoreboard players operation %work%13%34%lo reg -= %temp%1234%lo reg
	scoreboard players operation %work%13%35%lo reg = %work%13%31%lo reg
	execute unless score %work%13%34%lo reg matches 0 run scoreboard players operation %work%13%35%lo reg = %work%13%30%lo reg
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 0 run setblock ~ ~ ~ minecraft:air
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 1 run setblock ~ ~ ~ minecraft:cobblestone
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 2 run setblock ~ ~ ~ minecraft:granite
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 3 run setblock ~ ~ ~ minecraft:andesite
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 4 run setblock ~ ~ ~ minecraft:diorite
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 5 run setblock ~ ~ ~ minecraft:lapis_block
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 6 run setblock ~ ~ ~ minecraft:iron_block
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 7 run setblock ~ ~ ~ minecraft:gold_block
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 8 run setblock ~ ~ ~ minecraft:diamond_block
	execute at @e[tag=turtle] if score %work%13%35%lo reg matches 9 run setblock ~ ~ ~ minecraft:redstone_block
	execute unless score %work%13%35%lo reg matches 0..9 run tellraw @a [{"text":"Attempt to set invalid block"},{"score":{"name":"%work%13%35%lo reg","objective":"reg"}}]
	execute store result score %work%13%36%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%13%37%lo reg 2
	scoreboard players operation %work%13%38%lo reg = %work%13%36%lo reg
	scoreboard players operation %work%13%38%lo reg += %work%13%37%lo reg
	execute as @e[tag=turtle] store result entity @s Pos[0] double 1 run scoreboard players get %work%13%38%lo reg
	scoreboard players set %work%13%39%lo reg 1
	scoreboard players set %work%13%40%lo reg 5
	execute store result score %work%13%41%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%13%42%lo reg 65536
	scoreboard players operation %work%13%43%lo reg = %work%13%41%lo reg
	scoreboard players operation %work%13%43%lo reg %= %const%131072 reg
	scoreboard players operation %temp%1234%lo reg = %work%13%41%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%65536 reg
	scoreboard players operation %work%13%43%lo reg -= %temp%1234%lo reg
	scoreboard players operation %work%13%44%lo reg = %work%13%40%lo reg
	execute unless score %work%13%43%lo reg matches 0 run scoreboard players operation %work%13%44%lo reg = %work%13%39%lo reg
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 0 run setblock ~ ~ ~ minecraft:air
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 1 run setblock ~ ~ ~ minecraft:cobblestone
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 2 run setblock ~ ~ ~ minecraft:granite
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 3 run setblock ~ ~ ~ minecraft:andesite
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 4 run setblock ~ ~ ~ minecraft:diorite
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 5 run setblock ~ ~ ~ minecraft:lapis_block
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 6 run setblock ~ ~ ~ minecraft:iron_block
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 7 run setblock ~ ~ ~ minecraft:gold_block
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 8 run setblock ~ ~ ~ minecraft:diamond_block
	execute at @e[tag=turtle] if score %work%13%44%lo reg matches 9 run setblock ~ ~ ~ minecraft:redstone_block
	execute unless score %work%13%44%lo reg matches 0..9 run tellraw @a [{"text":"Attempt to set invalid block"},{"score":{"name":"%work%13%44%lo reg","objective":"reg"}}]
	execute store result score %work%13%45%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%13%46%lo reg 3
	scoreboard players operation %work%13%47%lo reg = %work%13%45%lo reg
	scoreboard players operation %work%13%47%lo reg += %work%13%46%lo reg
	execute as @e[tag=turtle] store result entity @s Pos[0] double 1 run scoreboard players get %work%13%47%lo reg
	scoreboard players set %work%13%48%lo reg 1
	scoreboard players set %work%13%49%lo reg 5
	execute store result score %work%13%50%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %work%13%51%lo reg 16777216
	scoreboard players operation %work%13%52%lo reg = %work%13%50%lo reg
	scoreboard players operation %work%13%52%lo reg %= %const%33554432 reg
	scoreboard players operation %temp%1234%lo reg = %work%13%50%lo reg
	scoreboard players operation %temp%1234%lo reg %= %const%16777216 reg
	scoreboard players operation %work%13%52%lo reg -= %temp%1234%lo reg
	scoreboard players operation %work%13%53%lo reg = %work%13%49%lo reg
	execute unless score %work%13%52%lo reg matches 0 run scoreboard players operation %work%13%53%lo reg = %work%13%48%lo reg
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 0 run setblock ~ ~ ~ minecraft:air
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 1 run setblock ~ ~ ~ minecraft:cobblestone
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 2 run setblock ~ ~ ~ minecraft:granite
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 3 run setblock ~ ~ ~ minecraft:andesite
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 4 run setblock ~ ~ ~ minecraft:diorite
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 5 run setblock ~ ~ ~ minecraft:lapis_block
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 6 run setblock ~ ~ ~ minecraft:iron_block
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 7 run setblock ~ ~ ~ minecraft:gold_block
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 8 run setblock ~ ~ ~ minecraft:diamond_block
	execute at @e[tag=turtle] if score %work%13%53%lo reg matches 9 run setblock ~ ~ ~ minecraft:redstone_block
	execute unless score %work%13%53%lo reg matches 0..9 run tellraw @a [{"text":"Attempt to set invalid block"},{"score":{"name":"%work%13%53%lo reg","objective":"reg"}}]
	execute store result score %work%13%54%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%13%55%lo reg 60
	scoreboard players set %work%13%56%lo reg 0
	execute if score %work%13%54%lo reg matches ..-1 if score %work%13%55%lo reg matches 0.. run scoreboard players set %work%13%56%lo reg 0
	execute if score %work%13%54%lo reg matches 0.. if score %work%13%55%lo reg matches ..-1 run scoreboard players set %work%13%56%lo reg 1
	execute if score %work%13%54%lo reg matches ..-1 if score %work%13%55%lo reg matches ..-1 if score %work%13%54%lo reg < %work%13%55%lo reg run scoreboard players set %work%13%56%lo reg 1
	execute if score %work%13%54%lo reg matches 0.. if score %work%13%55%lo reg matches 0.. if score %work%13%54%lo reg < %work%13%55%lo reg run scoreboard players set %work%13%56%lo reg 1
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%13%56%lo reg
	execute store result score %work%13%57%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players set %work%13%58%lo reg 4
	scoreboard players operation %work%13%59%lo reg = %work%13%57%lo reg
	scoreboard players operation %work%13%59%lo reg += %work%13%58%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%13%59%lo reg
	execute store result score %work%13%60%lo reg run data get storage wasm:localstack stack.data[6]
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%13%60%lo reg matches 0 run function wasmrunner:wasm_13_8
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_13_9
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_9 --------
	execute store result score %work%13%61%lo reg run data get storage wasm:localstack stack.data[2]
	scoreboard players set %work%13%62%lo reg 64
	scoreboard players operation %work%13%63%lo reg = %work%13%61%lo reg
	scoreboard players operation %work%13%63%lo reg += %work%13%62%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %work%13%63%lo reg
	execute store result score %work%13%64%lo reg run data get storage wasm:localstack stack.data[0]
	scoreboard players set %work%13%65%lo reg 1
	scoreboard players operation %work%13%66%lo reg = %work%13%64%lo reg
	scoreboard players operation %work%13%66%lo reg += %work%13%65%lo reg
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %work%13%66%lo reg
	scoreboard players set %work%13%67%lo reg 32
	execute store success score %work%13%68%lo reg unless score %work%13%66%lo reg = %work%13%67%lo reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%13%68%lo reg matches 0 run function wasmrunner:wasm_13_7
	execute if score %condtaken reg matches 0 run function wasmrunner:wasm_13_10
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_10 --------
	function wasmrunner:wasm_13_5
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_5 --------
	schedule function wasmrunner:wasm_13_11 1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_11 --------
	function wasmrunner:wasm_13_4
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_12 --------
	function wasmrunner:wasm_13_2
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_2 --------
	scoreboard players set %work%13%69%lo reg 2
	scoreboard players operation %temp%0%lo reg = %work%13%69%lo reg
	scoreboard players operation %work%13%70%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_13_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_13_1 --------
	scoreboard players operation %return%0%lo reg = %work%13%70%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_14_0 --------
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_14_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_13_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_14_2 --------
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%14%0%lo reg = %return%0%lo reg
	scoreboard players set %work%14%1%lo reg 2
	scoreboard players operation %temp%0%lo reg = %work%14%1%lo reg
	scoreboard players operation %work%14%2%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_14_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_14_1 --------
	scoreboard players operation %return%0%lo reg = %work%14%2%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_15_0 --------
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	scoreboard players set %work%15%0%lo reg 1360
	scoreboard players operation %param%0%lo reg = %work%15%0%lo reg
	data modify storage wasm:scratch stack.data set value [0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%15%0%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_15_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_6_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_15_2 --------
	execute store result score %work%15%0%lo reg run data get storage wasm:datastack stack.data[0] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%15%1%lo reg = %return%0%lo reg
	scoreboard players set %work%15%2%lo reg 1
	scoreboard players set %work%15%3%lo reg 0
	scoreboard players set %work%15%4%lo reg 1024
	scoreboard players operation %param%0%lo reg = %work%15%2%lo reg
	scoreboard players operation %param%1%lo reg = %work%15%3%lo reg
	scoreboard players operation %param%2%lo reg = %work%15%4%lo reg
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_15_3" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_16_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_15_3 --------
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%15%5%lo reg = %return%0%lo reg
	function wasmrunner:wasm_15_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_15_1 --------
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_16_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %param%2%lo reg
	execute store result score %work%16%0%lo reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%16%1%lo reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%16%2%lo reg run data get storage wasm:localstack stack.data[4]
	scoreboard players operation %param%0%lo reg = %work%16%0%lo reg
	scoreboard players operation %param%1%lo reg = %work%16%1%lo reg
	scoreboard players operation %param%2%lo reg = %work%16%2%lo reg
	data modify storage wasm:scratch stack.data set value [0, 0, 0]
	execute store result storage wasm:scratch stack.data[0] int 1 run scoreboard players get %work%16%2%lo reg
	execute store result storage wasm:scratch stack.data[1] int 1 run scoreboard players get %work%16%1%lo reg
	execute store result storage wasm:scratch stack.data[2] int 1 run scoreboard players get %work%16%0%lo reg
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_16_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_10_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_16_2 --------
	execute store result score %work%16%2%lo reg run data get storage wasm:datastack stack.data[0] 1
	execute store result score %work%16%1%lo reg run data get storage wasm:datastack stack.data[1] 1
	execute store result score %work%16%0%lo reg run data get storage wasm:datastack stack.data[2] 1
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%16%3%lo reg = %return%0%lo reg
	scoreboard players operation %temp%0%lo reg = %work%16%3%lo reg
	scoreboard players operation %work%16%4%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_16_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_16_1 --------
	scoreboard players operation %return%0%lo reg = %work%16%4%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_17_0 --------
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_17_2" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_5_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_17_2 --------
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	data modify storage wasm:scratch stack.data set value []
	data modify storage wasm:scratch stack.tail set from storage wasm:datastack stack
	data modify storage wasm:datastack stack set from storage wasm:scratch stack
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.data."wasmrunner:wasm_17_3" set value 1
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_14_0
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_17_3 --------
	data modify storage wasm:datastack stack set from storage wasm:datastack stack.tail
	scoreboard players operation %work%17%0%lo reg = %return%0%lo reg
	scoreboard players operation %temp%0%lo reg = %work%17%0%lo reg
	scoreboard players operation %work%17%1%lo reg = %temp%0%lo reg
	function wasmrunner:wasm_17_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:wasm_17_1 --------
	scoreboard players operation %return%0%lo reg = %work%17%1%lo reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	function wasmrunner:__return_to_saved
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:init --------
	# Set up scoreboard
	scoreboard objectives remove reg
	scoreboard objectives add reg dummy
	data modify storage wasm:datastack stack set value {}
	data modify storage wasm:localstack stack set value {}
	data modify storage wasm:returnstack stack set value {}
	data modify storage wasm:scratch stack set value {}
	# Remove old armor stand pointers
	kill @e[tag=memoryptr]
	kill @e[tag=turtle]
	kill @e[tag=nextchain]
	# Add armor stand pointers
	summon minecraft:armor_stand 0 0 8 {CustomName: "\"memoryptr\"", CustomNameVisible: 1b, Marker: 1b, Tags: ["memoryptr"]}
	summon minecraft:armor_stand 0 0 -2 {CustomName: "\"turtle\"", CustomNameVisible: 1b, Marker: 1b, Tags: ["turtle"]}
	summon minecraft:armor_stand 1 1 -1 {CustomName: "\"nextchain\"", CustomNameVisible: 1b, Marker: 1b, Tags: ["nextchain"]}
	scoreboard players set %%-1 reg -1
	scoreboard players set %%1 reg 1
	scoreboard players set %%2 reg 2
	scoreboard players set %%4 reg 4
	scoreboard players set %%8 reg 8
	scoreboard players set %%16 reg 16
	scoreboard players set %%32 reg 32
	scoreboard players set %%64 reg 64
	scoreboard players set %%128 reg 128
	scoreboard players set %%256 reg 256
	scoreboard players set %%512 reg 512
	scoreboard players set %%1024 reg 1024
	scoreboard players set %%2048 reg 2048
	scoreboard players set %%4096 reg 4096
	scoreboard players set %%8192 reg 8192
	scoreboard players set %%16384 reg 16384
	scoreboard players set %%32768 reg 32768
	scoreboard players set %%65536 reg 65536
	scoreboard players set %%131072 reg 131072
	scoreboard players set %%262144 reg 262144
	scoreboard players set %%524288 reg 524288
	scoreboard players set %%1048576 reg 1048576
	scoreboard players set %%2097152 reg 2097152
	scoreboard players set %%4194304 reg 4194304
	scoreboard players set %%8388608 reg 8388608
	scoreboard players set %%16777216 reg 16777216
	scoreboard players set %%33554432 reg 33554432
	scoreboard players set %%67108864 reg 67108864
	scoreboard players set %%134217728 reg 134217728
	scoreboard players set %%268435456 reg 268435456
	scoreboard players set %%536870912 reg 536870912
	scoreboard players set %%1073741824 reg 1073741824
	scoreboard players set %%-2147483648 reg -2147483648
	scoreboard players set %const%65536 reg 65536
	scoreboard players set %const%131072 reg 131072
	scoreboard players set %const%4159 reg 4159
	scoreboard players set %const%16777216 reg 16777216
	scoreboard players set %const%0 reg 0
	scoreboard players set %const%128 reg 128
	scoreboard players set %const%16 reg 16
	scoreboard players set %const%512 reg 512
	scoreboard players set %const%4158 reg 4158
	scoreboard players set %const%7588 reg 7588
	scoreboard players set %const%64 reg 64
	scoreboard players set %const%4096 reg 4096
	scoreboard players set %const%6224 reg 6224
	scoreboard players set %const%32 reg 32
	scoreboard players set %const%4152 reg 4152
	scoreboard players set %const%4154 reg 4154
	scoreboard players set %const%4156 reg 4156
	scoreboard players set %const%4 reg 4
	scoreboard players set %const%4136 reg 4136
	scoreboard players set %const%33554432 reg 33554432
	scoreboard players set %const%256 reg 256
	scoreboard players set %const%4151 reg 4151
	scoreboard players set %const%6208 reg 6208
	scoreboard players set %const%2 reg 2
	scoreboard players set %const%8 reg 8
	scoreboard players set %const%0 reg 0
	fill 0 0 0 8 255 7 minecraft:air
	fill 0 0 0 8 255 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 0}}}
	fill 1 0 0 9 255 7 minecraft:air
	fill 1 0 0 9 255 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 0}}}
	setblock 0 32 0 minecraft:air
	setblock 0 32 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 208339562}}}
	setblock 0 32 1 minecraft:air
	setblock 0 32 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 208486252}}}
	setblock 0 32 2 minecraft:air
	setblock 0 32 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1227167070}}}
	setblock 0 32 3 minecraft:air
	setblock 0 32 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 7263964}}}
	setblock 0 32 4 minecraft:air
	setblock 0 32 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 57070626}}}
	setblock 0 32 5 minecraft:air
	setblock 0 32 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1616904808}}}
	setblock 0 32 6 minecraft:air
	setblock 0 32 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 133174768}}}
	setblock 0 32 7 minecraft:air
	setblock 0 32 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 437387312}}}
	setblock 0 33 0 minecraft:air
	setblock 0 33 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 142022599}}}
	setblock 0 33 1 minecraft:air
	setblock 0 33 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -257753239}}}
	setblock 0 33 2 minecraft:air
	setblock 0 33 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -358452778}}}
	setblock 0 33 3 minecraft:air
	setblock 0 33 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -690178342}}}
	setblock 0 33 4 minecraft:air
	setblock 0 33 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1579155104}}}
	setblock 0 33 5 minecraft:air
	setblock 0 33 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 73465467}}}
	setblock 0 33 6 minecraft:air
	setblock 0 33 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 41656800}}}
	setblock 0 33 7 minecraft:air
	setblock 0 33 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 42671968}}}
	setblock 0 34 0 minecraft:air
	setblock 0 34 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 207664858}}}
	setblock 0 34 1 minecraft:air
	setblock 0 34 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -25320992}}}
	setblock 0 34 2 minecraft:air
	setblock 0 34 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1579152032}}}
	setblock 0 34 3 minecraft:air
	setblock 0 34 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 526385789}}}
	setblock 0 34 4 minecraft:air
	setblock 0 34 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -690224499}}}
	setblock 0 34 5 minecraft:air
	setblock 0 34 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1909911714}}}
	setblock 0 34 6 minecraft:air
	setblock 0 34 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1803058042}}}
	setblock 0 34 7 minecraft:air
	setblock 0 34 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 42352480}}}
	setblock 0 35 0 minecraft:air
	setblock 0 35 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 310845281}}}
	setblock 0 35 1 minecraft:air
	setblock 0 35 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 2014446150}}}
	setblock 0 35 2 minecraft:air
	setblock 0 35 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2112733370}}}
	setblock 0 35 3 minecraft:air
	setblock 0 35 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -9887929}}}
	setblock 0 35 4 minecraft:air
	setblock 0 35 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 23658567}}}
	setblock 0 35 5 minecraft:air
	setblock 0 35 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 705851862}}}
	setblock 0 35 6 minecraft:air
	setblock 0 35 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 23265896}}}
	setblock 0 35 7 minecraft:air
	setblock 0 35 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1249873792}}}
	setblock 0 36 0 minecraft:air
	setblock 0 36 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -26703342}}}
	setblock 0 36 1 minecraft:air
	setblock 0 36 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1887439459}}}
	setblock 0 36 2 minecraft:air
	setblock 0 36 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 20960640}}}
	setblock 0 36 3 minecraft:air
	setblock 0 36 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 39952914}}}
	setblock 0 36 4 minecraft:air
	setblock 0 36 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 20911488}}}
	setblock 0 36 5 minecraft:air
	setblock 0 36 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 360757778}}}
	setblock 0 36 6 minecraft:air
	setblock 0 36 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -938344129}}}
	setblock 0 36 7 minecraft:air
	setblock 0 36 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 20911488}}}
	setblock 0 37 0 minecraft:air
	setblock 0 37 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 543212050}}}
	setblock 0 37 1 minecraft:air
	setblock 0 37 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -735962896}}}
	setblock 0 37 2 minecraft:air
	setblock 0 37 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -735955826}}}
	setblock 0 37 3 minecraft:air
	setblock 0 37 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 20135526}}}
	setblock 0 37 4 minecraft:air
	setblock 0 37 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -26737818}}}
	setblock 0 37 5 minecraft:air
	setblock 0 37 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 40370483}}}
	setblock 0 37 6 minecraft:air
	setblock 0 37 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -8841710}}}
	setblock 0 37 7 minecraft:air
	setblock 0 37 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -9830839}}}
	setblock 0 38 0 minecraft:air
	setblock 0 38 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 24758290}}}
	setblock 0 38 1 minecraft:air
	setblock 0 38 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 23659081}}}
	setblock 0 38 2 minecraft:air
	setblock 0 38 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 418382944}}}
	setblock 0 38 3 minecraft:air
	setblock 0 38 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1078329718}}}
	setblock 0 38 4 minecraft:air
	setblock 0 38 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1813184118}}}
	setblock 0 38 5 minecraft:air
	setblock 0 38 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 872346274}}}
	setblock 0 38 6 minecraft:air
	setblock 0 38 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 703686130}}}
	setblock 0 38 7 minecraft:air
	setblock 0 38 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 6624356}}}
	setblock 0 39 0 minecraft:air
	setblock 0 39 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 359945684}}}
	setblock 0 39 1 minecraft:air
	setblock 0 39 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1439967730}}}
	setblock 0 39 2 minecraft:air
	setblock 0 39 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2139034112}}}
	setblock 0 39 3 minecraft:air
	setblock 0 39 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2139062144}}}
	setblock 0 39 4 minecraft:air
	setblock 0 39 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 128}}}
	setblock 0 40 0 minecraft:air
	setblock 0 40 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1869573904}}}
	setblock 0 40 1 minecraft:air
	setblock 0 40 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 543170800}}}
	setblock 0 40 2 minecraft:air
	setblock 0 40 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 284192800}}}
	setblock 0 40 3 minecraft:air
	setblock 0 40 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -252673808}}}
	setblock 0 40 4 minecraft:air
	setblock 0 40 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -267325424}}}
	setblock 0 40 5 minecraft:air
	setblock 0 40 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 284201104}}}
	setblock 0 40 6 minecraft:air
	setblock 0 40 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -259985392}}}
	setblock 0 40 7 minecraft:air
	setblock 0 40 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2131693552}}}
	setblock 0 41 0 minecraft:air
	setblock 0 41 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -252669712}}}
	setblock 0 41 1 minecraft:air
	setblock 0 41 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: 1077944336}}}
	setblock 0 41 2 minecraft:air
	setblock 0 41 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1863282448}}}
	setblock 0 41 3 minecraft:air
	setblock 0 41 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -258936592}}}
	setblock 0 41 4 minecraft:air
	setblock 0 41 4 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1863258096}}}
	setblock 0 41 5 minecraft:air
	setblock 0 41 5 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -527396624}}}
	setblock 0 41 6 minecraft:air
	setblock 0 41 6 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -527376240}}}
	setblock 0 41 7 minecraft:air
	setblock 0 41 7 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2139062032}}}
	setblock 0 42 0 minecraft:air
	setblock 0 42 0 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -1869553424}}}
	setblock 0 42 1 minecraft:air
	setblock 0 42 1 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2131697520}}}
	setblock 0 42 2 minecraft:air
	setblock 0 42 2 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -252673808}}}
	setblock 0 42 3 minecraft:air
	setblock 0 42 3 minecraft:jukebox{RecordItem: {Count: 1b, id: "minecraft:stone", tag: {Memory: -2139033472}}}
	scoreboard players set %global%0%lo reg 73136

-------- func wasmrunner:__return_to_saved --------
	scoreboard players set %temp%0%lo reg -1
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_5_0" run scoreboard players set %temp%0%lo reg 0
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_5_2" run scoreboard players set %temp%0%lo reg 1
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_5_1" run scoreboard players set %temp%0%lo reg 2
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_6_0" run scoreboard players set %temp%0%lo reg 3
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_6_1" run scoreboard players set %temp%0%lo reg 4
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_7_0" run scoreboard players set %temp%0%lo reg 5
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_7_1" run scoreboard players set %temp%0%lo reg 6
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_0" run scoreboard players set %temp%0%lo reg 7
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_6" run scoreboard players set %temp%0%lo reg 8
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_3" run scoreboard players set %temp%0%lo reg 9
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_4" run scoreboard players set %temp%0%lo reg 10
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_5" run scoreboard players set %temp%0%lo reg 11
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_2" run scoreboard players set %temp%0%lo reg 12
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_8_1" run scoreboard players set %temp%0%lo reg 13
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_0" run scoreboard players set %temp%0%lo reg 14
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_23" run scoreboard players set %temp%0%lo reg 15
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_22" run scoreboard players set %temp%0%lo reg 16
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_25" run scoreboard players set %temp%0%lo reg 17
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_24" run scoreboard players set %temp%0%lo reg 18
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_26" run scoreboard players set %temp%0%lo reg 19
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_21" run scoreboard players set %temp%0%lo reg 20
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_27" run scoreboard players set %temp%0%lo reg 21
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_20" run scoreboard players set %temp%0%lo reg 22
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_28" run scoreboard players set %temp%0%lo reg 23
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_19" run scoreboard players set %temp%0%lo reg 24
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_30" run scoreboard players set %temp%0%lo reg 25
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_31" run scoreboard players set %temp%0%lo reg 26
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_29" run scoreboard players set %temp%0%lo reg 27
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_32" run scoreboard players set %temp%0%lo reg 28
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_18" run scoreboard players set %temp%0%lo reg 29
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_34" run scoreboard players set %temp%0%lo reg 30
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_35" run scoreboard players set %temp%0%lo reg 31
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_33" run scoreboard players set %temp%0%lo reg 32
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_36" run scoreboard players set %temp%0%lo reg 33
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_17" run scoreboard players set %temp%0%lo reg 34
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_38" run scoreboard players set %temp%0%lo reg 35
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_39" run scoreboard players set %temp%0%lo reg 36
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_37" run scoreboard players set %temp%0%lo reg 37
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_40" run scoreboard players set %temp%0%lo reg 38
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_16" run scoreboard players set %temp%0%lo reg 39
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_41" run scoreboard players set %temp%0%lo reg 40
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_15" run scoreboard players set %temp%0%lo reg 41
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_42" run scoreboard players set %temp%0%lo reg 42
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_14" run scoreboard players set %temp%0%lo reg 43
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_52" run scoreboard players set %temp%0%lo reg 44
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_51" run scoreboard players set %temp%0%lo reg 45
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_53" run scoreboard players set %temp%0%lo reg 46
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_50" run scoreboard players set %temp%0%lo reg 47
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_54" run scoreboard players set %temp%0%lo reg 48
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_49" run scoreboard players set %temp%0%lo reg 49
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_55" run scoreboard players set %temp%0%lo reg 50
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_48" run scoreboard players set %temp%0%lo reg 51
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_56" run scoreboard players set %temp%0%lo reg 52
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_47" run scoreboard players set %temp%0%lo reg 53
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_57" run scoreboard players set %temp%0%lo reg 54
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_46" run scoreboard players set %temp%0%lo reg 55
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_58" run scoreboard players set %temp%0%lo reg 56
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_45" run scoreboard players set %temp%0%lo reg 57
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_59" run scoreboard players set %temp%0%lo reg 58
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_44" run scoreboard players set %temp%0%lo reg 59
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_60" run scoreboard players set %temp%0%lo reg 60
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_43" run scoreboard players set %temp%0%lo reg 61
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_61" run scoreboard players set %temp%0%lo reg 62
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_13" run scoreboard players set %temp%0%lo reg 63
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_63" run scoreboard players set %temp%0%lo reg 64
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_64" run scoreboard players set %temp%0%lo reg 65
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_62" run scoreboard players set %temp%0%lo reg 66
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_65" run scoreboard players set %temp%0%lo reg 67
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_12" run scoreboard players set %temp%0%lo reg 68
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_66" run scoreboard players set %temp%0%lo reg 69
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_11" run scoreboard players set %temp%0%lo reg 70
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_67" run scoreboard players set %temp%0%lo reg 71
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_10" run scoreboard players set %temp%0%lo reg 72
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_68" run scoreboard players set %temp%0%lo reg 73
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_9" run scoreboard players set %temp%0%lo reg 74
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_70" run scoreboard players set %temp%0%lo reg 75
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_71" run scoreboard players set %temp%0%lo reg 76
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_73" run scoreboard players set %temp%0%lo reg 77
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_75" run scoreboard players set %temp%0%lo reg 78
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_74" run scoreboard players set %temp%0%lo reg 79
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_72" run scoreboard players set %temp%0%lo reg 80
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_77" run scoreboard players set %temp%0%lo reg 81
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_79" run scoreboard players set %temp%0%lo reg 82
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_78" run scoreboard players set %temp%0%lo reg 83
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_76" run scoreboard players set %temp%0%lo reg 84
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_81" run scoreboard players set %temp%0%lo reg 85
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_83" run scoreboard players set %temp%0%lo reg 86
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_82" run scoreboard players set %temp%0%lo reg 87
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_80" run scoreboard players set %temp%0%lo reg 88
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_85" run scoreboard players set %temp%0%lo reg 89
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_87" run scoreboard players set %temp%0%lo reg 90
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_86" run scoreboard players set %temp%0%lo reg 91
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_84" run scoreboard players set %temp%0%lo reg 92
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_89" run scoreboard players set %temp%0%lo reg 93
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_91" run scoreboard players set %temp%0%lo reg 94
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_90" run scoreboard players set %temp%0%lo reg 95
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_88" run scoreboard players set %temp%0%lo reg 96
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_93" run scoreboard players set %temp%0%lo reg 97
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_95" run scoreboard players set %temp%0%lo reg 98
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_94" run scoreboard players set %temp%0%lo reg 99
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_92" run scoreboard players set %temp%0%lo reg 100
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_97" run scoreboard players set %temp%0%lo reg 101
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_99" run scoreboard players set %temp%0%lo reg 102
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_98" run scoreboard players set %temp%0%lo reg 103
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_96" run scoreboard players set %temp%0%lo reg 104
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_101" run scoreboard players set %temp%0%lo reg 105
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_103" run scoreboard players set %temp%0%lo reg 106
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_102" run scoreboard players set %temp%0%lo reg 107
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_100" run scoreboard players set %temp%0%lo reg 108
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_104" run scoreboard players set %temp%0%lo reg 109
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_69" run scoreboard players set %temp%0%lo reg 110
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_105" run scoreboard players set %temp%0%lo reg 111
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_8" run scoreboard players set %temp%0%lo reg 112
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_108" run scoreboard players set %temp%0%lo reg 113
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_107" run scoreboard players set %temp%0%lo reg 114
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_110" run scoreboard players set %temp%0%lo reg 115
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_111" run scoreboard players set %temp%0%lo reg 116
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_109" run scoreboard players set %temp%0%lo reg 117
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_112" run scoreboard players set %temp%0%lo reg 118
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_106" run scoreboard players set %temp%0%lo reg 119
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_114" run scoreboard players set %temp%0%lo reg 120
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_115" run scoreboard players set %temp%0%lo reg 121
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_113" run scoreboard players set %temp%0%lo reg 122
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_116" run scoreboard players set %temp%0%lo reg 123
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_7" run scoreboard players set %temp%0%lo reg 124
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_126" run scoreboard players set %temp%0%lo reg 125
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_125" run scoreboard players set %temp%0%lo reg 126
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_127" run scoreboard players set %temp%0%lo reg 127
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_128" run scoreboard players set %temp%0%lo reg 128
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_129" run scoreboard players set %temp%0%lo reg 129
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_130" run scoreboard players set %temp%0%lo reg 130
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_124" run scoreboard players set %temp%0%lo reg 131
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_131" run scoreboard players set %temp%0%lo reg 132
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_123" run scoreboard players set %temp%0%lo reg 133
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_133" run scoreboard players set %temp%0%lo reg 134
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_132" run scoreboard players set %temp%0%lo reg 135
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_134" run scoreboard players set %temp%0%lo reg 136
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_135" run scoreboard players set %temp%0%lo reg 137
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_122" run scoreboard players set %temp%0%lo reg 138
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_136" run scoreboard players set %temp%0%lo reg 139
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_121" run scoreboard players set %temp%0%lo reg 140
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_137" run scoreboard players set %temp%0%lo reg 141
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_120" run scoreboard players set %temp%0%lo reg 142
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_138" run scoreboard players set %temp%0%lo reg 143
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_119" run scoreboard players set %temp%0%lo reg 144
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_139" run scoreboard players set %temp%0%lo reg 145
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_118" run scoreboard players set %temp%0%lo reg 146
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_140" run scoreboard players set %temp%0%lo reg 147
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_117" run scoreboard players set %temp%0%lo reg 148
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_141" run scoreboard players set %temp%0%lo reg 149
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_142" run scoreboard players set %temp%0%lo reg 150
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_143" run scoreboard players set %temp%0%lo reg 151
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_6" run scoreboard players set %temp%0%lo reg 152
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_144" run scoreboard players set %temp%0%lo reg 153
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_5" run scoreboard players set %temp%0%lo reg 154
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_4" run scoreboard players set %temp%0%lo reg 155
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_146" run scoreboard players set %temp%0%lo reg 156
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_145" run scoreboard players set %temp%0%lo reg 157
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_148" run scoreboard players set %temp%0%lo reg 158
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_147" run scoreboard players set %temp%0%lo reg 159
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_150" run scoreboard players set %temp%0%lo reg 160
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_149" run scoreboard players set %temp%0%lo reg 161
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_152" run scoreboard players set %temp%0%lo reg 162
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_151" run scoreboard players set %temp%0%lo reg 163
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_154" run scoreboard players set %temp%0%lo reg 164
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_153" run scoreboard players set %temp%0%lo reg 165
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_156" run scoreboard players set %temp%0%lo reg 166
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_155" run scoreboard players set %temp%0%lo reg 167
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_158" run scoreboard players set %temp%0%lo reg 168
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_157" run scoreboard players set %temp%0%lo reg 169
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_160" run scoreboard players set %temp%0%lo reg 170
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_159" run scoreboard players set %temp%0%lo reg 171
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_162" run scoreboard players set %temp%0%lo reg 172
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_161" run scoreboard players set %temp%0%lo reg 173
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_164" run scoreboard players set %temp%0%lo reg 174
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_163" run scoreboard players set %temp%0%lo reg 175
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_166" run scoreboard players set %temp%0%lo reg 176
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_165" run scoreboard players set %temp%0%lo reg 177
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_168" run scoreboard players set %temp%0%lo reg 178
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_167" run scoreboard players set %temp%0%lo reg 179
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_170" run scoreboard players set %temp%0%lo reg 180
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_169" run scoreboard players set %temp%0%lo reg 181
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_173" run scoreboard players set %temp%0%lo reg 182
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_174" run scoreboard players set %temp%0%lo reg 183
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_172" run scoreboard players set %temp%0%lo reg 184
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_175" run scoreboard players set %temp%0%lo reg 185
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_171" run scoreboard players set %temp%0%lo reg 186
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_3" run scoreboard players set %temp%0%lo reg 187
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_177" run scoreboard players set %temp%0%lo reg 188
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_176" run scoreboard players set %temp%0%lo reg 189
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_2" run scoreboard players set %temp%0%lo reg 190
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_9_1" run scoreboard players set %temp%0%lo reg 191
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_10_0" run scoreboard players set %temp%0%lo reg 192
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_10_1" run scoreboard players set %temp%0%lo reg 193
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_0" run scoreboard players set %temp%0%lo reg 194
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_3" run scoreboard players set %temp%0%lo reg 195
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_6" run scoreboard players set %temp%0%lo reg 196
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_7" run scoreboard players set %temp%0%lo reg 197
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_5" run scoreboard players set %temp%0%lo reg 198
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_8" run scoreboard players set %temp%0%lo reg 199
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_9" run scoreboard players set %temp%0%lo reg 200
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_4" run scoreboard players set %temp%0%lo reg 201
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_10" run scoreboard players set %temp%0%lo reg 202
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_11" run scoreboard players set %temp%0%lo reg 203
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_12" run scoreboard players set %temp%0%lo reg 204
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_2" run scoreboard players set %temp%0%lo reg 205
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_11_1" run scoreboard players set %temp%0%lo reg 206
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_12_0" run scoreboard players set %temp%0%lo reg 207
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_12_2" run scoreboard players set %temp%0%lo reg 208
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_12_1" run scoreboard players set %temp%0%lo reg 209
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_0" run scoreboard players set %temp%0%lo reg 210
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_13" run scoreboard players set %temp%0%lo reg 211
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_3" run scoreboard players set %temp%0%lo reg 212
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_4" run scoreboard players set %temp%0%lo reg 213
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_14" run scoreboard players set %temp%0%lo reg 214
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_6" run scoreboard players set %temp%0%lo reg 215
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_7" run scoreboard players set %temp%0%lo reg 216
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_8" run scoreboard players set %temp%0%lo reg 217
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_9" run scoreboard players set %temp%0%lo reg 218
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_10" run scoreboard players set %temp%0%lo reg 219
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_5" run scoreboard players set %temp%0%lo reg 220
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_11" run scoreboard players set %temp%0%lo reg 221
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_12" run scoreboard players set %temp%0%lo reg 222
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_2" run scoreboard players set %temp%0%lo reg 223
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_13_1" run scoreboard players set %temp%0%lo reg 224
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_14_0" run scoreboard players set %temp%0%lo reg 225
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_14_2" run scoreboard players set %temp%0%lo reg 226
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_14_1" run scoreboard players set %temp%0%lo reg 227
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_15_0" run scoreboard players set %temp%0%lo reg 228
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_15_2" run scoreboard players set %temp%0%lo reg 229
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_15_3" run scoreboard players set %temp%0%lo reg 230
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_15_1" run scoreboard players set %temp%0%lo reg 231
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_16_0" run scoreboard players set %temp%0%lo reg 232
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_16_2" run scoreboard players set %temp%0%lo reg 233
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_16_1" run scoreboard players set %temp%0%lo reg 234
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_17_0" run scoreboard players set %temp%0%lo reg 235
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_17_2" run scoreboard players set %temp%0%lo reg 236
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_17_3" run scoreboard players set %temp%0%lo reg 237
	execute if data storage wasm:returnstack stack.data."wasmrunner:wasm_17_1" run scoreboard players set %temp%0%lo reg 238
	data modify storage wasm:returnstack stack set from storage wasm:returnstack stack.tail
	scoreboard players set %condtaken reg 0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 0 run function wasmrunner:wasm_5_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 1 run function wasmrunner:wasm_5_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 2 run function wasmrunner:wasm_5_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 3 run function wasmrunner:wasm_6_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 4 run function wasmrunner:wasm_6_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 5 run function wasmrunner:wasm_7_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 6 run function wasmrunner:wasm_7_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 7 run function wasmrunner:wasm_8_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 8 run function wasmrunner:wasm_8_6
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 9 run function wasmrunner:wasm_8_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 10 run function wasmrunner:wasm_8_4
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 11 run function wasmrunner:wasm_8_5
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 12 run function wasmrunner:wasm_8_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 13 run function wasmrunner:wasm_8_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 14 run function wasmrunner:wasm_9_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 15 run function wasmrunner:wasm_9_23
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 16 run function wasmrunner:wasm_9_22
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 17 run function wasmrunner:wasm_9_25
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 18 run function wasmrunner:wasm_9_24
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 19 run function wasmrunner:wasm_9_26
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 20 run function wasmrunner:wasm_9_21
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 21 run function wasmrunner:wasm_9_27
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 22 run function wasmrunner:wasm_9_20
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 23 run function wasmrunner:wasm_9_28
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 24 run function wasmrunner:wasm_9_19
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 25 run function wasmrunner:wasm_9_30
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 26 run function wasmrunner:wasm_9_31
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 27 run function wasmrunner:wasm_9_29
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 28 run function wasmrunner:wasm_9_32
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 29 run function wasmrunner:wasm_9_18
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 30 run function wasmrunner:wasm_9_34
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 31 run function wasmrunner:wasm_9_35
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 32 run function wasmrunner:wasm_9_33
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 33 run function wasmrunner:wasm_9_36
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 34 run function wasmrunner:wasm_9_17
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 35 run function wasmrunner:wasm_9_38
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 36 run function wasmrunner:wasm_9_39
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 37 run function wasmrunner:wasm_9_37
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 38 run function wasmrunner:wasm_9_40
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 39 run function wasmrunner:wasm_9_16
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 40 run function wasmrunner:wasm_9_41
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 41 run function wasmrunner:wasm_9_15
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 42 run function wasmrunner:wasm_9_42
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 43 run function wasmrunner:wasm_9_14
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 44 run function wasmrunner:wasm_9_52
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 45 run function wasmrunner:wasm_9_51
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 46 run function wasmrunner:wasm_9_53
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 47 run function wasmrunner:wasm_9_50
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 48 run function wasmrunner:wasm_9_54
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 49 run function wasmrunner:wasm_9_49
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 50 run function wasmrunner:wasm_9_55
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 51 run function wasmrunner:wasm_9_48
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 52 run function wasmrunner:wasm_9_56
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 53 run function wasmrunner:wasm_9_47
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 54 run function wasmrunner:wasm_9_57
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 55 run function wasmrunner:wasm_9_46
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 56 run function wasmrunner:wasm_9_58
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 57 run function wasmrunner:wasm_9_45
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 58 run function wasmrunner:wasm_9_59
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 59 run function wasmrunner:wasm_9_44
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 60 run function wasmrunner:wasm_9_60
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 61 run function wasmrunner:wasm_9_43
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 62 run function wasmrunner:wasm_9_61
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 63 run function wasmrunner:wasm_9_13
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 64 run function wasmrunner:wasm_9_63
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 65 run function wasmrunner:wasm_9_64
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 66 run function wasmrunner:wasm_9_62
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 67 run function wasmrunner:wasm_9_65
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 68 run function wasmrunner:wasm_9_12
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 69 run function wasmrunner:wasm_9_66
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 70 run function wasmrunner:wasm_9_11
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 71 run function wasmrunner:wasm_9_67
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 72 run function wasmrunner:wasm_9_10
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 73 run function wasmrunner:wasm_9_68
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 74 run function wasmrunner:wasm_9_9
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 75 run function wasmrunner:wasm_9_70
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 76 run function wasmrunner:wasm_9_71
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 77 run function wasmrunner:wasm_9_73
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 78 run function wasmrunner:wasm_9_75
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 79 run function wasmrunner:wasm_9_74
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 80 run function wasmrunner:wasm_9_72
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 81 run function wasmrunner:wasm_9_77
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 82 run function wasmrunner:wasm_9_79
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 83 run function wasmrunner:wasm_9_78
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 84 run function wasmrunner:wasm_9_76
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 85 run function wasmrunner:wasm_9_81
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 86 run function wasmrunner:wasm_9_83
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 87 run function wasmrunner:wasm_9_82
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 88 run function wasmrunner:wasm_9_80
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 89 run function wasmrunner:wasm_9_85
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 90 run function wasmrunner:wasm_9_87
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 91 run function wasmrunner:wasm_9_86
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 92 run function wasmrunner:wasm_9_84
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 93 run function wasmrunner:wasm_9_89
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 94 run function wasmrunner:wasm_9_91
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 95 run function wasmrunner:wasm_9_90
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 96 run function wasmrunner:wasm_9_88
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 97 run function wasmrunner:wasm_9_93
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 98 run function wasmrunner:wasm_9_95
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 99 run function wasmrunner:wasm_9_94
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 100 run function wasmrunner:wasm_9_92
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 101 run function wasmrunner:wasm_9_97
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 102 run function wasmrunner:wasm_9_99
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 103 run function wasmrunner:wasm_9_98
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 104 run function wasmrunner:wasm_9_96
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 105 run function wasmrunner:wasm_9_101
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 106 run function wasmrunner:wasm_9_103
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 107 run function wasmrunner:wasm_9_102
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 108 run function wasmrunner:wasm_9_100
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 109 run function wasmrunner:wasm_9_104
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 110 run function wasmrunner:wasm_9_69
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 111 run function wasmrunner:wasm_9_105
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 112 run function wasmrunner:wasm_9_8
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 113 run function wasmrunner:wasm_9_108
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 114 run function wasmrunner:wasm_9_107
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 115 run function wasmrunner:wasm_9_110
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 116 run function wasmrunner:wasm_9_111
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 117 run function wasmrunner:wasm_9_109
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 118 run function wasmrunner:wasm_9_112
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 119 run function wasmrunner:wasm_9_106
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 120 run function wasmrunner:wasm_9_114
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 121 run function wasmrunner:wasm_9_115
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 122 run function wasmrunner:wasm_9_113
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 123 run function wasmrunner:wasm_9_116
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 124 run function wasmrunner:wasm_9_7
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 125 run function wasmrunner:wasm_9_126
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 126 run function wasmrunner:wasm_9_125
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 127 run function wasmrunner:wasm_9_127
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 128 run function wasmrunner:wasm_9_128
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 129 run function wasmrunner:wasm_9_129
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 130 run function wasmrunner:wasm_9_130
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 131 run function wasmrunner:wasm_9_124
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 132 run function wasmrunner:wasm_9_131
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 133 run function wasmrunner:wasm_9_123
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 134 run function wasmrunner:wasm_9_133
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 135 run function wasmrunner:wasm_9_132
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 136 run function wasmrunner:wasm_9_134
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 137 run function wasmrunner:wasm_9_135
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 138 run function wasmrunner:wasm_9_122
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 139 run function wasmrunner:wasm_9_136
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 140 run function wasmrunner:wasm_9_121
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 141 run function wasmrunner:wasm_9_137
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 142 run function wasmrunner:wasm_9_120
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 143 run function wasmrunner:wasm_9_138
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 144 run function wasmrunner:wasm_9_119
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 145 run function wasmrunner:wasm_9_139
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 146 run function wasmrunner:wasm_9_118
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 147 run function wasmrunner:wasm_9_140
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 148 run function wasmrunner:wasm_9_117
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 149 run function wasmrunner:wasm_9_141
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 150 run function wasmrunner:wasm_9_142
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 151 run function wasmrunner:wasm_9_143
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 152 run function wasmrunner:wasm_9_6
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 153 run function wasmrunner:wasm_9_144
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 154 run function wasmrunner:wasm_9_5
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 155 run function wasmrunner:wasm_9_4
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 156 run function wasmrunner:wasm_9_146
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 157 run function wasmrunner:wasm_9_145
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 158 run function wasmrunner:wasm_9_148
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 159 run function wasmrunner:wasm_9_147
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 160 run function wasmrunner:wasm_9_150
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 161 run function wasmrunner:wasm_9_149
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 162 run function wasmrunner:wasm_9_152
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 163 run function wasmrunner:wasm_9_151
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 164 run function wasmrunner:wasm_9_154
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 165 run function wasmrunner:wasm_9_153
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 166 run function wasmrunner:wasm_9_156
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 167 run function wasmrunner:wasm_9_155
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 168 run function wasmrunner:wasm_9_158
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 169 run function wasmrunner:wasm_9_157
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 170 run function wasmrunner:wasm_9_160
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 171 run function wasmrunner:wasm_9_159
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 172 run function wasmrunner:wasm_9_162
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 173 run function wasmrunner:wasm_9_161
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 174 run function wasmrunner:wasm_9_164
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 175 run function wasmrunner:wasm_9_163
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 176 run function wasmrunner:wasm_9_166
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 177 run function wasmrunner:wasm_9_165
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 178 run function wasmrunner:wasm_9_168
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 179 run function wasmrunner:wasm_9_167
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 180 run function wasmrunner:wasm_9_170
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 181 run function wasmrunner:wasm_9_169
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 182 run function wasmrunner:wasm_9_173
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 183 run function wasmrunner:wasm_9_174
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 184 run function wasmrunner:wasm_9_172
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 185 run function wasmrunner:wasm_9_175
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 186 run function wasmrunner:wasm_9_171
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 187 run function wasmrunner:wasm_9_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 188 run function wasmrunner:wasm_9_177
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 189 run function wasmrunner:wasm_9_176
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 190 run function wasmrunner:wasm_9_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 191 run function wasmrunner:wasm_9_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 192 run function wasmrunner:wasm_10_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 193 run function wasmrunner:wasm_10_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 194 run function wasmrunner:wasm_11_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 195 run function wasmrunner:wasm_11_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 196 run function wasmrunner:wasm_11_6
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 197 run function wasmrunner:wasm_11_7
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 198 run function wasmrunner:wasm_11_5
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 199 run function wasmrunner:wasm_11_8
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 200 run function wasmrunner:wasm_11_9
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 201 run function wasmrunner:wasm_11_4
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 202 run function wasmrunner:wasm_11_10
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 203 run function wasmrunner:wasm_11_11
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 204 run function wasmrunner:wasm_11_12
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 205 run function wasmrunner:wasm_11_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 206 run function wasmrunner:wasm_11_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 207 run function wasmrunner:wasm_12_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 208 run function wasmrunner:wasm_12_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 209 run function wasmrunner:wasm_12_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 210 run function wasmrunner:wasm_13_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 211 run function wasmrunner:wasm_13_13
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 212 run function wasmrunner:wasm_13_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 213 run function wasmrunner:wasm_13_4
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 214 run function wasmrunner:wasm_13_14
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 215 run function wasmrunner:wasm_13_6
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 216 run function wasmrunner:wasm_13_7
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 217 run function wasmrunner:wasm_13_8
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 218 run function wasmrunner:wasm_13_9
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 219 run function wasmrunner:wasm_13_10
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 220 run function wasmrunner:wasm_13_5
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 221 run function wasmrunner:wasm_13_11
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 222 run function wasmrunner:wasm_13_12
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 223 run function wasmrunner:wasm_13_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 224 run function wasmrunner:wasm_13_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 225 run function wasmrunner:wasm_14_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 226 run function wasmrunner:wasm_14_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 227 run function wasmrunner:wasm_14_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 228 run function wasmrunner:wasm_15_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 229 run function wasmrunner:wasm_15_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 230 run function wasmrunner:wasm_15_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 231 run function wasmrunner:wasm_15_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 232 run function wasmrunner:wasm_16_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 233 run function wasmrunner:wasm_16_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 234 run function wasmrunner:wasm_16_1
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 235 run function wasmrunner:wasm_17_0
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 236 run function wasmrunner:wasm_17_2
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 237 run function wasmrunner:wasm_17_3
	execute if score %condtaken reg matches 0 run execute if score %temp%0%lo reg matches 238 run function wasmrunner:wasm_17_1
	scoreboard players set %condtaken reg 1

-------- func wasmrunner:_start --------
	data modify storage wasm:scratch stack.data set value {}
	data modify storage wasm:scratch stack.tail set from storage wasm:returnstack stack
	data modify storage wasm:returnstack stack set from storage wasm:scratch stack
	function wasmrunner:wasm_17_0

-------- func intrinsic:store_byte --------
	scoreboard players operation %tempsave_store_byte reg = %param2%0 reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	execute at @e[tag=memoryptr] store result score %param0%0 reg run data get block ~ ~ ~ RecordItem.tag.Memory 1
	scoreboard players operation %%temp0_store_byte reg = %ptr reg
	scoreboard players operation %%temp0_store_byte reg %= %%4 reg
	execute if score %%temp0_store_byte reg matches 0..0 run scoreboard players set %param1%0 reg -256
	execute if score %%temp0_store_byte reg matches 1..1 run scoreboard players set %param1%0 reg -65281
	execute if score %%temp0_store_byte reg matches 2..2 run scoreboard players set %param1%0 reg -16711681
	execute if score %%temp0_store_byte reg matches 3..3 run scoreboard players set %param1%0 reg 16777215
	function intrinsic:and
	execute if score %%temp0_store_byte reg matches 0..0 run scoreboard players operation %param2%0 reg *= %%1 reg
	execute if score %%temp0_store_byte reg matches 1..1 run scoreboard players operation %param2%0 reg *= %%256 reg
	execute if score %%temp0_store_byte reg matches 2..2 run scoreboard players operation %param2%0 reg *= %%65536 reg
	execute if score %%temp0_store_byte reg matches 3..3 run scoreboard players operation %param2%0 reg *= %%16777216 reg
	scoreboard players operation %return%0 reg += %param2%0 reg
	execute at @e[tag=memoryptr] store result block ~ ~ ~ RecordItem.tag.Memory int 1 run scoreboard players get %return%0 reg
	scoreboard players operation %param2%0 reg = %tempsave_store_byte reg

-------- func intrinsic:and --------
	scoreboard players set %return%0 reg 0
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner
	function intrinsic:and_inner

-------- func intrinsic:or_inner --------
	scoreboard players operation %return%0 reg += %return%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	execute if score %param1%0 reg matches ..-1 if score %param0%0 reg matches 0.. run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	scoreboard players operation %param1%0 reg += %param1%0 reg

-------- func intrinsic:load_word_unaligned --------
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %return%0 reg = %param0%0 reg
	scoreboard players add %ptr reg 1
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %param0%0 reg *= %%256 reg
	scoreboard players operation %return%0 reg += %param0%0 reg
	scoreboard players add %ptr reg 1
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %param0%0 reg *= %%65536 reg
	scoreboard players operation %return%0 reg += %param0%0 reg
	scoreboard players add %ptr reg 1
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %param0%0 reg *= %%16777216 reg
	scoreboard players operation %return%0 reg += %param0%0 reg

-------- func intrinsic:memset --------
	scoreboard players operation %ptr rust = %param0%0 rust
	scoreboard players operation %%temp1_memset rust = %param1%0 rust
	scoreboard players operation %%temp2_memset rust = %param2%0 rust
	scoreboard players operation %%temp3_memset rust = %ptr rust
	scoreboard players operation %%temp3_memset rust %= %%4 rust
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 1..1 run function intrinsic:store_byte
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 1..1 run scoreboard players add %ptr rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 1..1 run scoreboard players remove %%temp2_memset rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 1..1 run scoreboard players add %%temp3_memset rust 1
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 2..2 run function intrinsic:store_byte
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 2..2 run scoreboard players add %ptr rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 2..2 run scoreboard players remove %%temp2_memset rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 2..2 run scoreboard players add %%temp3_memset rust 1
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 3..3 run function intrinsic:store_byte
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 3..3 run scoreboard players add %ptr rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 3..3 run scoreboard players remove %%temp2_memset rust 1
	execute if score %%temp2_memset rust matches 1.. if score %%temp3_memset rust matches 3..3 run scoreboard players add %%temp3_memset rust 1
	scoreboard players operation %%temp4_memset rust = %%temp1_memset rust
	scoreboard players operation %%temp4_memset rust *= %%256 rust
	scoreboard players operation %%temp4_memset rust += %%temp1_memset rust
	scoreboard players operation %%temp4_memset rust *= %%256 rust
	scoreboard players operation %%temp4_memset rust += %%temp1_memset rust
	scoreboard players operation %%temp4_memset rust *= %%256 rust
	scoreboard players operation %%temp4_memset rust += %%temp1_memset rust
	execute if score %%temp2_memset rust matches 4.. run function intrinsic:memset_inner
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. run function intrinsic:store_byte
	execute if score %%temp2_memset rust matches 1.. run scoreboard players add %ptr rust 1
	execute if score %%temp2_memset rust matches 1.. run scoreboard players remove %%temp2_memset rust 1
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. run function intrinsic:store_byte
	execute if score %%temp2_memset rust matches 1.. run scoreboard players add %ptr rust 1
	execute if score %%temp2_memset rust matches 1.. run scoreboard players remove %%temp2_memset rust 1
	scoreboard players operation %param2%0 rust = %%temp1_memset rust
	execute if score %%temp2_memset rust matches 1.. run function intrinsic:store_byte

-------- func intrinsic:memcpy --------
	execute if score %param4%0 rust matches 1.. run setblock ~ ~1 ~ minecraft:air
	scoreboard players operation %%temp0_memcpy rust = %param0%0 rust
	scoreboard players operation %%temp1_memcpy rust = %param1%0 rust
	scoreboard players operation %%temp2_memcpy rust = %param2%0 rust
	scoreboard players operation %%temptotal_memcpy rust = %%temp2_memcpy rust
	scoreboard players operation %%temp2_memcpy rust < %%1024 rust
	scoreboard players operation %%temptotal_memcpy rust -= %%temp2_memcpy rust
	scoreboard players operation %%tempbytes_memcpy rust = %%temp0_memcpy rust
	scoreboard players operation %%tempbytes_memcpy rust %= %%4 rust
	execute if score %%temp2_memcpy rust matches 1.. if score %%tempbytes_memcpy rust matches 1..1 run function intrinsic:memcpy/next_byte
	execute if score %%temp2_memcpy rust matches 1.. if score %%tempbytes_memcpy rust matches 2..2 run function intrinsic:memcpy/next_byte
	execute if score %%temp2_memcpy rust matches 1.. if score %%tempbytes_memcpy rust matches 3..3 run function intrinsic:memcpy/next_byte
	execute if score %%temp2_memcpy rust matches 4.. run function intrinsic:memcpy/inner
	execute if score %%temp2_memcpy rust matches 1.. run function intrinsic:memcpy/next_byte
	execute if score %%temp2_memcpy rust matches 1.. run function intrinsic:memcpy/next_byte
	execute if score %%temp2_memcpy rust matches 1.. run function intrinsic:memcpy/next_byte
	scoreboard players operation %param0%0 rust = %%temp0_memcpy rust
	scoreboard players operation %param1%0 rust = %%temp1_memcpy rust
	scoreboard players operation %param2%0 rust = %%temptotal_memcpy rust
	execute if score %param2%0 rust matches 1.. if score %param4%0 rust matches 1..1 run setblock ~ ~1 ~ minecraft:redstone_block destroy
	execute if score %param2%0 rust matches 0..0 if score %param4%0 rust matches 1..1 run function intrinsic:pop_and_branch

-------- func intrinsic:i64_srem --------
	function intrinsic:i64divrem/wasm_3_0

-------- func intrinsic:i64divrem/wasm_3_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[1] int 1 run scoreboard players get %param%0%hi reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[3] int 1 run scoreboard players get %param%1%hi reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[15] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[16] int 1 run scoreboard players get %const%0 reg
	scoreboard players set %work%3%0%lo%temp reg 63
	scoreboard players set %work%3%0%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%3%0%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%3%0%hi%temp reg
	execute store result score %work%3%1%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%3%1%hi%temp reg run data get storage wasm:localstack stack.data[3]
	execute store result score %work%3%2%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%3%2%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %work%3%3%lo%temp reg 63
	scoreboard players set %work%3%3%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%3%2%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%3%2%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%3%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:ashr_i64
	scoreboard players operation %work%3%4%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%3%4%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%3%4%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%3%4%hi%temp reg
	scoreboard players operation %work%3%5%lo%temp reg = %work%3%1%lo%temp reg
	scoreboard players operation %work%3%5%hi%temp reg = %work%3%1%hi%temp reg
	scoreboard players operation %work%3%5%lo%temp reg += %work%3%4%lo%temp reg
	scoreboard players operation %work%3%5%hi%temp reg += %work%3%4%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%1%lo%temp reg matches ..-1 if score %work%3%4%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%1%lo%temp reg matches ..-1 if score %work%3%4%lo%temp reg matches 0.. if score %work%3%5%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%1%lo%temp reg matches 0.. if score %work%3%4%lo%temp reg matches ..-1 if score %work%3%5%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%5%hi%temp reg += %temp%10%lo reg
	execute store result score %work%3%6%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%3%6%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%3%5%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%6%lo%temp reg
	function intrinsic:xor
	scoreboard players operation %work%3%7%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%3%5%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%6%hi%temp reg
	function intrinsic:xor
	scoreboard players operation %work%3%7%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%3%7%lo%temp reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %work%3%7%hi%temp reg
	execute store result score %work%3%8%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%3%8%hi%temp reg run data get storage wasm:localstack stack.data[1]
	execute store result score %work%3%9%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%3%9%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%3%10%lo%temp reg 63
	scoreboard players set %work%3%10%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%3%9%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%3%9%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%10%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:ashr_i64
	scoreboard players operation %work%3%11%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%3%11%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%3%11%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%3%11%hi%temp reg
	scoreboard players operation %work%3%12%lo%temp reg = %work%3%8%lo%temp reg
	scoreboard players operation %work%3%12%hi%temp reg = %work%3%8%hi%temp reg
	scoreboard players operation %work%3%12%lo%temp reg += %work%3%11%lo%temp reg
	scoreboard players operation %work%3%12%hi%temp reg += %work%3%11%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%8%lo%temp reg matches ..-1 if score %work%3%11%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%8%lo%temp reg matches ..-1 if score %work%3%11%lo%temp reg matches 0.. if score %work%3%12%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%8%lo%temp reg matches 0.. if score %work%3%11%lo%temp reg matches ..-1 if score %work%3%12%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%12%hi%temp reg += %temp%10%lo reg
	execute store result score %work%3%13%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%3%13%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%3%12%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%13%lo%temp reg
	function intrinsic:xor
	scoreboard players operation %work%3%14%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%3%12%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%13%hi%temp reg
	function intrinsic:xor
	scoreboard players operation %work%3%14%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%3%14%lo%temp reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %work%3%14%hi%temp reg
	scoreboard players set %work%3%15%lo%temp reg 0
	scoreboard players set %work%3%15%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%3%15%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%3%15%hi%temp reg
	scoreboard players set %work%3%16%lo%temp reg 0
	scoreboard players set %work%3%16%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%3%16%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%3%16%hi%temp reg
	function intrinsic:i64divrem/wasm_3_2
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_2_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[1] int 1 run scoreboard players get %param%0%hi reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[3] int 1 run scoreboard players get %param%1%hi reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[15] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[16] int 1 run scoreboard players get %const%0 reg
	scoreboard players set %work%2%0%lo%temp reg 63
	scoreboard players set %work%2%0%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%2%0%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%2%0%hi%temp reg
	execute store result score %work%2%1%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%2%1%hi%temp reg run data get storage wasm:localstack stack.data[3]
	execute store result score %work%2%2%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%2%2%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %work%2%3%lo%temp reg 63
	scoreboard players set %work%2%3%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%2%2%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%2%2%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%3%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:ashr_i64
	scoreboard players operation %work%2%4%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%2%4%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%2%4%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%2%4%hi%temp reg
	scoreboard players operation %work%2%5%lo%temp reg = %work%2%1%lo%temp reg
	scoreboard players operation %work%2%5%hi%temp reg = %work%2%1%hi%temp reg
	scoreboard players operation %work%2%5%lo%temp reg += %work%2%4%lo%temp reg
	scoreboard players operation %work%2%5%hi%temp reg += %work%2%4%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%2%1%lo%temp reg matches ..-1 if score %work%2%4%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%1%lo%temp reg matches ..-1 if score %work%2%4%lo%temp reg matches 0.. if score %work%2%5%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%1%lo%temp reg matches 0.. if score %work%2%4%lo%temp reg matches ..-1 if score %work%2%5%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%2%5%hi%temp reg += %temp%10%lo reg
	execute store result score %work%2%6%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%2%6%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%2%5%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%2%6%lo%temp reg
	function intrinsic:xor
	scoreboard players operation %work%2%7%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%2%5%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%6%hi%temp reg
	function intrinsic:xor
	scoreboard players operation %work%2%7%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%2%7%lo%temp reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %work%2%7%hi%temp reg
	execute store result score %work%2%8%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%2%8%hi%temp reg run data get storage wasm:localstack stack.data[1]
	execute store result score %work%2%9%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%2%9%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%2%10%lo%temp reg 63
	scoreboard players set %work%2%10%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%2%9%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%2%9%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%10%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:ashr_i64
	scoreboard players operation %work%2%11%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%2%11%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%2%11%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%2%11%hi%temp reg
	scoreboard players operation %work%2%12%lo%temp reg = %work%2%8%lo%temp reg
	scoreboard players operation %work%2%12%hi%temp reg = %work%2%8%hi%temp reg
	scoreboard players operation %work%2%12%lo%temp reg += %work%2%11%lo%temp reg
	scoreboard players operation %work%2%12%hi%temp reg += %work%2%11%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%2%8%lo%temp reg matches ..-1 if score %work%2%11%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%8%lo%temp reg matches ..-1 if score %work%2%11%lo%temp reg matches 0.. if score %work%2%12%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%8%lo%temp reg matches 0.. if score %work%2%11%lo%temp reg matches ..-1 if score %work%2%12%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%2%12%hi%temp reg += %temp%10%lo reg
	execute store result score %work%2%13%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%2%13%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%2%12%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%2%13%lo%temp reg
	function intrinsic:xor
	scoreboard players operation %work%2%14%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%2%12%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%13%hi%temp reg
	function intrinsic:xor
	scoreboard players operation %work%2%14%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%2%14%lo%temp reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %work%2%14%hi%temp reg
	scoreboard players set %work%2%15%lo%temp reg 0
	scoreboard players set %work%2%15%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%2%15%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%2%15%hi%temp reg
	scoreboard players set %work%2%16%lo%temp reg 0
	scoreboard players set %work%2%16%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%2%16%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%2%16%hi%temp reg
	function intrinsic:i64divrem/wasm_2_2
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_0_2 --------
	execute store result score %work%0%3%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%0%3%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players set %work%0%4%lo%temp reg 1
	scoreboard players set %work%0%4%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%0%3%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%0%3%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%0%4%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%0%5%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%0%5%hi%temp reg = %param0%1 reg
	scoreboard players set %work%0%6%lo%temp reg 1
	scoreboard players set %work%0%6%hi%temp reg 0
	execute store result score %work%0%7%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%0%7%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players operation %param0%0 reg = %work%0%6%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%0%6%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%0%7%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%0%8%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%0%8%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %work%0%8%lo%temp reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %work%0%8%hi%temp reg
	execute store result score %work%0%9%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%0%9%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players operation %param0%0 reg = %work%0%8%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%0%9%lo%temp reg
	function intrinsic:and
	scoreboard players operation %work%0%10%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%0%8%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%0%9%hi%temp reg
	function intrinsic:and
	scoreboard players operation %work%0%10%hi%temp reg = %return%0 reg
	scoreboard players set %work%0%11%lo%temp reg 0
	scoreboard players set %work%0%11%hi%temp reg 0
	execute store success score %work%0%12%lo%temp reg unless score %work%0%10%lo%temp reg = %work%0%11%lo%temp reg
	execute unless score %work%0%12%lo%temp reg matches 1 run execute store success score %work%0%12%lo%temp reg unless score %work%0%10%hi%temp reg = %work%0%11%hi%temp reg
	scoreboard players operation %work%0%13%lo%temp reg = %work%0%12%lo%temp reg
	scoreboard players set %work%0%13%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%0%5%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%0%13%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%0%14%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%0%5%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%0%13%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%0%14%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%0%14%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%0%14%hi%temp reg
	scoreboard players set %work%0%15%lo%temp reg 0
	scoreboard players set %work%0%15%hi%temp reg 0
	execute store result score %work%0%16%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%0%16%hi%temp reg run data get storage wasm:localstack stack.data[3]
	execute store result score %work%0%17%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%0%17%hi%temp reg run data get storage wasm:localstack stack.data[7]
	execute store result score %work%0%18%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%0%18%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %temp%3%lo reg 0
	execute if score %work%0%17%hi%temp reg matches ..-1 if score %work%0%18%hi%temp reg matches 0.. run scoreboard players set %temp%3%lo reg 0
	execute if score %work%0%17%hi%temp reg matches 0.. if score %work%0%18%hi%temp reg matches ..-1 run scoreboard players set %temp%3%lo reg 1
	execute if score %work%0%17%hi%temp reg matches ..-1 if score %work%0%18%hi%temp reg matches ..-1 if score %work%0%17%hi%temp reg < %work%0%18%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	execute if score %work%0%17%hi%temp reg matches 0.. if score %work%0%18%hi%temp reg matches 0.. if score %work%0%17%hi%temp reg < %work%0%18%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	scoreboard players set %temp%4%lo reg 0
	execute if score %work%0%18%hi%temp reg matches ..-1 if score %work%0%17%hi%temp reg matches 0.. run scoreboard players set %temp%4%lo reg 0
	execute if score %work%0%18%hi%temp reg matches 0.. if score %work%0%17%hi%temp reg matches ..-1 run scoreboard players set %temp%4%lo reg 1
	execute if score %work%0%18%hi%temp reg matches ..-1 if score %work%0%17%hi%temp reg matches ..-1 if score %work%0%18%hi%temp reg < %work%0%17%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute if score %work%0%18%hi%temp reg matches 0.. if score %work%0%17%hi%temp reg matches 0.. if score %work%0%18%hi%temp reg < %work%0%17%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute store success score %temp%5%lo reg if score %work%0%17%hi%temp reg = %work%0%18%hi%temp reg
	scoreboard players set %temp%6%lo reg 0
	execute if score %work%0%17%lo%temp reg matches ..-1 if score %work%0%18%lo%temp reg matches 0.. run scoreboard players set %temp%6%lo reg 0
	execute if score %work%0%17%lo%temp reg matches 0.. if score %work%0%18%lo%temp reg matches ..-1 run scoreboard players set %temp%6%lo reg 1
	execute if score %work%0%17%lo%temp reg matches ..-1 if score %work%0%18%lo%temp reg matches ..-1 if score %work%0%17%lo%temp reg < %work%0%18%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %work%0%17%lo%temp reg matches 0.. if score %work%0%18%lo%temp reg matches 0.. if score %work%0%17%lo%temp reg < %work%0%18%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %temp%3%lo reg matches 1.. run scoreboard players set %work%0%19%lo%temp reg 1
	execute if score %temp%4%lo reg matches 1.. run scoreboard players set %work%0%19%lo%temp reg 0
	execute if score %temp%5%lo reg matches 1.. run scoreboard players operation %work%0%19%lo%temp reg = %temp%6%lo reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%0%19%lo%temp reg
	scoreboard players operation %work%0%20%lo%temp reg = %work%0%16%lo%temp reg
	execute unless score %work%0%19%lo%temp reg matches 0 run scoreboard players operation %work%0%20%lo%temp reg = %work%0%15%lo%temp reg
	scoreboard players operation %work%0%20%hi%temp reg = %work%0%16%hi%temp reg
	execute unless score %work%0%19%lo%temp reg matches 0 run scoreboard players operation %work%0%20%hi%temp reg = %work%0%15%hi%temp reg
	scoreboard players operation %temp%11%lo reg = %work%0%20%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%0%20%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%0%21%lo%temp reg = %work%0%14%lo%temp reg
	scoreboard players operation %work%0%21%hi%temp reg = %work%0%14%hi%temp reg
	scoreboard players operation %work%0%21%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%0%21%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%0%14%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%0%14%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%0%21%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%0%14%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%0%21%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%0%21%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%0%21%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%0%21%hi%temp reg
	scoreboard players set %work%0%22%lo%temp reg 0
	scoreboard players set %work%0%22%hi%temp reg 0
	execute store result score %work%0%23%lo%temp reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%0%23%hi%temp reg run data get storage wasm:localstack stack.data[11]
	execute store result score %work%0%24%lo%temp reg run data get storage wasm:localstack stack.data[12]
	scoreboard players operation %work%0%25%lo%temp reg = %work%0%23%lo%temp reg
	execute unless score %work%0%24%lo%temp reg matches 0 run scoreboard players operation %work%0%25%lo%temp reg = %work%0%22%lo%temp reg
	scoreboard players operation %work%0%25%hi%temp reg = %work%0%23%hi%temp reg
	execute unless score %work%0%24%lo%temp reg matches 0 run scoreboard players operation %work%0%25%hi%temp reg = %work%0%22%hi%temp reg
	execute store result score %work%0%26%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%0%26%hi%temp reg run data get storage wasm:localstack stack.data[9]
	scoreboard players operation %param0%0 reg = %work%0%25%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%0%26%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%0%27%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%0%25%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%0%26%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%0%27%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%0%27%lo%temp reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %work%0%27%hi%temp reg
	execute store result score %work%0%28%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%0%28%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players set %work%0%29%lo%temp reg -1
	scoreboard players set %work%0%29%hi%temp reg -1
	scoreboard players operation %work%0%30%lo%temp reg = %work%0%28%lo%temp reg
	scoreboard players operation %work%0%30%hi%temp reg = %work%0%28%hi%temp reg
	scoreboard players operation %work%0%30%lo%temp reg += %work%0%29%lo%temp reg
	scoreboard players operation %work%0%30%hi%temp reg += %work%0%29%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%0%28%lo%temp reg matches ..-1 if score %work%0%29%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%0%28%lo%temp reg matches ..-1 if score %work%0%29%lo%temp reg matches 0.. if score %work%0%30%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%0%28%lo%temp reg matches 0.. if score %work%0%29%lo%temp reg matches ..-1 if score %work%0%30%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%0%30%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%0%30%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%0%30%hi%temp reg
	scoreboard players set %work%0%31%lo%temp reg -1
	scoreboard players set %work%0%31%hi%temp reg -1
	execute store success score %work%0%32%lo%temp reg unless score %work%0%30%lo%temp reg = %work%0%31%lo%temp reg
	execute unless score %work%0%32%lo%temp reg matches 1 run execute store success score %work%0%32%lo%temp reg unless score %work%0%30%hi%temp reg = %work%0%31%hi%temp reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%0%32%lo%temp reg matches 0 run function intrinsic:i64divrem/wasm_0_2
	execute if score %condtaken reg matches 0 run function intrinsic:i64divrem/wasm_0_3
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_2_1 --------
	scoreboard players operation %return%0%lo reg = %work%2%63%lo%temp reg
	scoreboard players operation %return%0%hi reg = %work%2%63%hi%temp reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_1_3 --------
	execute store result score %work%1%23%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%1%23%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %temp%0%lo reg = %work%1%23%lo%temp reg
	scoreboard players operation %temp%0%hi reg = %work%1%23%hi%temp reg
	scoreboard players operation %work%1%24%lo%temp reg = %temp%0%lo reg
	scoreboard players operation %work%1%24%hi%temp reg = %temp%0%hi reg
	function intrinsic:i64divrem/wasm_1_1
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_3_1 --------
	scoreboard players operation %return%0%lo reg = %work%3%67%lo%temp reg
	scoreboard players operation %return%0%hi reg = %work%3%67%hi%temp reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_3_3 --------
	execute store result score %work%3%47%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%3%47%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%3%48%lo%temp reg 0
	scoreboard players set %work%3%48%hi%temp reg 0
	execute store result score %work%3%49%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%3%49%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %temp%11%lo reg = %work%3%49%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%3%49%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%3%50%lo%temp reg = %work%3%48%lo%temp reg
	scoreboard players operation %work%3%50%hi%temp reg = %work%3%48%hi%temp reg
	scoreboard players operation %work%3%50%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%3%50%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%48%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%48%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%3%50%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%48%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%3%50%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%50%hi%temp reg += %temp%10%lo reg
	execute store result score %work%3%51%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%3%51%hi%temp reg run data get storage wasm:localstack stack.data[7]
	execute store result score %work%3%52%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%3%52%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%3%53%lo%temp reg -1
	scoreboard players set %work%3%53%hi%temp reg -1
	scoreboard players set %work%3%54%lo%temp reg 0
	execute if score %work%3%53%lo%temp reg matches ..-1 if score %work%3%52%lo%temp reg matches 0.. run scoreboard players set %work%3%54%lo%temp reg 0
	execute if score %work%3%53%lo%temp reg matches 0.. if score %work%3%52%lo%temp reg matches ..-1 run scoreboard players set %work%3%54%lo%temp reg 1
	execute if score %work%3%53%lo%temp reg matches ..-1 if score %work%3%52%lo%temp reg matches ..-1 if score %work%3%53%lo%temp reg < %work%3%52%lo%temp reg run scoreboard players set %work%3%54%lo%temp reg 1
	execute if score %work%3%53%lo%temp reg matches 0.. if score %work%3%52%lo%temp reg matches 0.. if score %work%3%53%lo%temp reg < %work%3%52%lo%temp reg run scoreboard players set %work%3%54%lo%temp reg 1
	execute if score %work%3%53%hi%temp reg < %work%3%52%hi%temp reg run scoreboard players set %work%3%54%lo%temp reg 1
	execute if score %work%3%53%hi%temp reg > %work%3%52%hi%temp reg run scoreboard players set %work%3%54%lo%temp reg 0
	execute store result score %work%3%55%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%3%55%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%3%56%lo%temp reg 63
	scoreboard players set %work%3%56%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%3%55%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%3%55%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%56%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:lshr_i64
	scoreboard players operation %work%3%57%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%3%57%hi%temp reg = %param0%1 reg
	scoreboard players operation %work%3%58%lo%temp reg = %work%3%57%lo%temp reg
	execute store result score %work%3%59%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%3%59%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %work%3%60%lo%temp reg 0
	scoreboard players set %work%3%60%hi%temp reg 0
	scoreboard players set %work%3%61%lo%temp reg 0
	execute if score %work%3%59%lo%temp reg matches ..-1 if score %work%3%60%lo%temp reg matches 0.. run scoreboard players set %work%3%61%lo%temp reg 0
	execute if score %work%3%59%lo%temp reg matches 0.. if score %work%3%60%lo%temp reg matches ..-1 run scoreboard players set %work%3%61%lo%temp reg 1
	execute if score %work%3%59%lo%temp reg matches ..-1 if score %work%3%60%lo%temp reg matches ..-1 if score %work%3%59%lo%temp reg < %work%3%60%lo%temp reg run scoreboard players set %work%3%61%lo%temp reg 1
	execute if score %work%3%59%lo%temp reg matches 0.. if score %work%3%60%lo%temp reg matches 0.. if score %work%3%59%lo%temp reg < %work%3%60%lo%temp reg run scoreboard players set %work%3%61%lo%temp reg 1
	execute if score %work%3%59%hi%temp reg < %work%3%60%hi%temp reg run scoreboard players set %work%3%61%lo%temp reg 1
	execute if score %work%3%59%hi%temp reg > %work%3%60%hi%temp reg run scoreboard players set %work%3%61%lo%temp reg 0
	scoreboard players operation %work%3%62%lo%temp reg = %work%3%58%lo%temp reg
	execute unless score %work%3%61%lo%temp reg matches 0 run scoreboard players operation %work%3%62%lo%temp reg = %work%3%54%lo%temp reg
	scoreboard players operation %work%3%63%lo%temp reg = %work%3%51%lo%temp reg
	execute unless score %work%3%62%lo%temp reg matches 0 run scoreboard players operation %work%3%63%lo%temp reg = %work%3%50%lo%temp reg
	scoreboard players operation %work%3%63%hi%temp reg = %work%3%51%hi%temp reg
	execute unless score %work%3%62%lo%temp reg matches 0 run scoreboard players operation %work%3%63%hi%temp reg = %work%3%50%hi%temp reg
	execute store result score %work%3%64%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%3%64%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players operation %param0%0 reg = %work%3%63%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%64%lo%temp reg
	function intrinsic:mul_32_to_64
	scoreboard players operation %work%3%65%lo%temp reg = %return%0 reg
	scoreboard players operation %work%3%65%hi%temp reg = %return%1 reg
	scoreboard players operation %temp%1000%lo reg = %work%3%63%lo%temp reg
	scoreboard players operation %temp%1000%lo reg *= %work%3%64%hi%temp reg
	scoreboard players operation %work%3%65%hi%temp reg += %temp%1000%lo reg
	scoreboard players operation %temp%1000%lo reg = %work%3%63%hi%temp reg
	scoreboard players operation %temp%1000%lo reg *= %work%3%64%lo%temp reg
	scoreboard players operation %work%3%65%hi%temp reg += %temp%1000%lo reg
	scoreboard players operation %temp%11%lo reg = %work%3%65%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%3%65%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%3%66%lo%temp reg = %work%3%47%lo%temp reg
	scoreboard players operation %work%3%66%hi%temp reg = %work%3%47%hi%temp reg
	scoreboard players operation %work%3%66%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%3%66%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%47%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%47%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%3%66%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%47%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%3%66%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%66%hi%temp reg += %temp%10%lo reg
	scoreboard players operation %temp%0%lo reg = %work%3%66%lo%temp reg
	scoreboard players operation %temp%0%hi reg = %work%3%66%hi%temp reg
	scoreboard players operation %work%3%67%lo%temp reg = %temp%0%lo reg
	scoreboard players operation %work%3%67%hi%temp reg = %temp%0%hi reg
	function intrinsic:i64divrem/wasm_3_1
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_2_3 --------
	scoreboard players set %work%2%47%lo%temp reg 0
	scoreboard players set %work%2%47%hi%temp reg 0
	execute store result score %work%2%48%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%2%48%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %temp%11%lo reg = %work%2%48%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%2%48%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%2%49%lo%temp reg = %work%2%47%lo%temp reg
	scoreboard players operation %work%2%49%hi%temp reg = %work%2%47%hi%temp reg
	scoreboard players operation %work%2%49%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%2%49%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%2%47%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%47%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%2%49%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%47%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%2%49%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%2%49%hi%temp reg += %temp%10%lo reg
	execute store result score %work%2%50%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%2%50%hi%temp reg run data get storage wasm:localstack stack.data[7]
	execute store result score %work%2%51%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%2%51%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%2%52%lo%temp reg -1
	scoreboard players set %work%2%52%hi%temp reg -1
	scoreboard players set %work%2%53%lo%temp reg 0
	execute if score %work%2%52%lo%temp reg matches ..-1 if score %work%2%51%lo%temp reg matches 0.. run scoreboard players set %work%2%53%lo%temp reg 0
	execute if score %work%2%52%lo%temp reg matches 0.. if score %work%2%51%lo%temp reg matches ..-1 run scoreboard players set %work%2%53%lo%temp reg 1
	execute if score %work%2%52%lo%temp reg matches ..-1 if score %work%2%51%lo%temp reg matches ..-1 if score %work%2%52%lo%temp reg < %work%2%51%lo%temp reg run scoreboard players set %work%2%53%lo%temp reg 1
	execute if score %work%2%52%lo%temp reg matches 0.. if score %work%2%51%lo%temp reg matches 0.. if score %work%2%52%lo%temp reg < %work%2%51%lo%temp reg run scoreboard players set %work%2%53%lo%temp reg 1
	execute if score %work%2%52%hi%temp reg < %work%2%51%hi%temp reg run scoreboard players set %work%2%53%lo%temp reg 1
	execute if score %work%2%52%hi%temp reg > %work%2%51%hi%temp reg run scoreboard players set %work%2%53%lo%temp reg 0
	execute store result score %work%2%54%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%2%54%hi%temp reg run data get storage wasm:localstack stack.data[1]
	scoreboard players set %work%2%55%lo%temp reg 63
	scoreboard players set %work%2%55%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%2%54%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%2%54%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%55%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:lshr_i64
	scoreboard players operation %work%2%56%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%2%56%hi%temp reg = %param0%1 reg
	scoreboard players operation %work%2%57%lo%temp reg = %work%2%56%lo%temp reg
	execute store result score %work%2%58%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%2%58%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %work%2%59%lo%temp reg 0
	scoreboard players set %work%2%59%hi%temp reg 0
	scoreboard players set %work%2%60%lo%temp reg 0
	execute if score %work%2%58%lo%temp reg matches ..-1 if score %work%2%59%lo%temp reg matches 0.. run scoreboard players set %work%2%60%lo%temp reg 0
	execute if score %work%2%58%lo%temp reg matches 0.. if score %work%2%59%lo%temp reg matches ..-1 run scoreboard players set %work%2%60%lo%temp reg 1
	execute if score %work%2%58%lo%temp reg matches ..-1 if score %work%2%59%lo%temp reg matches ..-1 if score %work%2%58%lo%temp reg < %work%2%59%lo%temp reg run scoreboard players set %work%2%60%lo%temp reg 1
	execute if score %work%2%58%lo%temp reg matches 0.. if score %work%2%59%lo%temp reg matches 0.. if score %work%2%58%lo%temp reg < %work%2%59%lo%temp reg run scoreboard players set %work%2%60%lo%temp reg 1
	execute if score %work%2%58%hi%temp reg < %work%2%59%hi%temp reg run scoreboard players set %work%2%60%lo%temp reg 1
	execute if score %work%2%58%hi%temp reg > %work%2%59%hi%temp reg run scoreboard players set %work%2%60%lo%temp reg 0
	scoreboard players operation %work%2%61%lo%temp reg = %work%2%57%lo%temp reg
	execute unless score %work%2%60%lo%temp reg matches 0 run scoreboard players operation %work%2%61%lo%temp reg = %work%2%53%lo%temp reg
	scoreboard players operation %work%2%62%lo%temp reg = %work%2%50%lo%temp reg
	execute unless score %work%2%61%lo%temp reg matches 0 run scoreboard players operation %work%2%62%lo%temp reg = %work%2%49%lo%temp reg
	scoreboard players operation %work%2%62%hi%temp reg = %work%2%50%hi%temp reg
	execute unless score %work%2%61%lo%temp reg matches 0 run scoreboard players operation %work%2%62%hi%temp reg = %work%2%49%hi%temp reg
	scoreboard players operation %temp%0%lo reg = %work%2%62%lo%temp reg
	scoreboard players operation %temp%0%hi reg = %work%2%62%hi%temp reg
	scoreboard players operation %work%2%63%lo%temp reg = %temp%0%lo reg
	scoreboard players operation %work%2%63%hi%temp reg = %temp%0%hi reg
	function intrinsic:i64divrem/wasm_2_1
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_2_2 --------
	execute store result score %work%2%17%lo%temp reg run data get storage wasm:localstack stack.data[12]
	execute store result score %work%2%17%hi%temp reg run data get storage wasm:localstack stack.data[13]
	scoreboard players set %work%2%18%lo%temp reg 1
	scoreboard players set %work%2%18%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%2%17%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%2%17%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%18%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%2%19%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%2%19%hi%temp reg = %param0%1 reg
	scoreboard players set %work%2%20%lo%temp reg 1
	scoreboard players set %work%2%20%hi%temp reg 0
	execute store result score %work%2%21%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%2%21%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players operation %param0%0 reg = %work%2%20%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%2%20%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%21%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%2%22%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%2%22%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%2%22%lo%temp reg
	execute store result storage wasm:localstack stack.data[15] int 1 run scoreboard players get %work%2%22%hi%temp reg
	execute store result score %work%2%23%lo%temp reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%2%23%hi%temp reg run data get storage wasm:localstack stack.data[11]
	scoreboard players operation %param0%0 reg = %work%2%22%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%2%23%lo%temp reg
	function intrinsic:and
	scoreboard players operation %work%2%24%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%2%22%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%23%hi%temp reg
	function intrinsic:and
	scoreboard players operation %work%2%24%hi%temp reg = %return%0 reg
	scoreboard players set %work%2%25%lo%temp reg 0
	scoreboard players set %work%2%25%hi%temp reg 0
	execute store success score %work%2%26%lo%temp reg unless score %work%2%24%lo%temp reg = %work%2%25%lo%temp reg
	execute unless score %work%2%26%lo%temp reg matches 1 run execute store success score %work%2%26%lo%temp reg unless score %work%2%24%hi%temp reg = %work%2%25%hi%temp reg
	scoreboard players operation %work%2%27%lo%temp reg = %work%2%26%lo%temp reg
	scoreboard players set %work%2%27%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%2%19%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%2%27%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%2%28%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%2%19%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%27%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%2%28%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%2%28%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%2%28%hi%temp reg
	scoreboard players set %work%2%29%lo%temp reg 0
	scoreboard players set %work%2%29%hi%temp reg 0
	execute store result score %work%2%30%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%2%30%hi%temp reg run data get storage wasm:localstack stack.data[9]
	execute store result score %work%2%31%lo%temp reg run data get storage wasm:localstack stack.data[12]
	execute store result score %work%2%31%hi%temp reg run data get storage wasm:localstack stack.data[13]
	execute store result score %work%2%32%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%2%32%hi%temp reg run data get storage wasm:localstack stack.data[9]
	scoreboard players set %temp%3%lo reg 0
	execute if score %work%2%31%hi%temp reg matches ..-1 if score %work%2%32%hi%temp reg matches 0.. run scoreboard players set %temp%3%lo reg 0
	execute if score %work%2%31%hi%temp reg matches 0.. if score %work%2%32%hi%temp reg matches ..-1 run scoreboard players set %temp%3%lo reg 1
	execute if score %work%2%31%hi%temp reg matches ..-1 if score %work%2%32%hi%temp reg matches ..-1 if score %work%2%31%hi%temp reg < %work%2%32%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	execute if score %work%2%31%hi%temp reg matches 0.. if score %work%2%32%hi%temp reg matches 0.. if score %work%2%31%hi%temp reg < %work%2%32%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	scoreboard players set %temp%4%lo reg 0
	execute if score %work%2%32%hi%temp reg matches ..-1 if score %work%2%31%hi%temp reg matches 0.. run scoreboard players set %temp%4%lo reg 0
	execute if score %work%2%32%hi%temp reg matches 0.. if score %work%2%31%hi%temp reg matches ..-1 run scoreboard players set %temp%4%lo reg 1
	execute if score %work%2%32%hi%temp reg matches ..-1 if score %work%2%31%hi%temp reg matches ..-1 if score %work%2%32%hi%temp reg < %work%2%31%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute if score %work%2%32%hi%temp reg matches 0.. if score %work%2%31%hi%temp reg matches 0.. if score %work%2%32%hi%temp reg < %work%2%31%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute store success score %temp%5%lo reg if score %work%2%31%hi%temp reg = %work%2%32%hi%temp reg
	scoreboard players set %temp%6%lo reg 0
	execute if score %work%2%31%lo%temp reg matches ..-1 if score %work%2%32%lo%temp reg matches 0.. run scoreboard players set %temp%6%lo reg 0
	execute if score %work%2%31%lo%temp reg matches 0.. if score %work%2%32%lo%temp reg matches ..-1 run scoreboard players set %temp%6%lo reg 1
	execute if score %work%2%31%lo%temp reg matches ..-1 if score %work%2%32%lo%temp reg matches ..-1 if score %work%2%31%lo%temp reg < %work%2%32%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %work%2%31%lo%temp reg matches 0.. if score %work%2%32%lo%temp reg matches 0.. if score %work%2%31%lo%temp reg < %work%2%32%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %temp%3%lo reg matches 1.. run scoreboard players set %work%2%33%lo%temp reg 1
	execute if score %temp%4%lo reg matches 1.. run scoreboard players set %work%2%33%lo%temp reg 0
	execute if score %temp%5%lo reg matches 1.. run scoreboard players operation %work%2%33%lo%temp reg = %temp%6%lo reg
	execute store result storage wasm:localstack stack.data[16] int 1 run scoreboard players get %work%2%33%lo%temp reg
	scoreboard players operation %work%2%34%lo%temp reg = %work%2%30%lo%temp reg
	execute unless score %work%2%33%lo%temp reg matches 0 run scoreboard players operation %work%2%34%lo%temp reg = %work%2%29%lo%temp reg
	scoreboard players operation %work%2%34%hi%temp reg = %work%2%30%hi%temp reg
	execute unless score %work%2%33%lo%temp reg matches 0 run scoreboard players operation %work%2%34%hi%temp reg = %work%2%29%hi%temp reg
	scoreboard players operation %temp%11%lo reg = %work%2%34%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%2%34%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%2%35%lo%temp reg = %work%2%28%lo%temp reg
	scoreboard players operation %work%2%35%hi%temp reg = %work%2%28%hi%temp reg
	scoreboard players operation %work%2%35%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%2%35%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%2%28%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%28%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%2%35%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%28%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%2%35%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%2%35%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%2%35%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%2%35%hi%temp reg
	scoreboard players set %work%2%36%lo%temp reg 0
	scoreboard players set %work%2%36%hi%temp reg 0
	execute store result score %work%2%37%lo%temp reg run data get storage wasm:localstack stack.data[14]
	execute store result score %work%2%37%hi%temp reg run data get storage wasm:localstack stack.data[15]
	execute store result score %work%2%38%lo%temp reg run data get storage wasm:localstack stack.data[16]
	scoreboard players operation %work%2%39%lo%temp reg = %work%2%37%lo%temp reg
	execute unless score %work%2%38%lo%temp reg matches 0 run scoreboard players operation %work%2%39%lo%temp reg = %work%2%36%lo%temp reg
	scoreboard players operation %work%2%39%hi%temp reg = %work%2%37%hi%temp reg
	execute unless score %work%2%38%lo%temp reg matches 0 run scoreboard players operation %work%2%39%hi%temp reg = %work%2%36%hi%temp reg
	execute store result score %work%2%40%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%2%40%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%2%39%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%2%40%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%2%41%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%2%39%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%2%40%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%2%41%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%2%41%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%2%41%hi%temp reg
	execute store result score %work%2%42%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%2%42%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players set %work%2%43%lo%temp reg -1
	scoreboard players set %work%2%43%hi%temp reg -1
	scoreboard players operation %work%2%44%lo%temp reg = %work%2%42%lo%temp reg
	scoreboard players operation %work%2%44%hi%temp reg = %work%2%42%hi%temp reg
	scoreboard players operation %work%2%44%lo%temp reg += %work%2%43%lo%temp reg
	scoreboard players operation %work%2%44%hi%temp reg += %work%2%43%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%2%42%lo%temp reg matches ..-1 if score %work%2%43%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%42%lo%temp reg matches ..-1 if score %work%2%43%lo%temp reg matches 0.. if score %work%2%44%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%2%42%lo%temp reg matches 0.. if score %work%2%43%lo%temp reg matches ..-1 if score %work%2%44%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%2%44%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%2%44%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%2%44%hi%temp reg
	scoreboard players set %work%2%45%lo%temp reg -1
	scoreboard players set %work%2%45%hi%temp reg -1
	execute store success score %work%2%46%lo%temp reg unless score %work%2%44%lo%temp reg = %work%2%45%lo%temp reg
	execute unless score %work%2%46%lo%temp reg matches 1 run execute store success score %work%2%46%lo%temp reg unless score %work%2%44%hi%temp reg = %work%2%45%hi%temp reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%2%46%lo%temp reg matches 0 run function intrinsic:i64divrem/wasm_2_2
	execute if score %condtaken reg matches 0 run function intrinsic:i64divrem/wasm_2_3
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_1_2 --------
	execute store result score %work%1%2%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%1%2%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players set %work%1%3%lo%temp reg 1
	scoreboard players set %work%1%3%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%1%2%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%1%2%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%1%3%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%1%4%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%1%4%hi%temp reg = %param0%1 reg
	execute store result score %work%1%5%lo%temp reg run data get storage wasm:localstack stack.data[0]
	execute store result score %work%1%5%hi%temp reg run data get storage wasm:localstack stack.data[1]
	execute store result score %work%1%6%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%1%6%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players operation %param0%0 reg = %work%1%5%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%1%5%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%1%6%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:lshr_i64
	scoreboard players operation %work%1%7%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%1%7%hi%temp reg = %param0%1 reg
	scoreboard players set %work%1%8%lo%temp reg 1
	scoreboard players set %work%1%8%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%1%7%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%1%8%lo%temp reg
	function intrinsic:and
	scoreboard players operation %work%1%9%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%1%7%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%1%8%hi%temp reg
	function intrinsic:and
	scoreboard players operation %work%1%9%hi%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%1%4%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%1%9%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%1%10%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%1%4%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%1%9%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%1%10%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%1%10%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%1%10%hi%temp reg
	scoreboard players set %work%1%11%lo%temp reg 0
	scoreboard players set %work%1%11%hi%temp reg 0
	execute store result score %work%1%12%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%1%12%hi%temp reg run data get storage wasm:localstack stack.data[3]
	execute store result score %work%1%13%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%1%13%hi%temp reg run data get storage wasm:localstack stack.data[7]
	execute store result score %work%1%14%lo%temp reg run data get storage wasm:localstack stack.data[2]
	execute store result score %work%1%14%hi%temp reg run data get storage wasm:localstack stack.data[3]
	scoreboard players set %temp%3%lo reg 0
	execute if score %work%1%13%hi%temp reg matches ..-1 if score %work%1%14%hi%temp reg matches 0.. run scoreboard players set %temp%3%lo reg 0
	execute if score %work%1%13%hi%temp reg matches 0.. if score %work%1%14%hi%temp reg matches ..-1 run scoreboard players set %temp%3%lo reg 1
	execute if score %work%1%13%hi%temp reg matches ..-1 if score %work%1%14%hi%temp reg matches ..-1 if score %work%1%13%hi%temp reg < %work%1%14%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	execute if score %work%1%13%hi%temp reg matches 0.. if score %work%1%14%hi%temp reg matches 0.. if score %work%1%13%hi%temp reg < %work%1%14%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	scoreboard players set %temp%4%lo reg 0
	execute if score %work%1%14%hi%temp reg matches ..-1 if score %work%1%13%hi%temp reg matches 0.. run scoreboard players set %temp%4%lo reg 0
	execute if score %work%1%14%hi%temp reg matches 0.. if score %work%1%13%hi%temp reg matches ..-1 run scoreboard players set %temp%4%lo reg 1
	execute if score %work%1%14%hi%temp reg matches ..-1 if score %work%1%13%hi%temp reg matches ..-1 if score %work%1%14%hi%temp reg < %work%1%13%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute if score %work%1%14%hi%temp reg matches 0.. if score %work%1%13%hi%temp reg matches 0.. if score %work%1%14%hi%temp reg < %work%1%13%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute store success score %temp%5%lo reg if score %work%1%13%hi%temp reg = %work%1%14%hi%temp reg
	scoreboard players set %temp%6%lo reg 0
	execute if score %work%1%13%lo%temp reg matches ..-1 if score %work%1%14%lo%temp reg matches 0.. run scoreboard players set %temp%6%lo reg 0
	execute if score %work%1%13%lo%temp reg matches 0.. if score %work%1%14%lo%temp reg matches ..-1 run scoreboard players set %temp%6%lo reg 1
	execute if score %work%1%13%lo%temp reg matches ..-1 if score %work%1%14%lo%temp reg matches ..-1 if score %work%1%13%lo%temp reg < %work%1%14%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %work%1%13%lo%temp reg matches 0.. if score %work%1%14%lo%temp reg matches 0.. if score %work%1%13%lo%temp reg < %work%1%14%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %temp%3%lo reg matches 1.. run scoreboard players set %work%1%15%lo%temp reg 1
	execute if score %temp%4%lo reg matches 1.. run scoreboard players set %work%1%15%lo%temp reg 0
	execute if score %temp%5%lo reg matches 1.. run scoreboard players operation %work%1%15%lo%temp reg = %temp%6%lo reg
	scoreboard players operation %work%1%16%lo%temp reg = %work%1%12%lo%temp reg
	execute unless score %work%1%15%lo%temp reg matches 0 run scoreboard players operation %work%1%16%lo%temp reg = %work%1%11%lo%temp reg
	scoreboard players operation %work%1%16%hi%temp reg = %work%1%12%hi%temp reg
	execute unless score %work%1%15%lo%temp reg matches 0 run scoreboard players operation %work%1%16%hi%temp reg = %work%1%11%hi%temp reg
	scoreboard players operation %temp%11%lo reg = %work%1%16%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%1%16%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%1%17%lo%temp reg = %work%1%10%lo%temp reg
	scoreboard players operation %work%1%17%hi%temp reg = %work%1%10%hi%temp reg
	scoreboard players operation %work%1%17%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%1%17%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%1%10%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%1%10%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%1%17%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%1%10%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%1%17%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%1%17%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%1%17%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%1%17%hi%temp reg
	execute store result score %work%1%18%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%1%18%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players set %work%1%19%lo%temp reg -1
	scoreboard players set %work%1%19%hi%temp reg -1
	scoreboard players operation %work%1%20%lo%temp reg = %work%1%18%lo%temp reg
	scoreboard players operation %work%1%20%hi%temp reg = %work%1%18%hi%temp reg
	scoreboard players operation %work%1%20%lo%temp reg += %work%1%19%lo%temp reg
	scoreboard players operation %work%1%20%hi%temp reg += %work%1%19%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%1%18%lo%temp reg matches ..-1 if score %work%1%19%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%1%18%lo%temp reg matches ..-1 if score %work%1%19%lo%temp reg matches 0.. if score %work%1%20%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%1%18%lo%temp reg matches 0.. if score %work%1%19%lo%temp reg matches ..-1 if score %work%1%20%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%1%20%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%1%20%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%1%20%hi%temp reg
	scoreboard players set %work%1%21%lo%temp reg -1
	scoreboard players set %work%1%21%hi%temp reg -1
	execute store success score %work%1%22%lo%temp reg unless score %work%1%20%lo%temp reg = %work%1%21%lo%temp reg
	execute unless score %work%1%22%lo%temp reg matches 1 run execute store success score %work%1%22%lo%temp reg unless score %work%1%20%hi%temp reg = %work%1%21%hi%temp reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%1%22%lo%temp reg matches 0 run function intrinsic:i64divrem/wasm_1_2
	execute if score %condtaken reg matches 0 run function intrinsic:i64divrem/wasm_1_3
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_0_3 --------
	execute store result score %work%0%33%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%0%33%hi%temp reg run data get storage wasm:localstack stack.data[9]
	scoreboard players operation %temp%0%lo reg = %work%0%33%lo%temp reg
	scoreboard players operation %temp%0%hi reg = %work%0%33%hi%temp reg
	scoreboard players operation %work%0%34%lo%temp reg = %temp%0%lo reg
	scoreboard players operation %work%0%34%hi%temp reg = %temp%0%hi reg
	function intrinsic:i64divrem/wasm_0_1
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_0_1 --------
	scoreboard players operation %return%0%lo reg = %work%0%34%lo%temp reg
	scoreboard players operation %return%0%hi reg = %work%0%34%hi%temp reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_0_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[1] int 1 run scoreboard players get %param%0%hi reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[3] int 1 run scoreboard players get %param%1%hi reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[10] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[11] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %const%0 reg
	scoreboard players set %work%0%0%lo%temp reg 63
	scoreboard players set %work%0%0%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%0%0%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%0%0%hi%temp reg
	scoreboard players set %work%0%1%lo%temp reg 0
	scoreboard players set %work%0%1%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%0%1%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%0%1%hi%temp reg
	scoreboard players set %work%0%2%lo%temp reg 0
	scoreboard players set %work%0%2%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[8] int 1 run scoreboard players get %work%0%2%lo%temp reg
	execute store result storage wasm:localstack stack.data[9] int 1 run scoreboard players get %work%0%2%hi%temp reg
	function intrinsic:i64divrem/wasm_0_2
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_1_1 --------
	scoreboard players operation %return%0%lo reg = %work%1%24%lo%temp reg
	scoreboard players operation %return%0%hi reg = %work%1%24%hi%temp reg
	data modify storage wasm:localstack stack set from storage wasm:localstack stack.tail
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_3_2 --------
	execute store result score %work%3%17%lo%temp reg run data get storage wasm:localstack stack.data[12]
	execute store result score %work%3%17%hi%temp reg run data get storage wasm:localstack stack.data[13]
	scoreboard players set %work%3%18%lo%temp reg 1
	scoreboard players set %work%3%18%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%3%17%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%3%17%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%18%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%3%19%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%3%19%hi%temp reg = %param0%1 reg
	scoreboard players set %work%3%20%lo%temp reg 1
	scoreboard players set %work%3%20%hi%temp reg 0
	execute store result score %work%3%21%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%3%21%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players operation %param0%0 reg = %work%3%20%lo%temp reg
	scoreboard players operation %param0%1 reg = %work%3%20%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%21%lo%temp reg
	scoreboard players operation %param1%0 reg %= %%64 reg
	function intrinsic:shl_64
	scoreboard players operation %work%3%22%lo%temp reg = %param0%0 reg
	scoreboard players operation %work%3%22%hi%temp reg = %param0%1 reg
	execute store result storage wasm:localstack stack.data[14] int 1 run scoreboard players get %work%3%22%lo%temp reg
	execute store result storage wasm:localstack stack.data[15] int 1 run scoreboard players get %work%3%22%hi%temp reg
	execute store result score %work%3%23%lo%temp reg run data get storage wasm:localstack stack.data[10]
	execute store result score %work%3%23%hi%temp reg run data get storage wasm:localstack stack.data[11]
	scoreboard players operation %param0%0 reg = %work%3%22%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%23%lo%temp reg
	function intrinsic:and
	scoreboard players operation %work%3%24%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%3%22%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%23%hi%temp reg
	function intrinsic:and
	scoreboard players operation %work%3%24%hi%temp reg = %return%0 reg
	scoreboard players set %work%3%25%lo%temp reg 0
	scoreboard players set %work%3%25%hi%temp reg 0
	execute store success score %work%3%26%lo%temp reg unless score %work%3%24%lo%temp reg = %work%3%25%lo%temp reg
	execute unless score %work%3%26%lo%temp reg matches 1 run execute store success score %work%3%26%lo%temp reg unless score %work%3%24%hi%temp reg = %work%3%25%hi%temp reg
	scoreboard players operation %work%3%27%lo%temp reg = %work%3%26%lo%temp reg
	scoreboard players set %work%3%27%hi%temp reg 0
	scoreboard players operation %param0%0 reg = %work%3%19%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%27%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%3%28%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%3%19%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%27%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%3%28%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%3%28%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%3%28%hi%temp reg
	scoreboard players set %work%3%29%lo%temp reg 0
	scoreboard players set %work%3%29%hi%temp reg 0
	execute store result score %work%3%30%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%3%30%hi%temp reg run data get storage wasm:localstack stack.data[9]
	execute store result score %work%3%31%lo%temp reg run data get storage wasm:localstack stack.data[12]
	execute store result score %work%3%31%hi%temp reg run data get storage wasm:localstack stack.data[13]
	execute store result score %work%3%32%lo%temp reg run data get storage wasm:localstack stack.data[8]
	execute store result score %work%3%32%hi%temp reg run data get storage wasm:localstack stack.data[9]
	scoreboard players set %temp%3%lo reg 0
	execute if score %work%3%31%hi%temp reg matches ..-1 if score %work%3%32%hi%temp reg matches 0.. run scoreboard players set %temp%3%lo reg 0
	execute if score %work%3%31%hi%temp reg matches 0.. if score %work%3%32%hi%temp reg matches ..-1 run scoreboard players set %temp%3%lo reg 1
	execute if score %work%3%31%hi%temp reg matches ..-1 if score %work%3%32%hi%temp reg matches ..-1 if score %work%3%31%hi%temp reg < %work%3%32%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	execute if score %work%3%31%hi%temp reg matches 0.. if score %work%3%32%hi%temp reg matches 0.. if score %work%3%31%hi%temp reg < %work%3%32%hi%temp reg run scoreboard players set %temp%3%lo reg 1
	scoreboard players set %temp%4%lo reg 0
	execute if score %work%3%32%hi%temp reg matches ..-1 if score %work%3%31%hi%temp reg matches 0.. run scoreboard players set %temp%4%lo reg 0
	execute if score %work%3%32%hi%temp reg matches 0.. if score %work%3%31%hi%temp reg matches ..-1 run scoreboard players set %temp%4%lo reg 1
	execute if score %work%3%32%hi%temp reg matches ..-1 if score %work%3%31%hi%temp reg matches ..-1 if score %work%3%32%hi%temp reg < %work%3%31%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute if score %work%3%32%hi%temp reg matches 0.. if score %work%3%31%hi%temp reg matches 0.. if score %work%3%32%hi%temp reg < %work%3%31%hi%temp reg run scoreboard players set %temp%4%lo reg 1
	execute store success score %temp%5%lo reg if score %work%3%31%hi%temp reg = %work%3%32%hi%temp reg
	scoreboard players set %temp%6%lo reg 0
	execute if score %work%3%31%lo%temp reg matches ..-1 if score %work%3%32%lo%temp reg matches 0.. run scoreboard players set %temp%6%lo reg 0
	execute if score %work%3%31%lo%temp reg matches 0.. if score %work%3%32%lo%temp reg matches ..-1 run scoreboard players set %temp%6%lo reg 1
	execute if score %work%3%31%lo%temp reg matches ..-1 if score %work%3%32%lo%temp reg matches ..-1 if score %work%3%31%lo%temp reg < %work%3%32%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %work%3%31%lo%temp reg matches 0.. if score %work%3%32%lo%temp reg matches 0.. if score %work%3%31%lo%temp reg < %work%3%32%lo%temp reg run scoreboard players set %temp%6%lo reg 1
	execute if score %temp%3%lo reg matches 1.. run scoreboard players set %work%3%33%lo%temp reg 1
	execute if score %temp%4%lo reg matches 1.. run scoreboard players set %work%3%33%lo%temp reg 0
	execute if score %temp%5%lo reg matches 1.. run scoreboard players operation %work%3%33%lo%temp reg = %temp%6%lo reg
	execute store result storage wasm:localstack stack.data[16] int 1 run scoreboard players get %work%3%33%lo%temp reg
	scoreboard players operation %work%3%34%lo%temp reg = %work%3%30%lo%temp reg
	execute unless score %work%3%33%lo%temp reg matches 0 run scoreboard players operation %work%3%34%lo%temp reg = %work%3%29%lo%temp reg
	scoreboard players operation %work%3%34%hi%temp reg = %work%3%30%hi%temp reg
	execute unless score %work%3%33%lo%temp reg matches 0 run scoreboard players operation %work%3%34%hi%temp reg = %work%3%29%hi%temp reg
	scoreboard players operation %temp%11%lo reg = %work%3%34%lo%temp reg
	scoreboard players operation %temp%11%hi reg = %work%3%34%hi%temp reg
	scoreboard players operation %temp%11%lo reg *= %%-1 reg
	scoreboard players remove %temp%11%lo reg 1
	scoreboard players operation %temp%11%hi reg *= %%-1 reg
	scoreboard players remove %temp%11%hi reg 1
	execute if score %temp%11%lo reg matches -1 run scoreboard players add %temp%11%hi reg 1
	scoreboard players add %temp%11%lo reg 1
	scoreboard players operation %work%3%35%lo%temp reg = %work%3%28%lo%temp reg
	scoreboard players operation %work%3%35%hi%temp reg = %work%3%28%hi%temp reg
	scoreboard players operation %work%3%35%lo%temp reg += %temp%11%lo reg
	scoreboard players operation %work%3%35%hi%temp reg += %temp%11%hi reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%28%lo%temp reg matches ..-1 if score %temp%11%lo reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%28%lo%temp reg matches ..-1 if score %temp%11%lo reg matches 0.. if score %work%3%35%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%28%lo%temp reg matches 0.. if score %temp%11%lo reg matches ..-1 if score %work%3%35%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%35%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[12] int 1 run scoreboard players get %work%3%35%lo%temp reg
	execute store result storage wasm:localstack stack.data[13] int 1 run scoreboard players get %work%3%35%hi%temp reg
	scoreboard players set %work%3%36%lo%temp reg 0
	scoreboard players set %work%3%36%hi%temp reg 0
	execute store result score %work%3%37%lo%temp reg run data get storage wasm:localstack stack.data[14]
	execute store result score %work%3%37%hi%temp reg run data get storage wasm:localstack stack.data[15]
	execute store result score %work%3%38%lo%temp reg run data get storage wasm:localstack stack.data[16]
	scoreboard players operation %work%3%39%lo%temp reg = %work%3%37%lo%temp reg
	execute unless score %work%3%38%lo%temp reg matches 0 run scoreboard players operation %work%3%39%lo%temp reg = %work%3%36%lo%temp reg
	scoreboard players operation %work%3%39%hi%temp reg = %work%3%37%hi%temp reg
	execute unless score %work%3%38%lo%temp reg matches 0 run scoreboard players operation %work%3%39%hi%temp reg = %work%3%36%hi%temp reg
	execute store result score %work%3%40%lo%temp reg run data get storage wasm:localstack stack.data[6]
	execute store result score %work%3%40%hi%temp reg run data get storage wasm:localstack stack.data[7]
	scoreboard players operation %param0%0 reg = %work%3%39%lo%temp reg
	scoreboard players operation %param1%0 reg = %work%3%40%lo%temp reg
	function intrinsic:or
	scoreboard players operation %work%3%41%lo%temp reg = %return%0 reg
	scoreboard players operation %param0%0 reg = %work%3%39%hi%temp reg
	scoreboard players operation %param1%0 reg = %work%3%40%hi%temp reg
	function intrinsic:or
	scoreboard players operation %work%3%41%hi%temp reg = %return%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%3%41%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%3%41%hi%temp reg
	execute store result score %work%3%42%lo%temp reg run data get storage wasm:localstack stack.data[4]
	execute store result score %work%3%42%hi%temp reg run data get storage wasm:localstack stack.data[5]
	scoreboard players set %work%3%43%lo%temp reg -1
	scoreboard players set %work%3%43%hi%temp reg -1
	scoreboard players operation %work%3%44%lo%temp reg = %work%3%42%lo%temp reg
	scoreboard players operation %work%3%44%hi%temp reg = %work%3%42%hi%temp reg
	scoreboard players operation %work%3%44%lo%temp reg += %work%3%43%lo%temp reg
	scoreboard players operation %work%3%44%hi%temp reg += %work%3%43%hi%temp reg
	scoreboard players set %temp%10%lo reg 0
	execute if score %work%3%42%lo%temp reg matches ..-1 if score %work%3%43%lo%temp reg matches ..-1 run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%42%lo%temp reg matches ..-1 if score %work%3%43%lo%temp reg matches 0.. if score %work%3%44%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	execute if score %work%3%42%lo%temp reg matches 0.. if score %work%3%43%lo%temp reg matches ..-1 if score %work%3%44%lo%temp reg matches 0.. run scoreboard players set %temp%10%lo reg 1
	scoreboard players operation %work%3%44%hi%temp reg += %temp%10%lo reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%3%44%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%3%44%hi%temp reg
	scoreboard players set %work%3%45%lo%temp reg -1
	scoreboard players set %work%3%45%hi%temp reg -1
	execute store success score %work%3%46%lo%temp reg unless score %work%3%44%lo%temp reg = %work%3%45%lo%temp reg
	execute unless score %work%3%46%lo%temp reg matches 1 run execute store success score %work%3%46%lo%temp reg unless score %work%3%44%hi%temp reg = %work%3%45%hi%temp reg
	scoreboard players set %condtaken reg 0
	scoreboard players set %condtaken reg 0
	execute unless score %work%3%46%lo%temp reg matches 0 run function intrinsic:i64divrem/wasm_3_2
	execute if score %condtaken reg matches 0 run function intrinsic:i64divrem/wasm_3_3
	scoreboard players set %condtaken reg 1

-------- func intrinsic:i64divrem/wasm_1_0 --------
	data modify storage wasm:scratch stack.data set value [0, 0, 0, 0, 0, 0, 0, 0]
	data modify storage wasm:scratch stack.tail set from storage wasm:localstack stack
	data modify storage wasm:localstack stack set from storage wasm:scratch stack
	execute store result storage wasm:localstack stack.data[0] int 1 run scoreboard players get %param%0%lo reg
	execute store result storage wasm:localstack stack.data[1] int 1 run scoreboard players get %param%0%hi reg
	execute store result storage wasm:localstack stack.data[2] int 1 run scoreboard players get %param%1%lo reg
	execute store result storage wasm:localstack stack.data[3] int 1 run scoreboard players get %param%1%hi reg
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %const%0 reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %const%0 reg
	scoreboard players set %work%1%0%lo%temp reg 63
	scoreboard players set %work%1%0%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[4] int 1 run scoreboard players get %work%1%0%lo%temp reg
	execute store result storage wasm:localstack stack.data[5] int 1 run scoreboard players get %work%1%0%hi%temp reg
	scoreboard players set %work%1%1%lo%temp reg 0
	scoreboard players set %work%1%1%hi%temp reg 0
	execute store result storage wasm:localstack stack.data[6] int 1 run scoreboard players get %work%1%1%lo%temp reg
	execute store result storage wasm:localstack stack.data[7] int 1 run scoreboard players get %work%1%1%hi%temp reg
	function intrinsic:i64divrem/wasm_1_2
	scoreboard players set %condtaken reg 1

-------- func intrinsic:store_word --------
	scoreboard players operation %%align reg = %ptr reg
	scoreboard players operation %%align reg %= %%4 reg
	execute if score %%align reg matches 0..0 run execute at @e[tag=memoryptr] store result block ~ ~ ~ RecordItem.tag.Memory int 1 run scoreboard players get %param0%0 reg
	execute unless score %%align reg matches 0..0 run function intrinsic:store_word_unaligned

-------- func intrinsic:lshr_i64 --------
	execute if score %param1%0 reg matches 64.. run scoreboard players set %param0%0 reg 0
	execute if score %param1%0 reg matches 64.. run scoreboard players set %param1%0 reg 0
	execute if score %param1%0 reg matches 1..63 run function intrinsic:lshr_i64/shift_once
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1..63 run function intrinsic:lshr_i64

-------- func intrinsic:llvm_ctlz_i32_inner --------
	scoreboard players operation %param0%0 rust *= %%2 rust
	scoreboard players add %return%0 rust 1
	execute if score %return%0 rust matches ..31 if score %param0%0 rust matches 0.. run function intrinsic:llvm_ctlz_i32_inner

-------- func intrinsic:lshr --------
	execute store success score %%templshr_sign reg if score %param0%0 reg matches ..-1
	execute if score %%templshr_sign reg matches 1..1 run scoreboard players remove %param0%0 reg 2147483647
	execute if score %%templshr_sign reg matches 1..1 run scoreboard players remove %param0%0 reg 1
	scoreboard players operation %%templshr_sign reg *= %%1073741824 reg
	execute if score %param1%0 reg matches 0..0 run scoreboard players operation %%templshr_sign reg += %%templshr_sign reg
	execute if score %param1%0 reg matches 1.. run function intrinsic:lshr/inner
	scoreboard players operation %param0%0 reg += %%templshr_sign reg

-------- func intrinsic:ctz_inner --------
	scoreboard players operation %temp%0 reg = %param0%0 reg
	scoreboard players operation %temp%0 reg %= %%2 reg
	scoreboard players operation %param0%0 reg /= %%2 reg
	scoreboard players add %return%0 reg 1
	execute if score %return%0 reg matches ..31 if score %temp%0 reg matches 0..0 run function intrinsic:ctz_inner

-------- func intrinsic:load_halfword --------
	scoreboard players operation %param1%0 reg = %ptr reg
	scoreboard players operation %param1%0 reg %= %%2 reg
	function intrinsic:setptr
	execute at @e[tag=memoryptr] store result score %param0%0 reg run data get block ~ ~ ~ RecordItem.tag.Memory 1
	scoreboard players operation %param1%0 reg = %ptr reg
	scoreboard players operation %param1%0 reg %= %%4 reg
	execute if score %param1%0 reg matches 0..0 run scoreboard players set %param1%0 reg 65536
	execute if score %param1%0 reg matches 2..2 run scoreboard players set %param1%0 reg 1
	scoreboard players operation %param0%0 reg *= %param1%0 reg
	scoreboard players set %param1%0 reg 16
	function intrinsic:lshr

-------- func intrinsic:lshr_i64/shift_once --------
	scoreboard players operation %%temp_carry reg = %param0%1 reg
	scoreboard players operation %%temp_carry reg %= %%2 reg
	scoreboard players operation %%temp_carry reg *= %%-2147483648 reg
	execute store success score %%temp0_lshr_inner reg if score %param0%1 reg matches ..-1
	execute if score %%temp0_lshr_inner reg matches 1..1 run scoreboard players operation %param0%1 reg += %%-2147483648 reg
	scoreboard players operation %param0%1 reg /= %%2 reg
	execute if score %%temp0_lshr_inner reg matches 1..1 run scoreboard players add %param0%1 reg 1073741824
	execute store success score %%temp0_lshr_inner reg if score %param0%0 reg matches ..-1
	execute if score %%temp0_lshr_inner reg matches 1..1 run scoreboard players operation %param0%0 reg += %%-2147483648 reg
	scoreboard players operation %param0%0 reg /= %%2 reg
	execute if score %%temp0_lshr_inner reg matches 1..1 run scoreboard players add %param0%0 reg 1073741824
	scoreboard players operation %param0%0 reg += %%temp_carry reg

-------- func intrinsic:llvm_fshr_i32 --------
	scoreboard players operation %%tempfshr_%0%0 rust = %param0%0 rust
	scoreboard players operation %%tempfshr_%1%0 rust = %param1%0 rust
	scoreboard players operation %%tempfshr_%2%0 rust = %param2%0 rust
	scoreboard players operation %%tempfshr_%4%0 rust = %%tempfshr_%2%0 rust
	scoreboard players operation %%tempfshr_%4%0 rust %= %%32 rust
	execute store success score %%tempfshr_%5%0 rust if score %%tempfshr_%4%0 rust matches 0..0
	scoreboard players set %%tempfshr_%6%0 rust 32
	scoreboard players operation %%tempfshr_%6%0 rust -= %%tempfshr_%4%0 rust
	scoreboard players operation %param0%0 rust = %%tempfshr_%0%0 rust
	scoreboard players operation %param1%0 rust = %%tempfshr_%6%0 rust
	function intrinsic:shl
	scoreboard players operation %%tempfshr_%7%0 rust = %param0%0 rust
	scoreboard players operation %param0%0 rust = %%tempfshr_%1%0 rust
	scoreboard players operation %param1%0 rust = %%tempfshr_%4%0 rust
	function intrinsic:lshr
	scoreboard players operation %%tempfshr_%8%0 rust = %param0%0 rust
	scoreboard players operation %%tempfshr_%9%0 rust = %%tempfshr_%7%0 rust
	scoreboard players operation %%tempfshr_%9%0 rust += %%tempfshr_%8%0 rust
	execute if score %%tempfshr_%5%0 rust matches 1..1 run scoreboard players operation %%tempfshr_%10%0 rust = %%tempfshr_%1%0 rust
	execute unless score %%tempfshr_%5%0 rust matches 1..1 run scoreboard players operation %%tempfshr_%10%0 rust = %%tempfshr_%9%0 rust
	scoreboard players operation %return%0 rust = %%tempfshr_%10%0 rust

-------- func intrinsic:shift_from_ptr --------
	scoreboard players operation %%ptr rust = %ptr rust
	scoreboard players operation %%ptr rust %= %%4 rust
	execute store success score %param0%1 rust if score %param0%0 rust matches ..-1
	execute if score %param0%1 rust matches 1..1 run scoreboard players operation %param0%0 rust *= %%-1 rust
	execute if score %param0%1 rust matches 1..1 run scoreboard players operation %param0%0 rust += %%-1 rust
	execute if score %%ptr rust matches 1.. run function intrinsic:shift_from_ptr_inner
	execute if score %param0%1 rust matches 1..1 run scoreboard players operation %param0%0 rust *= %%-1 rust
	execute if score %param0%1 rust matches 1..1 run scoreboard players operation %param0%0 rust += %%-1 rust
	scoreboard players operation %%ptr rust = %ptr rust
	scoreboard players operation %%ptr rust %= %%4 rust
	execute if score %param0%1 rust matches 1..1 if score %%ptr rust matches 1..1 run scoreboard players add %param0%0 rust 16777216
	execute if score %param0%1 rust matches 1..1 if score %%ptr rust matches 2..2 run scoreboard players add %param0%0 rust 65536
	execute if score %param0%1 rust matches 1..1 if score %%ptr rust matches 3..3 run scoreboard players add %param0%0 rust 256

-------- func intrinsic:i64_udiv --------
	function intrinsic:i64divrem/wasm_0_0

-------- func intrinsic:and_inner --------
	scoreboard players operation %return%0 reg += %return%0 reg
	execute if score %param0%0 reg matches ..-1 if score %param1%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	scoreboard players operation %param1%0 reg += %param1%0 reg

-------- func intrinsic:load_word --------
	scoreboard players operation %%align reg = %ptr reg
	scoreboard players operation %%align reg %= %%4 reg
	execute if score %%align reg matches 0..0 run execute at @e[tag=memoryptr] store result score %return%0 reg run data get block ~ ~ ~ RecordItem.tag.Memory 1
	execute unless score %%align reg matches 0..0 run function intrinsic:load_word_unaligned

-------- func intrinsic:load_halfword_unaligned --------
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %return%0 reg = %param0%0 reg
	scoreboard players add %ptr reg 1
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %param0%0 reg *= %%256 reg
	scoreboard players operation %return%0 reg += %param0%0 reg

-------- func intrinsic:store_word_unaligned --------
	tellraw @a {"text":"storing unaligned word"}
	scoreboard players operation %%temp0_swu reg = %param0%0 reg
	scoreboard players operation %param2%0 reg = %%temp0_swu reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players add %ptr reg 1
	scoreboard players operation %param0%0 reg = %%temp0_swu reg
	scoreboard players set %param1%0 reg 8
	function intrinsic:lshr
	scoreboard players operation %param2%0 reg = %param0%0 reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players add %ptr reg 1
	scoreboard players operation %param0%0 reg = %%temp0_swu reg
	scoreboard players set %param1%0 reg 16
	function intrinsic:lshr
	scoreboard players operation %param2%0 reg = %param0%0 reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players add %ptr reg 1
	scoreboard players operation %param0%0 reg = %%temp0_swu reg
	scoreboard players set %param1%0 reg 24
	function intrinsic:lshr
	scoreboard players operation %param2%0 reg = %param0%0 reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte

-------- func intrinsic:xor --------
	scoreboard players set %return%0 reg 0
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner
	function intrinsic:xor_inner

-------- func intrinsic:setptr --------
	scoreboard players operation %%ptr reg = %ptr reg
	scoreboard players operation %%ptr reg /= %%4 reg
	scoreboard players operation %z reg = %%ptr reg
	scoreboard players operation %z reg %= %%8 reg
	scoreboard players operation %%ptr reg /= %%8 reg
	scoreboard players operation %y reg = %%ptr reg
	scoreboard players operation %y reg %= %%256 reg
	scoreboard players operation %%ptr reg /= %%256 reg
	execute as @e[tag=memoryptr] store result entity @s Pos[0] double 1 run scoreboard players get %%ptr reg
	execute as @e[tag=memoryptr] store result entity @s Pos[1] double 1 run scoreboard players get %y reg
	execute as @e[tag=memoryptr] store result entity @s Pos[2] double 1 run scoreboard players get %z reg

-------- func intrinsic:rotr_64_once --------
	scoreboard players operation %%temprotr64_carry reg = %param0%0 reg
	scoreboard players operation %%temprotr64_carry reg %= %%2 reg
	scoreboard players operation %%temprotr64_carry reg *= %%-2147483648 reg
	function intrinsic:lshr_i64/shift_once
	scoreboard players operation %param0%1 reg += %%temprotr64_carry reg

-------- func intrinsic:rotl --------
	execute store success score %%temprotl_carry reg if score %param0%0 reg matches ..-1
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%0 reg += %%temprotl_carry reg
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotl

-------- func intrinsic:ashr_i64 --------
	execute store success score %%temp_sign reg if score %param0%1 reg matches ..-1
	scoreboard players operation %%temp_sign reg *= %%-2147483648 reg
	execute if score %param1%0 reg matches 1.. run function intrinsic:lshr_i64/shift_once
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%1 reg += %%temp_sign reg
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1.. run function intrinsic:ashr_i64

-------- func intrinsic:i64_urem --------
	function intrinsic:i64divrem/wasm_1_0

-------- func intrinsic:rotr/rotr_inner --------
	scoreboard players operation %%temp_carry reg = %param0%0 reg
	scoreboard players operation %%temp_carry reg %= %%2 reg
	scoreboard players operation %%temp_carry reg *= %%-2147483648 reg
	execute store success score %%temp0_rotr_inner reg if score %param0%0 reg matches ..-1
	execute if score %%temp0_rotr_inner reg matches 1..1 run scoreboard players operation %param0%0 reg += %%-2147483648 reg
	scoreboard players operation %param0%0 reg /= %%2 reg
	execute if score %%temp0_rotr_inner reg matches 1..1 run scoreboard players add %param0%0 reg 1073741824
	scoreboard players operation %param0%0 reg += %%temp_carry reg
	scoreboard players remove %param1%0 reg 1

-------- func intrinsic:memset_inner --------
	function intrinsic:setptr
	execute at @e[tag=ptr] store result block ~ ~ ~ RecordItem.tag.Memory int 1 run scoreboard players get %%temp4_memset rust
	scoreboard players add %ptr rust 4
	scoreboard players remove %%temp2_memset rust 4
	execute if score %%temp2_memset rust matches 4.. run function intrinsic:memset_inner

-------- func intrinsic:or --------
	scoreboard players set %return%0 reg 0
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner
	function intrinsic:or_inner

-------- func intrinsic:rotr_64 --------
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotr_64_once
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotr_64

-------- func intrinsic:bcmp_inner --------
	scoreboard players operation %ptr rust = %%temp0_bcmp rust
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %%temp3_bcmp rust = %param0%0 rust
	scoreboard players operation %ptr rust = %%temp1_bcmp rust
	function intrinsic:setptr
	function intrinsic:load_byte
	scoreboard players operation %%temp4_bcmp rust = %param0%0 rust
	scoreboard players add %%temp0_bcmp rust 1
	scoreboard players add %%temp1_bcmp rust 1
	scoreboard players remove %%temp2_bcmp rust 1
	execute unless score %%temp3_bcmp rust = %%temp4_bcmp rust run scoreboard players set %return%0 rust 1
	execute if score %%temp2_bcmp rust matches 1.. run function intrinsic:bcmp_inner

-------- func intrinsic:clz --------
	scoreboard players set %return%0 reg 0
	execute if score %param0%0 reg matches 0.. run function intrinsic:clz_inner

-------- func intrinsic:llvm_ctlz_i32 --------
	scoreboard players set %return%0 rust 0
	execute if score %param0%0 rust matches 0.. run function intrinsic:llvm_ctlz_i32_inner

-------- func intrinsic:store_halfword --------
	scoreboard players operation %tempsave_store_word reg = %param2%0 reg
	scoreboard players operation %param2%0 reg %= %%65536 reg
	scoreboard players operation %%temp0_store_byte reg = %ptr reg
	scoreboard players operation %%temp0_store_byte reg %= %%2 reg
	function intrinsic:setptr
	execute at @e[tag=memoryptr] store result score %param0%0 reg run data get block ~ ~ ~ RecordItem.tag.Memory 1
	scoreboard players operation %%temp0_store_byte reg = %ptr reg
	scoreboard players operation %%temp0_store_byte reg %= %%4 reg
	execute if score %%temp0_store_byte reg matches 0..0 run scoreboard players set %param1%0 reg -65536
	execute if score %%temp0_store_byte reg matches 2..2 run scoreboard players set %param1%0 reg 65535
	function intrinsic:and
	execute if score %%temp0_store_byte reg matches 0..0 run scoreboard players operation %param2%0 reg *= %%1 reg
	execute if score %%temp0_store_byte reg matches 2..2 run scoreboard players operation %param2%0 reg *= %%65536 reg
	scoreboard players operation %return%0 reg += %param2%0 reg
	execute at @e[tag=memoryptr] store result block ~ ~ ~ RecordItem.tag.Memory int 1 run scoreboard players get %return%0 reg
	scoreboard players operation %param2%0 reg = %tempsave_store_word reg

-------- func intrinsic:rotl_64_once --------
	scoreboard players operation %%temprotl64_param1_save reg = %param1%0 reg
	execute store success score %%temprotl64_carry reg if score %param0%1 reg matches ..-1
	scoreboard players set %param1%0 reg 1
	function intrinsic:shl_64
	scoreboard players operation %param0%0 reg += %%temprotl64_carry reg
	scoreboard players operation %param1%0 reg = %%temprotl64_param1_save reg

-------- func intrinsic:lshr/getshift --------
	execute if score %param1%0 reg matches 0..0 run scoreboard players set %%temp1_lshr_inner reg 1
	execute if score %param1%0 reg matches 1..1 run scoreboard players set %%temp1_lshr_inner reg 2
	execute if score %param1%0 reg matches 2..2 run scoreboard players set %%temp1_lshr_inner reg 4
	execute if score %param1%0 reg matches 3..3 run scoreboard players set %%temp1_lshr_inner reg 8
	execute if score %param1%0 reg matches 4..4 run scoreboard players set %%temp1_lshr_inner reg 16
	execute if score %param1%0 reg matches 5..5 run scoreboard players set %%temp1_lshr_inner reg 32
	execute if score %param1%0 reg matches 6..6 run scoreboard players set %%temp1_lshr_inner reg 64
	execute if score %param1%0 reg matches 7..7 run scoreboard players set %%temp1_lshr_inner reg 128
	execute if score %param1%0 reg matches 8..8 run scoreboard players set %%temp1_lshr_inner reg 256
	execute if score %param1%0 reg matches 9..9 run scoreboard players set %%temp1_lshr_inner reg 512
	execute if score %param1%0 reg matches 10..10 run scoreboard players set %%temp1_lshr_inner reg 1024
	execute if score %param1%0 reg matches 11..11 run scoreboard players set %%temp1_lshr_inner reg 2048
	execute if score %param1%0 reg matches 12..12 run scoreboard players set %%temp1_lshr_inner reg 4096
	execute if score %param1%0 reg matches 13..13 run scoreboard players set %%temp1_lshr_inner reg 8192
	execute if score %param1%0 reg matches 14..14 run scoreboard players set %%temp1_lshr_inner reg 16384
	execute if score %param1%0 reg matches 15..15 run scoreboard players set %%temp1_lshr_inner reg 32768
	execute if score %param1%0 reg matches 16..16 run scoreboard players set %%temp1_lshr_inner reg 65536
	execute if score %param1%0 reg matches 17..17 run scoreboard players set %%temp1_lshr_inner reg 131072
	execute if score %param1%0 reg matches 18..18 run scoreboard players set %%temp1_lshr_inner reg 262144
	execute if score %param1%0 reg matches 19..19 run scoreboard players set %%temp1_lshr_inner reg 524288
	execute if score %param1%0 reg matches 20..20 run scoreboard players set %%temp1_lshr_inner reg 1048576
	execute if score %param1%0 reg matches 21..21 run scoreboard players set %%temp1_lshr_inner reg 2097152
	execute if score %param1%0 reg matches 22..22 run scoreboard players set %%temp1_lshr_inner reg 4194304
	execute if score %param1%0 reg matches 23..23 run scoreboard players set %%temp1_lshr_inner reg 8388608
	execute if score %param1%0 reg matches 24..24 run scoreboard players set %%temp1_lshr_inner reg 16777216
	execute if score %param1%0 reg matches 25..25 run scoreboard players set %%temp1_lshr_inner reg 33554432
	execute if score %param1%0 reg matches 26..26 run scoreboard players set %%temp1_lshr_inner reg 67108864
	execute if score %param1%0 reg matches 27..27 run scoreboard players set %%temp1_lshr_inner reg 134217728
	execute if score %param1%0 reg matches 28..28 run scoreboard players set %%temp1_lshr_inner reg 268435456
	execute if score %param1%0 reg matches 29..29 run scoreboard players set %%temp1_lshr_inner reg 536870912
	execute if score %param1%0 reg matches 30..30 run scoreboard players set %%temp1_lshr_inner reg 1073741824
	execute if score %param1%0 reg matches 31..31 run scoreboard players set %%temp1_lshr_inner reg -2147483648

-------- func intrinsic:lshr/inner --------
	execute if score %param1%0 reg matches 2.. run scoreboard players operation %%templshr_sign reg /= %%2 reg
	scoreboard players operation %param0%0 reg /= %%2 reg
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1.. run function intrinsic:lshr/inner

-------- func intrinsic:pop_and_branch --------
	scoreboard players remove %stackptr rust 4
	scoreboard players operation %ptr rust = %stackptr rust
	function intrinsic:setptr
	execute at @e[tag=ptr] store result score %%temp0_pab rust run data get block ~ ~ ~ RecordItem.tag.Memory 1
	scoreboard players operation %%tempz_pab rust = %%temp0_pab rust
	scoreboard players operation %%tempz_pab rust %= %%ROW_SIZE rust
	scoreboard players operation %%tempx_pab rust = %%temp0_pab rust
	scoreboard players operation %%tempx_pab rust /= %%ROW_SIZE rust
	scoreboard players operation %%tempx_pab rust *= %%-1 rust
	execute as @e[tag=ptr] store result entity @s Pos[0] double 1 run scoreboard players get %%tempx_pab rust
	execute as @e[tag=ptr] store result entity @s Pos[2] double 1 run scoreboard players get %%tempz_pab rust
	execute as @e[tag=ptr] at @s run tp @s ~-2 1 ~
	execute if score %%temp0_pab rust matches 0.. run execute at @e[tag=ptr] run setblock ~ ~ ~ minecraft:redstone_block

-------- func intrinsic:rotl_64 --------
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotl_64_once
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotl_64

-------- func intrinsic:shift_from_ptr_inner --------
	scoreboard players operation %param0%0 rust /= %%256 rust
	scoreboard players remove %%ptr rust 1
	execute if score %%ptr rust matches 1.. run function intrinsic:shift_from_ptr_inner

-------- func intrinsic:shl_64 --------
	execute if score %param1%0 reg matches 1.. run execute store success score %temp_carry reg if score %param0%0 reg matches ..-1
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%0 reg *= %%2 reg
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%1 reg *= %%2 reg
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%1 reg += %temp_carry reg
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 0.. run function intrinsic:shl_64

-------- func intrinsic:mul_32_to_64 --------
	scoreboard players operation %%tempmul_p0_save reg = %param0%0 reg
	scoreboard players operation %%tempmul_p1_save reg = %param1%0 reg
	scoreboard players operation %%tempmul_%0%0 reg = %param0%0 reg
	scoreboard players operation %%tempmul_%1%0 reg = %param1%0 reg
	scoreboard players operation %%tempmul_%5%0 reg = %%tempmul_%0%0 reg
	scoreboard players operation %%tempmul_%5%0 reg %= %%65536 reg
	scoreboard players operation %%tempmul_%6%0 reg = %%tempmul_%1%0 reg
	scoreboard players operation %%tempmul_%6%0 reg %= %%65536 reg
	scoreboard players operation %%tempmul_%7%0 reg = %%tempmul_%6%0 reg
	scoreboard players operation %%tempmul_%7%0 reg *= %%tempmul_%5%0 reg
	scoreboard players operation %%tempmul_%8%0 reg = %%tempmul_%7%0 reg
	scoreboard players operation %%tempmul_%8%0 reg %= %%65536 reg
	scoreboard players set %%tempmul_%temp3 reg 16
	scoreboard players operation %param0%0 reg = %%tempmul_%7%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%temp3 reg
	function intrinsic:lshr
	scoreboard players operation %%tempmul_%9%0 reg = %param0%0 reg
	scoreboard players set %%tempmul_%temp4 reg 16
	scoreboard players operation %param0%0 reg = %%tempmul_%0%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%temp4 reg
	function intrinsic:lshr
	scoreboard players operation %%tempmul_%10%0 reg = %param0%0 reg
	scoreboard players operation %%tempmul_%11%0 reg = %%tempmul_%6%0 reg
	scoreboard players operation %%tempmul_%11%0 reg *= %%tempmul_%10%0 reg
	scoreboard players operation %%tempmul_%12%0 reg = %%tempmul_%9%0 reg
	scoreboard players operation %%tempmul_%12%0 reg += %%tempmul_%11%0 reg
	scoreboard players operation %%tempmul_%13%0 reg = %%tempmul_%12%0 reg
	scoreboard players operation %%tempmul_%13%0 reg %= %%65536 reg
	scoreboard players set %%tempmul_%temp6 reg 16
	scoreboard players operation %param0%0 reg = %%tempmul_%12%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%temp6 reg
	function intrinsic:lshr
	scoreboard players operation %%tempmul_%14%0 reg = %param0%0 reg
	scoreboard players set %%tempmul_%temp7 reg 16
	scoreboard players operation %param0%0 reg = %%tempmul_%1%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%temp7 reg
	function intrinsic:lshr
	scoreboard players operation %%tempmul_%15%0 reg = %param0%0 reg
	scoreboard players operation %%tempmul_%16%0 reg = %%tempmul_%15%0 reg
	scoreboard players operation %%tempmul_%16%0 reg *= %%tempmul_%5%0 reg
	scoreboard players operation %%tempmul_%17%0 reg = %%tempmul_%13%0 reg
	scoreboard players operation %%tempmul_%17%0 reg += %%tempmul_%16%0 reg
	scoreboard players set %%tempmul_%temp8 reg 16
	scoreboard players operation %param0%0 reg = %%tempmul_%17%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%temp8 reg
	function intrinsic:lshr
	scoreboard players operation %%tempmul_%18%0 reg = %param0%0 reg
	scoreboard players operation %%tempmul_%19%0 reg = %%tempmul_%15%0 reg
	scoreboard players operation %%tempmul_%19%0 reg *= %%tempmul_%10%0 reg
	scoreboard players operation %%tempmul_%20%0 reg = %%tempmul_%14%0 reg
	scoreboard players operation %%tempmul_%20%0 reg += %%tempmul_%19%0 reg
	scoreboard players operation %%tempmul_%21%0 reg = %%tempmul_%17%0 reg
	scoreboard players operation %%tempmul_%21%0 reg *= %%65536 reg
	scoreboard players operation %%tempmul_%22%0 reg = %%tempmul_%20%0 reg
	scoreboard players operation %%tempmul_%22%0 reg += %%tempmul_%18%0 reg
	scoreboard players operation %param0%0 reg = %%tempmul_%21%0 reg
	scoreboard players operation %param1%0 reg = %%tempmul_%8%0 reg
	function intrinsic:or
	scoreboard players operation %%tempmul_%23%0 reg = %return%0 reg
	scoreboard players operation %return%0 reg = %%tempmul_%23%0 reg
	scoreboard players operation %return%1 reg = %%tempmul_%22%0 reg
	scoreboard players operation %param0%0 reg = %%tempmul_p0_save reg
	scoreboard players operation %param1%0 reg = %%tempmul_p1_save reg

-------- func intrinsic:xor_inner --------
	scoreboard players operation %return%0 reg += %return%0 reg
	execute if score %param0%0 reg matches ..-1 if score %param1%0 reg matches 0.. run scoreboard players add %return%0 reg 1
	execute if score %param0%0 reg matches 0.. if score %param1%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	scoreboard players operation %param1%0 reg += %param1%0 reg

-------- func intrinsic:clz_inner --------
	scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %return%0 reg matches ..31 if score %param0%0 reg matches 0.. run function intrinsic:clz_inner

-------- func intrinsic:shl --------
	execute if score %param1%0 reg matches 1.. run scoreboard players operation %param0%0 reg *= %%2 reg
	scoreboard players remove %param1%0 reg 1
	execute if score %param1%0 reg matches 0.. run function intrinsic:shl

-------- func intrinsic:load_byte --------
	execute at @e[tag=memoryptr] store result score %param0%0 reg run data get block ~ ~ ~ RecordItem.tag.Memory 1
	scoreboard players operation %param1%0 reg = %ptr reg
	scoreboard players operation %param1%0 reg %= %%4 reg
	execute if score %param1%0 reg matches 0..0 run scoreboard players operation %param0%0 reg *= %%16777216 reg
	execute if score %param1%0 reg matches 1..1 run scoreboard players operation %param0%0 reg *= %%65536 reg
	execute if score %param1%0 reg matches 2..2 run scoreboard players operation %param0%0 reg *= %%256 reg
	execute store success score %%temp0_load_byte reg if score %param0%0 reg matches ..-1
	execute if score %%temp0_load_byte reg matches 1..1 run scoreboard players remove %param0%0 reg 2147483647
	execute if score %%temp0_load_byte reg matches 1..1 run scoreboard players remove %param0%0 reg 1
	scoreboard players operation %param0%0 reg /= %%16777216 reg
	execute if score %%temp0_load_byte reg matches 1..1 run scoreboard players add %param0%0 reg 128

-------- func intrinsic:ctz --------
	scoreboard players set %return%0 reg -1
	function intrinsic:ctz_inner

-------- func intrinsic:i64_sdiv --------
	function intrinsic:i64divrem/wasm_2_0

-------- func intrinsic:rotr --------
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotr/rotr_inner
	execute if score %param1%0 reg matches 1.. run function intrinsic:rotr

-------- func intrinsic:bcmp --------
	scoreboard players operation %%temp0_bcmp rust = %param0%0 rust
	scoreboard players operation %%temp1_bcmp rust = %param1%0 rust
	scoreboard players operation %%temp2_bcmp rust = %param2%0 rust
	scoreboard players set %return%0 rust 0
	execute if score %%temp2_bcmp rust matches 1.. run function intrinsic:bcmp_inner

-------- func intrinsic:popcnt --------
	scoreboard players set %return%0 reg 0
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg
	execute if score %param0%0 reg matches ..-1 run scoreboard players add %return%0 reg 1
	scoreboard players operation %param0%0 reg += %param0%0 reg

-------- func intrinsic:store_halfword_unaligned --------
	scoreboard players operation %tempsave_swu reg = %param0%0 reg
	scoreboard players operation %param0%0 reg %= %%65536 reg
	scoreboard players operation %%temp0_swu reg = %param0%0 reg
	scoreboard players operation %param2%0 reg = %%temp0_swu reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players add %ptr reg 1
	scoreboard players operation %param0%0 reg = %%temp0_swu reg
	scoreboard players set %param1%0 reg 8
	function intrinsic:lshr
	scoreboard players operation %param2%0 reg = %param0%0 reg
	scoreboard players operation %param2%0 reg %= %%256 reg
	function intrinsic:setptr
	function intrinsic:store_byte
	scoreboard players operation %param0%0 reg = %tempsave_swu reg

(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 0, 3)
(0, 0, 4)
(0, 0, 5)
(0, 0, 6)
(0, 0, 7)
(0, 1, 0)
(0, 1, 1)
(0, 1, 2)
(0, 1, 3)
(0, 1, 4)
(0, 1, 5)
(0, 1, 6)
(0, 1, 7)
(0, 2, 0)
(0, 2, 1)
(0, 2, 2)
(0, 2, 3)
(0, 2, 4)
(0, 2, 5)
(0, 2, 6)
(0, 2, 7)
(0, 3, 0)
(0, 3, 1)
(0, 3, 2)
(0, 3, 3)
(0, 3, 4)
(0, 3, 5)
(0, 3, 6)
(0, 3, 7)
(0, 4, 0)
(0, 4, 1)
(0, 4, 2)
(0, 4, 3)
(0, 4, 4)
(0, 4, 5)
(0, 4, 6)
(0, 4, 7)
(0, 5, 0)
(0, 5, 1)
(0, 5, 2)
(0, 5, 3)
(0, 5, 4)
(0, 5, 5)
(0, 5, 6)
(0, 5, 7)
(0, 6, 0)
(0, 6, 1)
(0, 6, 2)
(0, 6, 3)
(0, 6, 4)
(0, 6, 5)
(0, 6, 6)
(0, 6, 7)
(0, 7, 0)
(0, 7, 1)
(0, 7, 2)
(0, 7, 3)
(0, 7, 4)
(0, 7, 5)
(0, 7, 6)
(0, 7, 7)
(0, 8, 0)
(0, 8, 1)
(0, 8, 2)
(0, 8, 3)
(0, 8, 4)
(0, 8, 5)
(0, 8, 6)
(0, 8, 7)
(0, 9, 0)
(0, 9, 1)
(0, 9, 2)
(0, 9, 3)
(0, 9, 4)
(0, 9, 5)
(0, 9, 6)
(0, 9, 7)
(0, 10, 0)
(0, 10, 1)
(0, 10, 2)
(0, 10, 3)
(0, 10, 4)
(0, 10, 5)
(0, 10, 6)
(0, 10, 7)
(0, 11, 0)
(0, 11, 1)
(0, 11, 2)
(0, 11, 3)
(0, 11, 4)
(0, 11, 5)
(0, 11, 6)
(0, 11, 7)
(0, 12, 0)
(0, 12, 1)
(0, 12, 2)
(0, 12, 3)
(0, 12, 4)
(0, 12, 5)
(0, 12, 6)
(0, 12, 7)
(0, 13, 0)
(0, 13, 1)
(0, 13, 2)
(0, 13, 3)
(0, 13, 4)
(0, 13, 5)
(0, 13, 6)
(0, 13, 7)
(0, 14, 0)
(0, 14, 1)
(0, 14, 2)
(0, 14, 3)
(0, 14, 4)
(0, 14, 5)
(0, 14, 6)
(0, 14, 7)
(0, 15, 0)
(0, 15, 1)
(0, 15, 2)
(0, 15, 3)
(0, 15, 4)
(0, 15, 5)
(0, 15, 6)
(0, 15, 7)
(0, 16, 0)
(0, 16, 1)
(0, 16, 2)
(0, 16, 3)
(0, 16, 4)
(0, 16, 5)
(0, 16, 6)
(0, 16, 7)
(0, 17, 0)
(0, 17, 1)
(0, 17, 2)
(0, 17, 3)
(0, 17, 4)
(0, 17, 5)
(0, 17, 6)
(0, 17, 7)
(0, 18, 0)
(0, 18, 1)
(0, 18, 2)
(0, 18, 3)
(0, 18, 4)
(0, 18, 5)
(0, 18, 6)
(0, 18, 7)
(0, 19, 0)
(0, 19, 1)
(0, 19, 2)
(0, 19, 3)
(0, 19, 4)
(0, 19, 5)
(0, 19, 6)
(0, 19, 7)
(0, 20, 0)
(0, 20, 1)
(0, 20, 2)
(0, 20, 3)
(0, 20, 4)
(0, 20, 5)
(0, 20, 6)
(0, 20, 7)
(0, 21, 0)
(0, 21, 1)
(0, 21, 2)
(0, 21, 3)
(0, 21, 4)
(0, 21, 5)
(0, 21, 6)
(0, 21, 7)
(0, 22, 0)
(0, 22, 1)
(0, 22, 2)
(0, 22, 3)
(0, 22, 4)
(0, 22, 5)
(0, 22, 6)
(0, 22, 7)
(0, 23, 0)
(0, 23, 1)
(0, 23, 2)
(0, 23, 3)
(0, 23, 4)
(0, 23, 5)
(0, 23, 6)
(0, 23, 7)
(0, 24, 0)
(0, 24, 1)
(0, 24, 2)
(0, 24, 3)
(0, 24, 4)
(0, 24, 5)
(0, 24, 6)
(0, 24, 7)
(0, 25, 0)
(0, 25, 1)
(0, 25, 2)
(0, 25, 3)
(0, 25, 4)
(0, 25, 5)
(0, 25, 6)
(0, 25, 7)
(0, 26, 0)
(0, 26, 1)
(0, 26, 2)
(0, 26, 3)
(0, 26, 4)
(0, 26, 5)
(0, 26, 6)
(0, 26, 7)
(0, 27, 0)
(0, 27, 1)
(0, 27, 2)
(0, 27, 3)
(0, 27, 4)
(0, 27, 5)
(0, 27, 6)
(0, 27, 7)
(0, 28, 0)
(0, 28, 1)
(0, 28, 2)
(0, 28, 3)
(0, 28, 4)
(0, 28, 5)
(0, 28, 6)
(0, 28, 7)
(0, 29, 0)
(0, 29, 1)
(0, 29, 2)
(0, 29, 3)
(0, 29, 4)
(0, 29, 5)
(0, 29, 6)
(0, 29, 7)
(0, 30, 0)
(0, 30, 1)
(0, 30, 2)
(0, 30, 3)
(0, 30, 4)
(0, 30, 5)
(0, 30, 6)
(0, 30, 7)
(0, 31, 0)
(0, 31, 1)
(0, 31, 2)
(0, 31, 3)
(0, 31, 4)
(0, 31, 5)
(0, 31, 6)
(0, 31, 7)
(0, 32, 0)
(0, 32, 1)
(0, 32, 2)
(0, 32, 3)
(0, 32, 4)
(0, 32, 5)
(0, 32, 6)
(0, 32, 7)
(0, 33, 0)
(0, 33, 1)
(0, 33, 2)
(0, 33, 3)
(0, 33, 4)
(0, 33, 5)
(0, 33, 6)
(0, 33, 7)
(0, 34, 0)
(0, 34, 1)
(0, 34, 2)
(0, 34, 3)
(0, 34, 4)
(0, 34, 5)
(0, 34, 6)
(0, 34, 7)
(0, 35, 0)
(0, 35, 1)
(0, 35, 2)
(0, 35, 3)
(0, 35, 4)
(0, 35, 5)
(0, 35, 6)
(0, 35, 7)
(0, 36, 0)
(0, 36, 1)
(0, 36, 2)
(0, 36, 3)
(0, 36, 4)
(0, 36, 5)
(0, 36, 6)
(0, 36, 7)
(0, 37, 0)
(0, 37, 1)
(0, 37, 2)
(0, 37, 3)
(0, 37, 4)
(0, 37, 5)
(0, 37, 6)
(0, 37, 7)
(0, 38, 0)
(0, 38, 1)
(0, 38, 2)
(0, 38, 3)
(0, 38, 4)
(0, 38, 5)
(0, 38, 6)
(0, 38, 7)
(0, 39, 0)
(0, 39, 1)
(0, 39, 2)
(0, 39, 3)
(0, 39, 4)
(0, 39, 5)
(0, 39, 6)
(0, 39, 7)
(0, 40, 0)
(0, 40, 1)
(0, 40, 2)
(0, 40, 3)
(0, 40, 4)
(0, 40, 5)
(0, 40, 6)
(0, 40, 7)
(0, 41, 0)
(0, 41, 1)
(0, 41, 2)
(0, 41, 3)
(0, 41, 4)
(0, 41, 5)
(0, 41, 6)
(0, 41, 7)
(0, 42, 0)
(0, 42, 1)
(0, 42, 2)
(0, 42, 3)
(0, 42, 4)
(0, 42, 5)
(0, 42, 6)
(0, 42, 7)
(0, 43, 0)
(0, 43, 1)
(0, 43, 2)
(0, 43, 3)
(0, 43, 4)
(0, 43, 5)
(0, 43, 6)
(0, 43, 7)
(0, 44, 0)
(0, 44, 1)
(0, 44, 2)
(0, 44, 3)
(0, 44, 4)
(0, 44, 5)
(0, 44, 6)
(0, 44, 7)
(0, 45, 0)
(0, 45, 1)
(0, 45, 2)
(0, 45, 3)
(0, 45, 4)
(0, 45, 5)
(0, 45, 6)
(0, 45, 7)
(0, 46, 0)
(0, 46, 1)
(0, 46, 2)
(0, 46, 3)
(0, 46, 4)
(0, 46, 5)
(0, 46, 6)
(0, 46, 7)
(0, 47, 0)
(0, 47, 1)
(0, 47, 2)
(0, 47, 3)
(0, 47, 4)
(0, 47, 5)
(0, 47, 6)
(0, 47, 7)
(0, 48, 0)
(0, 48, 1)
(0, 48, 2)
(0, 48, 3)
(0, 48, 4)
(0, 48, 5)
(0, 48, 6)
(0, 48, 7)
(0, 49, 0)
(0, 49, 1)
(0, 49, 2)
(0, 49, 3)
(0, 49, 4)
(0, 49, 5)
(0, 49, 6)
(0, 49, 7)
(0, 50, 0)
(0, 50, 1)
(0, 50, 2)
(0, 50, 3)
(0, 50, 4)
(0, 50, 5)
(0, 50, 6)
(0, 50, 7)
(0, 51, 0)
(0, 51, 1)
(0, 51, 2)
(0, 51, 3)
(0, 51, 4)
(0, 51, 5)
(0, 51, 6)
(0, 51, 7)
(0, 52, 0)
(0, 52, 1)
(0, 52, 2)
(0, 52, 3)
(0, 52, 4)
(0, 52, 5)
(0, 52, 6)
(0, 52, 7)
(0, 53, 0)
(0, 53, 1)
(0, 53, 2)
(0, 53, 3)
(0, 53, 4)
(0, 53, 5)
(0, 53, 6)
(0, 53, 7)
(0, 54, 0)
(0, 54, 1)
(0, 54, 2)
(0, 54, 3)
(0, 54, 4)
(0, 54, 5)
(0, 54, 6)
(0, 54, 7)
(0, 55, 0)
(0, 55, 1)
(0, 55, 2)
(0, 55, 3)
(0, 55, 4)
(0, 55, 5)
(0, 55, 6)
(0, 55, 7)
(0, 56, 0)
(0, 56, 1)
(0, 56, 2)
(0, 56, 3)
(0, 56, 4)
(0, 56, 5)
(0, 56, 6)
(0, 56, 7)
(0, 57, 0)
(0, 57, 1)
(0, 57, 2)
(0, 57, 3)
(0, 57, 4)
(0, 57, 5)
(0, 57, 6)
(0, 57, 7)
(0, 58, 0)
(0, 58, 1)
(0, 58, 2)
(0, 58, 3)
(0, 58, 4)
(0, 58, 5)
(0, 58, 6)
(0, 58, 7)
(0, 59, 0)
(0, 59, 1)
(0, 59, 2)
(0, 59, 3)
(0, 59, 4)
(0, 59, 5)
(0, 59, 6)
(0, 59, 7)
(0, 60, 0)
(0, 60, 1)
(0, 60, 2)
(0, 60, 3)
(0, 60, 4)
(0, 60, 5)
(0, 60, 6)
(0, 60, 7)
(0, 61, 0)
(0, 61, 1)
(0, 61, 2)
(0, 61, 3)
(0, 61, 4)
(0, 61, 5)
(0, 61, 6)
(0, 61, 7)
(0, 62, 0)
(0, 62, 1)
(0, 62, 2)
(0, 62, 3)
(0, 62, 4)
(0, 62, 5)
(0, 62, 6)
(0, 62, 7)
(0, 63, 0)
(0, 63, 1)
(0, 63, 2)
(0, 63, 3)
(0, 63, 4)
(0, 63, 5)
(0, 63, 6)
(0, 63, 7)
(0, 64, 0)
(0, 64, 1)
(0, 64, 2)
(0, 64, 3)
(0, 64, 4)
(0, 64, 5)
(0, 64, 6)
(0, 64, 7)
(0, 65, 0)
(0, 65, 1)
(0, 65, 2)
(0, 65, 3)
(0, 65, 4)
(0, 65, 5)
(0, 65, 6)
(0, 65, 7)
(0, 66, 0)
(0, 66, 1)
(0, 66, 2)
(0, 66, 3)
(0, 66, 4)
(0, 66, 5)
(0, 66, 6)
(0, 66, 7)
(0, 67, 0)
(0, 67, 1)
(0, 67, 2)
(0, 67, 3)
(0, 67, 4)
(0, 67, 5)
(0, 67, 6)
(0, 67, 7)
(0, 68, 0)
(0, 68, 1)
(0, 68, 2)
(0, 68, 3)
(0, 68, 4)
(0, 68, 5)
(0, 68, 6)
(0, 68, 7)
(0, 69, 0)
(0, 69, 1)
(0, 69, 2)
(0, 69, 3)
(0, 69, 4)
(0, 69, 5)
(0, 69, 6)
(0, 69, 7)
(0, 70, 0)
(0, 70, 1)
(0, 70, 2)
(0, 70, 3)
(0, 70, 4)
(0, 70, 5)
(0, 70, 6)
(0, 70, 7)
(0, 71, 0)
(0, 71, 1)
(0, 71, 2)
(0, 71, 3)
(0, 71, 4)
(0, 71, 5)
(0, 71, 6)
(0, 71, 7)
(0, 72, 0)
(0, 72, 1)
(0, 72, 2)
(0, 72, 3)
(0, 72, 4)
(0, 72, 5)
(0, 72, 6)
(0, 72, 7)
(0, 73, 0)
(0, 73, 1)
(0, 73, 2)
(0, 73, 3)
(0, 73, 4)
(0, 73, 5)
(0, 73, 6)
(0, 73, 7)
(0, 74, 0)
(0, 74, 1)
(0, 74, 2)
(0, 74, 3)
(0, 74, 4)
(0, 74, 5)
(0, 74, 6)
(0, 74, 7)
(0, 75, 0)
(0, 75, 1)
(0, 75, 2)
(0, 75, 3)
(0, 75, 4)
(0, 75, 5)
(0, 75, 6)
(0, 75, 7)
(0, 76, 0)
(0, 76, 1)
(0, 76, 2)
(0, 76, 3)
(0, 76, 4)
(0, 76, 5)
(0, 76, 6)
(0, 76, 7)
(0, 77, 0)
(0, 77, 1)
(0, 77, 2)
(0, 77, 3)
(0, 77, 4)
(0, 77, 5)
(0, 77, 6)
(0, 77, 7)
(0, 78, 0)
(0, 78, 1)
(0, 78, 2)
(0, 78, 3)
(0, 78, 4)
(0, 78, 5)
(0, 78, 6)
(0, 78, 7)
(0, 79, 0)
(0, 79, 1)
(0, 79, 2)
(0, 79, 3)
(0, 79, 4)
(0, 79, 5)
(0, 79, 6)
(0, 79, 7)
(0, 80, 0)
(0, 80, 1)
(0, 80, 2)
(0, 80, 3)
(0, 80, 4)
(0, 80, 5)
(0, 80, 6)
(0, 80, 7)
(0, 81, 0)
(0, 81, 1)
(0, 81, 2)
(0, 81, 3)
(0, 81, 4)
(0, 81, 5)
(0, 81, 6)
(0, 81, 7)
(0, 82, 0)
(0, 82, 1)
(0, 82, 2)
(0, 82, 3)
(0, 82, 4)
(0, 82, 5)
(0, 82, 6)
(0, 82, 7)
(0, 83, 0)
(0, 83, 1)
(0, 83, 2)
(0, 83, 3)
(0, 83, 4)
(0, 83, 5)
(0, 83, 6)
(0, 83, 7)
(0, 84, 0)
(0, 84, 1)
(0, 84, 2)
(0, 84, 3)
(0, 84, 4)
(0, 84, 5)
(0, 84, 6)
(0, 84, 7)
(0, 85, 0)
(0, 85, 1)
(0, 85, 2)
(0, 85, 3)
(0, 85, 4)
(0, 85, 5)
(0, 85, 6)
(0, 85, 7)
(0, 86, 0)
(0, 86, 1)
(0, 86, 2)
(0, 86, 3)
(0, 86, 4)
(0, 86, 5)
(0, 86, 6)
(0, 86, 7)
(0, 87, 0)
(0, 87, 1)
(0, 87, 2)
(0, 87, 3)
(0, 87, 4)
(0, 87, 5)
(0, 87, 6)
(0, 87, 7)
(0, 88, 0)
(0, 88, 1)
(0, 88, 2)
(0, 88, 3)
(0, 88, 4)
(0, 88, 5)
(0, 88, 6)
(0, 88, 7)
(0, 89, 0)
(0, 89, 1)
(0, 89, 2)
(0, 89, 3)
(0, 89, 4)
(0, 89, 5)
(0, 89, 6)
(0, 89, 7)
(0, 90, 0)
(0, 90, 1)
(0, 90, 2)
(0, 90, 3)
(0, 90, 4)
(0, 90, 5)
(0, 90, 6)
(0, 90, 7)
(0, 91, 0)
(0, 91, 1)
(0, 91, 2)
(0, 91, 3)
(0, 91, 4)
(0, 91, 5)
(0, 91, 6)
(0, 91, 7)
(0, 92, 0)
(0, 92, 1)
(0, 92, 2)
(0, 92, 3)
(0, 92, 4)
(0, 92, 5)
(0, 92, 6)
(0, 92, 7)
(0, 93, 0)
(0, 93, 1)
(0, 93, 2)
(0, 93, 3)
(0, 93, 4)
(0, 93, 5)
(0, 93, 6)
(0, 93, 7)
(0, 94, 0)
(0, 94, 1)
(0, 94, 2)
(0, 94, 3)
(0, 94, 4)
(0, 94, 5)
(0, 94, 6)
(0, 94, 7)
(0, 95, 0)
(0, 95, 1)
(0, 95, 2)
(0, 95, 3)
(0, 95, 4)
(0, 95, 5)
(0, 95, 6)
(0, 95, 7)
(0, 96, 0)
(0, 96, 1)
(0, 96, 2)
(0, 96, 3)
(0, 96, 4)
(0, 96, 5)
(0, 96, 6)
(0, 96, 7)
(0, 97, 0)
(0, 97, 1)
(0, 97, 2)
(0, 97, 3)
(0, 97, 4)
(0, 97, 5)
(0, 97, 6)
(0, 97, 7)
(0, 98, 0)
(0, 98, 1)
(0, 98, 2)
(0, 98, 3)
(0, 98, 4)
(0, 98, 5)
(0, 98, 6)
(0, 98, 7)
(0, 99, 0)
(0, 99, 1)
(0, 99, 2)
(0, 99, 3)
(0, 99, 4)
(0, 99, 5)
(0, 99, 6)
(0, 99, 7)
(0, 100, 0)
(0, 100, 1)
(0, 100, 2)
(0, 100, 3)
(0, 100, 4)
(0, 100, 5)
(0, 100, 6)
(0, 100, 7)
(0, 101, 0)
(0, 101, 1)
(0, 101, 2)
(0, 101, 3)
(0, 101, 4)
(0, 101, 5)
(0, 101, 6)
(0, 101, 7)
(0, 102, 0)
(0, 102, 1)
(0, 102, 2)
(0, 102, 3)
(0, 102, 4)
(0, 102, 5)
(0, 102, 6)
(0, 102, 7)
(0, 103, 0)
(0, 103, 1)
(0, 103, 2)
(0, 103, 3)
(0, 103, 4)
(0, 103, 5)
(0, 103, 6)
(0, 103, 7)
(0, 104, 0)
(0, 104, 1)
(0, 104, 2)
(0, 104, 3)
(0, 104, 4)
(0, 104, 5)
(0, 104, 6)
(0, 104, 7)
(0, 105, 0)
(0, 105, 1)
(0, 105, 2)
(0, 105, 3)
(0, 105, 4)
(0, 105, 5)
(0, 105, 6)
(0, 105, 7)
(0, 106, 0)
(0, 106, 1)
(0, 106, 2)
(0, 106, 3)
(0, 106, 4)
(0, 106, 5)
(0, 106, 6)
(0, 106, 7)
(0, 107, 0)
(0, 107, 1)
(0, 107, 2)
(0, 107, 3)
(0, 107, 4)
(0, 107, 5)
(0, 107, 6)
(0, 107, 7)
(0, 108, 0)
(0, 108, 1)
(0, 108, 2)
(0, 108, 3)
(0, 108, 4)
(0, 108, 5)
(0, 108, 6)
(0, 108, 7)
(0, 109, 0)
(0, 109, 1)
(0, 109, 2)
(0, 109, 3)
(0, 109, 4)
(0, 109, 5)
(0, 109, 6)
(0, 109, 7)
(0, 110, 0)
(0, 110, 1)
(0, 110, 2)
(0, 110, 3)
(0, 110, 4)
(0, 110, 5)
(0, 110, 6)
(0, 110, 7)
(0, 111, 0)
(0, 111, 1)
(0, 111, 2)
(0, 111, 3)
(0, 111, 4)
(0, 111, 5)
(0, 111, 6)
(0, 111, 7)
(0, 112, 0)
(0, 112, 1)
(0, 112, 2)
(0, 112, 3)
(0, 112, 4)
(0, 112, 5)
(0, 112, 6)
(0, 112, 7)
(0, 113, 0)
(0, 113, 1)
(0, 113, 2)
(0, 113, 3)
(0, 113, 4)
(0, 113, 5)
(0, 113, 6)
(0, 113, 7)
(0, 114, 0)
(0, 114, 1)
(0, 114, 2)
(0, 114, 3)
(0, 114, 4)
(0, 114, 5)
(0, 114, 6)
(0, 114, 7)
(0, 115, 0)
(0, 115, 1)
(0, 115, 2)
(0, 115, 3)
(0, 115, 4)
(0, 115, 5)
(0, 115, 6)
(0, 115, 7)
(0, 116, 0)
(0, 116, 1)
(0, 116, 2)
(0, 116, 3)
(0, 116, 4)
(0, 116, 5)
(0, 116, 6)
(0, 116, 7)
(0, 117, 0)
(0, 117, 1)
(0, 117, 2)
(0, 117, 3)
(0, 117, 4)
(0, 117, 5)
(0, 117, 6)
(0, 117, 7)
(0, 118, 0)
(0, 118, 1)
(0, 118, 2)
(0, 118, 3)
(0, 118, 4)
(0, 118, 5)
(0, 118, 6)
(0, 118, 7)
(0, 119, 0)
(0, 119, 1)
(0, 119, 2)
(0, 119, 3)
(0, 119, 4)
(0, 119, 5)
(0, 119, 6)
(0, 119, 7)
(0, 120, 0)
(0, 120, 1)
(0, 120, 2)
(0, 120, 3)
(0, 120, 4)
(0, 120, 5)
(0, 120, 6)
(0, 120, 7)
(0, 121, 0)
(0, 121, 1)
(0, 121, 2)
(0, 121, 3)
(0, 121, 4)
(0, 121, 5)
(0, 121, 6)
(0, 121, 7)
(0, 122, 0)
(0, 122, 1)
(0, 122, 2)
(0, 122, 3)
(0, 122, 4)
(0, 122, 5)
(0, 122, 6)
(0, 122, 7)
(0, 123, 0)
(0, 123, 1)
(0, 123, 2)
(0, 123, 3)
(0, 123, 4)
(0, 123, 5)
(0, 123, 6)
(0, 123, 7)
(0, 124, 0)
(0, 124, 1)
(0, 124, 2)
(0, 124, 3)
(0, 124, 4)
(0, 124, 5)
(0, 124, 6)
(0, 124, 7)
(0, 125, 0)
(0, 125, 1)
(0, 125, 2)
(0, 125, 3)
(0, 125, 4)
(0, 125, 5)
(0, 125, 6)
(0, 125, 7)
(0, 126, 0)
(0, 126, 1)
(0, 126, 2)
(0, 126, 3)
(0, 126, 4)
(0, 126, 5)
(0, 126, 6)
(0, 126, 7)
(0, 127, 0)
(0, 127, 1)
(0, 127, 2)
(0, 127, 3)
(0, 127, 4)
(0, 127, 5)
(0, 127, 6)
(0, 127, 7)
(0, 128, 0)
(0, 128, 1)
(0, 128, 2)
(0, 128, 3)
(0, 128, 4)
(0, 128, 5)
(0, 128, 6)
(0, 128, 7)
(0, 129, 0)
(0, 129, 1)
(0, 129, 2)
(0, 129, 3)
(0, 129, 4)
(0, 129, 5)
(0, 129, 6)
(0, 129, 7)
(0, 130, 0)
(0, 130, 1)
(0, 130, 2)
(0, 130, 3)
(0, 130, 4)
(0, 130, 5)
(0, 130, 6)
(0, 130, 7)
(0, 131, 0)
(0, 131, 1)
(0, 131, 2)
(0, 131, 3)
(0, 131, 4)
(0, 131, 5)
(0, 131, 6)
(0, 131, 7)
(0, 132, 0)
(0, 132, 1)
(0, 132, 2)
(0, 132, 3)
(0, 132, 4)
(0, 132, 5)
(0, 132, 6)
(0, 132, 7)
(0, 133, 0)
(0, 133, 1)
(0, 133, 2)
(0, 133, 3)
(0, 133, 4)
(0, 133, 5)
(0, 133, 6)
(0, 133, 7)
(0, 134, 0)
(0, 134, 1)
(0, 134, 2)
(0, 134, 3)
(0, 134, 4)
(0, 134, 5)
(0, 134, 6)
(0, 134, 7)
(0, 135, 0)
(0, 135, 1)
(0, 135, 2)
(0, 135, 3)
(0, 135, 4)
(0, 135, 5)
(0, 135, 6)
(0, 135, 7)
(0, 136, 0)
(0, 136, 1)
(0, 136, 2)
(0, 136, 3)
(0, 136, 4)
(0, 136, 5)
(0, 136, 6)
(0, 136, 7)
(0, 137, 0)
(0, 137, 1)
(0, 137, 2)
(0, 137, 3)
(0, 137, 4)
(0, 137, 5)
(0, 137, 6)
(0, 137, 7)
(0, 138, 0)
(0, 138, 1)
(0, 138, 2)
(0, 138, 3)
(0, 138, 4)
(0, 138, 5)
(0, 138, 6)
(0, 138, 7)
(0, 139, 0)
(0, 139, 1)
(0, 139, 2)
(0, 139, 3)
(0, 139, 4)
(0, 139, 5)
(0, 139, 6)
(0, 139, 7)
(0, 140, 0)
(0, 140, 1)
(0, 140, 2)
(0, 140, 3)
(0, 140, 4)
(0, 140, 5)
(0, 140, 6)
(0, 140, 7)
(0, 141, 0)
(0, 141, 1)
(0, 141, 2)
(0, 141, 3)
(0, 141, 4)
(0, 141, 5)
(0, 141, 6)
(0, 141, 7)
(0, 142, 0)
(0, 142, 1)
(0, 142, 2)
(0, 142, 3)
(0, 142, 4)
(0, 142, 5)
(0, 142, 6)
(0, 142, 7)
(0, 143, 0)
(0, 143, 1)
(0, 143, 2)
(0, 143, 3)
(0, 143, 4)
(0, 143, 5)
(0, 143, 6)
(0, 143, 7)
(0, 144, 0)
(0, 144, 1)
(0, 144, 2)
(0, 144, 3)
(0, 144, 4)
(0, 144, 5)
(0, 144, 6)
(0, 144, 7)
(0, 145, 0)
(0, 145, 1)
(0, 145, 2)
(0, 145, 3)
(0, 145, 4)
(0, 145, 5)
(0, 145, 6)
(0, 145, 7)
(0, 146, 0)
(0, 146, 1)
(0, 146, 2)
(0, 146, 3)
(0, 146, 4)
(0, 146, 5)
(0, 146, 6)
(0, 146, 7)
(0, 147, 0)
(0, 147, 1)
(0, 147, 2)
(0, 147, 3)
(0, 147, 4)
(0, 147, 5)
(0, 147, 6)
(0, 147, 7)
(0, 148, 0)
(0, 148, 1)
(0, 148, 2)
(0, 148, 3)
(0, 148, 4)
(0, 148, 5)
(0, 148, 6)
(0, 148, 7)
(0, 149, 0)
(0, 149, 1)
(0, 149, 2)
(0, 149, 3)
(0, 149, 4)
(0, 149, 5)
(0, 149, 6)
(0, 149, 7)
(0, 150, 0)
(0, 150, 1)
(0, 150, 2)
(0, 150, 3)
(0, 150, 4)
(0, 150, 5)
(0, 150, 6)
(0, 150, 7)
(0, 151, 0)
(0, 151, 1)
(0, 151, 2)
(0, 151, 3)
(0, 151, 4)
(0, 151, 5)
(0, 151, 6)
(0, 151, 7)
(0, 152, 0)
(0, 152, 1)
(0, 152, 2)
(0, 152, 3)
(0, 152, 4)
(0, 152, 5)
(0, 152, 6)
(0, 152, 7)
(0, 153, 0)
(0, 153, 1)
(0, 153, 2)
(0, 153, 3)
(0, 153, 4)
(0, 153, 5)
(0, 153, 6)
(0, 153, 7)
(0, 154, 0)
(0, 154, 1)
(0, 154, 2)
(0, 154, 3)
(0, 154, 4)
(0, 154, 5)
(0, 154, 6)
(0, 154, 7)
(0, 155, 0)
(0, 155, 1)
(0, 155, 2)
(0, 155, 3)
(0, 155, 4)
(0, 155, 5)
(0, 155, 6)
(0, 155, 7)
(0, 156, 0)
(0, 156, 1)
(0, 156, 2)
(0, 156, 3)
(0, 156, 4)
(0, 156, 5)
(0, 156, 6)
(0, 156, 7)
(0, 157, 0)
(0, 157, 1)
(0, 157, 2)
(0, 157, 3)
(0, 157, 4)
(0, 157, 5)
(0, 157, 6)
(0, 157, 7)
(0, 158, 0)
(0, 158, 1)
(0, 158, 2)
(0, 158, 3)
(0, 158, 4)
(0, 158, 5)
(0, 158, 6)
(0, 158, 7)
(0, 159, 0)
(0, 159, 1)
(0, 159, 2)
(0, 159, 3)
(0, 159, 4)
(0, 159, 5)
(0, 159, 6)
(0, 159, 7)
(0, 160, 0)
(0, 160, 1)
(0, 160, 2)
(0, 160, 3)
(0, 160, 4)
(0, 160, 5)
(0, 160, 6)
(0, 160, 7)
(0, 161, 0)
(0, 161, 1)
(0, 161, 2)
(0, 161, 3)
(0, 161, 4)
(0, 161, 5)
(0, 161, 6)
(0, 161, 7)
(0, 162, 0)
(0, 162, 1)
(0, 162, 2)
(0, 162, 3)
(0, 162, 4)
(0, 162, 5)
(0, 162, 6)
(0, 162, 7)
(0, 163, 0)
(0, 163, 1)
(0, 163, 2)
(0, 163, 3)
(0, 163, 4)
(0, 163, 5)
(0, 163, 6)
(0, 163, 7)
(0, 164, 0)
(0, 164, 1)
(0, 164, 2)
(0, 164, 3)
(0, 164, 4)
(0, 164, 5)
(0, 164, 6)
(0, 164, 7)
(0, 165, 0)
(0, 165, 1)
(0, 165, 2)
(0, 165, 3)
(0, 165, 4)
(0, 165, 5)
(0, 165, 6)
(0, 165, 7)
(0, 166, 0)
(0, 166, 1)
(0, 166, 2)
(0, 166, 3)
(0, 166, 4)
(0, 166, 5)
(0, 166, 6)
(0, 166, 7)
(0, 167, 0)
(0, 167, 1)
(0, 167, 2)
(0, 167, 3)
(0, 167, 4)
(0, 167, 5)
(0, 167, 6)
(0, 167, 7)
(0, 168, 0)
(0, 168, 1)
(0, 168, 2)
(0, 168, 3)
(0, 168, 4)
(0, 168, 5)
(0, 168, 6)
(0, 168, 7)
(0, 169, 0)
(0, 169, 1)
(0, 169, 2)
(0, 169, 3)
(0, 169, 4)
(0, 169, 5)
(0, 169, 6)
(0, 169, 7)
(0, 170, 0)
(0, 170, 1)
(0, 170, 2)
(0, 170, 3)
(0, 170, 4)
(0, 170, 5)
(0, 170, 6)
(0, 170, 7)
(0, 171, 0)
(0, 171, 1)
(0, 171, 2)
(0, 171, 3)
(0, 171, 4)
(0, 171, 5)
(0, 171, 6)
(0, 171, 7)
(0, 172, 0)
(0, 172, 1)
(0, 172, 2)
(0, 172, 3)
(0, 172, 4)
(0, 172, 5)
(0, 172, 6)
(0, 172, 7)
(0, 173, 0)
(0, 173, 1)
(0, 173, 2)
(0, 173, 3)
(0, 173, 4)
(0, 173, 5)
(0, 173, 6)
(0, 173, 7)
(0, 174, 0)
(0, 174, 1)
(0, 174, 2)
(0, 174, 3)
(0, 174, 4)
(0, 174, 5)
(0, 174, 6)
(0, 174, 7)
(0, 175, 0)
(0, 175, 1)
(0, 175, 2)
(0, 175, 3)
(0, 175, 4)
(0, 175, 5)
(0, 175, 6)
(0, 175, 7)
(0, 176, 0)
(0, 176, 1)
(0, 176, 2)
(0, 176, 3)
(0, 176, 4)
(0, 176, 5)
(0, 176, 6)
(0, 176, 7)
(0, 177, 0)
(0, 177, 1)
(0, 177, 2)
(0, 177, 3)
(0, 177, 4)
(0, 177, 5)
(0, 177, 6)
(0, 177, 7)
(0, 178, 0)
(0, 178, 1)
(0, 178, 2)
(0, 178, 3)
(0, 178, 4)
(0, 178, 5)
(0, 178, 6)
(0, 178, 7)
(0, 179, 0)
(0, 179, 1)
(0, 179, 2)
(0, 179, 3)
(0, 179, 4)
(0, 179, 5)
(0, 179, 6)
(0, 179, 7)
(0, 180, 0)
(0, 180, 1)
(0, 180, 2)
(0, 180, 3)
(0, 180, 4)
(0, 180, 5)
(0, 180, 6)
(0, 180, 7)
(0, 181, 0)
(0, 181, 1)
(0, 181, 2)
(0, 181, 3)
(0, 181, 4)
(0, 181, 5)
(0, 181, 6)
(0, 181, 7)
(0, 182, 0)
(0, 182, 1)
(0, 182, 2)
(0, 182, 3)
(0, 182, 4)
(0, 182, 5)
(0, 182, 6)
(0, 182, 7)
(0, 183, 0)
(0, 183, 1)
(0, 183, 2)
(0, 183, 3)
(0, 183, 4)
(0, 183, 5)
(0, 183, 6)
(0, 183, 7)
(0, 184, 0)
(0, 184, 1)
(0, 184, 2)
(0, 184, 3)
(0, 184, 4)
(0, 184, 5)
(0, 184, 6)
(0, 184, 7)
(0, 185, 0)
(0, 185, 1)
(0, 185, 2)
(0, 185, 3)
(0, 185, 4)
(0, 185, 5)
(0, 185, 6)
(0, 185, 7)
(0, 186, 0)
(0, 186, 1)
(0, 186, 2)
(0, 186, 3)
(0, 186, 4)
(0, 186, 5)
(0, 186, 6)
(0, 186, 7)
(0, 187, 0)
(0, 187, 1)
(0, 187, 2)
(0, 187, 3)
(0, 187, 4)
(0, 187, 5)
(0, 187, 6)
(0, 187, 7)
(0, 188, 0)
(0, 188, 1)
(0, 188, 2)
(0, 188, 3)
(0, 188, 4)
(0, 188, 5)
(0, 188, 6)
(0, 188, 7)
(0, 189, 0)
(0, 189, 1)
(0, 189, 2)
(0, 189, 3)
(0, 189, 4)
(0, 189, 5)
(0, 189, 6)
(0, 189, 7)
(0, 190, 0)
(0, 190, 1)
(0, 190, 2)
(0, 190, 3)
(0, 190, 4)
(0, 190, 5)
(0, 190, 6)
(0, 190, 7)
(0, 191, 0)
(0, 191, 1)
(0, 191, 2)
(0, 191, 3)
(0, 191, 4)
(0, 191, 5)
(0, 191, 6)
(0, 191, 7)
(0, 192, 0)
(0, 192, 1)
(0, 192, 2)
(0, 192, 3)
(0, 192, 4)
(0, 192, 5)
(0, 192, 6)
(0, 192, 7)
(0, 193, 0)
(0, 193, 1)
(0, 193, 2)
(0, 193, 3)
(0, 193, 4)
(0, 193, 5)
(0, 193, 6)
(0, 193, 7)
(0, 194, 0)
(0, 194, 1)
(0, 194, 2)
(0, 194, 3)
(0, 194, 4)
(0, 194, 5)
(0, 194, 6)
(0, 194, 7)
(0, 195, 0)
(0, 195, 1)
(0, 195, 2)
(0, 195, 3)
(0, 195, 4)
(0, 195, 5)
(0, 195, 6)
(0, 195, 7)
(0, 196, 0)
(0, 196, 1)
(0, 196, 2)
(0, 196, 3)
(0, 196, 4)
(0, 196, 5)
(0, 196, 6)
(0, 196, 7)
(0, 197, 0)
(0, 197, 1)
(0, 197, 2)
(0, 197, 3)
(0, 197, 4)
(0, 197, 5)
(0, 197, 6)
(0, 197, 7)
(0, 198, 0)
(0, 198, 1)
(0, 198, 2)
(0, 198, 3)
(0, 198, 4)
(0, 198, 5)
(0, 198, 6)
(0, 198, 7)
(0, 199, 0)
(0, 199, 1)
(0, 199, 2)
(0, 199, 3)
(0, 199, 4)
(0, 199, 5)
(0, 199, 6)
(0, 199, 7)
(0, 200, 0)
(0, 200, 1)
(0, 200, 2)
(0, 200, 3)
(0, 200, 4)
(0, 200, 5)
(0, 200, 6)
(0, 200, 7)
(0, 201, 0)
(0, 201, 1)
(0, 201, 2)
(0, 201, 3)
(0, 201, 4)
(0, 201, 5)
(0, 201, 6)
(0, 201, 7)
(0, 202, 0)
(0, 202, 1)
(0, 202, 2)
(0, 202, 3)
(0, 202, 4)
(0, 202, 5)
(0, 202, 6)
(0, 202, 7)
(0, 203, 0)
(0, 203, 1)
(0, 203, 2)
(0, 203, 3)
(0, 203, 4)
(0, 203, 5)
(0, 203, 6)
(0, 203, 7)
(0, 204, 0)
(0, 204, 1)
(0, 204, 2)
(0, 204, 3)
(0, 204, 4)
(0, 204, 5)
(0, 204, 6)
(0, 204, 7)
(0, 205, 0)
(0, 205, 1)
(0, 205, 2)
(0, 205, 3)
(0, 205, 4)
(0, 205, 5)
(0, 205, 6)
(0, 205, 7)
(0, 206, 0)
(0, 206, 1)
(0, 206, 2)
(0, 206, 3)
(0, 206, 4)
(0, 206, 5)
(0, 206, 6)
(0, 206, 7)
(0, 207, 0)
(0, 207, 1)
(0, 207, 2)
(0, 207, 3)
(0, 207, 4)
(0, 207, 5)
(0, 207, 6)
(0, 207, 7)
(0, 208, 0)
(0, 208, 1)
(0, 208, 2)
(0, 208, 3)
(0, 208, 4)
(0, 208, 5)
(0, 208, 6)
(0, 208, 7)
(0, 209, 0)
(0, 209, 1)
(0, 209, 2)
(0, 209, 3)
(0, 209, 4)
(0, 209, 5)
(0, 209, 6)
(0, 209, 7)
(0, 210, 0)
(0, 210, 1)
(0, 210, 2)
(0, 210, 3)
(0, 210, 4)
(0, 210, 5)
(0, 210, 6)
(0, 210, 7)
(0, 211, 0)
(0, 211, 1)
(0, 211, 2)
(0, 211, 3)
(0, 211, 4)
(0, 211, 5)
(0, 211, 6)
(0, 211, 7)
(0, 212, 0)
(0, 212, 1)
(0, 212, 2)
(0, 212, 3)
(0, 212, 4)
(0, 212, 5)
(0, 212, 6)
(0, 212, 7)
(0, 213, 0)
(0, 213, 1)
(0, 213, 2)
(0, 213, 3)
(0, 213, 4)
(0, 213, 5)
(0, 213, 6)
(0, 213, 7)
(0, 214, 0)
(0, 214, 1)
(0, 214, 2)
(0, 214, 3)
(0, 214, 4)
(0, 214, 5)
(0, 214, 6)
(0, 214, 7)
(0, 215, 0)
(0, 215, 1)
(0, 215, 2)
(0, 215, 3)
(0, 215, 4)
(0, 215, 5)
(0, 215, 6)
(0, 215, 7)
(0, 216, 0)
(0, 216, 1)
(0, 216, 2)
(0, 216, 3)
(0, 216, 4)
(0, 216, 5)
(0, 216, 6)
(0, 216, 7)
(0, 217, 0)
(0, 217, 1)
(0, 217, 2)
(0, 217, 3)
(0, 217, 4)
(0, 217, 5)
(0, 217, 6)
(0, 217, 7)
(0, 218, 0)
(0, 218, 1)
(0, 218, 2)
(0, 218, 3)
(0, 218, 4)
(0, 218, 5)
(0, 218, 6)
(0, 218, 7)
(0, 219, 0)
(0, 219, 1)
(0, 219, 2)
(0, 219, 3)
(0, 219, 4)
(0, 219, 5)
(0, 219, 6)
(0, 219, 7)
(0, 220, 0)
(0, 220, 1)
(0, 220, 2)
(0, 220, 3)
(0, 220, 4)
(0, 220, 5)
(0, 220, 6)
(0, 220, 7)
(0, 221, 0)
(0, 221, 1)
(0, 221, 2)
(0, 221, 3)
(0, 221, 4)
(0, 221, 5)
(0, 221, 6)
(0, 221, 7)
(0, 222, 0)
(0, 222, 1)
(0, 222, 2)
(0, 222, 3)
(0, 222, 4)
(0, 222, 5)
(0, 222, 6)
(0, 222, 7)
(0, 223, 0)
(0, 223, 1)
(0, 223, 2)
(0, 223, 3)
(0, 223, 4)
(0, 223, 5)
(0, 223, 6)
(0, 223, 7)
(0, 224, 0)
(0, 224, 1)
(0, 224, 2)
(0, 224, 3)
(0, 224, 4)
(0, 224, 5)
(0, 224, 6)
(0, 224, 7)
(0, 225, 0)
(0, 225, 1)
(0, 225, 2)
(0, 225, 3)
(0, 225, 4)
(0, 225, 5)
(0, 225, 6)
(0, 225, 7)
(0, 226, 0)
(0, 226, 1)
(0, 226, 2)
(0, 226, 3)
(0, 226, 4)
(0, 226, 5)
(0, 226, 6)
(0, 226, 7)
(0, 227, 0)
(0, 227, 1)
(0, 227, 2)
(0, 227, 3)
(0, 227, 4)
(0, 227, 5)
(0, 227, 6)
(0, 227, 7)
(0, 228, 0)
(0, 228, 1)
(0, 228, 2)
(0, 228, 3)
(0, 228, 4)
(0, 228, 5)
(0, 228, 6)
(0, 228, 7)
(0, 229, 0)
(0, 229, 1)
(0, 229, 2)
(0, 229, 3)
(0, 229, 4)
(0, 229, 5)
(0, 229, 6)
(0, 229, 7)
(0, 230, 0)
(0, 230, 1)
(0, 230, 2)
(0, 230, 3)
(0, 230, 4)
(0, 230, 5)
(0, 230, 6)
(0, 230, 7)
(0, 231, 0)
(0, 231, 1)
(0, 231, 2)
(0, 231, 3)
(0, 231, 4)
(0, 231, 5)
(0, 231, 6)
(0, 231, 7)
(0, 232, 0)
(0, 232, 1)
(0, 232, 2)
(0, 232, 3)
(0, 232, 4)
(0, 232, 5)
(0, 232, 6)
(0, 232, 7)
(0, 233, 0)
(0, 233, 1)
(0, 233, 2)
(0, 233, 3)
(0, 233, 4)
(0, 233, 5)
(0, 233, 6)
(0, 233, 7)
(0, 234, 0)
(0, 234, 1)
(0, 234, 2)
(0, 234, 3)
(0, 234, 4)
(0, 234, 5)
(0, 234, 6)
(0, 234, 7)
(0, 235, 0)
(0, 235, 1)
(0, 235, 2)
(0, 235, 3)
(0, 235, 4)
(0, 235, 5)
(0, 235, 6)
(0, 235, 7)
(0, 236, 0)
(0, 236, 1)
(0, 236, 2)
(0, 236, 3)
(0, 236, 4)
(0, 236, 5)
(0, 236, 6)
(0, 236, 7)
(0, 237, 0)
(0, 237, 1)
(0, 237, 2)
(0, 237, 3)
(0, 237, 4)
(0, 237, 5)
(0, 237, 6)
(0, 237, 7)
(0, 238, 0)
(0, 238, 1)
(0, 238, 2)
(0, 238, 3)
(0, 238, 4)
(0, 238, 5)
(0, 238, 6)
(0, 238, 7)
(0, 239, 0)
(0, 239, 1)
(0, 239, 2)
(0, 239, 3)
(0, 239, 4)
(0, 239, 5)
(0, 239, 6)
(0, 239, 7)
(0, 240, 0)
(0, 240, 1)
(0, 240, 2)
(0, 240, 3)
(0, 240, 4)
(0, 240, 5)
(0, 240, 6)
(0, 240, 7)
(0, 241, 0)
(0, 241, 1)
(0, 241, 2)
(0, 241, 3)
(0, 241, 4)
(0, 241, 5)
(0, 241, 6)
(0, 241, 7)
(0, 242, 0)
(0, 242, 1)
(0, 242, 2)
(0, 242, 3)
(0, 242, 4)
(0, 242, 5)
(0, 242, 6)
(0, 242, 7)
(0, 243, 0)
(0, 243, 1)
(0, 243, 2)
(0, 243, 3)
(0, 243, 4)
(0, 243, 5)
(0, 243, 6)
(0, 243, 7)
(0, 244, 0)
(0, 244, 1)
(0, 244, 2)
(0, 244, 3)
(0, 244, 4)
(0, 244, 5)
(0, 244, 6)
(0, 244, 7)
(0, 245, 0)
(0, 245, 1)
(0, 245, 2)
(0, 245, 3)
(0, 245, 4)
(0, 245, 5)
(0, 245, 6)
(0, 245, 7)
(0, 246, 0)
(0, 246, 1)
(0, 246, 2)
(0, 246, 3)
(0, 246, 4)
(0, 246, 5)
(0, 246, 6)
(0, 246, 7)
(0, 247, 0)
(0, 247, 1)
(0, 247, 2)
(0, 247, 3)
(0, 247, 4)
(0, 247, 5)
(0, 247, 6)
(0, 247, 7)
(0, 248, 0)
(0, 248, 1)
(0, 248, 2)
(0, 248, 3)
(0, 248, 4)
(0, 248, 5)
(0, 248, 6)
(0, 248, 7)
(0, 249, 0)
(0, 249, 1)
(0, 249, 2)
(0, 249, 3)
(0, 249, 4)
(0, 249, 5)
(0, 249, 6)
(0, 249, 7)
(0, 250, 0)
(0, 250, 1)
(0, 250, 2)
(0, 250, 3)
(0, 250, 4)
(0, 250, 5)
(0, 250, 6)
(0, 250, 7)
(0, 251, 0)
(0, 251, 1)
(0, 251, 2)
(0, 251, 3)
(0, 251, 4)
(0, 251, 5)
(0, 251, 6)
(0, 251, 7)
(0, 252, 0)
(0, 252, 1)
(0, 252, 2)
(0, 252, 3)
(0, 252, 4)
(0, 252, 5)
(0, 252, 6)
(0, 252, 7)
(0, 253, 0)
(0, 253, 1)
(0, 253, 2)
(0, 253, 3)
(0, 253, 4)
(0, 253, 5)
(0, 253, 6)
(0, 253, 7)
(0, 254, 0)
(0, 254, 1)
(0, 254, 2)
(0, 254, 3)
(0, 254, 4)
(0, 254, 5)
(0, 254, 6)
(0, 254, 7)
(0, 255, 0)
(0, 255, 1)
(0, 255, 2)
(0, 255, 3)
(0, 255, 4)
(0, 255, 5)
(0, 255, 6)
(0, 255, 7)
(1, 0, 0)
(1, 0, 1)
(1, 0, 2)
(1, 0, 3)
(1, 0, 4)
(1, 0, 5)
(1, 0, 6)
(1, 0, 7)
(1, 1, 0)
(1, 1, 1)
(1, 1, 2)
(1, 1, 3)
(1, 1, 4)
(1, 1, 5)
(1, 1, 6)
(1, 1, 7)
(1, 2, 0)
(1, 2, 1)
(1, 2, 2)
(1, 2, 3)
(1, 2, 4)
(1, 2, 5)
(1, 2, 6)
(1, 2, 7)
(1, 3, 0)
(1, 3, 1)
(1, 3, 2)
(1, 3, 3)
(1, 3, 4)
(1, 3, 5)
(1, 3, 6)
(1, 3, 7)
(1, 4, 0)
(1, 4, 1)
(1, 4, 2)
(1, 4, 3)
(1, 4, 4)
(1, 4, 5)
(1, 4, 6)
(1, 4, 7)
(1, 5, 0)
(1, 5, 1)
(1, 5, 2)
(1, 5, 3)
(1, 5, 4)
(1, 5, 5)
(1, 5, 6)
(1, 5, 7)
(1, 6, 0)
(1, 6, 1)
(1, 6, 2)
(1, 6, 3)
(1, 6, 4)
(1, 6, 5)
(1, 6, 6)
(1, 6, 7)
(1, 7, 0)
(1, 7, 1)
(1, 7, 2)
(1, 7, 3)
(1, 7, 4)
(1, 7, 5)
(1, 7, 6)
(1, 7, 7)
(1, 8, 0)
(1, 8, 1)
(1, 8, 2)
(1, 8, 3)
(1, 8, 4)
(1, 8, 5)
(1, 8, 6)
(1, 8, 7)
(1, 9, 0)
(1, 9, 1)
(1, 9, 2)
(1, 9, 3)
(1, 9, 4)
(1, 9, 5)
(1, 9, 6)
(1, 9, 7)
(1, 10, 0)
(1, 10, 1)
(1, 10, 2)
(1, 10, 3)
(1, 10, 4)
(1, 10, 5)
(1, 10, 6)
(1, 10, 7)
(1, 11, 0)
(1, 11, 1)
(1, 11, 2)
(1, 11, 3)
(1, 11, 4)
(1, 11, 5)
(1, 11, 6)
(1, 11, 7)
(1, 12, 0)
(1, 12, 1)
(1, 12, 2)
(1, 12, 3)
(1, 12, 4)
(1, 12, 5)
(1, 12, 6)
(1, 12, 7)
(1, 13, 0)
(1, 13, 1)
(1, 13, 2)
(1, 13, 3)
(1, 13, 4)
(1, 13, 5)
(1, 13, 6)
(1, 13, 7)
(1, 14, 0)
(1, 14, 1)
(1, 14, 2)
(1, 14, 3)
(1, 14, 4)
(1, 14, 5)
(1, 14, 6)
(1, 14, 7)
(1, 15, 0)
(1, 15, 1)
(1, 15, 2)
(1, 15, 3)
(1, 15, 4)
(1, 15, 5)
(1, 15, 6)
(1, 15, 7)
(1, 16, 0)
(1, 16, 1)
(1, 16, 2)
(1, 16, 3)
(1, 16, 4)
(1, 16, 5)
(1, 16, 6)
(1, 16, 7)
(1, 17, 0)
(1, 17, 1)
(1, 17, 2)
(1, 17, 3)
(1, 17, 4)
(1, 17, 5)
(1, 17, 6)
(1, 17, 7)
(1, 18, 0)
(1, 18, 1)
(1, 18, 2)
(1, 18, 3)
(1, 18, 4)
(1, 18, 5)
(1, 18, 6)
(1, 18, 7)
(1, 19, 0)
(1, 19, 1)
(1, 19, 2)
(1, 19, 3)
(1, 19, 4)
(1, 19, 5)
(1, 19, 6)
(1, 19, 7)
(1, 20, 0)
(1, 20, 1)
(1, 20, 2)
(1, 20, 3)
(1, 20, 4)
(1, 20, 5)
(1, 20, 6)
(1, 20, 7)
(1, 21, 0)
(1, 21, 1)
(1, 21, 2)
(1, 21, 3)
(1, 21, 4)
(1, 21, 5)
(1, 21, 6)
(1, 21, 7)
(1, 22, 0)
(1, 22, 1)
(1, 22, 2)
(1, 22, 3)
(1, 22, 4)
(1, 22, 5)
(1, 22, 6)
(1, 22, 7)
(1, 23, 0)
(1, 23, 1)
(1, 23, 2)
(1, 23, 3)
(1, 23, 4)
(1, 23, 5)
(1, 23, 6)
(1, 23, 7)
(1, 24, 0)
(1, 24, 1)
(1, 24, 2)
(1, 24, 3)
(1, 24, 4)
(1, 24, 5)
(1, 24, 6)
(1, 24, 7)
(1, 25, 0)
(1, 25, 1)
(1, 25, 2)
(1, 25, 3)
(1, 25, 4)
(1, 25, 5)
(1, 25, 6)
(1, 25, 7)
(1, 26, 0)
(1, 26, 1)
(1, 26, 2)
(1, 26, 3)
(1, 26, 4)
(1, 26, 5)
(1, 26, 6)
(1, 26, 7)
(1, 27, 0)
(1, 27, 1)
(1, 27, 2)
(1, 27, 3)
(1, 27, 4)
(1, 27, 5)
(1, 27, 6)
(1, 27, 7)
(1, 28, 0)
(1, 28, 1)
(1, 28, 2)
(1, 28, 3)
(1, 28, 4)
(1, 28, 5)
(1, 28, 6)
(1, 28, 7)
(1, 29, 0)
(1, 29, 1)
(1, 29, 2)
(1, 29, 3)
(1, 29, 4)
(1, 29, 5)
(1, 29, 6)
(1, 29, 7)
(1, 30, 0)
(1, 30, 1)
(1, 30, 2)
(1, 30, 3)
(1, 30, 4)
(1, 30, 5)
(1, 30, 6)
(1, 30, 7)
(1, 31, 0)
(1, 31, 1)
(1, 31, 2)
(1, 31, 3)
(1, 31, 4)
(1, 31, 5)
(1, 31, 6)
(1, 31, 7)
(1, 32, 0)
(1, 32, 1)
(1, 32, 2)
(1, 32, 3)
(1, 32, 4)
(1, 32, 5)
(1, 32, 6)
(1, 32, 7)
(1, 33, 0)
(1, 33, 1)
(1, 33, 2)
(1, 33, 3)
(1, 33, 4)
(1, 33, 5)
(1, 33, 6)
(1, 33, 7)
(1, 34, 0)
(1, 34, 1)
(1, 34, 2)
(1, 34, 3)
(1, 34, 4)
(1, 34, 5)
(1, 34, 6)
(1, 34, 7)
(1, 35, 0)
(1, 35, 1)
(1, 35, 2)
(1, 35, 3)
(1, 35, 4)
(1, 35, 5)
(1, 35, 6)
(1, 35, 7)
(1, 36, 0)
(1, 36, 1)
(1, 36, 2)
(1, 36, 3)
(1, 36, 4)
(1, 36, 5)
(1, 36, 6)
(1, 36, 7)
(1, 37, 0)
(1, 37, 1)
(1, 37, 2)
(1, 37, 3)
(1, 37, 4)
(1, 37, 5)
(1, 37, 6)
(1, 37, 7)
(1, 38, 0)
(1, 38, 1)
(1, 38, 2)
(1, 38, 3)
(1, 38, 4)
(1, 38, 5)
(1, 38, 6)
(1, 38, 7)
(1, 39, 0)
(1, 39, 1)
(1, 39, 2)
(1, 39, 3)
(1, 39, 4)
(1, 39, 5)
(1, 39, 6)
(1, 39, 7)
(1, 40, 0)
(1, 40, 1)
(1, 40, 2)
(1, 40, 3)
(1, 40, 4)
(1, 40, 5)
(1, 40, 6)
(1, 40, 7)
(1, 41, 0)
(1, 41, 1)
(1, 41, 2)
(1, 41, 3)
(1, 41, 4)
(1, 41, 5)
(1, 41, 6)
(1, 41, 7)
(1, 42, 0)
(1, 42, 1)
(1, 42, 2)
(1, 42, 3)
(1, 42, 4)
(1, 42, 5)
(1, 42, 6)
(1, 42, 7)
(1, 43, 0)
(1, 43, 1)
(1, 43, 2)
(1, 43, 3)
(1, 43, 4)
(1, 43, 5)
(1, 43, 6)
(1, 43, 7)
(1, 44, 0)
(1, 44, 1)
(1, 44, 2)
(1, 44, 3)
(1, 44, 4)
(1, 44, 5)
(1, 44, 6)
(1, 44, 7)
(1, 45, 0)
(1, 45, 1)
(1, 45, 2)
(1, 45, 3)
(1, 45, 4)
(1, 45, 5)
(1, 45, 6)
(1, 45, 7)
(1, 46, 0)
(1, 46, 1)
(1, 46, 2)
(1, 46, 3)
(1, 46, 4)
(1, 46, 5)
(1, 46, 6)
(1, 46, 7)
(1, 47, 0)
(1, 47, 1)
(1, 47, 2)
(1, 47, 3)
(1, 47, 4)
(1, 47, 5)
(1, 47, 6)
(1, 47, 7)
(1, 48, 0)
(1, 48, 1)
(1, 48, 2)
(1, 48, 3)
(1, 48, 4)
(1, 48, 5)
(1, 48, 6)
(1, 48, 7)
(1, 49, 0)
(1, 49, 1)
(1, 49, 2)
(1, 49, 3)
(1, 49, 4)
(1, 49, 5)
(1, 49, 6)
(1, 49, 7)
(1, 50, 0)
(1, 50, 1)
(1, 50, 2)
(1, 50, 3)
(1, 50, 4)
(1, 50, 5)
(1, 50, 6)
(1, 50, 7)
(1, 51, 0)
(1, 51, 1)
(1, 51, 2)
(1, 51, 3)
(1, 51, 4)
(1, 51, 5)
(1, 51, 6)
(1, 51, 7)
(1, 52, 0)
(1, 52, 1)
(1, 52, 2)
(1, 52, 3)
(1, 52, 4)
(1, 52, 5)
(1, 52, 6)
(1, 52, 7)
(1, 53, 0)
(1, 53, 1)
(1, 53, 2)
(1, 53, 3)
(1, 53, 4)
(1, 53, 5)
(1, 53, 6)
(1, 53, 7)
(1, 54, 0)
(1, 54, 1)
(1, 54, 2)
(1, 54, 3)
(1, 54, 4)
(1, 54, 5)
(1, 54, 6)
(1, 54, 7)
(1, 55, 0)
(1, 55, 1)
(1, 55, 2)
(1, 55, 3)
(1, 55, 4)
(1, 55, 5)
(1, 55, 6)
(1, 55, 7)
(1, 56, 0)
(1, 56, 1)
(1, 56, 2)
(1, 56, 3)
(1, 56, 4)
(1, 56, 5)
(1, 56, 6)
(1, 56, 7)
(1, 57, 0)
(1, 57, 1)
(1, 57, 2)
(1, 57, 3)
(1, 57, 4)
(1, 57, 5)
(1, 57, 6)
(1, 57, 7)
(1, 58, 0)
(1, 58, 1)
(1, 58, 2)
(1, 58, 3)
(1, 58, 4)
(1, 58, 5)
(1, 58, 6)
(1, 58, 7)
(1, 59, 0)
(1, 59, 1)
(1, 59, 2)
(1, 59, 3)
(1, 59, 4)
(1, 59, 5)
(1, 59, 6)
(1, 59, 7)
(1, 60, 0)
(1, 60, 1)
(1, 60, 2)
(1, 60, 3)
(1, 60, 4)
(1, 60, 5)
(1, 60, 6)
(1, 60, 7)
(1, 61, 0)
(1, 61, 1)
(1, 61, 2)
(1, 61, 3)
(1, 61, 4)
(1, 61, 5)
(1, 61, 6)
(1, 61, 7)
(1, 62, 0)
(1, 62, 1)
(1, 62, 2)
(1, 62, 3)
(1, 62, 4)
(1, 62, 5)
(1, 62, 6)
(1, 62, 7)
(1, 63, 0)
(1, 63, 1)
(1, 63, 2)
(1, 63, 3)
(1, 63, 4)
(1, 63, 5)
(1, 63, 6)
(1, 63, 7)
(1, 64, 0)
(1, 64, 1)
(1, 64, 2)
(1, 64, 3)
(1, 64, 4)
(1, 64, 5)
(1, 64, 6)
(1, 64, 7)
(1, 65, 0)
(1, 65, 1)
(1, 65, 2)
(1, 65, 3)
(1, 65, 4)
(1, 65, 5)
(1, 65, 6)
(1, 65, 7)
(1, 66, 0)
(1, 66, 1)
(1, 66, 2)
(1, 66, 3)
(1, 66, 4)
(1, 66, 5)
(1, 66, 6)
(1, 66, 7)
(1, 67, 0)
(1, 67, 1)
(1, 67, 2)
(1, 67, 3)
(1, 67, 4)
(1, 67, 5)
(1, 67, 6)
(1, 67, 7)
(1, 68, 0)
(1, 68, 1)
(1, 68, 2)
(1, 68, 3)
(1, 68, 4)
(1, 68, 5)
(1, 68, 6)
(1, 68, 7)
(1, 69, 0)
(1, 69, 1)
(1, 69, 2)
(1, 69, 3)
(1, 69, 4)
(1, 69, 5)
(1, 69, 6)
(1, 69, 7)
(1, 70, 0)
(1, 70, 1)
(1, 70, 2)
(1, 70, 3)
(1, 70, 4)
(1, 70, 5)
(1, 70, 6)
(1, 70, 7)
(1, 71, 0)
(1, 71, 1)
(1, 71, 2)
(1, 71, 3)
(1, 71, 4)
(1, 71, 5)
(1, 71, 6)
(1, 71, 7)
(1, 72, 0)
(1, 72, 1)
(1, 72, 2)
(1, 72, 3)
(1, 72, 4)
(1, 72, 5)
(1, 72, 6)
(1, 72, 7)
(1, 73, 0)
(1, 73, 1)
(1, 73, 2)
(1, 73, 3)
(1, 73, 4)
(1, 73, 5)
(1, 73, 6)
(1, 73, 7)
(1, 74, 0)
(1, 74, 1)
(1, 74, 2)
(1, 74, 3)
(1, 74, 4)
(1, 74, 5)
(1, 74, 6)
(1, 74, 7)
(1, 75, 0)
(1, 75, 1)
(1, 75, 2)
(1, 75, 3)
(1, 75, 4)
(1, 75, 5)
(1, 75, 6)
(1, 75, 7)
(1, 76, 0)
(1, 76, 1)
(1, 76, 2)
(1, 76, 3)
(1, 76, 4)
(1, 76, 5)
(1, 76, 6)
(1, 76, 7)
(1, 77, 0)
(1, 77, 1)
(1, 77, 2)
(1, 77, 3)
(1, 77, 4)
(1, 77, 5)
(1, 77, 6)
(1, 77, 7)
(1, 78, 0)
(1, 78, 1)
(1, 78, 2)
(1, 78, 3)
(1, 78, 4)
(1, 78, 5)
(1, 78, 6)
(1, 78, 7)
(1, 79, 0)
(1, 79, 1)
(1, 79, 2)
(1, 79, 3)
(1, 79, 4)
(1, 79, 5)
(1, 79, 6)
(1, 79, 7)
(1, 80, 0)
(1, 80, 1)
(1, 80, 2)
(1, 80, 3)
(1, 80, 4)
(1, 80, 5)
(1, 80, 6)
(1, 80, 7)
(1, 81, 0)
(1, 81, 1)
(1, 81, 2)
(1, 81, 3)
(1, 81, 4)
(1, 81, 5)
(1, 81, 6)
(1, 81, 7)
(1, 82, 0)
(1, 82, 1)
(1, 82, 2)
(1, 82, 3)
(1, 82, 4)
(1, 82, 5)
(1, 82, 6)
(1, 82, 7)
(1, 83, 0)
(1, 83, 1)
(1, 83, 2)
(1, 83, 3)
(1, 83, 4)
(1, 83, 5)
(1, 83, 6)
(1, 83, 7)
(1, 84, 0)
(1, 84, 1)
(1, 84, 2)
(1, 84, 3)
(1, 84, 4)
(1, 84, 5)
(1, 84, 6)
(1, 84, 7)
(1, 85, 0)
(1, 85, 1)
(1, 85, 2)
(1, 85, 3)
(1, 85, 4)
(1, 85, 5)
(1, 85, 6)
(1, 85, 7)
(1, 86, 0)
(1, 86, 1)
(1, 86, 2)
(1, 86, 3)
(1, 86, 4)
(1, 86, 5)
(1, 86, 6)
(1, 86, 7)
(1, 87, 0)
(1, 87, 1)
(1, 87, 2)
(1, 87, 3)
(1, 87, 4)
(1, 87, 5)
(1, 87, 6)
(1, 87, 7)
(1, 88, 0)
(1, 88, 1)
(1, 88, 2)
(1, 88, 3)
(1, 88, 4)
(1, 88, 5)
(1, 88, 6)
(1, 88, 7)
(1, 89, 0)
(1, 89, 1)
(1, 89, 2)
(1, 89, 3)
(1, 89, 4)
(1, 89, 5)
(1, 89, 6)
(1, 89, 7)
(1, 90, 0)
(1, 90, 1)
(1, 90, 2)
(1, 90, 3)
(1, 90, 4)
(1, 90, 5)
(1, 90, 6)
(1, 90, 7)
(1, 91, 0)
(1, 91, 1)
(1, 91, 2)
(1, 91, 3)
(1, 91, 4)
(1, 91, 5)
(1, 91, 6)
(1, 91, 7)
(1, 92, 0)
(1, 92, 1)
(1, 92, 2)
(1, 92, 3)
(1, 92, 4)
(1, 92, 5)
(1, 92, 6)
(1, 92, 7)
(1, 93, 0)
(1, 93, 1)
(1, 93, 2)
(1, 93, 3)
(1, 93, 4)
(1, 93, 5)
(1, 93, 6)
(1, 93, 7)
(1, 94, 0)
(1, 94, 1)
(1, 94, 2)
(1, 94, 3)
(1, 94, 4)
(1, 94, 5)
(1, 94, 6)
(1, 94, 7)
(1, 95, 0)
(1, 95, 1)
(1, 95, 2)
(1, 95, 3)
(1, 95, 4)
(1, 95, 5)
(1, 95, 6)
(1, 95, 7)
(1, 96, 0)
(1, 96, 1)
(1, 96, 2)
(1, 96, 3)
(1, 96, 4)
(1, 96, 5)
(1, 96, 6)
(1, 96, 7)
(1, 97, 0)
(1, 97, 1)
(1, 97, 2)
(1, 97, 3)
(1, 97, 4)
(1, 97, 5)
(1, 97, 6)
(1, 97, 7)
(1, 98, 0)
(1, 98, 1)
(1, 98, 2)
(1, 98, 3)
(1, 98, 4)
(1, 98, 5)
(1, 98, 6)
(1, 98, 7)
(1, 99, 0)
(1, 99, 1)
(1, 99, 2)
(1, 99, 3)
(1, 99, 4)
(1, 99, 5)
(1, 99, 6)
(1, 99, 7)
(1, 100, 0)
(1, 100, 1)
(1, 100, 2)
(1, 100, 3)
(1, 100, 4)
(1, 100, 5)
(1, 100, 6)
(1, 100, 7)
(1, 101, 0)
(1, 101, 1)
(1, 101, 2)
(1, 101, 3)
(1, 101, 4)
(1, 101, 5)
(1, 101, 6)
(1, 101, 7)
(1, 102, 0)
(1, 102, 1)
(1, 102, 2)
(1, 102, 3)
(1, 102, 4)
(1, 102, 5)
(1, 102, 6)
(1, 102, 7)
(1, 103, 0)
(1, 103, 1)
(1, 103, 2)
(1, 103, 3)
(1, 103, 4)
(1, 103, 5)
(1, 103, 6)
(1, 103, 7)
(1, 104, 0)
(1, 104, 1)
(1, 104, 2)
(1, 104, 3)
(1, 104, 4)
(1, 104, 5)
(1, 104, 6)
(1, 104, 7)
(1, 105, 0)
(1, 105, 1)
(1, 105, 2)
(1, 105, 3)
(1, 105, 4)
(1, 105, 5)
(1, 105, 6)
(1, 105, 7)
(1, 106, 0)
(1, 106, 1)
(1, 106, 2)
(1, 106, 3)
(1, 106, 4)
(1, 106, 5)
(1, 106, 6)
(1, 106, 7)
(1, 107, 0)
(1, 107, 1)
(1, 107, 2)
(1, 107, 3)
(1, 107, 4)
(1, 107, 5)
(1, 107, 6)
(1, 107, 7)
(1, 108, 0)
(1, 108, 1)
(1, 108, 2)
(1, 108, 3)
(1, 108, 4)
(1, 108, 5)
(1, 108, 6)
(1, 108, 7)
(1, 109, 0)
(1, 109, 1)
(1, 109, 2)
(1, 109, 3)
(1, 109, 4)
(1, 109, 5)
(1, 109, 6)
(1, 109, 7)
(1, 110, 0)
(1, 110, 1)
(1, 110, 2)
(1, 110, 3)
(1, 110, 4)
(1, 110, 5)
(1, 110, 6)
(1, 110, 7)
(1, 111, 0)
(1, 111, 1)
(1, 111, 2)
(1, 111, 3)
(1, 111, 4)
(1, 111, 5)
(1, 111, 6)
(1, 111, 7)
(1, 112, 0)
(1, 112, 1)
(1, 112, 2)
(1, 112, 3)
(1, 112, 4)
(1, 112, 5)
(1, 112, 6)
(1, 112, 7)
(1, 113, 0)
(1, 113, 1)
(1, 113, 2)
(1, 113, 3)
(1, 113, 4)
(1, 113, 5)
(1, 113, 6)
(1, 113, 7)
(1, 114, 0)
(1, 114, 1)
(1, 114, 2)
(1, 114, 3)
(1, 114, 4)
(1, 114, 5)
(1, 114, 6)
(1, 114, 7)
(1, 115, 0)
(1, 115, 1)
(1, 115, 2)
(1, 115, 3)
(1, 115, 4)
(1, 115, 5)
(1, 115, 6)
(1, 115, 7)
(1, 116, 0)
(1, 116, 1)
(1, 116, 2)
(1, 116, 3)
(1, 116, 4)
(1, 116, 5)
(1, 116, 6)
(1, 116, 7)
(1, 117, 0)
(1, 117, 1)
(1, 117, 2)
(1, 117, 3)
(1, 117, 4)
(1, 117, 5)
(1, 117, 6)
(1, 117, 7)
(1, 118, 0)
(1, 118, 1)
(1, 118, 2)
(1, 118, 3)
(1, 118, 4)
(1, 118, 5)
(1, 118, 6)
(1, 118, 7)
(1, 119, 0)
(1, 119, 1)
(1, 119, 2)
(1, 119, 3)
(1, 119, 4)
(1, 119, 5)
(1, 119, 6)
(1, 119, 7)
(1, 120, 0)
(1, 120, 1)
(1, 120, 2)
(1, 120, 3)
(1, 120, 4)
(1, 120, 5)
(1, 120, 6)
(1, 120, 7)
(1, 121, 0)
(1, 121, 1)
(1, 121, 2)
(1, 121, 3)
(1, 121, 4)
(1, 121, 5)
(1, 121, 6)
(1, 121, 7)
(1, 122, 0)
(1, 122, 1)
(1, 122, 2)
(1, 122, 3)
(1, 122, 4)
(1, 122, 5)
(1, 122, 6)
(1, 122, 7)
(1, 123, 0)
(1, 123, 1)
(1, 123, 2)
(1, 123, 3)
(1, 123, 4)
(1, 123, 5)
(1, 123, 6)
(1, 123, 7)
(1, 124, 0)
(1, 124, 1)
(1, 124, 2)
(1, 124, 3)
(1, 124, 4)
(1, 124, 5)
(1, 124, 6)
(1, 124, 7)
(1, 125, 0)
(1, 125, 1)
(1, 125, 2)
(1, 125, 3)
(1, 125, 4)
(1, 125, 5)
(1, 125, 6)
(1, 125, 7)
(1, 126, 0)
(1, 126, 1)
(1, 126, 2)
(1, 126, 3)
(1, 126, 4)
(1, 126, 5)
(1, 126, 6)
(1, 126, 7)
(1, 127, 0)
(1, 127, 1)
(1, 127, 2)
(1, 127, 3)
(1, 127, 4)
(1, 127, 5)
(1, 127, 6)
(1, 127, 7)
(1, 128, 0)
(1, 128, 1)
(1, 128, 2)
(1, 128, 3)
(1, 128, 4)
(1, 128, 5)
(1, 128, 6)
(1, 128, 7)
(1, 129, 0)
(1, 129, 1)
(1, 129, 2)
(1, 129, 3)
(1, 129, 4)
(1, 129, 5)
(1, 129, 6)
(1, 129, 7)
(1, 130, 0)
(1, 130, 1)
(1, 130, 2)
(1, 130, 3)
(1, 130, 4)
(1, 130, 5)
(1, 130, 6)
(1, 130, 7)
(1, 131, 0)
(1, 131, 1)
(1, 131, 2)
(1, 131, 3)
(1, 131, 4)
(1, 131, 5)
(1, 131, 6)
(1, 131, 7)
(1, 132, 0)
(1, 132, 1)
(1, 132, 2)
(1, 132, 3)
(1, 132, 4)
(1, 132, 5)
(1, 132, 6)
(1, 132, 7)
(1, 133, 0)
(1, 133, 1)
(1, 133, 2)
(1, 133, 3)
(1, 133, 4)
(1, 133, 5)
(1, 133, 6)
(1, 133, 7)
(1, 134, 0)
(1, 134, 1)
(1, 134, 2)
(1, 134, 3)
(1, 134, 4)
(1, 134, 5)
(1, 134, 6)
(1, 134, 7)
(1, 135, 0)
(1, 135, 1)
(1, 135, 2)
(1, 135, 3)
(1, 135, 4)
(1, 135, 5)
(1, 135, 6)
(1, 135, 7)
(1, 136, 0)
(1, 136, 1)
(1, 136, 2)
(1, 136, 3)
(1, 136, 4)
(1, 136, 5)
(1, 136, 6)
(1, 136, 7)
(1, 137, 0)
(1, 137, 1)
(1, 137, 2)
(1, 137, 3)
(1, 137, 4)
(1, 137, 5)
(1, 137, 6)
(1, 137, 7)
(1, 138, 0)
(1, 138, 1)
(1, 138, 2)
(1, 138, 3)
(1, 138, 4)
(1, 138, 5)
(1, 138, 6)
(1, 138, 7)
(1, 139, 0)
(1, 139, 1)
(1, 139, 2)
(1, 139, 3)
(1, 139, 4)
(1, 139, 5)
(1, 139, 6)
(1, 139, 7)
(1, 140, 0)
(1, 140, 1)
(1, 140, 2)
(1, 140, 3)
(1, 140, 4)
(1, 140, 5)
(1, 140, 6)
(1, 140, 7)
(1, 141, 0)
(1, 141, 1)
(1, 141, 2)
(1, 141, 3)
(1, 141, 4)
(1, 141, 5)
(1, 141, 6)
(1, 141, 7)
(1, 142, 0)
(1, 142, 1)
(1, 142, 2)
(1, 142, 3)
(1, 142, 4)
(1, 142, 5)
(1, 142, 6)
(1, 142, 7)
(1, 143, 0)
(1, 143, 1)
(1, 143, 2)
(1, 143, 3)
(1, 143, 4)
(1, 143, 5)
(1, 143, 6)
(1, 143, 7)
(1, 144, 0)
(1, 144, 1)
(1, 144, 2)
(1, 144, 3)
(1, 144, 4)
(1, 144, 5)
(1, 144, 6)
(1, 144, 7)
(1, 145, 0)
(1, 145, 1)
(1, 145, 2)
(1, 145, 3)
(1, 145, 4)
(1, 145, 5)
(1, 145, 6)
(1, 145, 7)
(1, 146, 0)
(1, 146, 1)
(1, 146, 2)
(1, 146, 3)
(1, 146, 4)
(1, 146, 5)
(1, 146, 6)
(1, 146, 7)
(1, 147, 0)
(1, 147, 1)
(1, 147, 2)
(1, 147, 3)
(1, 147, 4)
(1, 147, 5)
(1, 147, 6)
(1, 147, 7)
(1, 148, 0)
(1, 148, 1)
(1, 148, 2)
(1, 148, 3)
(1, 148, 4)
(1, 148, 5)
(1, 148, 6)
(1, 148, 7)
(1, 149, 0)
(1, 149, 1)
(1, 149, 2)
(1, 149, 3)
(1, 149, 4)
(1, 149, 5)
(1, 149, 6)
(1, 149, 7)
(1, 150, 0)
(1, 150, 1)
(1, 150, 2)
(1, 150, 3)
(1, 150, 4)
(1, 150, 5)
(1, 150, 6)
(1, 150, 7)
(1, 151, 0)
(1, 151, 1)
(1, 151, 2)
(1, 151, 3)
(1, 151, 4)
(1, 151, 5)
(1, 151, 6)
(1, 151, 7)
(1, 152, 0)
(1, 152, 1)
(1, 152, 2)
(1, 152, 3)
(1, 152, 4)
(1, 152, 5)
(1, 152, 6)
(1, 152, 7)
(1, 153, 0)
(1, 153, 1)
(1, 153, 2)
(1, 153, 3)
(1, 153, 4)
(1, 153, 5)
(1, 153, 6)
(1, 153, 7)
(1, 154, 0)
(1, 154, 1)
(1, 154, 2)
(1, 154, 3)
(1, 154, 4)
(1, 154, 5)
(1, 154, 6)
(1, 154, 7)
(1, 155, 0)
(1, 155, 1)
(1, 155, 2)
(1, 155, 3)
(1, 155, 4)
(1, 155, 5)
(1, 155, 6)
(1, 155, 7)
(1, 156, 0)
(1, 156, 1)
(1, 156, 2)
(1, 156, 3)
(1, 156, 4)
(1, 156, 5)
(1, 156, 6)
(1, 156, 7)
(1, 157, 0)
(1, 157, 1)
(1, 157, 2)
(1, 157, 3)
(1, 157, 4)
(1, 157, 5)
(1, 157, 6)
(1, 157, 7)
(1, 158, 0)
(1, 158, 1)
(1, 158, 2)
(1, 158, 3)
(1, 158, 4)
(1, 158, 5)
(1, 158, 6)
(1, 158, 7)
(1, 159, 0)
(1, 159, 1)
(1, 159, 2)
(1, 159, 3)
(1, 159, 4)
(1, 159, 5)
(1, 159, 6)
(1, 159, 7)
(1, 160, 0)
(1, 160, 1)
(1, 160, 2)
(1, 160, 3)
(1, 160, 4)
(1, 160, 5)
(1, 160, 6)
(1, 160, 7)
(1, 161, 0)
(1, 161, 1)
(1, 161, 2)
(1, 161, 3)
(1, 161, 4)
(1, 161, 5)
(1, 161, 6)
(1, 161, 7)
(1, 162, 0)
(1, 162, 1)
(1, 162, 2)
(1, 162, 3)
(1, 162, 4)
(1, 162, 5)
(1, 162, 6)
(1, 162, 7)
(1, 163, 0)
(1, 163, 1)
(1, 163, 2)
(1, 163, 3)
(1, 163, 4)
(1, 163, 5)
(1, 163, 6)
(1, 163, 7)
(1, 164, 0)
(1, 164, 1)
(1, 164, 2)
(1, 164, 3)
(1, 164, 4)
(1, 164, 5)
(1, 164, 6)
(1, 164, 7)
(1, 165, 0)
(1, 165, 1)
(1, 165, 2)
(1, 165, 3)
(1, 165, 4)
(1, 165, 5)
(1, 165, 6)
(1, 165, 7)
(1, 166, 0)
(1, 166, 1)
(1, 166, 2)
(1, 166, 3)
(1, 166, 4)
(1, 166, 5)
(1, 166, 6)
(1, 166, 7)
(1, 167, 0)
(1, 167, 1)
(1, 167, 2)
(1, 167, 3)
(1, 167, 4)
(1, 167, 5)
(1, 167, 6)
(1, 167, 7)
(1, 168, 0)
(1, 168, 1)
(1, 168, 2)
(1, 168, 3)
(1, 168, 4)
(1, 168, 5)
(1, 168, 6)
(1, 168, 7)
(1, 169, 0)
(1, 169, 1)
(1, 169, 2)
(1, 169, 3)
(1, 169, 4)
(1, 169, 5)
(1, 169, 6)
(1, 169, 7)
(1, 170, 0)
(1, 170, 1)
(1, 170, 2)
(1, 170, 3)
(1, 170, 4)
(1, 170, 5)
(1, 170, 6)
(1, 170, 7)
(1, 171, 0)
(1, 171, 1)
(1, 171, 2)
(1, 171, 3)
(1, 171, 4)
(1, 171, 5)
(1, 171, 6)
(1, 171, 7)
(1, 172, 0)
(1, 172, 1)
(1, 172, 2)
(1, 172, 3)
(1, 172, 4)
(1, 172, 5)
(1, 172, 6)
(1, 172, 7)
(1, 173, 0)
(1, 173, 1)
(1, 173, 2)
(1, 173, 3)
(1, 173, 4)
(1, 173, 5)
(1, 173, 6)
(1, 173, 7)
(1, 174, 0)
(1, 174, 1)
(1, 174, 2)
(1, 174, 3)
(1, 174, 4)
(1, 174, 5)
(1, 174, 6)
(1, 174, 7)
(1, 175, 0)
(1, 175, 1)
(1, 175, 2)
(1, 175, 3)
(1, 175, 4)
(1, 175, 5)
(1, 175, 6)
(1, 175, 7)
(1, 176, 0)
(1, 176, 1)
(1, 176, 2)
(1, 176, 3)
(1, 176, 4)
(1, 176, 5)
(1, 176, 6)
(1, 176, 7)
(1, 177, 0)
(1, 177, 1)
(1, 177, 2)
(1, 177, 3)
(1, 177, 4)
(1, 177, 5)
(1, 177, 6)
(1, 177, 7)
(1, 178, 0)
(1, 178, 1)
(1, 178, 2)
(1, 178, 3)
(1, 178, 4)
(1, 178, 5)
(1, 178, 6)
(1, 178, 7)
(1, 179, 0)
(1, 179, 1)
(1, 179, 2)
(1, 179, 3)
(1, 179, 4)
(1, 179, 5)
(1, 179, 6)
(1, 179, 7)
(1, 180, 0)
(1, 180, 1)
(1, 180, 2)
(1, 180, 3)
(1, 180, 4)
(1, 180, 5)
(1, 180, 6)
(1, 180, 7)
(1, 181, 0)
(1, 181, 1)
(1, 181, 2)
(1, 181, 3)
(1, 181, 4)
(1, 181, 5)
(1, 181, 6)
(1, 181, 7)
(1, 182, 0)
(1, 182, 1)
(1, 182, 2)
(1, 182, 3)
(1, 182, 4)
(1, 182, 5)
(1, 182, 6)
(1, 182, 7)
(1, 183, 0)
(1, 183, 1)
(1, 183, 2)
(1, 183, 3)
(1, 183, 4)
(1, 183, 5)
(1, 183, 6)
(1, 183, 7)
(1, 184, 0)
(1, 184, 1)
(1, 184, 2)
(1, 184, 3)
(1, 184, 4)
(1, 184, 5)
(1, 184, 6)
(1, 184, 7)
(1, 185, 0)
(1, 185, 1)
(1, 185, 2)
(1, 185, 3)
(1, 185, 4)
(1, 185, 5)
(1, 185, 6)
(1, 185, 7)
(1, 186, 0)
(1, 186, 1)
(1, 186, 2)
(1, 186, 3)
(1, 186, 4)
(1, 186, 5)
(1, 186, 6)
(1, 186, 7)
(1, 187, 0)
(1, 187, 1)
(1, 187, 2)
(1, 187, 3)
(1, 187, 4)
(1, 187, 5)
(1, 187, 6)
(1, 187, 7)
(1, 188, 0)
(1, 188, 1)
(1, 188, 2)
(1, 188, 3)
(1, 188, 4)
(1, 188, 5)
(1, 188, 6)
(1, 188, 7)
(1, 189, 0)
(1, 189, 1)
(1, 189, 2)
(1, 189, 3)
(1, 189, 4)
(1, 189, 5)
(1, 189, 6)
(1, 189, 7)
(1, 190, 0)
(1, 190, 1)
(1, 190, 2)
(1, 190, 3)
(1, 190, 4)
(1, 190, 5)
(1, 190, 6)
(1, 190, 7)
(1, 191, 0)
(1, 191, 1)
(1, 191, 2)
(1, 191, 3)
(1, 191, 4)
(1, 191, 5)
(1, 191, 6)
(1, 191, 7)
(1, 192, 0)
(1, 192, 1)
(1, 192, 2)
(1, 192, 3)
(1, 192, 4)
(1, 192, 5)
(1, 192, 6)
(1, 192, 7)
(1, 193, 0)
(1, 193, 1)
(1, 193, 2)
(1, 193, 3)
(1, 193, 4)
(1, 193, 5)
(1, 193, 6)
(1, 193, 7)
(1, 194, 0)
(1, 194, 1)
(1, 194, 2)
(1, 194, 3)
(1, 194, 4)
(1, 194, 5)
(1, 194, 6)
(1, 194, 7)
(1, 195, 0)
(1, 195, 1)
(1, 195, 2)
(1, 195, 3)
(1, 195, 4)
(1, 195, 5)
(1, 195, 6)
(1, 195, 7)
(1, 196, 0)
(1, 196, 1)
(1, 196, 2)
(1, 196, 3)
(1, 196, 4)
(1, 196, 5)
(1, 196, 6)
(1, 196, 7)
(1, 197, 0)
(1, 197, 1)
(1, 197, 2)
(1, 197, 3)
(1, 197, 4)
(1, 197, 5)
(1, 197, 6)
(1, 197, 7)
(1, 198, 0)
(1, 198, 1)
(1, 198, 2)
(1, 198, 3)
(1, 198, 4)
(1, 198, 5)
(1, 198, 6)
(1, 198, 7)
(1, 199, 0)
(1, 199, 1)
(1, 199, 2)
(1, 199, 3)
(1, 199, 4)
(1, 199, 5)
(1, 199, 6)
(1, 199, 7)
(1, 200, 0)
(1, 200, 1)
(1, 200, 2)
(1, 200, 3)
(1, 200, 4)
(1, 200, 5)
(1, 200, 6)
(1, 200, 7)
(1, 201, 0)
(1, 201, 1)
(1, 201, 2)
(1, 201, 3)
(1, 201, 4)
(1, 201, 5)
(1, 201, 6)
(1, 201, 7)
(1, 202, 0)
(1, 202, 1)
(1, 202, 2)
(1, 202, 3)
(1, 202, 4)
(1, 202, 5)
(1, 202, 6)
(1, 202, 7)
(1, 203, 0)
(1, 203, 1)
(1, 203, 2)
(1, 203, 3)
(1, 203, 4)
(1, 203, 5)
(1, 203, 6)
(1, 203, 7)
(1, 204, 0)
(1, 204, 1)
(1, 204, 2)
(1, 204, 3)
(1, 204, 4)
(1, 204, 5)
(1, 204, 6)
(1, 204, 7)
(1, 205, 0)
(1, 205, 1)
(1, 205, 2)
(1, 205, 3)
(1, 205, 4)
(1, 205, 5)
(1, 205, 6)
(1, 205, 7)
(1, 206, 0)
(1, 206, 1)
(1, 206, 2)
(1, 206, 3)
(1, 206, 4)
(1, 206, 5)
(1, 206, 6)
(1, 206, 7)
(1, 207, 0)
(1, 207, 1)
(1, 207, 2)
(1, 207, 3)
(1, 207, 4)
(1, 207, 5)
(1, 207, 6)
(1, 207, 7)
(1, 208, 0)
(1, 208, 1)
(1, 208, 2)
(1, 208, 3)
(1, 208, 4)
(1, 208, 5)
(1, 208, 6)
(1, 208, 7)
(1, 209, 0)
(1, 209, 1)
(1, 209, 2)
(1, 209, 3)
(1, 209, 4)
(1, 209, 5)
(1, 209, 6)
(1, 209, 7)
(1, 210, 0)
(1, 210, 1)
(1, 210, 2)
(1, 210, 3)
(1, 210, 4)
(1, 210, 5)
(1, 210, 6)
(1, 210, 7)
(1, 211, 0)
(1, 211, 1)
(1, 211, 2)
(1, 211, 3)
(1, 211, 4)
(1, 211, 5)
(1, 211, 6)
(1, 211, 7)
(1, 212, 0)
(1, 212, 1)
(1, 212, 2)
(1, 212, 3)
(1, 212, 4)
(1, 212, 5)
(1, 212, 6)
(1, 212, 7)
(1, 213, 0)
(1, 213, 1)
(1, 213, 2)
(1, 213, 3)
(1, 213, 4)
(1, 213, 5)
(1, 213, 6)
(1, 213, 7)
(1, 214, 0)
(1, 214, 1)
(1, 214, 2)
(1, 214, 3)
(1, 214, 4)
(1, 214, 5)
(1, 214, 6)
(1, 214, 7)
(1, 215, 0)
(1, 215, 1)
(1, 215, 2)
(1, 215, 3)
(1, 215, 4)
(1, 215, 5)
(1, 215, 6)
(1, 215, 7)
(1, 216, 0)
(1, 216, 1)
(1, 216, 2)
(1, 216, 3)
(1, 216, 4)
(1, 216, 5)
(1, 216, 6)
(1, 216, 7)
(1, 217, 0)
(1, 217, 1)
(1, 217, 2)
(1, 217, 3)
(1, 217, 4)
(1, 217, 5)
(1, 217, 6)
(1, 217, 7)
(1, 218, 0)
(1, 218, 1)
(1, 218, 2)
(1, 218, 3)
(1, 218, 4)
(1, 218, 5)
(1, 218, 6)
(1, 218, 7)
(1, 219, 0)
(1, 219, 1)
(1, 219, 2)
(1, 219, 3)
(1, 219, 4)
(1, 219, 5)
(1, 219, 6)
(1, 219, 7)
(1, 220, 0)
(1, 220, 1)
(1, 220, 2)
(1, 220, 3)
(1, 220, 4)
(1, 220, 5)
(1, 220, 6)
(1, 220, 7)
(1, 221, 0)
(1, 221, 1)
(1, 221, 2)
(1, 221, 3)
(1, 221, 4)
(1, 221, 5)
(1, 221, 6)
(1, 221, 7)
(1, 222, 0)
(1, 222, 1)
(1, 222, 2)
(1, 222, 3)
(1, 222, 4)
(1, 222, 5)
(1, 222, 6)
(1, 222, 7)
(1, 223, 0)
(1, 223, 1)
(1, 223, 2)
(1, 223, 3)
(1, 223, 4)
(1, 223, 5)
(1, 223, 6)
(1, 223, 7)
(1, 224, 0)
(1, 224, 1)
(1, 224, 2)
(1, 224, 3)
(1, 224, 4)
(1, 224, 5)
(1, 224, 6)
(1, 224, 7)
(1, 225, 0)
(1, 225, 1)
(1, 225, 2)
(1, 225, 3)
(1, 225, 4)
(1, 225, 5)
(1, 225, 6)
(1, 225, 7)
(1, 226, 0)
(1, 226, 1)
(1, 226, 2)
(1, 226, 3)
(1, 226, 4)
(1, 226, 5)
(1, 226, 6)
(1, 226, 7)
(1, 227, 0)
(1, 227, 1)
(1, 227, 2)
(1, 227, 3)
(1, 227, 4)
(1, 227, 5)
(1, 227, 6)
(1, 227, 7)
(1, 228, 0)
(1, 228, 1)
(1, 228, 2)
(1, 228, 3)
(1, 228, 4)
(1, 228, 5)
(1, 228, 6)
(1, 228, 7)
(1, 229, 0)
(1, 229, 1)
(1, 229, 2)
(1, 229, 3)
(1, 229, 4)
(1, 229, 5)
(1, 229, 6)
(1, 229, 7)
(1, 230, 0)
(1, 230, 1)
(1, 230, 2)
(1, 230, 3)
(1, 230, 4)
(1, 230, 5)
(1, 230, 6)
(1, 230, 7)
(1, 231, 0)
(1, 231, 1)
(1, 231, 2)
(1, 231, 3)
(1, 231, 4)
(1, 231, 5)
(1, 231, 6)
(1, 231, 7)
(1, 232, 0)
(1, 232, 1)
(1, 232, 2)
(1, 232, 3)
(1, 232, 4)
(1, 232, 5)
(1, 232, 6)
(1, 232, 7)
(1, 233, 0)
(1, 233, 1)
(1, 233, 2)
(1, 233, 3)
(1, 233, 4)
(1, 233, 5)
(1, 233, 6)
(1, 233, 7)
(1, 234, 0)
(1, 234, 1)
(1, 234, 2)
(1, 234, 3)
(1, 234, 4)
(1, 234, 5)
(1, 234, 6)
(1, 234, 7)
(1, 235, 0)
(1, 235, 1)
(1, 235, 2)
(1, 235, 3)
(1, 235, 4)
(1, 235, 5)
(1, 235, 6)
(1, 235, 7)
(1, 236, 0)
(1, 236, 1)
(1, 236, 2)
(1, 236, 3)
(1, 236, 4)
(1, 236, 5)
(1, 236, 6)
(1, 236, 7)
(1, 237, 0)
(1, 237, 1)
(1, 237, 2)
(1, 237, 3)
(1, 237, 4)
(1, 237, 5)
(1, 237, 6)
(1, 237, 7)
(1, 238, 0)
(1, 238, 1)
(1, 238, 2)
(1, 238, 3)
(1, 238, 4)
(1, 238, 5)
(1, 238, 6)
(1, 238, 7)
(1, 239, 0)
(1, 239, 1)
(1, 239, 2)
(1, 239, 3)
(1, 239, 4)
(1, 239, 5)
(1, 239, 6)
(1, 239, 7)
(1, 240, 0)
(1, 240, 1)
(1, 240, 2)
(1, 240, 3)
(1, 240, 4)
(1, 240, 5)
(1, 240, 6)
(1, 240, 7)
(1, 241, 0)
(1, 241, 1)
(1, 241, 2)
(1, 241, 3)
(1, 241, 4)
(1, 241, 5)
(1, 241, 6)
(1, 241, 7)
(1, 242, 0)
(1, 242, 1)
(1, 242, 2)
(1, 242, 3)
(1, 242, 4)
(1, 242, 5)
(1, 242, 6)
(1, 242, 7)
(1, 243, 0)
(1, 243, 1)
(1, 243, 2)
(1, 243, 3)
(1, 243, 4)
(1, 243, 5)
(1, 243, 6)
(1, 243, 7)
(1, 244, 0)
(1, 244, 1)
(1, 244, 2)
(1, 244, 3)
(1, 244, 4)
(1, 244, 5)
(1, 244, 6)
(1, 244, 7)
(1, 245, 0)
(1, 245, 1)
(1, 245, 2)
(1, 245, 3)
(1, 245, 4)
(1, 245, 5)
(1, 245, 6)
(1, 245, 7)
(1, 246, 0)
(1, 246, 1)
(1, 246, 2)
(1, 246, 3)
(1, 246, 4)
(1, 246, 5)
(1, 246, 6)
(1, 246, 7)
(1, 247, 0)
(1, 247, 1)
(1, 247, 2)
(1, 247, 3)
(1, 247, 4)
(1, 247, 5)
(1, 247, 6)
(1, 247, 7)
(1, 248, 0)
(1, 248, 1)
(1, 248, 2)
(1, 248, 3)
(1, 248, 4)
(1, 248, 5)
(1, 248, 6)
(1, 248, 7)
(1, 249, 0)
(1, 249, 1)
(1, 249, 2)
(1, 249, 3)
(1, 249, 4)
(1, 249, 5)
(1, 249, 6)
(1, 249, 7)
(1, 250, 0)
(1, 250, 1)
(1, 250, 2)
(1, 250, 3)
(1, 250, 4)
(1, 250, 5)
(1, 250, 6)
(1, 250, 7)
(1, 251, 0)
(1, 251, 1)
(1, 251, 2)
(1, 251, 3)
(1, 251, 4)
(1, 251, 5)
(1, 251, 6)
(1, 251, 7)
(1, 252, 0)
(1, 252, 1)
(1, 252, 2)
(1, 252, 3)
(1, 252, 4)
(1, 252, 5)
(1, 252, 6)
(1, 252, 7)
(1, 253, 0)
(1, 253, 1)
(1, 253, 2)
(1, 253, 3)
(1, 253, 4)
(1, 253, 5)
(1, 253, 6)
(1, 253, 7)
(1, 254, 0)
(1, 254, 1)
(1, 254, 2)
(1, 254, 3)
(1, 254, 4)
(1, 254, 5)
(1, 254, 6)
(1, 254, 7)
(1, 255, 0)
(1, 255, 1)
(1, 255, 2)
(1, 255, 3)
(1, 255, 4)
(1, 255, 5)
(1, 255, 6)
(1, 255, 7)
(2, 0, 0)
(2, 0, 1)
(2, 0, 2)
(2, 0, 3)
(2, 0, 4)
(2, 0, 5)
(2, 0, 6)
(2, 0, 7)
(2, 1, 0)
(2, 1, 1)
(2, 1, 2)
(2, 1, 3)
(2, 1, 4)
(2, 1, 5)
(2, 1, 6)
(2, 1, 7)
(2, 2, 0)
(2, 2, 1)
(2, 2, 2)
(2, 2, 3)
(2, 2, 4)
(2, 2, 5)
(2, 2, 6)
(2, 2, 7)
(2, 3, 0)
(2, 3, 1)
(2, 3, 2)
(2, 3, 3)
(2, 3, 4)
(2, 3, 5)
(2, 3, 6)
(2, 3, 7)
(2, 4, 0)
(2, 4, 1)
(2, 4, 2)
(2, 4, 3)
(2, 4, 4)
(2, 4, 5)
(2, 4, 6)
(2, 4, 7)
(2, 5, 0)
(2, 5, 1)
(2, 5, 2)
(2, 5, 3)
(2, 5, 4)
(2, 5, 5)
(2, 5, 6)
(2, 5, 7)
(2, 6, 0)
(2, 6, 1)
(2, 6, 2)
(2, 6, 3)
(2, 6, 4)
(2, 6, 5)
(2, 6, 6)
(2, 6, 7)
(2, 7, 0)
(2, 7, 1)
(2, 7, 2)
(2, 7, 3)
(2, 7, 4)
(2, 7, 5)
(2, 7, 6)
(2, 7, 7)
(2, 8, 0)
(2, 8, 1)
(2, 8, 2)
(2, 8, 3)
(2, 8, 4)
(2, 8, 5)
(2, 8, 6)
(2, 8, 7)
(2, 9, 0)
(2, 9, 1)
(2, 9, 2)
(2, 9, 3)
(2, 9, 4)
(2, 9, 5)
(2, 9, 6)
(2, 9, 7)
(2, 10, 0)
(2, 10, 1)
(2, 10, 2)
(2, 10, 3)
(2, 10, 4)
(2, 10, 5)
(2, 10, 6)
(2, 10, 7)
(2, 11, 0)
(2, 11, 1)
(2, 11, 2)
(2, 11, 3)
(2, 11, 4)
(2, 11, 5)
(2, 11, 6)
(2, 11, 7)
(2, 12, 0)
(2, 12, 1)
(2, 12, 2)
(2, 12, 3)
(2, 12, 4)
(2, 12, 5)
(2, 12, 6)
(2, 12, 7)
(2, 13, 0)
(2, 13, 1)
(2, 13, 2)
(2, 13, 3)
(2, 13, 4)
(2, 13, 5)
(2, 13, 6)
(2, 13, 7)
(2, 14, 0)
(2, 14, 1)
(2, 14, 2)
(2, 14, 3)
(2, 14, 4)
(2, 14, 5)
(2, 14, 6)
(2, 14, 7)
(2, 15, 0)
(2, 15, 1)
(2, 15, 2)
(2, 15, 3)
(2, 15, 4)
(2, 15, 5)
(2, 15, 6)
(2, 15, 7)
(2, 16, 0)
(2, 16, 1)
(2, 16, 2)
(2, 16, 3)
(2, 16, 4)
(2, 16, 5)
(2, 16, 6)
(2, 16, 7)
(2, 17, 0)
(2, 17, 1)
(2, 17, 2)
(2, 17, 3)
(2, 17, 4)
(2, 17, 5)
(2, 17, 6)
(2, 17, 7)
(2, 18, 0)
(2, 18, 1)
(2, 18, 2)
(2, 18, 3)
(2, 18, 4)
(2, 18, 5)
(2, 18, 6)
(2, 18, 7)
(2, 19, 0)
(2, 19, 1)
(2, 19, 2)
(2, 19, 3)
(2, 19, 4)
(2, 19, 5)
(2, 19, 6)
(2, 19, 7)
(2, 20, 0)
(2, 20, 1)
(2, 20, 2)
(2, 20, 3)
(2, 20, 4)
(2, 20, 5)
(2, 20, 6)
(2, 20, 7)
(2, 21, 0)
(2, 21, 1)
(2, 21, 2)
(2, 21, 3)
(2, 21, 4)
(2, 21, 5)
(2, 21, 6)
(2, 21, 7)
(2, 22, 0)
(2, 22, 1)
(2, 22, 2)
(2, 22, 3)
(2, 22, 4)
(2, 22, 5)
(2, 22, 6)
(2, 22, 7)
(2, 23, 0)
(2, 23, 1)
(2, 23, 2)
(2, 23, 3)
(2, 23, 4)
(2, 23, 5)
(2, 23, 6)
(2, 23, 7)
(2, 24, 0)
(2, 24, 1)
(2, 24, 2)
(2, 24, 3)
(2, 24, 4)
(2, 24, 5)
(2, 24, 6)
(2, 24, 7)
(2, 25, 0)
(2, 25, 1)
(2, 25, 2)
(2, 25, 3)
(2, 25, 4)
(2, 25, 5)
(2, 25, 6)
(2, 25, 7)
(2, 26, 0)
(2, 26, 1)
(2, 26, 2)
(2, 26, 3)
(2, 26, 4)
(2, 26, 5)
(2, 26, 6)
(2, 26, 7)
(2, 27, 0)
(2, 27, 1)
(2, 27, 2)
(2, 27, 3)
(2, 27, 4)
(2, 27, 5)
(2, 27, 6)
(2, 27, 7)
(2, 28, 0)
(2, 28, 1)
(2, 28, 2)
(2, 28, 3)
(2, 28, 4)
(2, 28, 5)
(2, 28, 6)
(2, 28, 7)
(2, 29, 0)
(2, 29, 1)
(2, 29, 2)
(2, 29, 3)
(2, 29, 4)
(2, 29, 5)
(2, 29, 6)
(2, 29, 7)
(2, 30, 0)
(2, 30, 1)
(2, 30, 2)
(2, 30, 3)
(2, 30, 4)
(2, 30, 5)
(2, 30, 6)
(2, 30, 7)
(2, 31, 0)
(2, 31, 1)
(2, 31, 2)
(2, 31, 3)
(2, 31, 4)
(2, 31, 5)
(2, 31, 6)
(2, 31, 7)
(2, 32, 0)
(2, 32, 1)
(2, 32, 2)
(2, 32, 3)
(2, 32, 4)
(2, 32, 5)
(2, 32, 6)
(2, 32, 7)
(2, 33, 0)
(2, 33, 1)
(2, 33, 2)
(2, 33, 3)
(2, 33, 4)
(2, 33, 5)
(2, 33, 6)
(2, 33, 7)
(2, 34, 0)
(2, 34, 1)
(2, 34, 2)
(2, 34, 3)
(2, 34, 4)
(2, 34, 5)
(2, 34, 6)
(2, 34, 7)
(2, 35, 0)
(2, 35, 1)
(2, 35, 2)
(2, 35, 3)
(2, 35, 4)
(2, 35, 5)
(2, 35, 6)
(2, 35, 7)
(2, 36, 0)
(2, 36, 1)
(2, 36, 2)
(2, 36, 3)
(2, 36, 4)
(2, 36, 5)
(2, 36, 6)
(2, 36, 7)
(2, 37, 0)
(2, 37, 1)
(2, 37, 2)
(2, 37, 3)
(2, 37, 4)
(2, 37, 5)
(2, 37, 6)
(2, 37, 7)
(2, 38, 0)
(2, 38, 1)
(2, 38, 2)
(2, 38, 3)
(2, 38, 4)
(2, 38, 5)
(2, 38, 6)
(2, 38, 7)
(2, 39, 0)
(2, 39, 1)
(2, 39, 2)
(2, 39, 3)
(2, 39, 4)
(2, 39, 5)
(2, 39, 6)
(2, 39, 7)
(2, 40, 0)
(2, 40, 1)
(2, 40, 2)
(2, 40, 3)
(2, 40, 4)
(2, 40, 5)
(2, 40, 6)
(2, 40, 7)
(2, 41, 0)
(2, 41, 1)
(2, 41, 2)
(2, 41, 3)
(2, 41, 4)
(2, 41, 5)
(2, 41, 6)
(2, 41, 7)
(2, 42, 0)
(2, 42, 1)
(2, 42, 2)
(2, 42, 3)
(2, 42, 4)
(2, 42, 5)
(2, 42, 6)
(2, 42, 7)
(2, 43, 0)
(2, 43, 1)
(2, 43, 2)
(2, 43, 3)
(2, 43, 4)
(2, 43, 5)
(2, 43, 6)
(2, 43, 7)
(2, 44, 0)
(2, 44, 1)
(2, 44, 2)
(2, 44, 3)
(2, 44, 4)
(2, 44, 5)
(2, 44, 6)
(2, 44, 7)
(2, 45, 0)
(2, 45, 1)
(2, 45, 2)
(2, 45, 3)
(2, 45, 4)
(2, 45, 5)
(2, 45, 6)
(2, 45, 7)
(2, 46, 0)
(2, 46, 1)
(2, 46, 2)
(2, 46, 3)
(2, 46, 4)
(2, 46, 5)
(2, 46, 6)
(2, 46, 7)
(2, 47, 0)
(2, 47, 1)
(2, 47, 2)
(2, 47, 3)
(2, 47, 4)
(2, 47, 5)
(2, 47, 6)
(2, 47, 7)
(2, 48, 0)
(2, 48, 1)
(2, 48, 2)
(2, 48, 3)
(2, 48, 4)
(2, 48, 5)
(2, 48, 6)
(2, 48, 7)
(2, 49, 0)
(2, 49, 1)
(2, 49, 2)
(2, 49, 3)
(2, 49, 4)
(2, 49, 5)
(2, 49, 6)
(2, 49, 7)
(2, 50, 0)
(2, 50, 1)
(2, 50, 2)
(2, 50, 3)
(2, 50, 4)
(2, 50, 5)
(2, 50, 6)
(2, 50, 7)
(2, 51, 0)
(2, 51, 1)
(2, 51, 2)
(2, 51, 3)
(2, 51, 4)
(2, 51, 5)
(2, 51, 6)
(2, 51, 7)
(2, 52, 0)
(2, 52, 1)
(2, 52, 2)
(2, 52, 3)
(2, 52, 4)
(2, 52, 5)
(2, 52, 6)
(2, 52, 7)
(2, 53, 0)
(2, 53, 1)
(2, 53, 2)
(2, 53, 3)
(2, 53, 4)
(2, 53, 5)
(2, 53, 6)
(2, 53, 7)
(2, 54, 0)
(2, 54, 1)
(2, 54, 2)
(2, 54, 3)
(2, 54, 4)
(2, 54, 5)
(2, 54, 6)
(2, 54, 7)
(2, 55, 0)
(2, 55, 1)
(2, 55, 2)
(2, 55, 3)
(2, 55, 4)
(2, 55, 5)
(2, 55, 6)
(2, 55, 7)
(2, 56, 0)
(2, 56, 1)
(2, 56, 2)
(2, 56, 3)
(2, 56, 4)
(2, 56, 5)
(2, 56, 6)
(2, 56, 7)
(2, 57, 0)
(2, 57, 1)
(2, 57, 2)
(2, 57, 3)
(2, 57, 4)
(2, 57, 5)
(2, 57, 6)
(2, 57, 7)
(2, 58, 0)
(2, 58, 1)
(2, 58, 2)
(2, 58, 3)
(2, 58, 4)
(2, 58, 5)
(2, 58, 6)
(2, 58, 7)
(2, 59, 0)
(2, 59, 1)
(2, 59, 2)
(2, 59, 3)
(2, 59, 4)
(2, 59, 5)
(2, 59, 6)
(2, 59, 7)
(2, 60, 0)
(2, 60, 1)
(2, 60, 2)
(2, 60, 3)
(2, 60, 4)
(2, 60, 5)
(2, 60, 6)
(2, 60, 7)
(2, 61, 0)
(2, 61, 1)
(2, 61, 2)
(2, 61, 3)
(2, 61, 4)
(2, 61, 5)
(2, 61, 6)
(2, 61, 7)
(2, 62, 0)
(2, 62, 1)
(2, 62, 2)
(2, 62, 3)
(2, 62, 4)
(2, 62, 5)
(2, 62, 6)
(2, 62, 7)
(2, 63, 0)
(2, 63, 1)
(2, 63, 2)
(2, 63, 3)
(2, 63, 4)
(2, 63, 5)
(2, 63, 6)
(2, 63, 7)
(2, 64, 0)
(2, 64, 1)
(2, 64, 2)
(2, 64, 3)
(2, 64, 4)
(2, 64, 5)
(2, 64, 6)
(2, 64, 7)
(2, 65, 0)
(2, 65, 1)
(2, 65, 2)
(2, 65, 3)
(2, 65, 4)
(2, 65, 5)
(2, 65, 6)
(2, 65, 7)
(2, 66, 0)
(2, 66, 1)
(2, 66, 2)
(2, 66, 3)
(2, 66, 4)
(2, 66, 5)
(2, 66, 6)
(2, 66, 7)
(2, 67, 0)
(2, 67, 1)
(2, 67, 2)
(2, 67, 3)
(2, 67, 4)
(2, 67, 5)
(2, 67, 6)
(2, 67, 7)
(2, 68, 0)
(2, 68, 1)
(2, 68, 2)
(2, 68, 3)
(2, 68, 4)
(2, 68, 5)
(2, 68, 6)
(2, 68, 7)
(2, 69, 0)
(2, 69, 1)
(2, 69, 2)
(2, 69, 3)
(2, 69, 4)
(2, 69, 5)
(2, 69, 6)
(2, 69, 7)
(2, 70, 0)
(2, 70, 1)
(2, 70, 2)
(2, 70, 3)
(2, 70, 4)
(2, 70, 5)
(2, 70, 6)
(2, 70, 7)
(2, 71, 0)
(2, 71, 1)
(2, 71, 2)
(2, 71, 3)
(2, 71, 4)
(2, 71, 5)
(2, 71, 6)
(2, 71, 7)
(2, 72, 0)
(2, 72, 1)
(2, 72, 2)
(2, 72, 3)
(2, 72, 4)
(2, 72, 5)
(2, 72, 6)
(2, 72, 7)
(2, 73, 0)
(2, 73, 1)
(2, 73, 2)
(2, 73, 3)
(2, 73, 4)
(2, 73, 5)
(2, 73, 6)
(2, 73, 7)
(2, 74, 0)
(2, 74, 1)
(2, 74, 2)
(2, 74, 3)
(2, 74, 4)
(2, 74, 5)
(2, 74, 6)
(2, 74, 7)
(2, 75, 0)
(2, 75, 1)
(2, 75, 2)
(2, 75, 3)
(2, 75, 4)
(2, 75, 5)
(2, 75, 6)
(2, 75, 7)
(2, 76, 0)
(2, 76, 1)
(2, 76, 2)
(2, 76, 3)
(2, 76, 4)
(2, 76, 5)
(2, 76, 6)
(2, 76, 7)
(2, 77, 0)
(2, 77, 1)
(2, 77, 2)
(2, 77, 3)
(2, 77, 4)
(2, 77, 5)
(2, 77, 6)
(2, 77, 7)
(2, 78, 0)
(2, 78, 1)
(2, 78, 2)
(2, 78, 3)
(2, 78, 4)
(2, 78, 5)
(2, 78, 6)
(2, 78, 7)
(2, 79, 0)
(2, 79, 1)
(2, 79, 2)
(2, 79, 3)
(2, 79, 4)
(2, 79, 5)
(2, 79, 6)
(2, 79, 7)
(2, 80, 0)
(2, 80, 1)
(2, 80, 2)
(2, 80, 3)
(2, 80, 4)
(2, 80, 5)
(2, 80, 6)
(2, 80, 7)
(2, 81, 0)
(2, 81, 1)
(2, 81, 2)
(2, 81, 3)
(2, 81, 4)
(2, 81, 5)
(2, 81, 6)
(2, 81, 7)
(2, 82, 0)
(2, 82, 1)
(2, 82, 2)
(2, 82, 3)
(2, 82, 4)
(2, 82, 5)
(2, 82, 6)
(2, 82, 7)
(2, 83, 0)
(2, 83, 1)
(2, 83, 2)
(2, 83, 3)
(2, 83, 4)
(2, 83, 5)
(2, 83, 6)
(2, 83, 7)
(2, 84, 0)
(2, 84, 1)
(2, 84, 2)
(2, 84, 3)
(2, 84, 4)
(2, 84, 5)
(2, 84, 6)
(2, 84, 7)
(2, 85, 0)
(2, 85, 1)
(2, 85, 2)
(2, 85, 3)
(2, 85, 4)
(2, 85, 5)
(2, 85, 6)
(2, 85, 7)
(2, 86, 0)
(2, 86, 1)
(2, 86, 2)
(2, 86, 3)
(2, 86, 4)
(2, 86, 5)
(2, 86, 6)
(2, 86, 7)
(2, 87, 0)
(2, 87, 1)
(2, 87, 2)
(2, 87, 3)
(2, 87, 4)
(2, 87, 5)
(2, 87, 6)
(2, 87, 7)
(2, 88, 0)
(2, 88, 1)
(2, 88, 2)
(2, 88, 3)
(2, 88, 4)
(2, 88, 5)
(2, 88, 6)
(2, 88, 7)
(2, 89, 0)
(2, 89, 1)
(2, 89, 2)
(2, 89, 3)
(2, 89, 4)
(2, 89, 5)
(2, 89, 6)
(2, 89, 7)
(2, 90, 0)
(2, 90, 1)
(2, 90, 2)
(2, 90, 3)
(2, 90, 4)
(2, 90, 5)
(2, 90, 6)
(2, 90, 7)
(2, 91, 0)
(2, 91, 1)
(2, 91, 2)
(2, 91, 3)
(2, 91, 4)
(2, 91, 5)
(2, 91, 6)
(2, 91, 7)
(2, 92, 0)
(2, 92, 1)
(2, 92, 2)
(2, 92, 3)
(2, 92, 4)
(2, 92, 5)
(2, 92, 6)
(2, 92, 7)
(2, 93, 0)
(2, 93, 1)
(2, 93, 2)
(2, 93, 3)
(2, 93, 4)
(2, 93, 5)
(2, 93, 6)
(2, 93, 7)
(2, 94, 0)
(2, 94, 1)
(2, 94, 2)
(2, 94, 3)
(2, 94, 4)
(2, 94, 5)
(2, 94, 6)
(2, 94, 7)
(2, 95, 0)
(2, 95, 1)
(2, 95, 2)
(2, 95, 3)
(2, 95, 4)
(2, 95, 5)
(2, 95, 6)
(2, 95, 7)
(2, 96, 0)
(2, 96, 1)
(2, 96, 2)
(2, 96, 3)
(2, 96, 4)
(2, 96, 5)
(2, 96, 6)
(2, 96, 7)
(2, 97, 0)
(2, 97, 1)
(2, 97, 2)
(2, 97, 3)
(2, 97, 4)
(2, 97, 5)
(2, 97, 6)
(2, 97, 7)
(2, 98, 0)
(2, 98, 1)
(2, 98, 2)
(2, 98, 3)
(2, 98, 4)
(2, 98, 5)
(2, 98, 6)
(2, 98, 7)
(2, 99, 0)
(2, 99, 1)
(2, 99, 2)
(2, 99, 3)
(2, 99, 4)
(2, 99, 5)
(2, 99, 6)
(2, 99, 7)
(2, 100, 0)
(2, 100, 1)
(2, 100, 2)
(2, 100, 3)
(2, 100, 4)
(2, 100, 5)
(2, 100, 6)
(2, 100, 7)
(2, 101, 0)
(2, 101, 1)
(2, 101, 2)
(2, 101, 3)
(2, 101, 4)
(2, 101, 5)
(2, 101, 6)
(2, 101, 7)
(2, 102, 0)
(2, 102, 1)
(2, 102, 2)
(2, 102, 3)
(2, 102, 4)
(2, 102, 5)
(2, 102, 6)
(2, 102, 7)
(2, 103, 0)
(2, 103, 1)
(2, 103, 2)
(2, 103, 3)
(2, 103, 4)
(2, 103, 5)
(2, 103, 6)
(2, 103, 7)
(2, 104, 0)
(2, 104, 1)
(2, 104, 2)
(2, 104, 3)
(2, 104, 4)
(2, 104, 5)
(2, 104, 6)
(2, 104, 7)
(2, 105, 0)
(2, 105, 1)
(2, 105, 2)
(2, 105, 3)
(2, 105, 4)
(2, 105, 5)
(2, 105, 6)
(2, 105, 7)
(2, 106, 0)
(2, 106, 1)
(2, 106, 2)
(2, 106, 3)
(2, 106, 4)
(2, 106, 5)
(2, 106, 6)
(2, 106, 7)
(2, 107, 0)
(2, 107, 1)
(2, 107, 2)
(2, 107, 3)
(2, 107, 4)
(2, 107, 5)
(2, 107, 6)
(2, 107, 7)
(2, 108, 0)
(2, 108, 1)
(2, 108, 2)
(2, 108, 3)
(2, 108, 4)
(2, 108, 5)
(2, 108, 6)
(2, 108, 7)
(2, 109, 0)
(2, 109, 1)
(2, 109, 2)
(2, 109, 3)
(2, 109, 4)
(2, 109, 5)
(2, 109, 6)
(2, 109, 7)
(2, 110, 0)
(2, 110, 1)
(2, 110, 2)
(2, 110, 3)
(2, 110, 4)
(2, 110, 5)
(2, 110, 6)
(2, 110, 7)
(2, 111, 0)
(2, 111, 1)
(2, 111, 2)
(2, 111, 3)
(2, 111, 4)
(2, 111, 5)
(2, 111, 6)
(2, 111, 7)
(2, 112, 0)
(2, 112, 1)
(2, 112, 2)
(2, 112, 3)
(2, 112, 4)
(2, 112, 5)
(2, 112, 6)
(2, 112, 7)
(2, 113, 0)
(2, 113, 1)
(2, 113, 2)
(2, 113, 3)
(2, 113, 4)
(2, 113, 5)
(2, 113, 6)
(2, 113, 7)
(2, 114, 0)
(2, 114, 1)
(2, 114, 2)
(2, 114, 3)
(2, 114, 4)
(2, 114, 5)
(2, 114, 6)
(2, 114, 7)
(2, 115, 0)
(2, 115, 1)
(2, 115, 2)
(2, 115, 3)
(2, 115, 4)
(2, 115, 5)
(2, 115, 6)
(2, 115, 7)
(2, 116, 0)
(2, 116, 1)
(2, 116, 2)
(2, 116, 3)
(2, 116, 4)
(2, 116, 5)
(2, 116, 6)
(2, 116, 7)
(2, 117, 0)
(2, 117, 1)
(2, 117, 2)
(2, 117, 3)
(2, 117, 4)
(2, 117, 5)
(2, 117, 6)
(2, 117, 7)
(2, 118, 0)
(2, 118, 1)
(2, 118, 2)
(2, 118, 3)
(2, 118, 4)
(2, 118, 5)
(2, 118, 6)
(2, 118, 7)
(2, 119, 0)
(2, 119, 1)
(2, 119, 2)
(2, 119, 3)
(2, 119, 4)
(2, 119, 5)
(2, 119, 6)
(2, 119, 7)
(2, 120, 0)
(2, 120, 1)
(2, 120, 2)
(2, 120, 3)
(2, 120, 4)
(2, 120, 5)
(2, 120, 6)
(2, 120, 7)
(2, 121, 0)
(2, 121, 1)
(2, 121, 2)
(2, 121, 3)
(2, 121, 4)
(2, 121, 5)
(2, 121, 6)
(2, 121, 7)
(2, 122, 0)
(2, 122, 1)
(2, 122, 2)
(2, 122, 3)
(2, 122, 4)
(2, 122, 5)
(2, 122, 6)
(2, 122, 7)
(2, 123, 0)
(2, 123, 1)
(2, 123, 2)
(2, 123, 3)
(2, 123, 4)
(2, 123, 5)
(2, 123, 6)
(2, 123, 7)
(2, 124, 0)
(2, 124, 1)
(2, 124, 2)
(2, 124, 3)
(2, 124, 4)
(2, 124, 5)
(2, 124, 6)
(2, 124, 7)
(2, 125, 0)
(2, 125, 1)
(2, 125, 2)
(2, 125, 3)
(2, 125, 4)
(2, 125, 5)
(2, 125, 6)
(2, 125, 7)
(2, 126, 0)
(2, 126, 1)
(2, 126, 2)
(2, 126, 3)
(2, 126, 4)
(2, 126, 5)
(2, 126, 6)
(2, 126, 7)
(2, 127, 0)
(2, 127, 1)
(2, 127, 2)
(2, 127, 3)
(2, 127, 4)
(2, 127, 5)
(2, 127, 6)
(2, 127, 7)
(2, 128, 0)
(2, 128, 1)
(2, 128, 2)
(2, 128, 3)
(2, 128, 4)
(2, 128, 5)
(2, 128, 6)
(2, 128, 7)
(2, 129, 0)
(2, 129, 1)
(2, 129, 2)
(2, 129, 3)
(2, 129, 4)
(2, 129, 5)
(2, 129, 6)
(2, 129, 7)
(2, 130, 0)
(2, 130, 1)
(2, 130, 2)
(2, 130, 3)
(2, 130, 4)
(2, 130, 5)
(2, 130, 6)
(2, 130, 7)
(2, 131, 0)
(2, 131, 1)
(2, 131, 2)
(2, 131, 3)
(2, 131, 4)
(2, 131, 5)
(2, 131, 6)
(2, 131, 7)
(2, 132, 0)
(2, 132, 1)
(2, 132, 2)
(2, 132, 3)
(2, 132, 4)
(2, 132, 5)
(2, 132, 6)
(2, 132, 7)
(2, 133, 0)
(2, 133, 1)
(2, 133, 2)
(2, 133, 3)
(2, 133, 4)
(2, 133, 5)
(2, 133, 6)
(2, 133, 7)
(2, 134, 0)
(2, 134, 1)
(2, 134, 2)
(2, 134, 3)
(2, 134, 4)
(2, 134, 5)
(2, 134, 6)
(2, 134, 7)
(2, 135, 0)
(2, 135, 1)
(2, 135, 2)
(2, 135, 3)
(2, 135, 4)
(2, 135, 5)
(2, 135, 6)
(2, 135, 7)
(2, 136, 0)
(2, 136, 1)
(2, 136, 2)
(2, 136, 3)
(2, 136, 4)
(2, 136, 5)
(2, 136, 6)
(2, 136, 7)
(2, 137, 0)
(2, 137, 1)
(2, 137, 2)
(2, 137, 3)
(2, 137, 4)
(2, 137, 5)
(2, 137, 6)
(2, 137, 7)
(2, 138, 0)
(2, 138, 1)
(2, 138, 2)
(2, 138, 3)
(2, 138, 4)
(2, 138, 5)
(2, 138, 6)
(2, 138, 7)
(2, 139, 0)
(2, 139, 1)
(2, 139, 2)
(2, 139, 3)
(2, 139, 4)
(2, 139, 5)
(2, 139, 6)
(2, 139, 7)
(2, 140, 0)
(2, 140, 1)
(2, 140, 2)
(2, 140, 3)
(2, 140, 4)
(2, 140, 5)
(2, 140, 6)
(2, 140, 7)
(2, 141, 0)
(2, 141, 1)
(2, 141, 2)
(2, 141, 3)
(2, 141, 4)
(2, 141, 5)
(2, 141, 6)
(2, 141, 7)
(2, 142, 0)
(2, 142, 1)
(2, 142, 2)
(2, 142, 3)
(2, 142, 4)
(2, 142, 5)
(2, 142, 6)
(2, 142, 7)
(2, 143, 0)
(2, 143, 1)
(2, 143, 2)
(2, 143, 3)
(2, 143, 4)
(2, 143, 5)
(2, 143, 6)
(2, 143, 7)
(2, 144, 0)
(2, 144, 1)
(2, 144, 2)
(2, 144, 3)
(2, 144, 4)
(2, 144, 5)
(2, 144, 6)
(2, 144, 7)
(2, 145, 0)
(2, 145, 1)
(2, 145, 2)
(2, 145, 3)
(2, 145, 4)
(2, 145, 5)
(2, 145, 6)
(2, 145, 7)
(2, 146, 0)
(2, 146, 1)
(2, 146, 2)
(2, 146, 3)
(2, 146, 4)
(2, 146, 5)
(2, 146, 6)
(2, 146, 7)
(2, 147, 0)
(2, 147, 1)
(2, 147, 2)
(2, 147, 3)
(2, 147, 4)
(2, 147, 5)
(2, 147, 6)
(2, 147, 7)
(2, 148, 0)
(2, 148, 1)
(2, 148, 2)
(2, 148, 3)
(2, 148, 4)
(2, 148, 5)
(2, 148, 6)
(2, 148, 7)
(2, 149, 0)
(2, 149, 1)
(2, 149, 2)
(2, 149, 3)
(2, 149, 4)
(2, 149, 5)
(2, 149, 6)
(2, 149, 7)
(2, 150, 0)
(2, 150, 1)
(2, 150, 2)
(2, 150, 3)
(2, 150, 4)
(2, 150, 5)
(2, 150, 6)
(2, 150, 7)
(2, 151, 0)
(2, 151, 1)
(2, 151, 2)
(2, 151, 3)
(2, 151, 4)
(2, 151, 5)
(2, 151, 6)
(2, 151, 7)
(2, 152, 0)
(2, 152, 1)
(2, 152, 2)
(2, 152, 3)
(2, 152, 4)
(2, 152, 5)
(2, 152, 6)
(2, 152, 7)
(2, 153, 0)
(2, 153, 1)
(2, 153, 2)
(2, 153, 3)
(2, 153, 4)
(2, 153, 5)
(2, 153, 6)
(2, 153, 7)
(2, 154, 0)
(2, 154, 1)
(2, 154, 2)
(2, 154, 3)
(2, 154, 4)
(2, 154, 5)
(2, 154, 6)
(2, 154, 7)
(2, 155, 0)
(2, 155, 1)
(2, 155, 2)
(2, 155, 3)
(2, 155, 4)
(2, 155, 5)
(2, 155, 6)
(2, 155, 7)
(2, 156, 0)
(2, 156, 1)
(2, 156, 2)
(2, 156, 3)
(2, 156, 4)
(2, 156, 5)
(2, 156, 6)
(2, 156, 7)
(2, 157, 0)
(2, 157, 1)
(2, 157, 2)
(2, 157, 3)
(2, 157, 4)
(2, 157, 5)
(2, 157, 6)
(2, 157, 7)
(2, 158, 0)
(2, 158, 1)
(2, 158, 2)
(2, 158, 3)
(2, 158, 4)
(2, 158, 5)
(2, 158, 6)
(2, 158, 7)
(2, 159, 0)
(2, 159, 1)
(2, 159, 2)
(2, 159, 3)
(2, 159, 4)
(2, 159, 5)
(2, 159, 6)
(2, 159, 7)
(2, 160, 0)
(2, 160, 1)
(2, 160, 2)
(2, 160, 3)
(2, 160, 4)
(2, 160, 5)
(2, 160, 6)
(2, 160, 7)
(2, 161, 0)
(2, 161, 1)
(2, 161, 2)
(2, 161, 3)
(2, 161, 4)
(2, 161, 5)
(2, 161, 6)
(2, 161, 7)
(2, 162, 0)
(2, 162, 1)
(2, 162, 2)
(2, 162, 3)
(2, 162, 4)
(2, 162, 5)
(2, 162, 6)
(2, 162, 7)
(2, 163, 0)
(2, 163, 1)
(2, 163, 2)
(2, 163, 3)
(2, 163, 4)
(2, 163, 5)
(2, 163, 6)
(2, 163, 7)
(2, 164, 0)
(2, 164, 1)
(2, 164, 2)
(2, 164, 3)
(2, 164, 4)
(2, 164, 5)
(2, 164, 6)
(2, 164, 7)
(2, 165, 0)
(2, 165, 1)
(2, 165, 2)
(2, 165, 3)
(2, 165, 4)
(2, 165, 5)
(2, 165, 6)
(2, 165, 7)
(2, 166, 0)
(2, 166, 1)
(2, 166, 2)
(2, 166, 3)
(2, 166, 4)
(2, 166, 5)
(2, 166, 6)
(2, 166, 7)
(2, 167, 0)
(2, 167, 1)
(2, 167, 2)
(2, 167, 3)
(2, 167, 4)
(2, 167, 5)
(2, 167, 6)
(2, 167, 7)
(2, 168, 0)
(2, 168, 1)
(2, 168, 2)
(2, 168, 3)
(2, 168, 4)
(2, 168, 5)
(2, 168, 6)
(2, 168, 7)
(2, 169, 0)
(2, 169, 1)
(2, 169, 2)
(2, 169, 3)
(2, 169, 4)
(2, 169, 5)
(2, 169, 6)
(2, 169, 7)
(2, 170, 0)
(2, 170, 1)
(2, 170, 2)
(2, 170, 3)
(2, 170, 4)
(2, 170, 5)
(2, 170, 6)
(2, 170, 7)
(2, 171, 0)
(2, 171, 1)
(2, 171, 2)
(2, 171, 3)
(2, 171, 4)
(2, 171, 5)
(2, 171, 6)
(2, 171, 7)
(2, 172, 0)
(2, 172, 1)
(2, 172, 2)
(2, 172, 3)
(2, 172, 4)
(2, 172, 5)
(2, 172, 6)
(2, 172, 7)
(2, 173, 0)
(2, 173, 1)
(2, 173, 2)
(2, 173, 3)
(2, 173, 4)
(2, 173, 5)
(2, 173, 6)
(2, 173, 7)
(2, 174, 0)
(2, 174, 1)
(2, 174, 2)
(2, 174, 3)
(2, 174, 4)
(2, 174, 5)
(2, 174, 6)
(2, 174, 7)
(2, 175, 0)
(2, 175, 1)
(2, 175, 2)
(2, 175, 3)
(2, 175, 4)
(2, 175, 5)
(2, 175, 6)
(2, 175, 7)
(2, 176, 0)
(2, 176, 1)
(2, 176, 2)
(2, 176, 3)
(2, 176, 4)
(2, 176, 5)
(2, 176, 6)
(2, 176, 7)
(2, 177, 0)
(2, 177, 1)
(2, 177, 2)
(2, 177, 3)
(2, 177, 4)
(2, 177, 5)
(2, 177, 6)
(2, 177, 7)
(2, 178, 0)
(2, 178, 1)
(2, 178, 2)
(2, 178, 3)
(2, 178, 4)
(2, 178, 5)
(2, 178, 6)
(2, 178, 7)
(2, 179, 0)
(2, 179, 1)
(2, 179, 2)
(2, 179, 3)
(2, 179, 4)
(2, 179, 5)
(2, 179, 6)
(2, 179, 7)
(2, 180, 0)
(2, 180, 1)
(2, 180, 2)
(2, 180, 3)
(2, 180, 4)
(2, 180, 5)
(2, 180, 6)
(2, 180, 7)
(2, 181, 0)
(2, 181, 1)
(2, 181, 2)
(2, 181, 3)
(2, 181, 4)
(2, 181, 5)
(2, 181, 6)
(2, 181, 7)
(2, 182, 0)
(2, 182, 1)
(2, 182, 2)
(2, 182, 3)
(2, 182, 4)
(2, 182, 5)
(2, 182, 6)
(2, 182, 7)
(2, 183, 0)
(2, 183, 1)
(2, 183, 2)
(2, 183, 3)
(2, 183, 4)
(2, 183, 5)
(2, 183, 6)
(2, 183, 7)
(2, 184, 0)
(2, 184, 1)
(2, 184, 2)
(2, 184, 3)
(2, 184, 4)
(2, 184, 5)
(2, 184, 6)
(2, 184, 7)
(2, 185, 0)
(2, 185, 1)
(2, 185, 2)
(2, 185, 3)
(2, 185, 4)
(2, 185, 5)
(2, 185, 6)
(2, 185, 7)
(2, 186, 0)
(2, 186, 1)
(2, 186, 2)
(2, 186, 3)
(2, 186, 4)
(2, 186, 5)
(2, 186, 6)
(2, 186, 7)
(2, 187, 0)
(2, 187, 1)
(2, 187, 2)
(2, 187, 3)
(2, 187, 4)
(2, 187, 5)
(2, 187, 6)
(2, 187, 7)
(2, 188, 0)
(2, 188, 1)
(2, 188, 2)
(2, 188, 3)
(2, 188, 4)
(2, 188, 5)
(2, 188, 6)
(2, 188, 7)
(2, 189, 0)
(2, 189, 1)
(2, 189, 2)
(2, 189, 3)
(2, 189, 4)
(2, 189, 5)
(2, 189, 6)
(2, 189, 7)
(2, 190, 0)
(2, 190, 1)
(2, 190, 2)
(2, 190, 3)
(2, 190, 4)
(2, 190, 5)
(2, 190, 6)
(2, 190, 7)
(2, 191, 0)
(2, 191, 1)
(2, 191, 2)
(2, 191, 3)
(2, 191, 4)
(2, 191, 5)
(2, 191, 6)
(2, 191, 7)
(2, 192, 0)
(2, 192, 1)
(2, 192, 2)
(2, 192, 3)
(2, 192, 4)
(2, 192, 5)
(2, 192, 6)
(2, 192, 7)
(2, 193, 0)
(2, 193, 1)
(2, 193, 2)
(2, 193, 3)
(2, 193, 4)
(2, 193, 5)
(2, 193, 6)
(2, 193, 7)
(2, 194, 0)
(2, 194, 1)
(2, 194, 2)
(2, 194, 3)
(2, 194, 4)
(2, 194, 5)
(2, 194, 6)
(2, 194, 7)
(2, 195, 0)
(2, 195, 1)
(2, 195, 2)
(2, 195, 3)
(2, 195, 4)
(2, 195, 5)
(2, 195, 6)
(2, 195, 7)
(2, 196, 0)
(2, 196, 1)
(2, 196, 2)
(2, 196, 3)
(2, 196, 4)
(2, 196, 5)
(2, 196, 6)
(2, 196, 7)
(2, 197, 0)
(2, 197, 1)
(2, 197, 2)
(2, 197, 3)
(2, 197, 4)
(2, 197, 5)
(2, 197, 6)
(2, 197, 7)
(2, 198, 0)
(2, 198, 1)
(2, 198, 2)
(2, 198, 3)
(2, 198, 4)
(2, 198, 5)
(2, 198, 6)
(2, 198, 7)
(2, 199, 0)
(2, 199, 1)
(2, 199, 2)
(2, 199, 3)
(2, 199, 4)
(2, 199, 5)
(2, 199, 6)
(2, 199, 7)
(2, 200, 0)
(2, 200, 1)
(2, 200, 2)
(2, 200, 3)
(2, 200, 4)
(2, 200, 5)
(2, 200, 6)
(2, 200, 7)
(2, 201, 0)
(2, 201, 1)
(2, 201, 2)
(2, 201, 3)
(2, 201, 4)
(2, 201, 5)
(2, 201, 6)
(2, 201, 7)
(2, 202, 0)
(2, 202, 1)
(2, 202, 2)
(2, 202, 3)
(2, 202, 4)
(2, 202, 5)
(2, 202, 6)
(2, 202, 7)
(2, 203, 0)
(2, 203, 1)
(2, 203, 2)
(2, 203, 3)
(2, 203, 4)
(2, 203, 5)
(2, 203, 6)
(2, 203, 7)
(2, 204, 0)
(2, 204, 1)
(2, 204, 2)
(2, 204, 3)
(2, 204, 4)
(2, 204, 5)
(2, 204, 6)
(2, 204, 7)
(2, 205, 0)
(2, 205, 1)
(2, 205, 2)
(2, 205, 3)
(2, 205, 4)
(2, 205, 5)
(2, 205, 6)
(2, 205, 7)
(2, 206, 0)
(2, 206, 1)
(2, 206, 2)
(2, 206, 3)
(2, 206, 4)
(2, 206, 5)
(2, 206, 6)
(2, 206, 7)
(2, 207, 0)
(2, 207, 1)
(2, 207, 2)
(2, 207, 3)
(2, 207, 4)
(2, 207, 5)
(2, 207, 6)
(2, 207, 7)
(2, 208, 0)
(2, 208, 1)
(2, 208, 2)
(2, 208, 3)
(2, 208, 4)
(2, 208, 5)
(2, 208, 6)
(2, 208, 7)
(2, 209, 0)
(2, 209, 1)
(2, 209, 2)
(2, 209, 3)
(2, 209, 4)
(2, 209, 5)
(2, 209, 6)
(2, 209, 7)
(2, 210, 0)
(2, 210, 1)
(2, 210, 2)
(2, 210, 3)
(2, 210, 4)
(2, 210, 5)
(2, 210, 6)
(2, 210, 7)
(2, 211, 0)
(2, 211, 1)
(2, 211, 2)
(2, 211, 3)
(2, 211, 4)
(2, 211, 5)
(2, 211, 6)
(2, 211, 7)
(2, 212, 0)
(2, 212, 1)
(2, 212, 2)
(2, 212, 3)
(2, 212, 4)
(2, 212, 5)
(2, 212, 6)
(2, 212, 7)
(2, 213, 0)
(2, 213, 1)
(2, 213, 2)
(2, 213, 3)
(2, 213, 4)
(2, 213, 5)
(2, 213, 6)
(2, 213, 7)
(2, 214, 0)
(2, 214, 1)
(2, 214, 2)
(2, 214, 3)
(2, 214, 4)
(2, 214, 5)
(2, 214, 6)
(2, 214, 7)
(2, 215, 0)
(2, 215, 1)
(2, 215, 2)
(2, 215, 3)
(2, 215, 4)
(2, 215, 5)
(2, 215, 6)
(2, 215, 7)
(2, 216, 0)
(2, 216, 1)
(2, 216, 2)
(2, 216, 3)
(2, 216, 4)
(2, 216, 5)
(2, 216, 6)
(2, 216, 7)
(2, 217, 0)
(2, 217, 1)
(2, 217, 2)
(2, 217, 3)
(2, 217, 4)
(2, 217, 5)
(2, 217, 6)
(2, 217, 7)
(2, 218, 0)
(2, 218, 1)
(2, 218, 2)
(2, 218, 3)
(2, 218, 4)
(2, 218, 5)
(2, 218, 6)
(2, 218, 7)
(2, 219, 0)
(2, 219, 1)
(2, 219, 2)
(2, 219, 3)
(2, 219, 4)
(2, 219, 5)
(2, 219, 6)
(2, 219, 7)
(2, 220, 0)
(2, 220, 1)
(2, 220, 2)
(2, 220, 3)
(2, 220, 4)
(2, 220, 5)
(2, 220, 6)
(2, 220, 7)
(2, 221, 0)
(2, 221, 1)
(2, 221, 2)
(2, 221, 3)
(2, 221, 4)
(2, 221, 5)
(2, 221, 6)
(2, 221, 7)
(2, 222, 0)
(2, 222, 1)
(2, 222, 2)
(2, 222, 3)
(2, 222, 4)
(2, 222, 5)
(2, 222, 6)
(2, 222, 7)
(2, 223, 0)
(2, 223, 1)
(2, 223, 2)
(2, 223, 3)
(2, 223, 4)
(2, 223, 5)
(2, 223, 6)
(2, 223, 7)
(2, 224, 0)
(2, 224, 1)
(2, 224, 2)
(2, 224, 3)
(2, 224, 4)
(2, 224, 5)
(2, 224, 6)
(2, 224, 7)
(2, 225, 0)
(2, 225, 1)
(2, 225, 2)
(2, 225, 3)
(2, 225, 4)
(2, 225, 5)
(2, 225, 6)
(2, 225, 7)
(2, 226, 0)
(2, 226, 1)
(2, 226, 2)
(2, 226, 3)
(2, 226, 4)
(2, 226, 5)
(2, 226, 6)
(2, 226, 7)
(2, 227, 0)
(2, 227, 1)
(2, 227, 2)
(2, 227, 3)
(2, 227, 4)
(2, 227, 5)
(2, 227, 6)
(2, 227, 7)
(2, 228, 0)
(2, 228, 1)
(2, 228, 2)
(2, 228, 3)
(2, 228, 4)
(2, 228, 5)
(2, 228, 6)
(2, 228, 7)
(2, 229, 0)
(2, 229, 1)
(2, 229, 2)
(2, 229, 3)
(2, 229, 4)
(2, 229, 5)
(2, 229, 6)
(2, 229, 7)
(2, 230, 0)
(2, 230, 1)
(2, 230, 2)
(2, 230, 3)
(2, 230, 4)
(2, 230, 5)
(2, 230, 6)
(2, 230, 7)
(2, 231, 0)
(2, 231, 1)
(2, 231, 2)
(2, 231, 3)
(2, 231, 4)
(2, 231, 5)
(2, 231, 6)
(2, 231, 7)
(2, 232, 0)
(2, 232, 1)
(2, 232, 2)
(2, 232, 3)
(2, 232, 4)
(2, 232, 5)
(2, 232, 6)
(2, 232, 7)
(2, 233, 0)
(2, 233, 1)
(2, 233, 2)
(2, 233, 3)
(2, 233, 4)
(2, 233, 5)
(2, 233, 6)
(2, 233, 7)
(2, 234, 0)
(2, 234, 1)
(2, 234, 2)
(2, 234, 3)
(2, 234, 4)
(2, 234, 5)
(2, 234, 6)
(2, 234, 7)
(2, 235, 0)
(2, 235, 1)
(2, 235, 2)
(2, 235, 3)
(2, 235, 4)
(2, 235, 5)
(2, 235, 6)
(2, 235, 7)
(2, 236, 0)
(2, 236, 1)
(2, 236, 2)
(2, 236, 3)
(2, 236, 4)
(2, 236, 5)
(2, 236, 6)
(2, 236, 7)
(2, 237, 0)
(2, 237, 1)
(2, 237, 2)
(2, 237, 3)
(2, 237, 4)
(2, 237, 5)
(2, 237, 6)
(2, 237, 7)
(2, 238, 0)
(2, 238, 1)
(2, 238, 2)
(2, 238, 3)
(2, 238, 4)
(2, 238, 5)
(2, 238, 6)
(2, 238, 7)
(2, 239, 0)
(2, 239, 1)
(2, 239, 2)
(2, 239, 3)
(2, 239, 4)
(2, 239, 5)
(2, 239, 6)
(2, 239, 7)
(2, 240, 0)
(2, 240, 1)
(2, 240, 2)
(2, 240, 3)
(2, 240, 4)
(2, 240, 5)
(2, 240, 6)
(2, 240, 7)
(2, 241, 0)
(2, 241, 1)
(2, 241, 2)
(2, 241, 3)
(2, 241, 4)
(2, 241, 5)
(2, 241, 6)
(2, 241, 7)
(2, 242, 0)
(2, 242, 1)
(2, 242, 2)
(2, 242, 3)
(2, 242, 4)
(2, 242, 5)
(2, 242, 6)
(2, 242, 7)
(2, 243, 0)
(2, 243, 1)
(2, 243, 2)
(2, 243, 3)
(2, 243, 4)
(2, 243, 5)
(2, 243, 6)
(2, 243, 7)
(2, 244, 0)
(2, 244, 1)
(2, 244, 2)
(2, 244, 3)
(2, 244, 4)
(2, 244, 5)
(2, 244, 6)
(2, 244, 7)
(2, 245, 0)
(2, 245, 1)
(2, 245, 2)
(2, 245, 3)
(2, 245, 4)
(2, 245, 5)
(2, 245, 6)
(2, 245, 7)
(2, 246, 0)
(2, 246, 1)
(2, 246, 2)
(2, 246, 3)
(2, 246, 4)
(2, 246, 5)
(2, 246, 6)
(2, 246, 7)
(2, 247, 0)
(2, 247, 1)
(2, 247, 2)
(2, 247, 3)
(2, 247, 4)
(2, 247, 5)
(2, 247, 6)
(2, 247, 7)
(2, 248, 0)
(2, 248, 1)
(2, 248, 2)
(2, 248, 3)
(2, 248, 4)
(2, 248, 5)
(2, 248, 6)
(2, 248, 7)
(2, 249, 0)
(2, 249, 1)
(2, 249, 2)
(2, 249, 3)
(2, 249, 4)
(2, 249, 5)
(2, 249, 6)
(2, 249, 7)
(2, 250, 0)
(2, 250, 1)
(2, 250, 2)
(2, 250, 3)
(2, 250, 4)
(2, 250, 5)
(2, 250, 6)
(2, 250, 7)
(2, 251, 0)
(2, 251, 1)
(2, 251, 2)
(2, 251, 3)
(2, 251, 4)
(2, 251, 5)
(2, 251, 6)
(2, 251, 7)
(2, 252, 0)
(2, 252, 1)
(2, 252, 2)
(2, 252, 3)
(2, 252, 4)
(2, 252, 5)
(2, 252, 6)
(2, 252, 7)
(2, 253, 0)
(2, 253, 1)
(2, 253, 2)
(2, 253, 3)
(2, 253, 4)
(2, 253, 5)
(2, 253, 6)
(2, 253, 7)
(2, 254, 0)
(2, 254, 1)
(2, 254, 2)
(2, 254, 3)
(2, 254, 4)
(2, 254, 5)
(2, 254, 6)
(2, 254, 7)
(2, 255, 0)
(2, 255, 1)
(2, 255, 2)
(2, 255, 3)
(2, 255, 4)
(2, 255, 5)
(2, 255, 6)
(2, 255, 7)
(3, 0, 0)
(3, 0, 1)
(3, 0, 2)
(3, 0, 3)
(3, 0, 4)
(3, 0, 5)
(3, 0, 6)
(3, 0, 7)
(3, 1, 0)
(3, 1, 1)
(3, 1, 2)
(3, 1, 3)
(3, 1, 4)
(3, 1, 5)
(3, 1, 6)
(3, 1, 7)
(3, 2, 0)
(3, 2, 1)
(3, 2, 2)
(3, 2, 3)
(3, 2, 4)
(3, 2, 5)
(3, 2, 6)
(3, 2, 7)
(3, 3, 0)
(3, 3, 1)
(3, 3, 2)
(3, 3, 3)
(3, 3, 4)
(3, 3, 5)
(3, 3, 6)
(3, 3, 7)
(3, 4, 0)
(3, 4, 1)
(3, 4, 2)
(3, 4, 3)
(3, 4, 4)
(3, 4, 5)
(3, 4, 6)
(3, 4, 7)
(3, 5, 0)
(3, 5, 1)
(3, 5, 2)
(3, 5, 3)
(3, 5, 4)
(3, 5, 5)
(3, 5, 6)
(3, 5, 7)
(3, 6, 0)
(3, 6, 1)
(3, 6, 2)
(3, 6, 3)
(3, 6, 4)
(3, 6, 5)
(3, 6, 6)
(3, 6, 7)
(3, 7, 0)
(3, 7, 1)
(3, 7, 2)
(3, 7, 3)
(3, 7, 4)
(3, 7, 5)
(3, 7, 6)
(3, 7, 7)
(3, 8, 0)
(3, 8, 1)
(3, 8, 2)
(3, 8, 3)
(3, 8, 4)
(3, 8, 5)
(3, 8, 6)
(3, 8, 7)
(3, 9, 0)
(3, 9, 1)
(3, 9, 2)
(3, 9, 3)
(3, 9, 4)
(3, 9, 5)
(3, 9, 6)
(3, 9, 7)
(3, 10, 0)
(3, 10, 1)
(3, 10, 2)
(3, 10, 3)
(3, 10, 4)
(3, 10, 5)
(3, 10, 6)
(3, 10, 7)
(3, 11, 0)
(3, 11, 1)
(3, 11, 2)
(3, 11, 3)
(3, 11, 4)
(3, 11, 5)
(3, 11, 6)
(3, 11, 7)
(3, 12, 0)
(3, 12, 1)
(3, 12, 2)
(3, 12, 3)
(3, 12, 4)
(3, 12, 5)
(3, 12, 6)
(3, 12, 7)
(3, 13, 0)
(3, 13, 1)
(3, 13, 2)
(3, 13, 3)
(3, 13, 4)
(3, 13, 5)
(3, 13, 6)
(3, 13, 7)
(3, 14, 0)
(3, 14, 1)
(3, 14, 2)
(3, 14, 3)
(3, 14, 4)
(3, 14, 5)
(3, 14, 6)
(3, 14, 7)
(3, 15, 0)
(3, 15, 1)
(3, 15, 2)
(3, 15, 3)
(3, 15, 4)
(3, 15, 5)
(3, 15, 6)
(3, 15, 7)
(3, 16, 0)
(3, 16, 1)
(3, 16, 2)
(3, 16, 3)
(3, 16, 4)
(3, 16, 5)
(3, 16, 6)
(3, 16, 7)
(3, 17, 0)
(3, 17, 1)
(3, 17, 2)
(3, 17, 3)
(3, 17, 4)
(3, 17, 5)
(3, 17, 6)
(3, 17, 7)
(3, 18, 0)
(3, 18, 1)
(3, 18, 2)
(3, 18, 3)
(3, 18, 4)
(3, 18, 5)
(3, 18, 6)
(3, 18, 7)
(3, 19, 0)
(3, 19, 1)
(3, 19, 2)
(3, 19, 3)
(3, 19, 4)
(3, 19, 5)
(3, 19, 6)
(3, 19, 7)
(3, 20, 0)
(3, 20, 1)
(3, 20, 2)
(3, 20, 3)
(3, 20, 4)
(3, 20, 5)
(3, 20, 6)
(3, 20, 7)
(3, 21, 0)
(3, 21, 1)
(3, 21, 2)
(3, 21, 3)
(3, 21, 4)
(3, 21, 5)
(3, 21, 6)
(3, 21, 7)
(3, 22, 0)
(3, 22, 1)
(3, 22, 2)
(3, 22, 3)
(3, 22, 4)
(3, 22, 5)
(3, 22, 6)
(3, 22, 7)
(3, 23, 0)
(3, 23, 1)
(3, 23, 2)
(3, 23, 3)
(3, 23, 4)
(3, 23, 5)
(3, 23, 6)
(3, 23, 7)
(3, 24, 0)
(3, 24, 1)
(3, 24, 2)
(3, 24, 3)
(3, 24, 4)
(3, 24, 5)
(3, 24, 6)
(3, 24, 7)
(3, 25, 0)
(3, 25, 1)
(3, 25, 2)
(3, 25, 3)
(3, 25, 4)
(3, 25, 5)
(3, 25, 6)
(3, 25, 7)
(3, 26, 0)
(3, 26, 1)
(3, 26, 2)
(3, 26, 3)
(3, 26, 4)
(3, 26, 5)
(3, 26, 6)
(3, 26, 7)
(3, 27, 0)
(3, 27, 1)
(3, 27, 2)
(3, 27, 3)
(3, 27, 4)
(3, 27, 5)
(3, 27, 6)
(3, 27, 7)
(3, 28, 0)
(3, 28, 1)
(3, 28, 2)
(3, 28, 3)
(3, 28, 4)
(3, 28, 5)
(3, 28, 6)
(3, 28, 7)
(3, 29, 0)
(3, 29, 1)
(3, 29, 2)
(3, 29, 3)
(3, 29, 4)
(3, 29, 5)
(3, 29, 6)
(3, 29, 7)
(3, 30, 0)
(3, 30, 1)
(3, 30, 2)
(3, 30, 3)
(3, 30, 4)
(3, 30, 5)
(3, 30, 6)
(3, 30, 7)
(3, 31, 0)
(3, 31, 1)
(3, 31, 2)
(3, 31, 3)
(3, 31, 4)
(3, 31, 5)
(3, 31, 6)
(3, 31, 7)
(3, 32, 0)
(3, 32, 1)
(3, 32, 2)
(3, 32, 3)
(3, 32, 4)
(3, 32, 5)
(3, 32, 6)
(3, 32, 7)
(3, 33, 0)
(3, 33, 1)
(3, 33, 2)
(3, 33, 3)
(3, 33, 4)
(3, 33, 5)
(3, 33, 6)
(3, 33, 7)
(3, 34, 0)
(3, 34, 1)
(3, 34, 2)
(3, 34, 3)
(3, 34, 4)
(3, 34, 5)
(3, 34, 6)
(3, 34, 7)
(3, 35, 0)
(3, 35, 1)
(3, 35, 2)
(3, 35, 3)
(3, 35, 4)
(3, 35, 5)
(3, 35, 6)
(3, 35, 7)
(3, 36, 0)
(3, 36, 1)
(3, 36, 2)
(3, 36, 3)
(3, 36, 4)
(3, 36, 5)
(3, 36, 6)
(3, 36, 7)
(3, 37, 0)
(3, 37, 1)
(3, 37, 2)
(3, 37, 3)
(3, 37, 4)
(3, 37, 5)
(3, 37, 6)
(3, 37, 7)
(3, 38, 0)
(3, 38, 1)
(3, 38, 2)
(3, 38, 3)
(3, 38, 4)
(3, 38, 5)
(3, 38, 6)
(3, 38, 7)
(3, 39, 0)
(3, 39, 1)
(3, 39, 2)
(3, 39, 3)
(3, 39, 4)
(3, 39, 5)
(3, 39, 6)
(3, 39, 7)
(3, 40, 0)
(3, 40, 1)
(3, 40, 2)
(3, 40, 3)
(3, 40, 4)
(3, 40, 5)
(3, 40, 6)
(3, 40, 7)
(3, 41, 0)
(3, 41, 1)
(3, 41, 2)
(3, 41, 3)
(3, 41, 4)
(3, 41, 5)
(3, 41, 6)
(3, 41, 7)
(3, 42, 0)
(3, 42, 1)
(3, 42, 2)
(3, 42, 3)
(3, 42, 4)
(3, 42, 5)
(3, 42, 6)
(3, 42, 7)
(3, 43, 0)
(3, 43, 1)
(3, 43, 2)
(3, 43, 3)
(3, 43, 4)
(3, 43, 5)
(3, 43, 6)
(3, 43, 7)
(3, 44, 0)
(3, 44, 1)
(3, 44, 2)
(3, 44, 3)
(3, 44, 4)
(3, 44, 5)
(3, 44, 6)
(3, 44, 7)
(3, 45, 0)
(3, 45, 1)
(3, 45, 2)
(3, 45, 3)
(3, 45, 4)
(3, 45, 5)
(3, 45, 6)
(3, 45, 7)
(3, 46, 0)
(3, 46, 1)
(3, 46, 2)
(3, 46, 3)
(3, 46, 4)
(3, 46, 5)
(3, 46, 6)
(3, 46, 7)
(3, 47, 0)
(3, 47, 1)
(3, 47, 2)
(3, 47, 3)
(3, 47, 4)
(3, 47, 5)
(3, 47, 6)
(3, 47, 7)
(3, 48, 0)
(3, 48, 1)
(3, 48, 2)
(3, 48, 3)
(3, 48, 4)
(3, 48, 5)
(3, 48, 6)
(3, 48, 7)
(3, 49, 0)
(3, 49, 1)
(3, 49, 2)
(3, 49, 3)
(3, 49, 4)
(3, 49, 5)
(3, 49, 6)
(3, 49, 7)
(3, 50, 0)
(3, 50, 1)
(3, 50, 2)
(3, 50, 3)
(3, 50, 4)
(3, 50, 5)
(3, 50, 6)
(3, 50, 7)
(3, 51, 0)
(3, 51, 1)
(3, 51, 2)
(3, 51, 3)
(3, 51, 4)
(3, 51, 5)
(3, 51, 6)
(3, 51, 7)
(3, 52, 0)
(3, 52, 1)
(3, 52, 2)
(3, 52, 3)
(3, 52, 4)
(3, 52, 5)
(3, 52, 6)
(3, 52, 7)
(3, 53, 0)
(3, 53, 1)
(3, 53, 2)
(3, 53, 3)
(3, 53, 4)
(3, 53, 5)
(3, 53, 6)
(3, 53, 7)
(3, 54, 0)
(3, 54, 1)
(3, 54, 2)
(3, 54, 3)
(3, 54, 4)
(3, 54, 5)
(3, 54, 6)
(3, 54, 7)
(3, 55, 0)
(3, 55, 1)
(3, 55, 2)
(3, 55, 3)
(3, 55, 4)
(3, 55, 5)
(3, 55, 6)
(3, 55, 7)
(3, 56, 0)
(3, 56, 1)
(3, 56, 2)
(3, 56, 3)
(3, 56, 4)
(3, 56, 5)
(3, 56, 6)
(3, 56, 7)
(3, 57, 0)
(3, 57, 1)
(3, 57, 2)
(3, 57, 3)
(3, 57, 4)
(3, 57, 5)
(3, 57, 6)
(3, 57, 7)
(3, 58, 0)
(3, 58, 1)
(3, 58, 2)
(3, 58, 3)
(3, 58, 4)
(3, 58, 5)
(3, 58, 6)
(3, 58, 7)
(3, 59, 0)
(3, 59, 1)
(3, 59, 2)
(3, 59, 3)
(3, 59, 4)
(3, 59, 5)
(3, 59, 6)
(3, 59, 7)
(3, 60, 0)
(3, 60, 1)
(3, 60, 2)
(3, 60, 3)
(3, 60, 4)
(3, 60, 5)
(3, 60, 6)
(3, 60, 7)
(3, 61, 0)
(3, 61, 1)
(3, 61, 2)
(3, 61, 3)
(3, 61, 4)
(3, 61, 5)
(3, 61, 6)
(3, 61, 7)
(3, 62, 0)
(3, 62, 1)
(3, 62, 2)
(3, 62, 3)
(3, 62, 4)
(3, 62, 5)
(3, 62, 6)
(3, 62, 7)
(3, 63, 0)
(3, 63, 1)
(3, 63, 2)
(3, 63, 3)
(3, 63, 4)
(3, 63, 5)
(3, 63, 6)
(3, 63, 7)
(3, 64, 0)
(3, 64, 1)
(3, 64, 2)
(3, 64, 3)
(3, 64, 4)
(3, 64, 5)
(3, 64, 6)
(3, 64, 7)
(3, 65, 0)
(3, 65, 1)
(3, 65, 2)
(3, 65, 3)
(3, 65, 4)
(3, 65, 5)
(3, 65, 6)
(3, 65, 7)
(3, 66, 0)
(3, 66, 1)
(3, 66, 2)
(3, 66, 3)
(3, 66, 4)
(3, 66, 5)
(3, 66, 6)
(3, 66, 7)
(3, 67, 0)
(3, 67, 1)
(3, 67, 2)
(3, 67, 3)
(3, 67, 4)
(3, 67, 5)
(3, 67, 6)
(3, 67, 7)
(3, 68, 0)
(3, 68, 1)
(3, 68, 2)
(3, 68, 3)
(3, 68, 4)
(3, 68, 5)
(3, 68, 6)
(3, 68, 7)
(3, 69, 0)
(3, 69, 1)
(3, 69, 2)
(3, 69, 3)
(3, 69, 4)
(3, 69, 5)
(3, 69, 6)
(3, 69, 7)
(3, 70, 0)
(3, 70, 1)
(3, 70, 2)
(3, 70, 3)
(3, 70, 4)
(3, 70, 5)
(3, 70, 6)
(3, 70, 7)
(3, 71, 0)
(3, 71, 1)
(3, 71, 2)
(3, 71, 3)
(3, 71, 4)
(3, 71, 5)
(3, 71, 6)
(3, 71, 7)
(3, 72, 0)
(3, 72, 1)
(3, 72, 2)
(3, 72, 3)
(3, 72, 4)
(3, 72, 5)
(3, 72, 6)
(3, 72, 7)
(3, 73, 0)
(3, 73, 1)
(3, 73, 2)
(3, 73, 3)
(3, 73, 4)
(3, 73, 5)
(3, 73, 6)
(3, 73, 7)
(3, 74, 0)
(3, 74, 1)
(3, 74, 2)
(3, 74, 3)
(3, 74, 4)
(3, 74, 5)
(3, 74, 6)
(3, 74, 7)
(3, 75, 0)
(3, 75, 1)
(3, 75, 2)
(3, 75, 3)
(3, 75, 4)
(3, 75, 5)
(3, 75, 6)
(3, 75, 7)
(3, 76, 0)
(3, 76, 1)
(3, 76, 2)
(3, 76, 3)
(3, 76, 4)
(3, 76, 5)
(3, 76, 6)
(3, 76, 7)
(3, 77, 0)
(3, 77, 1)
(3, 77, 2)
(3, 77, 3)
(3, 77, 4)
(3, 77, 5)
(3, 77, 6)
(3, 77, 7)
(3, 78, 0)
(3, 78, 1)
(3, 78, 2)
(3, 78, 3)
(3, 78, 4)
(3, 78, 5)
(3, 78, 6)
(3, 78, 7)
(3, 79, 0)
(3, 79, 1)
(3, 79, 2)
(3, 79, 3)
(3, 79, 4)
(3, 79, 5)
(3, 79, 6)
(3, 79, 7)
(3, 80, 0)
(3, 80, 1)
(3, 80, 2)
(3, 80, 3)
(3, 80, 4)
(3, 80, 5)
(3, 80, 6)
(3, 80, 7)
(3, 81, 0)
(3, 81, 1)
(3, 81, 2)
(3, 81, 3)
(3, 81, 4)
(3, 81, 5)
(3, 81, 6)
(3, 81, 7)
(3, 82, 0)
(3, 82, 1)
(3, 82, 2)
(3, 82, 3)
(3, 82, 4)
(3, 82, 5)
(3, 82, 6)
(3, 82, 7)
(3, 83, 0)
(3, 83, 1)
(3, 83, 2)
(3, 83, 3)
(3, 83, 4)
(3, 83, 5)
(3, 83, 6)
(3, 83, 7)
(3, 84, 0)
(3, 84, 1)
(3, 84, 2)
(3, 84, 3)
(3, 84, 4)
(3, 84, 5)
(3, 84, 6)
(3, 84, 7)
(3, 85, 0)
(3, 85, 1)
(3, 85, 2)
(3, 85, 3)
(3, 85, 4)
(3, 85, 5)
(3, 85, 6)
(3, 85, 7)
(3, 86, 0)
(3, 86, 1)
(3, 86, 2)
(3, 86, 3)
(3, 86, 4)
(3, 86, 5)
(3, 86, 6)
(3, 86, 7)
(3, 87, 0)
(3, 87, 1)
(3, 87, 2)
(3, 87, 3)
(3, 87, 4)
(3, 87, 5)
(3, 87, 6)
(3, 87, 7)
(3, 88, 0)
(3, 88, 1)
(3, 88, 2)
(3, 88, 3)
(3, 88, 4)
(3, 88, 5)
(3, 88, 6)
(3, 88, 7)
(3, 89, 0)
(3, 89, 1)
(3, 89, 2)
(3, 89, 3)
(3, 89, 4)
(3, 89, 5)
(3, 89, 6)
(3, 89, 7)
(3, 90, 0)
(3, 90, 1)
(3, 90, 2)
(3, 90, 3)
(3, 90, 4)
(3, 90, 5)
(3, 90, 6)
(3, 90, 7)
(3, 91, 0)
(3, 91, 1)
(3, 91, 2)
(3, 91, 3)
(3, 91, 4)
(3, 91, 5)
(3, 91, 6)
(3, 91, 7)
(3, 92, 0)
(3, 92, 1)
(3, 92, 2)
(3, 92, 3)
(3, 92, 4)
(3, 92, 5)
(3, 92, 6)
(3, 92, 7)
(3, 93, 0)
(3, 93, 1)
(3, 93, 2)
(3, 93, 3)
(3, 93, 4)
(3, 93, 5)
(3, 93, 6)
(3, 93, 7)
(3, 94, 0)
(3, 94, 1)
(3, 94, 2)
(3, 94, 3)
(3, 94, 4)
(3, 94, 5)
(3, 94, 6)
(3, 94, 7)
(3, 95, 0)
(3, 95, 1)
(3, 95, 2)
(3, 95, 3)
(3, 95, 4)
(3, 95, 5)
(3, 95, 6)
(3, 95, 7)
(3, 96, 0)
(3, 96, 1)
(3, 96, 2)
(3, 96, 3)
(3, 96, 4)
(3, 96, 5)
(3, 96, 6)
(3, 96, 7)
(3, 97, 0)
(3, 97, 1)
(3, 97, 2)
(3, 97, 3)
(3, 97, 4)
(3, 97, 5)
(3, 97, 6)
(3, 97, 7)
(3, 98, 0)
(3, 98, 1)
(3, 98, 2)
(3, 98, 3)
(3, 98, 4)
(3, 98, 5)
(3, 98, 6)
(3, 98, 7)
(3, 99, 0)
(3, 99, 1)
(3, 99, 2)
(3, 99, 3)
(3, 99, 4)
(3, 99, 5)
(3, 99, 6)
(3, 99, 7)
(3, 100, 0)
(3, 100, 1)
(3, 100, 2)
(3, 100, 3)
(3, 100, 4)
(3, 100, 5)
(3, 100, 6)
(3, 100, 7)
(3, 101, 0)
(3, 101, 1)
(3, 101, 2)
(3, 101, 3)
(3, 101, 4)
(3, 101, 5)
(3, 101, 6)
(3, 101, 7)
(3, 102, 0)
(3, 102, 1)
(3, 102, 2)
(3, 102, 3)
(3, 102, 4)
(3, 102, 5)
(3, 102, 6)
(3, 102, 7)
(3, 103, 0)
(3, 103, 1)
(3, 103, 2)
(3, 103, 3)
(3, 103, 4)
(3, 103, 5)
(3, 103, 6)
(3, 103, 7)
(3, 104, 0)
(3, 104, 1)
(3, 104, 2)
(3, 104, 3)
(3, 104, 4)
(3, 104, 5)
(3, 104, 6)
(3, 104, 7)
(3, 105, 0)
(3, 105, 1)
(3, 105, 2)
(3, 105, 3)
(3, 105, 4)
(3, 105, 5)
(3, 105, 6)
(3, 105, 7)
(3, 106, 0)
(3, 106, 1)
(3, 106, 2)
(3, 106, 3)
(3, 106, 4)
(3, 106, 5)
(3, 106, 6)
(3, 106, 7)
(3, 107, 0)
(3, 107, 1)
(3, 107, 2)
(3, 107, 3)
(3, 107, 4)
(3, 107, 5)
(3, 107, 6)
(3, 107, 7)
(3, 108, 0)
(3, 108, 1)
(3, 108, 2)
(3, 108, 3)
(3, 108, 4)
(3, 108, 5)
(3, 108, 6)
(3, 108, 7)
(3, 109, 0)
(3, 109, 1)
(3, 109, 2)
(3, 109, 3)
(3, 109, 4)
(3, 109, 5)
(3, 109, 6)
(3, 109, 7)
(3, 110, 0)
(3, 110, 1)
(3, 110, 2)
(3, 110, 3)
(3, 110, 4)
(3, 110, 5)
(3, 110, 6)
(3, 110, 7)
(3, 111, 0)
(3, 111, 1)
(3, 111, 2)
(3, 111, 3)
(3, 111, 4)
(3, 111, 5)
(3, 111, 6)
(3, 111, 7)
(3, 112, 0)
(3, 112, 1)
(3, 112, 2)
(3, 112, 3)
(3, 112, 4)
(3, 112, 5)
(3, 112, 6)
(3, 112, 7)
(3, 113, 0)
(3, 113, 1)
(3, 113, 2)
(3, 113, 3)
(3, 113, 4)
(3, 113, 5)
(3, 113, 6)
(3, 113, 7)
(3, 114, 0)
(3, 114, 1)
(3, 114, 2)
(3, 114, 3)
(3, 114, 4)
(3, 114, 5)
(3, 114, 6)
(3, 114, 7)
(3, 115, 0)
(3, 115, 1)
(3, 115, 2)
(3, 115, 3)
(3, 115, 4)
(3, 115, 5)
(3, 115, 6)
(3, 115, 7)
(3, 116, 0)
(3, 116, 1)
(3, 116, 2)
(3, 116, 3)
(3, 116, 4)
(3, 116, 5)
(3, 116, 6)
(3, 116, 7)
(3, 117, 0)
(3, 117, 1)
(3, 117, 2)
(3, 117, 3)
(3, 117, 4)
(3, 117, 5)
(3, 117, 6)
(3, 117, 7)
(3, 118, 0)
(3, 118, 1)
(3, 118, 2)
(3, 118, 3)
(3, 118, 4)
(3, 118, 5)
(3, 118, 6)
(3, 118, 7)
(3, 119, 0)
(3, 119, 1)
(3, 119, 2)
(3, 119, 3)
(3, 119, 4)
(3, 119, 5)
(3, 119, 6)
(3, 119, 7)
(3, 120, 0)
(3, 120, 1)
(3, 120, 2)
(3, 120, 3)
(3, 120, 4)
(3, 120, 5)
(3, 120, 6)
(3, 120, 7)
(3, 121, 0)
(3, 121, 1)
(3, 121, 2)
(3, 121, 3)
(3, 121, 4)
(3, 121, 5)
(3, 121, 6)
(3, 121, 7)
(3, 122, 0)
(3, 122, 1)
(3, 122, 2)
(3, 122, 3)
(3, 122, 4)
(3, 122, 5)
(3, 122, 6)
(3, 122, 7)
(3, 123, 0)
(3, 123, 1)
(3, 123, 2)
(3, 123, 3)
(3, 123, 4)
(3, 123, 5)
(3, 123, 6)
(3, 123, 7)
(3, 124, 0)
(3, 124, 1)
(3, 124, 2)
(3, 124, 3)
(3, 124, 4)
(3, 124, 5)
(3, 124, 6)
(3, 124, 7)
(3, 125, 0)
(3, 125, 1)
(3, 125, 2)
(3, 125, 3)
(3, 125, 4)
(3, 125, 5)
(3, 125, 6)
(3, 125, 7)
(3, 126, 0)
(3, 126, 1)
(3, 126, 2)
(3, 126, 3)
(3, 126, 4)
(3, 126, 5)
(3, 126, 6)
(3, 126, 7)
(3, 127, 0)
(3, 127, 1)
(3, 127, 2)
(3, 127, 3)
(3, 127, 4)
(3, 127, 5)
(3, 127, 6)
(3, 127, 7)
(3, 128, 0)
(3, 128, 1)
(3, 128, 2)
(3, 128, 3)
(3, 128, 4)
(3, 128, 5)
(3, 128, 6)
(3, 128, 7)
(3, 129, 0)
(3, 129, 1)
(3, 129, 2)
(3, 129, 3)
(3, 129, 4)
(3, 129, 5)
(3, 129, 6)
(3, 129, 7)
(3, 130, 0)
(3, 130, 1)
(3, 130, 2)
(3, 130, 3)
(3, 130, 4)
(3, 130, 5)
(3, 130, 6)
(3, 130, 7)
(3, 131, 0)
(3, 131, 1)
(3, 131, 2)
(3, 131, 3)
(3, 131, 4)
(3, 131, 5)
(3, 131, 6)
(3, 131, 7)
(3, 132, 0)
(3, 132, 1)
(3, 132, 2)
(3, 132, 3)
(3, 132, 4)
(3, 132, 5)
(3, 132, 6)
(3, 132, 7)
(3, 133, 0)
(3, 133, 1)
(3, 133, 2)
(3, 133, 3)
(3, 133, 4)
(3, 133, 5)
(3, 133, 6)
(3, 133, 7)
(3, 134, 0)
(3, 134, 1)
(3, 134, 2)
(3, 134, 3)
(3, 134, 4)
(3, 134, 5)
(3, 134, 6)
(3, 134, 7)
(3, 135, 0)
(3, 135, 1)
(3, 135, 2)
(3, 135, 3)
(3, 135, 4)
(3, 135, 5)
(3, 135, 6)
(3, 135, 7)
(3, 136, 0)
(3, 136, 1)
(3, 136, 2)
(3, 136, 3)
(3, 136, 4)
(3, 136, 5)
(3, 136, 6)
(3, 136, 7)
(3, 137, 0)
(3, 137, 1)
(3, 137, 2)
(3, 137, 3)
(3, 137, 4)
(3, 137, 5)
(3, 137, 6)
(3, 137, 7)
(3, 138, 0)
(3, 138, 1)
(3, 138, 2)
(3, 138, 3)
(3, 138, 4)
(3, 138, 5)
(3, 138, 6)
(3, 138, 7)
(3, 139, 0)
(3, 139, 1)
(3, 139, 2)
(3, 139, 3)
(3, 139, 4)
(3, 139, 5)
(3, 139, 6)
(3, 139, 7)
(3, 140, 0)
(3, 140, 1)
(3, 140, 2)
(3, 140, 3)
(3, 140, 4)
(3, 140, 5)
(3, 140, 6)
(3, 140, 7)
(3, 141, 0)
(3, 141, 1)
(3, 141, 2)
(3, 141, 3)
(3, 141, 4)
(3, 141, 5)
(3, 141, 6)
(3, 141, 7)
(3, 142, 0)
(3, 142, 1)
(3, 142, 2)
(3, 142, 3)
(3, 142, 4)
(3, 142, 5)
(3, 142, 6)
(3, 142, 7)
(3, 143, 0)
(3, 143, 1)
(3, 143, 2)
(3, 143, 3)
(3, 143, 4)
(3, 143, 5)
(3, 143, 6)
(3, 143, 7)
(3, 144, 0)
(3, 144, 1)
(3, 144, 2)
(3, 144, 3)
(3, 144, 4)
(3, 144, 5)
(3, 144, 6)
(3, 144, 7)
(3, 145, 0)
(3, 145, 1)
(3, 145, 2)
(3, 145, 3)
(3, 145, 4)
(3, 145, 5)
(3, 145, 6)
(3, 145, 7)
(3, 146, 0)
(3, 146, 1)
(3, 146, 2)
(3, 146, 3)
(3, 146, 4)
(3, 146, 5)
(3, 146, 6)
(3, 146, 7)
(3, 147, 0)
(3, 147, 1)
(3, 147, 2)
(3, 147, 3)
(3, 147, 4)
(3, 147, 5)
(3, 147, 6)
(3, 147, 7)
(3, 148, 0)
(3, 148, 1)
(3, 148, 2)
(3, 148, 3)
(3, 148, 4)
(3, 148, 5)
(3, 148, 6)
(3, 148, 7)
(3, 149, 0)
(3, 149, 1)
(3, 149, 2)
(3, 149, 3)
(3, 149, 4)
(3, 149, 5)
(3, 149, 6)
(3, 149, 7)
(3, 150, 0)
(3, 150, 1)
(3, 150, 2)
(3, 150, 3)
(3, 150, 4)
(3, 150, 5)
(3, 150, 6)
(3, 150, 7)
(3, 151, 0)
(3, 151, 1)
(3, 151, 2)
(3, 151, 3)
(3, 151, 4)
(3, 151, 5)
(3, 151, 6)
(3, 151, 7)
(3, 152, 0)
(3, 152, 1)
(3, 152, 2)
(3, 152, 3)
(3, 152, 4)
(3, 152, 5)
(3, 152, 6)
(3, 152, 7)
(3, 153, 0)
(3, 153, 1)
(3, 153, 2)
(3, 153, 3)
(3, 153, 4)
(3, 153, 5)
(3, 153, 6)
(3, 153, 7)
(3, 154, 0)
(3, 154, 1)
(3, 154, 2)
(3, 154, 3)
(3, 154, 4)
(3, 154, 5)
(3, 154, 6)
(3, 154, 7)
(3, 155, 0)
(3, 155, 1)
(3, 155, 2)
(3, 155, 3)
(3, 155, 4)
(3, 155, 5)
(3, 155, 6)
(3, 155, 7)
(3, 156, 0)
(3, 156, 1)
(3, 156, 2)
(3, 156, 3)
(3, 156, 4)
(3, 156, 5)
(3, 156, 6)
(3, 156, 7)
(3, 157, 0)
(3, 157, 1)
(3, 157, 2)
(3, 157, 3)
(3, 157, 4)
(3, 157, 5)
(3, 157, 6)
(3, 157, 7)
(3, 158, 0)
(3, 158, 1)
(3, 158, 2)
(3, 158, 3)
(3, 158, 4)
(3, 158, 5)
(3, 158, 6)
(3, 158, 7)
(3, 159, 0)
(3, 159, 1)
(3, 159, 2)
(3, 159, 3)
(3, 159, 4)
(3, 159, 5)
(3, 159, 6)
(3, 159, 7)
(3, 160, 0)
(3, 160, 1)
(3, 160, 2)
(3, 160, 3)
(3, 160, 4)
(3, 160, 5)
(3, 160, 6)
(3, 160, 7)
(3, 161, 0)
(3, 161, 1)
(3, 161, 2)
(3, 161, 3)
(3, 161, 4)
(3, 161, 5)
(3, 161, 6)
(3, 161, 7)
(3, 162, 0)
(3, 162, 1)
(3, 162, 2)
(3, 162, 3)
(3, 162, 4)
(3, 162, 5)
(3, 162, 6)
(3, 162, 7)
(3, 163, 0)
(3, 163, 1)
(3, 163, 2)
(3, 163, 3)
(3, 163, 4)
(3, 163, 5)
(3, 163, 6)
(3, 163, 7)
(3, 164, 0)
(3, 164, 1)
(3, 164, 2)
(3, 164, 3)
(3, 164, 4)
(3, 164, 5)
(3, 164, 6)
(3, 164, 7)
(3, 165, 0)
(3, 165, 1)
(3, 165, 2)
(3, 165, 3)
(3, 165, 4)
(3, 165, 5)
(3, 165, 6)
(3, 165, 7)
(3, 166, 0)
(3, 166, 1)
(3, 166, 2)
(3, 166, 3)
(3, 166, 4)
(3, 166, 5)
(3, 166, 6)
(3, 166, 7)
(3, 167, 0)
(3, 167, 1)
(3, 167, 2)
(3, 167, 3)
(3, 167, 4)
(3, 167, 5)
(3, 167, 6)
(3, 167, 7)
(3, 168, 0)
(3, 168, 1)
(3, 168, 2)
(3, 168, 3)
(3, 168, 4)
(3, 168, 5)
(3, 168, 6)
(3, 168, 7)
(3, 169, 0)
(3, 169, 1)
(3, 169, 2)
(3, 169, 3)
(3, 169, 4)
(3, 169, 5)
(3, 169, 6)
(3, 169, 7)
(3, 170, 0)
(3, 170, 1)
(3, 170, 2)
(3, 170, 3)
(3, 170, 4)
(3, 170, 5)
(3, 170, 6)
(3, 170, 7)
(3, 171, 0)
(3, 171, 1)
(3, 171, 2)
(3, 171, 3)
(3, 171, 4)
(3, 171, 5)
(3, 171, 6)
(3, 171, 7)
(3, 172, 0)
(3, 172, 1)
(3, 172, 2)
(3, 172, 3)
(3, 172, 4)
(3, 172, 5)
(3, 172, 6)
(3, 172, 7)
(3, 173, 0)
(3, 173, 1)
(3, 173, 2)
(3, 173, 3)
(3, 173, 4)
(3, 173, 5)
(3, 173, 6)
(3, 173, 7)
(3, 174, 0)
(3, 174, 1)
(3, 174, 2)
(3, 174, 3)
(3, 174, 4)
(3, 174, 5)
(3, 174, 6)
(3, 174, 7)
(3, 175, 0)
(3, 175, 1)
(3, 175, 2)
(3, 175, 3)
(3, 175, 4)
(3, 175, 5)
(3, 175, 6)
(3, 175, 7)
(3, 176, 0)
(3, 176, 1)
(3, 176, 2)
(3, 176, 3)
(3, 176, 4)
(3, 176, 5)
(3, 176, 6)
(3, 176, 7)
(3, 177, 0)
(3, 177, 1)
(3, 177, 2)
(3, 177, 3)
(3, 177, 4)
(3, 177, 5)
(3, 177, 6)
(3, 177, 7)
(3, 178, 0)
(3, 178, 1)
(3, 178, 2)
(3, 178, 3)
(3, 178, 4)
(3, 178, 5)
(3, 178, 6)
(3, 178, 7)
(3, 179, 0)
(3, 179, 1)
(3, 179, 2)
(3, 179, 3)
(3, 179, 4)
(3, 179, 5)
(3, 179, 6)
(3, 179, 7)
(3, 180, 0)
(3, 180, 1)
(3, 180, 2)
(3, 180, 3)
(3, 180, 4)
(3, 180, 5)
(3, 180, 6)
(3, 180, 7)
(3, 181, 0)
(3, 181, 1)
(3, 181, 2)
(3, 181, 3)
(3, 181, 4)
(3, 181, 5)
(3, 181, 6)
(3, 181, 7)
(3, 182, 0)
(3, 182, 1)
(3, 182, 2)
(3, 182, 3)
(3, 182, 4)
(3, 182, 5)
(3, 182, 6)
(3, 182, 7)
(3, 183, 0)
(3, 183, 1)
(3, 183, 2)
(3, 183, 3)
(3, 183, 4)
(3, 183, 5)
(3, 183, 6)
(3, 183, 7)
(3, 184, 0)
(3, 184, 1)
(3, 184, 2)
(3, 184, 3)
(3, 184, 4)
(3, 184, 5)
(3, 184, 6)
(3, 184, 7)
(3, 185, 0)
(3, 185, 1)
(3, 185, 2)
(3, 185, 3)
(3, 185, 4)
(3, 185, 5)
(3, 185, 6)
(3, 185, 7)
(3, 186, 0)
(3, 186, 1)
(3, 186, 2)
(3, 186, 3)
(3, 186, 4)
(3, 186, 5)
(3, 186, 6)
(3, 186, 7)
(3, 187, 0)
(3, 187, 1)
(3, 187, 2)
(3, 187, 3)
(3, 187, 4)
(3, 187, 5)
(3, 187, 6)
(3, 187, 7)
(3, 188, 0)
(3, 188, 1)
(3, 188, 2)
(3, 188, 3)
(3, 188, 4)
(3, 188, 5)
(3, 188, 6)
(3, 188, 7)
(3, 189, 0)
(3, 189, 1)
(3, 189, 2)
(3, 189, 3)
(3, 189, 4)
(3, 189, 5)
(3, 189, 6)
(3, 189, 7)
(3, 190, 0)
(3, 190, 1)
(3, 190, 2)
(3, 190, 3)
(3, 190, 4)
(3, 190, 5)
(3, 190, 6)
(3, 190, 7)
(3, 191, 0)
(3, 191, 1)
(3, 191, 2)
(3, 191, 3)
(3, 191, 4)
(3, 191, 5)
(3, 191, 6)
(3, 191, 7)
(3, 192, 0)
(3, 192, 1)
(3, 192, 2)
(3, 192, 3)
(3, 192, 4)
(3, 192, 5)
(3, 192, 6)
(3, 192, 7)
(3, 193, 0)
(3, 193, 1)
(3, 193, 2)
(3, 193, 3)
(3, 193, 4)
(3, 193, 5)
(3, 193, 6)
(3, 193, 7)
(3, 194, 0)
(3, 194, 1)
(3, 194, 2)
(3, 194, 3)
(3, 194, 4)
(3, 194, 5)
(3, 194, 6)
(3, 194, 7)
(3, 195, 0)
(3, 195, 1)
(3, 195, 2)
(3, 195, 3)
(3, 195, 4)
(3, 195, 5)
(3, 195, 6)
(3, 195, 7)
(3, 196, 0)
(3, 196, 1)
(3, 196, 2)
(3, 196, 3)
(3, 196, 4)
(3, 196, 5)
(3, 196, 6)
(3, 196, 7)
(3, 197, 0)
(3, 197, 1)
(3, 197, 2)
(3, 197, 3)
(3, 197, 4)
(3, 197, 5)
(3, 197, 6)
(3, 197, 7)
(3, 198, 0)
(3, 198, 1)
(3, 198, 2)
(3, 198, 3)
(3, 198, 4)
(3, 198, 5)
(3, 198, 6)
(3, 198, 7)
(3, 199, 0)
(3, 199, 1)
(3, 199, 2)
(3, 199, 3)
(3, 199, 4)
(3, 199, 5)
(3, 199, 6)
(3, 199, 7)
(3, 200, 0)
(3, 200, 1)
(3, 200, 2)
(3, 200, 3)
(3, 200, 4)
(3, 200, 5)
(3, 200, 6)
(3, 200, 7)
(3, 201, 0)
(3, 201, 1)
(3, 201, 2)
(3, 201, 3)
(3, 201, 4)
(3, 201, 5)
(3, 201, 6)
(3, 201, 7)
(3, 202, 0)
(3, 202, 1)
(3, 202, 2)
(3, 202, 3)
(3, 202, 4)
(3, 202, 5)
(3, 202, 6)
(3, 202, 7)
(3, 203, 0)
(3, 203, 1)
(3, 203, 2)
(3, 203, 3)
(3, 203, 4)
(3, 203, 5)
(3, 203, 6)
(3, 203, 7)
(3, 204, 0)
(3, 204, 1)
(3, 204, 2)
(3, 204, 3)
(3, 204, 4)
(3, 204, 5)
(3, 204, 6)
(3, 204, 7)
(3, 205, 0)
(3, 205, 1)
(3, 205, 2)
(3, 205, 3)
(3, 205, 4)
(3, 205, 5)
(3, 205, 6)
(3, 205, 7)
(3, 206, 0)
(3, 206, 1)
(3, 206, 2)
(3, 206, 3)
(3, 206, 4)
(3, 206, 5)
(3, 206, 6)
(3, 206, 7)
(3, 207, 0)
(3, 207, 1)
(3, 207, 2)
(3, 207, 3)
(3, 207, 4)
(3, 207, 5)
(3, 207, 6)
(3, 207, 7)
(3, 208, 0)
(3, 208, 1)
(3, 208, 2)
(3, 208, 3)
(3, 208, 4)
(3, 208, 5)
(3, 208, 6)
(3, 208, 7)
(3, 209, 0)
(3, 209, 1)
(3, 209, 2)
(3, 209, 3)
(3, 209, 4)
(3, 209, 5)
(3, 209, 6)
(3, 209, 7)
(3, 210, 0)
(3, 210, 1)
(3, 210, 2)
(3, 210, 3)
(3, 210, 4)
(3, 210, 5)
(3, 210, 6)
(3, 210, 7)
(3, 211, 0)
(3, 211, 1)
(3, 211, 2)
(3, 211, 3)
(3, 211, 4)
(3, 211, 5)
(3, 211, 6)
(3, 211, 7)
(3, 212, 0)
(3, 212, 1)
(3, 212, 2)
(3, 212, 3)
(3, 212, 4)
(3, 212, 5)
(3, 212, 6)
(3, 212, 7)
(3, 213, 0)
(3, 213, 1)
(3, 213, 2)
(3, 213, 3)
(3, 213, 4)
(3, 213, 5)
(3, 213, 6)
(3, 213, 7)
(3, 214, 0)
(3, 214, 1)
(3, 214, 2)
(3, 214, 3)
(3, 214, 4)
(3, 214, 5)
(3, 214, 6)
(3, 214, 7)
(3, 215, 0)
(3, 215, 1)
(3, 215, 2)
(3, 215, 3)
(3, 215, 4)
(3, 215, 5)
(3, 215, 6)
(3, 215, 7)
(3, 216, 0)
(3, 216, 1)
(3, 216, 2)
(3, 216, 3)
(3, 216, 4)
(3, 216, 5)
(3, 216, 6)
(3, 216, 7)
(3, 217, 0)
(3, 217, 1)
(3, 217, 2)
(3, 217, 3)
(3, 217, 4)
(3, 217, 5)
(3, 217, 6)
(3, 217, 7)
(3, 218, 0)
(3, 218, 1)
(3, 218, 2)
(3, 218, 3)
(3, 218, 4)
(3, 218, 5)
(3, 218, 6)
(3, 218, 7)
(3, 219, 0)
(3, 219, 1)
(3, 219, 2)
(3, 219, 3)
(3, 219, 4)
(3, 219, 5)
(3, 219, 6)
(3, 219, 7)
(3, 220, 0)
(3, 220, 1)
(3, 220, 2)
(3, 220, 3)
(3, 220, 4)
(3, 220, 5)
(3, 220, 6)
(3, 220, 7)
(3, 221, 0)
(3, 221, 1)
(3, 221, 2)
(3, 221, 3)
(3, 221, 4)
(3, 221, 5)
(3, 221, 6)
(3, 221, 7)
(3, 222, 0)
(3, 222, 1)
(3, 222, 2)
(3, 222, 3)
(3, 222, 4)
(3, 222, 5)
(3, 222, 6)
(3, 222, 7)
(3, 223, 0)
(3, 223, 1)
(3, 223, 2)
(3, 223, 3)
(3, 223, 4)
(3, 223, 5)
(3, 223, 6)
(3, 223, 7)
(3, 224, 0)
(3, 224, 1)
(3, 224, 2)
(3, 224, 3)
(3, 224, 4)
(3, 224, 5)
(3, 224, 6)
(3, 224, 7)
(3, 225, 0)
(3, 225, 1)
(3, 225, 2)
(3, 225, 3)
(3, 225, 4)
(3, 225, 5)
(3, 225, 6)
(3, 225, 7)
(3, 226, 0)
(3, 226, 1)
(3, 226, 2)
(3, 226, 3)
(3, 226, 4)
(3, 226, 5)
(3, 226, 6)
(3, 226, 7)
(3, 227, 0)
(3, 227, 1)
(3, 227, 2)
(3, 227, 3)
(3, 227, 4)
(3, 227, 5)
(3, 227, 6)
(3, 227, 7)
(3, 228, 0)
(3, 228, 1)
(3, 228, 2)
(3, 228, 3)
(3, 228, 4)
(3, 228, 5)
(3, 228, 6)
(3, 228, 7)
(3, 229, 0)
(3, 229, 1)
(3, 229, 2)
(3, 229, 3)
(3, 229, 4)
(3, 229, 5)
(3, 229, 6)
(3, 229, 7)
(3, 230, 0)
(3, 230, 1)
(3, 230, 2)
(3, 230, 3)
(3, 230, 4)
(3, 230, 5)
(3, 230, 6)
(3, 230, 7)
(3, 231, 0)
(3, 231, 1)
(3, 231, 2)
(3, 231, 3)
(3, 231, 4)
(3, 231, 5)
(3, 231, 6)
(3, 231, 7)
(3, 232, 0)
(3, 232, 1)
(3, 232, 2)
(3, 232, 3)
(3, 232, 4)
(3, 232, 5)
(3, 232, 6)
(3, 232, 7)
(3, 233, 0)
(3, 233, 1)
(3, 233, 2)
(3, 233, 3)
(3, 233, 4)
(3, 233, 5)
(3, 233, 6)
(3, 233, 7)
(3, 234, 0)
(3, 234, 1)
(3, 234, 2)
(3, 234, 3)
(3, 234, 4)
(3, 234, 5)
(3, 234, 6)
(3, 234, 7)
(3, 235, 0)
(3, 235, 1)
(3, 235, 2)
(3, 235, 3)
(3, 235, 4)
(3, 235, 5)
(3, 235, 6)
(3, 235, 7)
(3, 236, 0)
(3, 236, 1)
(3, 236, 2)
(3, 236, 3)
(3, 236, 4)
(3, 236, 5)
(3, 236, 6)
(3, 236, 7)
(3, 237, 0)
(3, 237, 1)
(3, 237, 2)
(3, 237, 3)
(3, 237, 4)
(3, 237, 5)
(3, 237, 6)
(3, 237, 7)
(3, 238, 0)
(3, 238, 1)
(3, 238, 2)
(3, 238, 3)
(3, 238, 4)
(3, 238, 5)
(3, 238, 6)
(3, 238, 7)
(3, 239, 0)
(3, 239, 1)
(3, 239, 2)
(3, 239, 3)
(3, 239, 4)
(3, 239, 5)
(3, 239, 6)
(3, 239, 7)
(3, 240, 0)
(3, 240, 1)
(3, 240, 2)
(3, 240, 3)
(3, 240, 4)
(3, 240, 5)
(3, 240, 6)
(3, 240, 7)
(3, 241, 0)
(3, 241, 1)
(3, 241, 2)
(3, 241, 3)
(3, 241, 4)
(3, 241, 5)
(3, 241, 6)
(3, 241, 7)
(3, 242, 0)
(3, 242, 1)
(3, 242, 2)
(3, 242, 3)
(3, 242, 4)
(3, 242, 5)
(3, 242, 6)
(3, 242, 7)
(3, 243, 0)
(3, 243, 1)
(3, 243, 2)
(3, 243, 3)
(3, 243, 4)
(3, 243, 5)
(3, 243, 6)
(3, 243, 7)
(3, 244, 0)
(3, 244, 1)
(3, 244, 2)
(3, 244, 3)
(3, 244, 4)
(3, 244, 5)
(3, 244, 6)
(3, 244, 7)
(3, 245, 0)
(3, 245, 1)
(3, 245, 2)
(3, 245, 3)
(3, 245, 4)
(3, 245, 5)
(3, 245, 6)
(3, 245, 7)
(3, 246, 0)
(3, 246, 1)
(3, 246, 2)
(3, 246, 3)
(3, 246, 4)
(3, 246, 5)
(3, 246, 6)
(3, 246, 7)
(3, 247, 0)
(3, 247, 1)
(3, 247, 2)
(3, 247, 3)
(3, 247, 4)
(3, 247, 5)
(3, 247, 6)
(3, 247, 7)
(3, 248, 0)
(3, 248, 1)
(3, 248, 2)
(3, 248, 3)
(3, 248, 4)
(3, 248, 5)
(3, 248, 6)
(3, 248, 7)
(3, 249, 0)
(3, 249, 1)
(3, 249, 2)
(3, 249, 3)
(3, 249, 4)
(3, 249, 5)
(3, 249, 6)
(3, 249, 7)
(3, 250, 0)
(3, 250, 1)
(3, 250, 2)
(3, 250, 3)
(3, 250, 4)
(3, 250, 5)
(3, 250, 6)
(3, 250, 7)
(3, 251, 0)
(3, 251, 1)
(3, 251, 2)
(3, 251, 3)
(3, 251, 4)
(3, 251, 5)
(3, 251, 6)
(3, 251, 7)
(3, 252, 0)
(3, 252, 1)
(3, 252, 2)
(3, 252, 3)
(3, 252, 4)
(3, 252, 5)
(3, 252, 6)
(3, 252, 7)
(3, 253, 0)
(3, 253, 1)
(3, 253, 2)
(3, 253, 3)
(3, 253, 4)
(3, 253, 5)
(3, 253, 6)
(3, 253, 7)
(3, 254, 0)
(3, 254, 1)
(3, 254, 2)
(3, 254, 3)
(3, 254, 4)
(3, 254, 5)
(3, 254, 6)
(3, 254, 7)
(3, 255, 0)
(3, 255, 1)
(3, 255, 2)
(3, 255, 3)
(3, 255, 4)
(3, 255, 5)
(3, 255, 6)
(3, 255, 7)
(4, 0, 0)
(4, 0, 1)
(4, 0, 2)
(4, 0, 3)
(4, 0, 4)
(4, 0, 5)
(4, 0, 6)
(4, 0, 7)
(4, 1, 0)
(4, 1, 1)
(4, 1, 2)
(4, 1, 3)
(4, 1, 4)
(4, 1, 5)
(4, 1, 6)
(4, 1, 7)
(4, 2, 0)
(4, 2, 1)
(4, 2, 2)
(4, 2, 3)
(4, 2, 4)
(4, 2, 5)
(4, 2, 6)
(4, 2, 7)
(4, 3, 0)
(4, 3, 1)
(4, 3, 2)
(4, 3, 3)
(4, 3, 4)
(4, 3, 5)
(4, 3, 6)
(4, 3, 7)
(4, 4, 0)
(4, 4, 1)
(4, 4, 2)
(4, 4, 3)
(4, 4, 4)
(4, 4, 5)
(4, 4, 6)
(4, 4, 7)
(4, 5, 0)
(4, 5, 1)
(4, 5, 2)
(4, 5, 3)
(4, 5, 4)
(4, 5, 5)
(4, 5, 6)
(4, 5, 7)
(4, 6, 0)
(4, 6, 1)
(4, 6, 2)
(4, 6, 3)
(4, 6, 4)
(4, 6, 5)
(4, 6, 6)
(4, 6, 7)
(4, 7, 0)
(4, 7, 1)
(4, 7, 2)
(4, 7, 3)
(4, 7, 4)
(4, 7, 5)
(4, 7, 6)
(4, 7, 7)
(4, 8, 0)
(4, 8, 1)
(4, 8, 2)
(4, 8, 3)
(4, 8, 4)
(4, 8, 5)
(4, 8, 6)
(4, 8, 7)
(4, 9, 0)
(4, 9, 1)
(4, 9, 2)
(4, 9, 3)
(4, 9, 4)
(4, 9, 5)
(4, 9, 6)
(4, 9, 7)
(4, 10, 0)
(4, 10, 1)
(4, 10, 2)
(4, 10, 3)
(4, 10, 4)
(4, 10, 5)
(4, 10, 6)
(4, 10, 7)
(4, 11, 0)
(4, 11, 1)
(4, 11, 2)
(4, 11, 3)
(4, 11, 4)
(4, 11, 5)
(4, 11, 6)
(4, 11, 7)
(4, 12, 0)
(4, 12, 1)
(4, 12, 2)
(4, 12, 3)
(4, 12, 4)
(4, 12, 5)
(4, 12, 6)
(4, 12, 7)
(4, 13, 0)
(4, 13, 1)
(4, 13, 2)
(4, 13, 3)
(4, 13, 4)
(4, 13, 5)
(4, 13, 6)
(4, 13, 7)
(4, 14, 0)
(4, 14, 1)
(4, 14, 2)
(4, 14, 3)
(4, 14, 4)
(4, 14, 5)
(4, 14, 6)
(4, 14, 7)
(4, 15, 0)
(4, 15, 1)
(4, 15, 2)
(4, 15, 3)
(4, 15, 4)
(4, 15, 5)
(4, 15, 6)
(4, 15, 7)
(4, 16, 0)
(4, 16, 1)
(4, 16, 2)
(4, 16, 3)
(4, 16, 4)
(4, 16, 5)
(4, 16, 6)
(4, 16, 7)
(4, 17, 0)
(4, 17, 1)
(4, 17, 2)
(4, 17, 3)
(4, 17, 4)
(4, 17, 5)
(4, 17, 6)
(4, 17, 7)
(4, 18, 0)
(4, 18, 1)
(4, 18, 2)
(4, 18, 3)
(4, 18, 4)
(4, 18, 5)
(4, 18, 6)
(4, 18, 7)
(4, 19, 0)
(4, 19, 1)
(4, 19, 2)
(4, 19, 3)
(4, 19, 4)
(4, 19, 5)
(4, 19, 6)
(4, 19, 7)
(4, 20, 0)
(4, 20, 1)
(4, 20, 2)
(4, 20, 3)
(4, 20, 4)
(4, 20, 5)
(4, 20, 6)
(4, 20, 7)
(4, 21, 0)
(4, 21, 1)
(4, 21, 2)
(4, 21, 3)
(4, 21, 4)
(4, 21, 5)
(4, 21, 6)
(4, 21, 7)
(4, 22, 0)
(4, 22, 1)
(4, 22, 2)
(4, 22, 3)
(4, 22, 4)
(4, 22, 5)
(4, 22, 6)
(4, 22, 7)
(4, 23, 0)
(4, 23, 1)
(4, 23, 2)
(4, 23, 3)
(4, 23, 4)
(4, 23, 5)
(4, 23, 6)
(4, 23, 7)
(4, 24, 0)
(4, 24, 1)
(4, 24, 2)
(4, 24, 3)
(4, 24, 4)
(4, 24, 5)
(4, 24, 6)
(4, 24, 7)
(4, 25, 0)
(4, 25, 1)
(4, 25, 2)
(4, 25, 3)
(4, 25, 4)
(4, 25, 5)
(4, 25, 6)
(4, 25, 7)
(4, 26, 0)
(4, 26, 1)
(4, 26, 2)
(4, 26, 3)
(4, 26, 4)
(4, 26, 5)
(4, 26, 6)
(4, 26, 7)
(4, 27, 0)
(4, 27, 1)
(4, 27, 2)
(4, 27, 3)
(4, 27, 4)
(4, 27, 5)
(4, 27, 6)
(4, 27, 7)
(4, 28, 0)
(4, 28, 1)
(4, 28, 2)
(4, 28, 3)
(4, 28, 4)
(4, 28, 5)
(4, 28, 6)
(4, 28, 7)
(4, 29, 0)
(4, 29, 1)
(4, 29, 2)
(4, 29, 3)
(4, 29, 4)
(4, 29, 5)
(4, 29, 6)
(4, 29, 7)
(4, 30, 0)
(4, 30, 1)
(4, 30, 2)
(4, 30, 3)
(4, 30, 4)
(4, 30, 5)
(4, 30, 6)
(4, 30, 7)
(4, 31, 0)
(4, 31, 1)
(4, 31, 2)
(4, 31, 3)
(4, 31, 4)
(4, 31, 5)
(4, 31, 6)
(4, 31, 7)
(4, 32, 0)
(4, 32, 1)
(4, 32, 2)
(4, 32, 3)
(4, 32, 4)
(4, 32, 5)
(4, 32, 6)
(4, 32, 7)
(4, 33, 0)
(4, 33, 1)
(4, 33, 2)
(4, 33, 3)
(4, 33, 4)
(4, 33, 5)
(4, 33, 6)
(4, 33, 7)
(4, 34, 0)
(4, 34, 1)
(4, 34, 2)
(4, 34, 3)
(4, 34, 4)
(4, 34, 5)
(4, 34, 6)
(4, 34, 7)
(4, 35, 0)
(4, 35, 1)
(4, 35, 2)
(4, 35, 3)
(4, 35, 4)
(4, 35, 5)
(4, 35, 6)
(4, 35, 7)
(4, 36, 0)
(4, 36, 1)
(4, 36, 2)
(4, 36, 3)
(4, 36, 4)
(4, 36, 5)
(4, 36, 6)
(4, 36, 7)
(4, 37, 0)
(4, 37, 1)
(4, 37, 2)
(4, 37, 3)
(4, 37, 4)
(4, 37, 5)
(4, 37, 6)
(4, 37, 7)
(4, 38, 0)
(4, 38, 1)
(4, 38, 2)
(4, 38, 3)
(4, 38, 4)
(4, 38, 5)
(4, 38, 6)
(4, 38, 7)
(4, 39, 0)
(4, 39, 1)
(4, 39, 2)
(4, 39, 3)
(4, 39, 4)
(4, 39, 5)
(4, 39, 6)
(4, 39, 7)
(4, 40, 0)
(4, 40, 1)
(4, 40, 2)
(4, 40, 3)
(4, 40, 4)
(4, 40, 5)
(4, 40, 6)
(4, 40, 7)
(4, 41, 0)
(4, 41, 1)
(4, 41, 2)
(4, 41, 3)
(4, 41, 4)
(4, 41, 5)
(4, 41, 6)
(4, 41, 7)
(4, 42, 0)
(4, 42, 1)
(4, 42, 2)
(4, 42, 3)
(4, 42, 4)
(4, 42, 5)
(4, 42, 6)
(4, 42, 7)
(4, 43, 0)
(4, 43, 1)
(4, 43, 2)
(4, 43, 3)
(4, 43, 4)
(4, 43, 5)
(4, 43, 6)
(4, 43, 7)
(4, 44, 0)
(4, 44, 1)
(4, 44, 2)
(4, 44, 3)
(4, 44, 4)
(4, 44, 5)
(4, 44, 6)
(4, 44, 7)
(4, 45, 0)
(4, 45, 1)
(4, 45, 2)
(4, 45, 3)
(4, 45, 4)
(4, 45, 5)
(4, 45, 6)
(4, 45, 7)
(4, 46, 0)
(4, 46, 1)
(4, 46, 2)
(4, 46, 3)
(4, 46, 4)
(4, 46, 5)
(4, 46, 6)
(4, 46, 7)
(4, 47, 0)
(4, 47, 1)
(4, 47, 2)
(4, 47, 3)
(4, 47, 4)
(4, 47, 5)
(4, 47, 6)
(4, 47, 7)
(4, 48, 0)
(4, 48, 1)
(4, 48, 2)
(4, 48, 3)
(4, 48, 4)
(4, 48, 5)
(4, 48, 6)
(4, 48, 7)
(4, 49, 0)
(4, 49, 1)
(4, 49, 2)
(4, 49, 3)
(4, 49, 4)
(4, 49, 5)
(4, 49, 6)
(4, 49, 7)
(4, 50, 0)
(4, 50, 1)
(4, 50, 2)
(4, 50, 3)
(4, 50, 4)
(4, 50, 5)
(4, 50, 6)
(4, 50, 7)
(4, 51, 0)
(4, 51, 1)
(4, 51, 2)
(4, 51, 3)
(4, 51, 4)
(4, 51, 5)
(4, 51, 6)
(4, 51, 7)
(4, 52, 0)
(4, 52, 1)
(4, 52, 2)
(4, 52, 3)
(4, 52, 4)
(4, 52, 5)
(4, 52, 6)
(4, 52, 7)
(4, 53, 0)
(4, 53, 1)
(4, 53, 2)
(4, 53, 3)
(4, 53, 4)
(4, 53, 5)
(4, 53, 6)
(4, 53, 7)
(4, 54, 0)
(4, 54, 1)
(4, 54, 2)
(4, 54, 3)
(4, 54, 4)
(4, 54, 5)
(4, 54, 6)
(4, 54, 7)
(4, 55, 0)
(4, 55, 1)
(4, 55, 2)
(4, 55, 3)
(4, 55, 4)
(4, 55, 5)
(4, 55, 6)
(4, 55, 7)
(4, 56, 0)
(4, 56, 1)
(4, 56, 2)
(4, 56, 3)
(4, 56, 4)
(4, 56, 5)
(4, 56, 6)
(4, 56, 7)
(4, 57, 0)
(4, 57, 1)
(4, 57, 2)
(4, 57, 3)
(4, 57, 4)
(4, 57, 5)
(4, 57, 6)
(4, 57, 7)
(4, 58, 0)
(4, 58, 1)
(4, 58, 2)
(4, 58, 3)
(4, 58, 4)
(4, 58, 5)
(4, 58, 6)
(4, 58, 7)
(4, 59, 0)
(4, 59, 1)
(4, 59, 2)
(4, 59, 3)
(4, 59, 4)
(4, 59, 5)
(4, 59, 6)
(4, 59, 7)
(4, 60, 0)
(4, 60, 1)
(4, 60, 2)
(4, 60, 3)
(4, 60, 4)
(4, 60, 5)
(4, 60, 6)
(4, 60, 7)
(4, 61, 0)
(4, 61, 1)
(4, 61, 2)
(4, 61, 3)
(4, 61, 4)
(4, 61, 5)
(4, 61, 6)
(4, 61, 7)
(4, 62, 0)
(4, 62, 1)
(4, 62, 2)
(4, 62, 3)
(4, 62, 4)
(4, 62, 5)
(4, 62, 6)
(4, 62, 7)
(4, 63, 0)
(4, 63, 1)
(4, 63, 2)
(4, 63, 3)
(4, 63, 4)
(4, 63, 5)
(4, 63, 6)
(4, 63, 7)
(4, 64, 0)
(4, 64, 1)
(4, 64, 2)
(4, 64, 3)
(4, 64, 4)
(4, 64, 5)
(4, 64, 6)
(4, 64, 7)
(4, 65, 0)
(4, 65, 1)
(4, 65, 2)
(4, 65, 3)
(4, 65, 4)
(4, 65, 5)
(4, 65, 6)
(4, 65, 7)
(4, 66, 0)
(4, 66, 1)
(4, 66, 2)
(4, 66, 3)
(4, 66, 4)
(4, 66, 5)
(4, 66, 6)
(4, 66, 7)
(4, 67, 0)
(4, 67, 1)
(4, 67, 2)
(4, 67, 3)
(4, 67, 4)
(4, 67, 5)
(4, 67, 6)
(4, 67, 7)
(4, 68, 0)
(4, 68, 1)
(4, 68, 2)
(4, 68, 3)
(4, 68, 4)
(4, 68, 5)
(4, 68, 6)
(4, 68, 7)
(4, 69, 0)
(4, 69, 1)
(4, 69, 2)
(4, 69, 3)
(4, 69, 4)
(4, 69, 5)
(4, 69, 6)
(4, 69, 7)
(4, 70, 0)
(4, 70, 1)
(4, 70, 2)
(4, 70, 3)
(4, 70, 4)
(4, 70, 5)
(4, 70, 6)
(4, 70, 7)
(4, 71, 0)
(4, 71, 1)
(4, 71, 2)
(4, 71, 3)
(4, 71, 4)
(4, 71, 5)
(4, 71, 6)
(4, 71, 7)
(4, 72, 0)
(4, 72, 1)
(4, 72, 2)
(4, 72, 3)
(4, 72, 4)
(4, 72, 5)
(4, 72, 6)
(4, 72, 7)
(4, 73, 0)
(4, 73, 1)
(4, 73, 2)
(4, 73, 3)
(4, 73, 4)
(4, 73, 5)
(4, 73, 6)
(4, 73, 7)
(4, 74, 0)
(4, 74, 1)
(4, 74, 2)
(4, 74, 3)
(4, 74, 4)
(4, 74, 5)
(4, 74, 6)
(4, 74, 7)
(4, 75, 0)
(4, 75, 1)
(4, 75, 2)
(4, 75, 3)
(4, 75, 4)
(4, 75, 5)
(4, 75, 6)
(4, 75, 7)
(4, 76, 0)
(4, 76, 1)
(4, 76, 2)
(4, 76, 3)
(4, 76, 4)
(4, 76, 5)
(4, 76, 6)
(4, 76, 7)
(4, 77, 0)
(4, 77, 1)
(4, 77, 2)
(4, 77, 3)
(4, 77, 4)
(4, 77, 5)
(4, 77, 6)
(4, 77, 7)
(4, 78, 0)
(4, 78, 1)
(4, 78, 2)
(4, 78, 3)
(4, 78, 4)
(4, 78, 5)
(4, 78, 6)
(4, 78, 7)
(4, 79, 0)
(4, 79, 1)
(4, 79, 2)
(4, 79, 3)
(4, 79, 4)
(4, 79, 5)
(4, 79, 6)
(4, 79, 7)
(4, 80, 0)
(4, 80, 1)
(4, 80, 2)
(4, 80, 3)
(4, 80, 4)
(4, 80, 5)
(4, 80, 6)
(4, 80, 7)
(4, 81, 0)
(4, 81, 1)
(4, 81, 2)
(4, 81, 3)
(4, 81, 4)
(4, 81, 5)
(4, 81, 6)
(4, 81, 7)
(4, 82, 0)
(4, 82, 1)
(4, 82, 2)
(4, 82, 3)
(4, 82, 4)
(4, 82, 5)
(4, 82, 6)
(4, 82, 7)
(4, 83, 0)
(4, 83, 1)
(4, 83, 2)
(4, 83, 3)
(4, 83, 4)
(4, 83, 5)
(4, 83, 6)
(4, 83, 7)
(4, 84, 0)
(4, 84, 1)
(4, 84, 2)
(4, 84, 3)
(4, 84, 4)
(4, 84, 5)
(4, 84, 6)
(4, 84, 7)
(4, 85, 0)
(4, 85, 1)
(4, 85, 2)
(4, 85, 3)
(4, 85, 4)
(4, 85, 5)
(4, 85, 6)
(4, 85, 7)
(4, 86, 0)
(4, 86, 1)
(4, 86, 2)
(4, 86, 3)
(4, 86, 4)
(4, 86, 5)
(4, 86, 6)
(4, 86, 7)
(4, 87, 0)
(4, 87, 1)
(4, 87, 2)
(4, 87, 3)
(4, 87, 4)
(4, 87, 5)
(4, 87, 6)
(4, 87, 7)
(4, 88, 0)
(4, 88, 1)
(4, 88, 2)
(4, 88, 3)
(4, 88, 4)
(4, 88, 5)
(4, 88, 6)
(4, 88, 7)
(4, 89, 0)
(4, 89, 1)
(4, 89, 2)
(4, 89, 3)
(4, 89, 4)
(4, 89, 5)
(4, 89, 6)
(4, 89, 7)
(4, 90, 0)
(4, 90, 1)
(4, 90, 2)
(4, 90, 3)
(4, 90, 4)
(4, 90, 5)
(4, 90, 6)
(4, 90, 7)
(4, 91, 0)
(4, 91, 1)
(4, 91, 2)
(4, 91, 3)
(4, 91, 4)
(4, 91, 5)
(4, 91, 6)
(4, 91, 7)
(4, 92, 0)
(4, 92, 1)
(4, 92, 2)
(4, 92, 3)
(4, 92, 4)
(4, 92, 5)
(4, 92, 6)
(4, 92, 7)
(4, 93, 0)
(4, 93, 1)
(4, 93, 2)
(4, 93, 3)
(4, 93, 4)
(4, 93, 5)
(4, 93, 6)
(4, 93, 7)
(4, 94, 0)
(4, 94, 1)
(4, 94, 2)
(4, 94, 3)
(4, 94, 4)
(4, 94, 5)
(4, 94, 6)
(4, 94, 7)
(4, 95, 0)
(4, 95, 1)
(4, 95, 2)
(4, 95, 3)
(4, 95, 4)
(4, 95, 5)
(4, 95, 6)
(4, 95, 7)
(4, 96, 0)
(4, 96, 1)
(4, 96, 2)
(4, 96, 3)
(4, 96, 4)
(4, 96, 5)
(4, 96, 6)
(4, 96, 7)
(4, 97, 0)
(4, 97, 1)
(4, 97, 2)
(4, 97, 3)
(4, 97, 4)
(4, 97, 5)
(4, 97, 6)
(4, 97, 7)
(4, 98, 0)
(4, 98, 1)
(4, 98, 2)
(4, 98, 3)
(4, 98, 4)
(4, 98, 5)
(4, 98, 6)
(4, 98, 7)
(4, 99, 0)
(4, 99, 1)
(4, 99, 2)
(4, 99, 3)
(4, 99, 4)
(4, 99, 5)
(4, 99, 6)
(4, 99, 7)
(4, 100, 0)
(4, 100, 1)
(4, 100, 2)
(4, 100, 3)
(4, 100, 4)
(4, 100, 5)
(4, 100, 6)
(4, 100, 7)
(4, 101, 0)
(4, 101, 1)
(4, 101, 2)
(4, 101, 3)
(4, 101, 4)
(4, 101, 5)
(4, 101, 6)
(4, 101, 7)
(4, 102, 0)
(4, 102, 1)
(4, 102, 2)
(4, 102, 3)
(4, 102, 4)
(4, 102, 5)
(4, 102, 6)
(4, 102, 7)
(4, 103, 0)
(4, 103, 1)
(4, 103, 2)
(4, 103, 3)
(4, 103, 4)
(4, 103, 5)
(4, 103, 6)
(4, 103, 7)
(4, 104, 0)
(4, 104, 1)
(4, 104, 2)
(4, 104, 3)
(4, 104, 4)
(4, 104, 5)
(4, 104, 6)
(4, 104, 7)
(4, 105, 0)
(4, 105, 1)
(4, 105, 2)
(4, 105, 3)
(4, 105, 4)
(4, 105, 5)
(4, 105, 6)
(4, 105, 7)
(4, 106, 0)
(4, 106, 1)
(4, 106, 2)
(4, 106, 3)
(4, 106, 4)
(4, 106, 5)
(4, 106, 6)
(4, 106, 7)
(4, 107, 0)
(4, 107, 1)
(4, 107, 2)
(4, 107, 3)
(4, 107, 4)
(4, 107, 5)
(4, 107, 6)
(4, 107, 7)
(4, 108, 0)
(4, 108, 1)
(4, 108, 2)
(4, 108, 3)
(4, 108, 4)
(4, 108, 5)
(4, 108, 6)
(4, 108, 7)
(4, 109, 0)
(4, 109, 1)
(4, 109, 2)
(4, 109, 3)
(4, 109, 4)
(4, 109, 5)
(4, 109, 6)
(4, 109, 7)
(4, 110, 0)
(4, 110, 1)
(4, 110, 2)
(4, 110, 3)
(4, 110, 4)
(4, 110, 5)
(4, 110, 6)
(4, 110, 7)
(4, 111, 0)
(4, 111, 1)
(4, 111, 2)
(4, 111, 3)
(4, 111, 4)
(4, 111, 5)
(4, 111, 6)
(4, 111, 7)
(4, 112, 0)
(4, 112, 1)
(4, 112, 2)
(4, 112, 3)
(4, 112, 4)
(4, 112, 5)
(4, 112, 6)
(4, 112, 7)
(4, 113, 0)
(4, 113, 1)
(4, 113, 2)
(4, 113, 3)
(4, 113, 4)
(4, 113, 5)
(4, 113, 6)
(4, 113, 7)
(4, 114, 0)
(4, 114, 1)
(4, 114, 2)
(4, 114, 3)
(4, 114, 4)
(4, 114, 5)
(4, 114, 6)
(4, 114, 7)
(4, 115, 0)
(4, 115, 1)
(4, 115, 2)
(4, 115, 3)
(4, 115, 4)
(4, 115, 5)
(4, 115, 6)
(4, 115, 7)
(4, 116, 0)
(4, 116, 1)
(4, 116, 2)
(4, 116, 3)
(4, 116, 4)
(4, 116, 5)
(4, 116, 6)
(4, 116, 7)
(4, 117, 0)
(4, 117, 1)
(4, 117, 2)
(4, 117, 3)
(4, 117, 4)
(4, 117, 5)
(4, 117, 6)
(4, 117, 7)
(4, 118, 0)
(4, 118, 1)
(4, 118, 2)
(4, 118, 3)
(4, 118, 4)
(4, 118, 5)
(4, 118, 6)
(4, 118, 7)
(4, 119, 0)
(4, 119, 1)
(4, 119, 2)
(4, 119, 3)
(4, 119, 4)
(4, 119, 5)
(4, 119, 6)
(4, 119, 7)
(4, 120, 0)
(4, 120, 1)
(4, 120, 2)
(4, 120, 3)
(4, 120, 4)
(4, 120, 5)
(4, 120, 6)
(4, 120, 7)
(4, 121, 0)
(4, 121, 1)
(4, 121, 2)
(4, 121, 3)
(4, 121, 4)
(4, 121, 5)
(4, 121, 6)
(4, 121, 7)
(4, 122, 0)
(4, 122, 1)
(4, 122, 2)
(4, 122, 3)
(4, 122, 4)
(4, 122, 5)
(4, 122, 6)
(4, 122, 7)
(4, 123, 0)
(4, 123, 1)
(4, 123, 2)
(4, 123, 3)
(4, 123, 4)
(4, 123, 5)
(4, 123, 6)
(4, 123, 7)
(4, 124, 0)
(4, 124, 1)
(4, 124, 2)
(4, 124, 3)
(4, 124, 4)
(4, 124, 5)
(4, 124, 6)
(4, 124, 7)
(4, 125, 0)
(4, 125, 1)
(4, 125, 2)
(4, 125, 3)
(4, 125, 4)
(4, 125, 5)
(4, 125, 6)
(4, 125, 7)
(4, 126, 0)
(4, 126, 1)
(4, 126, 2)
(4, 126, 3)
(4, 126, 4)
(4, 126, 5)
(4, 126, 6)
(4, 126, 7)
(4, 127, 0)
(4, 127, 1)
(4, 127, 2)
(4, 127, 3)
(4, 127, 4)
(4, 127, 5)
(4, 127, 6)
(4, 127, 7)
(4, 128, 0)
(4, 128, 1)
(4, 128, 2)
(4, 128, 3)
(4, 128, 4)
(4, 128, 5)
(4, 128, 6)
(4, 128, 7)
(4, 129, 0)
(4, 129, 1)
(4, 129, 2)
(4, 129, 3)
(4, 129, 4)
(4, 129, 5)
(4, 129, 6)
(4, 129, 7)
(4, 130, 0)
(4, 130, 1)
(4, 130, 2)
(4, 130, 3)
(4, 130, 4)
(4, 130, 5)
(4, 130, 6)
(4, 130, 7)
(4, 131, 0)
(4, 131, 1)
(4, 131, 2)
(4, 131, 3)
(4, 131, 4)
(4, 131, 5)
(4, 131, 6)
(4, 131, 7)
(4, 132, 0)
(4, 132, 1)
(4, 132, 2)
(4, 132, 3)
(4, 132, 4)
(4, 132, 5)
(4, 132, 6)
(4, 132, 7)
(4, 133, 0)
(4, 133, 1)
(4, 133, 2)
(4, 133, 3)
(4, 133, 4)
(4, 133, 5)
(4, 133, 6)
(4, 133, 7)
(4, 134, 0)
(4, 134, 1)
(4, 134, 2)
(4, 134, 3)
(4, 134, 4)
(4, 134, 5)
(4, 134, 6)
(4, 134, 7)
(4, 135, 0)
(4, 135, 1)
(4, 135, 2)
(4, 135, 3)
(4, 135, 4)
(4, 135, 5)
(4, 135, 6)
(4, 135, 7)
(4, 136, 0)
(4, 136, 1)
(4, 136, 2)
(4, 136, 3)
(4, 136, 4)
(4, 136, 5)
(4, 136, 6)
(4, 136, 7)
(4, 137, 0)
(4, 137, 1)
(4, 137, 2)
(4, 137, 3)
(4, 137, 4)
(4, 137, 5)
(4, 137, 6)
(4, 137, 7)
(4, 138, 0)
(4, 138, 1)
(4, 138, 2)
(4, 138, 3)
(4, 138, 4)
(4, 138, 5)
(4, 138, 6)
(4, 138, 7)
(4, 139, 0)
(4, 139, 1)
(4, 139, 2)
(4, 139, 3)
(4, 139, 4)
(4, 139, 5)
(4, 139, 6)
(4, 139, 7)
(4, 140, 0)
(4, 140, 1)
(4, 140, 2)
(4, 140, 3)
(4, 140, 4)
(4, 140, 5)
(4, 140, 6)
(4, 140, 7)
(4, 141, 0)
(4, 141, 1)
(4, 141, 2)
(4, 141, 3)
(4, 141, 4)
(4, 141, 5)
(4, 141, 6)
(4, 141, 7)
(4, 142, 0)
(4, 142, 1)
(4, 142, 2)
(4, 142, 3)
(4, 142, 4)
(4, 142, 5)
(4, 142, 6)
(4, 142, 7)
(4, 143, 0)
(4, 143, 1)
(4, 143, 2)
(4, 143, 3)
(4, 143, 4)
(4, 143, 5)
(4, 143, 6)
(4, 143, 7)
(4, 144, 0)
(4, 144, 1)
(4, 144, 2)
(4, 144, 3)
(4, 144, 4)
(4, 144, 5)
(4, 144, 6)
(4, 144, 7)
(4, 145, 0)
(4, 145, 1)
(4, 145, 2)
(4, 145, 3)
(4, 145, 4)
(4, 145, 5)
(4, 145, 6)
(4, 145, 7)
(4, 146, 0)
(4, 146, 1)
(4, 146, 2)
(4, 146, 3)
(4, 146, 4)
(4, 146, 5)
(4, 146, 6)
(4, 146, 7)
(4, 147, 0)
(4, 147, 1)
(4, 147, 2)
(4, 147, 3)
(4, 147, 4)
(4, 147, 5)
(4, 147, 6)
(4, 147, 7)
(4, 148, 0)
(4, 148, 1)
(4, 148, 2)
(4, 148, 3)
(4, 148, 4)
(4, 148, 5)
(4, 148, 6)
(4, 148, 7)
(4, 149, 0)
(4, 149, 1)
(4, 149, 2)
(4, 149, 3)
(4, 149, 4)
(4, 149, 5)
(4, 149, 6)
(4, 149, 7)
(4, 150, 0)
(4, 150, 1)
(4, 150, 2)
(4, 150, 3)
(4, 150, 4)
(4, 150, 5)
(4, 150, 6)
(4, 150, 7)
(4, 151, 0)
(4, 151, 1)
(4, 151, 2)
(4, 151, 3)
(4, 151, 4)
(4, 151, 5)
(4, 151, 6)
(4, 151, 7)
(4, 152, 0)
(4, 152, 1)
(4, 152, 2)
(4, 152, 3)
(4, 152, 4)
(4, 152, 5)
(4, 152, 6)
(4, 152, 7)
(4, 153, 0)
(4, 153, 1)
(4, 153, 2)
(4, 153, 3)
(4, 153, 4)
(4, 153, 5)
(4, 153, 6)
(4, 153, 7)
(4, 154, 0)
(4, 154, 1)
(4, 154, 2)
(4, 154, 3)
(4, 154, 4)
(4, 154, 5)
(4, 154, 6)
(4, 154, 7)
(4, 155, 0)
(4, 155, 1)
(4, 155, 2)
(4, 155, 3)
(4, 155, 4)
(4, 155, 5)
(4, 155, 6)
(4, 155, 7)
(4, 156, 0)
(4, 156, 1)
(4, 156, 2)
(4, 156, 3)
(4, 156, 4)
(4, 156, 5)
(4, 156, 6)
(4, 156, 7)
(4, 157, 0)
(4, 157, 1)
(4, 157, 2)
(4, 157, 3)
(4, 157, 4)
(4, 157, 5)
(4, 157, 6)
(4, 157, 7)
(4, 158, 0)
(4, 158, 1)
(4, 158, 2)
(4, 158, 3)
(4, 158, 4)
(4, 158, 5)
(4, 158, 6)
(4, 158, 7)
(4, 159, 0)
(4, 159, 1)
(4, 159, 2)
(4, 159, 3)
(4, 159, 4)
(4, 159, 5)
(4, 159, 6)
(4, 159, 7)
(4, 160, 0)
(4, 160, 1)
(4, 160, 2)
(4, 160, 3)
(4, 160, 4)
(4, 160, 5)
(4, 160, 6)
(4, 160, 7)
(4, 161, 0)
(4, 161, 1)
(4, 161, 2)
(4, 161, 3)
(4, 161, 4)
(4, 161, 5)
(4, 161, 6)
(4, 161, 7)
(4, 162, 0)
(4, 162, 1)
(4, 162, 2)
(4, 162, 3)
(4, 162, 4)
(4, 162, 5)
(4, 162, 6)
(4, 162, 7)
(4, 163, 0)
(4, 163, 1)
(4, 163, 2)
(4, 163, 3)
(4, 163, 4)
(4, 163, 5)
(4, 163, 6)
(4, 163, 7)
(4, 164, 0)
(4, 164, 1)
(4, 164, 2)
(4, 164, 3)
(4, 164, 4)
(4, 164, 5)
(4, 164, 6)
(4, 164, 7)
(4, 165, 0)
(4, 165, 1)
(4, 165, 2)
(4, 165, 3)
(4, 165, 4)
(4, 165, 5)
(4, 165, 6)
(4, 165, 7)
(4, 166, 0)
(4, 166, 1)
(4, 166, 2)
(4, 166, 3)
(4, 166, 4)
(4, 166, 5)
(4, 166, 6)
(4, 166, 7)
(4, 167, 0)
(4, 167, 1)
(4, 167, 2)
(4, 167, 3)
(4, 167, 4)
(4, 167, 5)
(4, 167, 6)
(4, 167, 7)
(4, 168, 0)
(4, 168, 1)
(4, 168, 2)
(4, 168, 3)
(4, 168, 4)
(4, 168, 5)
(4, 168, 6)
(4, 168, 7)
(4, 169, 0)
(4, 169, 1)
(4, 169, 2)
(4, 169, 3)
(4, 169, 4)
(4, 169, 5)
(4, 169, 6)
(4, 169, 7)
(4, 170, 0)
(4, 170, 1)
(4, 170, 2)
(4, 170, 3)
(4, 170, 4)
(4, 170, 5)
(4, 170, 6)
(4, 170, 7)
(4, 171, 0)
(4, 171, 1)
(4, 171, 2)
(4, 171, 3)
(4, 171, 4)
(4, 171, 5)
(4, 171, 6)
(4, 171, 7)
(4, 172, 0)
(4, 172, 1)
(4, 172, 2)
(4, 172, 3)
(4, 172, 4)
(4, 172, 5)
(4, 172, 6)
(4, 172, 7)
(4, 173, 0)
(4, 173, 1)
(4, 173, 2)
(4, 173, 3)
(4, 173, 4)
(4, 173, 5)
(4, 173, 6)
(4, 173, 7)
(4, 174, 0)
(4, 174, 1)
(4, 174, 2)
(4, 174, 3)
(4, 174, 4)
(4, 174, 5)
(4, 174, 6)
(4, 174, 7)
(4, 175, 0)
(4, 175, 1)
(4, 175, 2)
(4, 175, 3)
(4, 175, 4)
(4, 175, 5)
(4, 175, 6)
(4, 175, 7)
(4, 176, 0)
(4, 176, 1)
(4, 176, 2)
(4, 176, 3)
(4, 176, 4)
(4, 176, 5)
(4, 176, 6)
(4, 176, 7)
(4, 177, 0)
(4, 177, 1)
(4, 177, 2)
(4, 177, 3)
(4, 177, 4)
(4, 177, 5)
(4, 177, 6)
(4, 177, 7)
(4, 178, 0)
(4, 178, 1)
(4, 178, 2)
(4, 178, 3)
(4, 178, 4)
(4, 178, 5)
(4, 178, 6)
(4, 178, 7)
(4, 179, 0)
(4, 179, 1)
(4, 179, 2)
(4, 179, 3)
(4, 179, 4)
(4, 179, 5)
(4, 179, 6)
(4, 179, 7)
(4, 180, 0)
(4, 180, 1)
(4, 180, 2)
(4, 180, 3)
(4, 180, 4)
(4, 180, 5)
(4, 180, 6)
(4, 180, 7)
(4, 181, 0)
(4, 181, 1)
(4, 181, 2)
(4, 181, 3)
(4, 181, 4)
(4, 181, 5)
(4, 181, 6)
(4, 181, 7)
(4, 182, 0)
(4, 182, 1)
(4, 182, 2)
(4, 182, 3)
(4, 182, 4)
(4, 182, 5)
(4, 182, 6)
(4, 182, 7)
(4, 183, 0)
(4, 183, 1)
(4, 183, 2)
(4, 183, 3)
(4, 183, 4)
(4, 183, 5)
(4, 183, 6)
(4, 183, 7)
(4, 184, 0)
(4, 184, 1)
(4, 184, 2)
(4, 184, 3)
(4, 184, 4)
(4, 184, 5)
(4, 184, 6)
(4, 184, 7)
(4, 185, 0)
(4, 185, 1)
(4, 185, 2)
(4, 185, 3)
(4, 185, 4)
(4, 185, 5)
(4, 185, 6)
(4, 185, 7)
(4, 186, 0)
(4, 186, 1)
(4, 186, 2)
(4, 186, 3)
(4, 186, 4)
(4, 186, 5)
(4, 186, 6)
(4, 186, 7)
(4, 187, 0)
(4, 187, 1)
(4, 187, 2)
(4, 187, 3)
(4, 187, 4)
(4, 187, 5)
(4, 187, 6)
(4, 187, 7)
(4, 188, 0)
(4, 188, 1)
(4, 188, 2)
(4, 188, 3)
(4, 188, 4)
(4, 188, 5)
(4, 188, 6)
(4, 188, 7)
(4, 189, 0)
(4, 189, 1)
(4, 189, 2)
(4, 189, 3)
(4, 189, 4)
(4, 189, 5)
(4, 189, 6)
(4, 189, 7)
(4, 190, 0)
(4, 190, 1)
(4, 190, 2)
(4, 190, 3)
(4, 190, 4)
(4, 190, 5)
(4, 190, 6)
(4, 190, 7)
(4, 191, 0)
(4, 191, 1)
(4, 191, 2)
(4, 191, 3)
(4, 191, 4)
(4, 191, 5)
(4, 191, 6)
(4, 191, 7)
(4, 192, 0)
(4, 192, 1)
(4, 192, 2)
(4, 192, 3)
(4, 192, 4)
(4, 192, 5)
(4, 192, 6)
(4, 192, 7)
(4, 193, 0)
(4, 193, 1)
(4, 193, 2)
(4, 193, 3)
(4, 193, 4)
(4, 193, 5)
(4, 193, 6)
(4, 193, 7)
(4, 194, 0)
(4, 194, 1)
(4, 194, 2)
(4, 194, 3)
(4, 194, 4)
(4, 194, 5)
(4, 194, 6)
(4, 194, 7)
(4, 195, 0)
(4, 195, 1)
(4, 195, 2)
(4, 195, 3)
(4, 195, 4)
(4, 195, 5)
(4, 195, 6)
(4, 195, 7)
(4, 196, 0)
(4, 196, 1)
(4, 196, 2)
(4, 196, 3)
(4, 196, 4)
(4, 196, 5)
(4, 196, 6)
(4, 196, 7)
(4, 197, 0)
(4, 197, 1)
(4, 197, 2)
(4, 197, 3)
(4, 197, 4)
(4, 197, 5)
(4, 197, 6)
(4, 197, 7)
(4, 198, 0)
(4, 198, 1)
(4, 198, 2)
(4, 198, 3)
(4, 198, 4)
(4, 198, 5)
(4, 198, 6)
(4, 198, 7)
(4, 199, 0)
(4, 199, 1)
(4, 199, 2)
(4, 199, 3)
(4, 199, 4)
(4, 199, 5)
(4, 199, 6)
(4, 199, 7)
(4, 200, 0)
(4, 200, 1)
(4, 200, 2)
(4, 200, 3)
(4, 200, 4)
(4, 200, 5)
(4, 200, 6)
(4, 200, 7)
(4, 201, 0)
(4, 201, 1)
(4, 201, 2)
(4, 201, 3)
(4, 201, 4)
(4, 201, 5)
(4, 201, 6)
(4, 201, 7)
(4, 202, 0)
(4, 202, 1)
(4, 202, 2)
(4, 202, 3)
(4, 202, 4)
(4, 202, 5)
(4, 202, 6)
(4, 202, 7)
(4, 203, 0)
(4, 203, 1)
(4, 203, 2)
(4, 203, 3)
(4, 203, 4)
(4, 203, 5)
(4, 203, 6)
(4, 203, 7)
(4, 204, 0)
(4, 204, 1)
(4, 204, 2)
(4, 204, 3)
(4, 204, 4)
(4, 204, 5)
(4, 204, 6)
(4, 204, 7)
(4, 205, 0)
(4, 205, 1)
(4, 205, 2)
(4, 205, 3)
(4, 205, 4)
(4, 205, 5)
(4, 205, 6)
(4, 205, 7)
(4, 206, 0)
(4, 206, 1)
(4, 206, 2)
(4, 206, 3)
(4, 206, 4)
(4, 206, 5)
(4, 206, 6)
(4, 206, 7)
(4, 207, 0)
(4, 207, 1)
(4, 207, 2)
(4, 207, 3)
(4, 207, 4)
(4, 207, 5)
(4, 207, 6)
(4, 207, 7)
(4, 208, 0)
(4, 208, 1)
(4, 208, 2)
(4, 208, 3)
(4, 208, 4)
(4, 208, 5)
(4, 208, 6)
(4, 208, 7)
(4, 209, 0)
(4, 209, 1)
(4, 209, 2)
(4, 209, 3)
(4, 209, 4)
(4, 209, 5)
(4, 209, 6)
(4, 209, 7)
(4, 210, 0)
(4, 210, 1)
(4, 210, 2)
(4, 210, 3)
(4, 210, 4)
(4, 210, 5)
(4, 210, 6)
(4, 210, 7)
(4, 211, 0)
(4, 211, 1)
(4, 211, 2)
(4, 211, 3)
(4, 211, 4)
(4, 211, 5)
(4, 211, 6)
(4, 211, 7)
(4, 212, 0)
(4, 212, 1)
(4, 212, 2)
(4, 212, 3)
(4, 212, 4)
(4, 212, 5)
(4, 212, 6)
(4, 212, 7)
(4, 213, 0)
(4, 213, 1)
(4, 213, 2)
(4, 213, 3)
(4, 213, 4)
(4, 213, 5)
(4, 213, 6)
(4, 213, 7)
(4, 214, 0)
(4, 214, 1)
(4, 214, 2)
(4, 214, 3)
(4, 214, 4)
(4, 214, 5)
(4, 214, 6)
(4, 214, 7)
(4, 215, 0)
(4, 215, 1)
(4, 215, 2)
(4, 215, 3)
(4, 215, 4)
(4, 215, 5)
(4, 215, 6)
(4, 215, 7)
(4, 216, 0)
(4, 216, 1)
(4, 216, 2)
(4, 216, 3)
(4, 216, 4)
(4, 216, 5)
(4, 216, 6)
(4, 216, 7)
(4, 217, 0)
(4, 217, 1)
(4, 217, 2)
(4, 217, 3)
(4, 217, 4)
(4, 217, 5)
(4, 217, 6)
(4, 217, 7)
(4, 218, 0)
(4, 218, 1)
(4, 218, 2)
(4, 218, 3)
(4, 218, 4)
(4, 218, 5)
(4, 218, 6)
(4, 218, 7)
(4, 219, 0)
(4, 219, 1)
(4, 219, 2)
(4, 219, 3)
(4, 219, 4)
(4, 219, 5)
(4, 219, 6)
(4, 219, 7)
(4, 220, 0)
(4, 220, 1)
(4, 220, 2)
(4, 220, 3)
(4, 220, 4)
(4, 220, 5)
(4, 220, 6)
(4, 220, 7)
(4, 221, 0)
(4, 221, 1)
(4, 221, 2)
(4, 221, 3)
(4, 221, 4)
(4, 221, 5)
(4, 221, 6)
(4, 221, 7)
(4, 222, 0)
(4, 222, 1)
(4, 222, 2)
(4, 222, 3)
(4, 222, 4)
(4, 222, 5)
(4, 222, 6)
(4, 222, 7)
(4, 223, 0)
(4, 223, 1)
(4, 223, 2)
(4, 223, 3)
(4, 223, 4)
(4, 223, 5)
(4, 223, 6)
(4, 223, 7)
(4, 224, 0)
(4, 224, 1)
(4, 224, 2)
(4, 224, 3)
(4, 224, 4)
(4, 224, 5)
(4, 224, 6)
(4, 224, 7)
(4, 225, 0)
(4, 225, 1)
(4, 225, 2)
(4, 225, 3)
(4, 225, 4)
(4, 225, 5)
(4, 225, 6)
(4, 225, 7)
(4, 226, 0)
(4, 226, 1)
(4, 226, 2)
(4, 226, 3)
(4, 226, 4)
(4, 226, 5)
(4, 226, 6)
(4, 226, 7)
(4, 227, 0)
(4, 227, 1)
(4, 227, 2)
(4, 227, 3)
(4, 227, 4)
(4, 227, 5)
(4, 227, 6)
(4, 227, 7)
(4, 228, 0)
(4, 228, 1)
(4, 228, 2)
(4, 228, 3)
(4, 228, 4)
(4, 228, 5)
(4, 228, 6)
(4, 228, 7)
(4, 229, 0)
(4, 229, 1)
(4, 229, 2)
(4, 229, 3)
(4, 229, 4)
(4, 229, 5)
(4, 229, 6)
(4, 229, 7)
(4, 230, 0)
(4, 230, 1)
(4, 230, 2)
(4, 230, 3)
(4, 230, 4)
(4, 230, 5)
(4, 230, 6)
(4, 230, 7)
(4, 231, 0)
(4, 231, 1)
(4, 231, 2)
(4, 231, 3)
(4, 231, 4)
(4, 231, 5)
(4, 231, 6)
(4, 231, 7)
(4, 232, 0)
(4, 232, 1)
(4, 232, 2)
(4, 232, 3)
(4, 232, 4)
(4, 232, 5)
(4, 232, 6)
(4, 232, 7)
(4, 233, 0)
(4, 233, 1)
(4, 233, 2)
(4, 233, 3)
(4, 233, 4)
(4, 233, 5)
(4, 233, 6)
(4, 233, 7)
(4, 234, 0)
(4, 234, 1)
(4, 234, 2)
(4, 234, 3)
(4, 234, 4)
(4, 234, 5)
(4, 234, 6)
(4, 234, 7)
(4, 235, 0)
(4, 235, 1)
(4, 235, 2)
(4, 235, 3)
(4, 235, 4)
(4, 235, 5)
(4, 235, 6)
(4, 235, 7)
(4, 236, 0)
(4, 236, 1)
(4, 236, 2)
(4, 236, 3)
(4, 236, 4)
(4, 236, 5)
(4, 236, 6)
(4, 236, 7)
(4, 237, 0)
(4, 237, 1)
(4, 237, 2)
(4, 237, 3)
(4, 237, 4)
(4, 237, 5)
(4, 237, 6)
(4, 237, 7)
(4, 238, 0)
(4, 238, 1)
(4, 238, 2)
(4, 238, 3)
(4, 238, 4)
(4, 238, 5)
(4, 238, 6)
(4, 238, 7)
(4, 239, 0)
(4, 239, 1)
(4, 239, 2)
(4, 239, 3)
(4, 239, 4)
(4, 239, 5)
(4, 239, 6)
(4, 239, 7)
(4, 240, 0)
(4, 240, 1)
(4, 240, 2)
(4, 240, 3)
(4, 240, 4)
(4, 240, 5)
(4, 240, 6)
(4, 240, 7)
(4, 241, 0)
(4, 241, 1)
(4, 241, 2)
(4, 241, 3)
(4, 241, 4)
(4, 241, 5)
(4, 241, 6)
(4, 241, 7)
(4, 242, 0)
(4, 242, 1)
(4, 242, 2)
(4, 242, 3)
(4, 242, 4)
(4, 242, 5)
(4, 242, 6)
(4, 242, 7)
(4, 243, 0)
(4, 243, 1)
(4, 243, 2)
(4, 243, 3)
(4, 243, 4)
(4, 243, 5)
(4, 243, 6)
(4, 243, 7)
(4, 244, 0)
(4, 244, 1)
(4, 244, 2)
(4, 244, 3)
(4, 244, 4)
(4, 244, 5)
(4, 244, 6)
(4, 244, 7)
(4, 245, 0)
(4, 245, 1)
(4, 245, 2)
(4, 245, 3)
(4, 245, 4)
(4, 245, 5)
(4, 245, 6)
(4, 245, 7)
(4, 246, 0)
(4, 246, 1)
(4, 246, 2)
(4, 246, 3)
(4, 246, 4)
(4, 246, 5)
(4, 246, 6)
(4, 246, 7)
(4, 247, 0)
(4, 247, 1)
(4, 247, 2)
(4, 247, 3)
(4, 247, 4)
(4, 247, 5)
(4, 247, 6)
(4, 247, 7)
(4, 248, 0)
(4, 248, 1)
(4, 248, 2)
(4, 248, 3)
(4, 248, 4)
(4, 248, 5)
(4, 248, 6)
(4, 248, 7)
(4, 249, 0)
(4, 249, 1)
(4, 249, 2)
(4, 249, 3)
(4, 249, 4)
(4, 249, 5)
(4, 249, 6)
(4, 249, 7)
(4, 250, 0)
(4, 250, 1)
(4, 250, 2)
(4, 250, 3)
(4, 250, 4)
(4, 250, 5)
(4, 250, 6)
(4, 250, 7)
(4, 251, 0)
(4, 251, 1)
(4, 251, 2)
(4, 251, 3)
(4, 251, 4)
(4, 251, 5)
(4, 251, 6)
(4, 251, 7)
(4, 252, 0)
(4, 252, 1)
(4, 252, 2)
(4, 252, 3)
(4, 252, 4)
(4, 252, 5)
(4, 252, 6)
(4, 252, 7)
(4, 253, 0)
(4, 253, 1)
(4, 253, 2)
(4, 253, 3)
(4, 253, 4)
(4, 253, 5)
(4, 253, 6)
(4, 253, 7)
(4, 254, 0)
(4, 254, 1)
(4, 254, 2)
(4, 254, 3)
(4, 254, 4)
(4, 254, 5)
(4, 254, 6)
(4, 254, 7)
(4, 255, 0)
(4, 255, 1)
(4, 255, 2)
(4, 255, 3)
(4, 255, 4)
(4, 255, 5)
(4, 255, 6)
(4, 255, 7)
(5, 0, 0)
(5, 0, 1)
(5, 0, 2)
(5, 0, 3)
(5, 0, 4)
(5, 0, 5)
(5, 0, 6)
(5, 0, 7)
(5, 1, 0)
(5, 1, 1)
(5, 1, 2)
(5, 1, 3)
(5, 1, 4)
(5, 1, 5)
(5, 1, 6)
(5, 1, 7)
(5, 2, 0)
(5, 2, 1)
(5, 2, 2)
(5, 2, 3)
(5, 2, 4)
(5, 2, 5)
(5, 2, 6)
(5, 2, 7)
(5, 3, 0)
(5, 3, 1)
(5, 3, 2)
(5, 3, 3)
(5, 3, 4)
(5, 3, 5)
(5, 3, 6)
(5, 3, 7)
(5, 4, 0)
(5, 4, 1)
(5, 4, 2)
(5, 4, 3)
(5, 4, 4)
(5, 4, 5)
(5, 4, 6)
(5, 4, 7)
(5, 5, 0)
(5, 5, 1)
(5, 5, 2)
(5, 5, 3)
(5, 5, 4)
(5, 5, 5)
(5, 5, 6)
(5, 5, 7)
(5, 6, 0)
(5, 6, 1)
(5, 6, 2)
(5, 6, 3)
(5, 6, 4)
(5, 6, 5)
(5, 6, 6)
(5, 6, 7)
(5, 7, 0)
(5, 7, 1)
(5, 7, 2)
(5, 7, 3)
(5, 7, 4)
(5, 7, 5)
(5, 7, 6)
(5, 7, 7)
(5, 8, 0)
(5, 8, 1)
(5, 8, 2)
(5, 8, 3)
(5, 8, 4)
(5, 8, 5)
(5, 8, 6)
(5, 8, 7)
(5, 9, 0)
(5, 9, 1)
(5, 9, 2)
(5, 9, 3)
(5, 9, 4)
(5, 9, 5)
(5, 9, 6)
(5, 9, 7)
(5, 10, 0)
(5, 10, 1)
(5, 10, 2)
(5, 10, 3)
(5, 10, 4)
(5, 10, 5)
(5, 10, 6)
(5, 10, 7)
(5, 11, 0)
(5, 11, 1)
(5, 11, 2)
(5, 11, 3)
(5, 11, 4)
(5, 11, 5)
(5, 11, 6)
(5, 11, 7)
(5, 12, 0)
(5, 12, 1)
(5, 12, 2)
(5, 12, 3)
(5, 12, 4)
(5, 12, 5)
(5, 12, 6)
(5, 12, 7)
(5, 13, 0)
(5, 13, 1)
(5, 13, 2)
(5, 13, 3)
(5, 13, 4)
(5, 13, 5)
(5, 13, 6)
(5, 13, 7)
(5, 14, 0)
(5, 14, 1)
(5, 14, 2)
(5, 14, 3)
(5, 14, 4)
(5, 14, 5)
(5, 14, 6)
(5, 14, 7)
(5, 15, 0)
(5, 15, 1)
(5, 15, 2)
(5, 15, 3)
(5, 15, 4)
(5, 15, 5)
(5, 15, 6)
(5, 15, 7)
(5, 16, 0)
(5, 16, 1)
(5, 16, 2)
(5, 16, 3)
(5, 16, 4)
(5, 16, 5)
(5, 16, 6)
(5, 16, 7)
(5, 17, 0)
(5, 17, 1)
(5, 17, 2)
(5, 17, 3)
(5, 17, 4)
(5, 17, 5)
(5, 17, 6)
(5, 17, 7)
(5, 18, 0)
(5, 18, 1)
(5, 18, 2)
(5, 18, 3)
(5, 18, 4)
(5, 18, 5)
(5, 18, 6)
(5, 18, 7)
(5, 19, 0)
(5, 19, 1)
(5, 19, 2)
(5, 19, 3)
(5, 19, 4)
(5, 19, 5)
(5, 19, 6)
(5, 19, 7)
(5, 20, 0)
(5, 20, 1)
(5, 20, 2)
(5, 20, 3)
(5, 20, 4)
(5, 20, 5)
(5, 20, 6)
(5, 20, 7)
(5, 21, 0)
(5, 21, 1)
(5, 21, 2)
(5, 21, 3)
(5, 21, 4)
(5, 21, 5)
(5, 21, 6)
(5, 21, 7)
(5, 22, 0)
(5, 22, 1)
(5, 22, 2)
(5, 22, 3)
(5, 22, 4)
(5, 22, 5)
(5, 22, 6)
(5, 22, 7)
(5, 23, 0)
(5, 23, 1)
(5, 23, 2)
(5, 23, 3)
(5, 23, 4)
(5, 23, 5)
(5, 23, 6)
(5, 23, 7)
(5, 24, 0)
(5, 24, 1)
(5, 24, 2)
(5, 24, 3)
(5, 24, 4)
(5, 24, 5)
(5, 24, 6)
(5, 24, 7)
(5, 25, 0)
(5, 25, 1)
(5, 25, 2)
(5, 25, 3)
(5, 25, 4)
(5, 25, 5)
(5, 25, 6)
(5, 25, 7)
(5, 26, 0)
(5, 26, 1)
(5, 26, 2)
(5, 26, 3)
(5, 26, 4)
(5, 26, 5)
(5, 26, 6)
(5, 26, 7)
(5, 27, 0)
(5, 27, 1)
(5, 27, 2)
(5, 27, 3)
(5, 27, 4)
(5, 27, 5)
(5, 27, 6)
(5, 27, 7)
(5, 28, 0)
(5, 28, 1)
(5, 28, 2)
(5, 28, 3)
(5, 28, 4)
(5, 28, 5)
(5, 28, 6)
(5, 28, 7)
(5, 29, 0)
(5, 29, 1)
(5, 29, 2)
(5, 29, 3)
(5, 29, 4)
(5, 29, 5)
(5, 29, 6)
(5, 29, 7)
(5, 30, 0)
(5, 30, 1)
(5, 30, 2)
(5, 30, 3)
(5, 30, 4)
(5, 30, 5)
(5, 30, 6)
(5, 30, 7)
(5, 31, 0)
(5, 31, 1)
(5, 31, 2)
(5, 31, 3)
(5, 31, 4)
(5, 31, 5)
(5, 31, 6)
(5, 31, 7)
(5, 32, 0)
(5, 32, 1)
(5, 32, 2)
(5, 32, 3)
(5, 32, 4)
(5, 32, 5)
(5, 32, 6)
(5, 32, 7)
(5, 33, 0)
(5, 33, 1)
(5, 33, 2)
(5, 33, 3)
(5, 33, 4)
(5, 33, 5)
(5, 33, 6)
(5, 33, 7)
(5, 34, 0)
(5, 34, 1)
(5, 34, 2)
(5, 34, 3)
(5, 34, 4)
(5, 34, 5)
(5, 34, 6)
(5, 34, 7)
(5, 35, 0)
(5, 35, 1)
(5, 35, 2)
(5, 35, 3)
(5, 35, 4)
(5, 35, 5)
(5, 35, 6)
(5, 35, 7)
(5, 36, 0)
(5, 36, 1)
(5, 36, 2)
(5, 36, 3)
(5, 36, 4)
(5, 36, 5)
(5, 36, 6)
(5, 36, 7)
(5, 37, 0)
(5, 37, 1)
(5, 37, 2)
(5, 37, 3)
(5, 37, 4)
(5, 37, 5)
(5, 37, 6)
(5, 37, 7)
(5, 38, 0)
(5, 38, 1)
(5, 38, 2)
(5, 38, 3)
(5, 38, 4)
(5, 38, 5)
(5, 38, 6)
(5, 38, 7)
(5, 39, 0)
(5, 39, 1)
(5, 39, 2)
(5, 39, 3)
(5, 39, 4)
(5, 39, 5)
(5, 39, 6)
(5, 39, 7)
(5, 40, 0)
(5, 40, 1)
(5, 40, 2)
(5, 40, 3)
(5, 40, 4)
(5, 40, 5)
(5, 40, 6)
(5, 40, 7)
(5, 41, 0)
(5, 41, 1)
(5, 41, 2)
(5, 41, 3)
(5, 41, 4)
(5, 41, 5)
(5, 41, 6)
(5, 41, 7)
(5, 42, 0)
(5, 42, 1)
(5, 42, 2)
(5, 42, 3)
(5, 42, 4)
(5, 42, 5)
(5, 42, 6)
(5, 42, 7)
(5, 43, 0)
(5, 43, 1)
(5, 43, 2)
(5, 43, 3)
(5, 43, 4)
(5, 43, 5)
(5, 43, 6)
(5, 43, 7)
(5, 44, 0)
(5, 44, 1)
(5, 44, 2)
(5, 44, 3)
(5, 44, 4)
(5, 44, 5)
(5, 44, 6)
(5, 44, 7)
(5, 45, 0)
(5, 45, 1)
(5, 45, 2)
(5, 45, 3)
(5, 45, 4)
(5, 45, 5)
(5, 45, 6)
(5, 45, 7)
(5, 46, 0)
(5, 46, 1)
(5, 46, 2)
(5, 46, 3)
(5, 46, 4)
(5, 46, 5)
(5, 46, 6)
(5, 46, 7)
(5, 47, 0)
(5, 47, 1)
(5, 47, 2)
(5, 47, 3)
(5, 47, 4)
(5, 47, 5)
(5, 47, 6)
(5, 47, 7)
(5, 48, 0)
(5, 48, 1)
(5, 48, 2)
(5, 48, 3)
(5, 48, 4)
(5, 48, 5)
(5, 48, 6)
(5, 48, 7)
(5, 49, 0)
(5, 49, 1)
(5, 49, 2)
(5, 49, 3)
(5, 49, 4)
(5, 49, 5)
(5, 49, 6)
(5, 49, 7)
(5, 50, 0)
(5, 50, 1)
(5, 50, 2)
(5, 50, 3)
(5, 50, 4)
(5, 50, 5)
(5, 50, 6)
(5, 50, 7)
(5, 51, 0)
(5, 51, 1)
(5, 51, 2)
(5, 51, 3)
(5, 51, 4)
(5, 51, 5)
(5, 51, 6)
(5, 51, 7)
(5, 52, 0)
(5, 52, 1)
(5, 52, 2)
(5, 52, 3)
(5, 52, 4)
(5, 52, 5)
(5, 52, 6)
(5, 52, 7)
(5, 53, 0)
(5, 53, 1)
(5, 53, 2)
(5, 53, 3)
(5, 53, 4)
(5, 53, 5)
(5, 53, 6)
(5, 53, 7)
(5, 54, 0)
(5, 54, 1)
(5, 54, 2)
(5, 54, 3)
(5, 54, 4)
(5, 54, 5)
(5, 54, 6)
(5, 54, 7)
(5, 55, 0)
(5, 55, 1)
(5, 55, 2)
(5, 55, 3)
(5, 55, 4)
(5, 55, 5)
(5, 55, 6)
(5, 55, 7)
(5, 56, 0)
(5, 56, 1)
(5, 56, 2)
(5, 56, 3)
(5, 56, 4)
(5, 56, 5)
(5, 56, 6)
(5, 56, 7)
(5, 57, 0)
(5, 57, 1)
(5, 57, 2)
(5, 57, 3)
(5, 57, 4)
(5, 57, 5)
(5, 57, 6)
(5, 57, 7)
(5, 58, 0)
(5, 58, 1)
(5, 58, 2)
(5, 58, 3)
(5, 58, 4)
(5, 58, 5)
(5, 58, 6)
(5, 58, 7)
(5, 59, 0)
(5, 59, 1)
(5, 59, 2)
(5, 59, 3)
(5, 59, 4)
(5, 59, 5)
(5, 59, 6)
(5, 59, 7)
(5, 60, 0)
(5, 60, 1)
(5, 60, 2)
(5, 60, 3)
(5, 60, 4)
(5, 60, 5)
(5, 60, 6)
(5, 60, 7)
(5, 61, 0)
(5, 61, 1)
(5, 61, 2)
(5, 61, 3)
(5, 61, 4)
(5, 61, 5)
(5, 61, 6)
(5, 61, 7)
(5, 62, 0)
(5, 62, 1)
(5, 62, 2)
(5, 62, 3)
(5, 62, 4)
(5, 62, 5)
(5, 62, 6)
(5, 62, 7)
(5, 63, 0)
(5, 63, 1)
(5, 63, 2)
(5, 63, 3)
(5, 63, 4)
(5, 63, 5)
(5, 63, 6)
(5, 63, 7)
(5, 64, 0)
(5, 64, 1)
(5, 64, 2)
(5, 64, 3)
(5, 64, 4)
(5, 64, 5)
(5, 64, 6)
(5, 64, 7)
(5, 65, 0)
(5, 65, 1)
(5, 65, 2)
(5, 65, 3)
(5, 65, 4)
(5, 65, 5)
(5, 65, 6)
(5, 65, 7)
(5, 66, 0)
(5, 66, 1)
(5, 66, 2)
(5, 66, 3)
(5, 66, 4)
(5, 66, 5)
(5, 66, 6)
(5, 66, 7)
(5, 67, 0)
(5, 67, 1)
(5, 67, 2)
(5, 67, 3)
(5, 67, 4)
(5, 67, 5)
(5, 67, 6)
(5, 67, 7)
(5, 68, 0)
(5, 68, 1)
(5, 68, 2)
(5, 68, 3)
(5, 68, 4)
(5, 68, 5)
(5, 68, 6)
(5, 68, 7)
(5, 69, 0)
(5, 69, 1)
(5, 69, 2)
(5, 69, 3)
(5, 69, 4)
(5, 69, 5)
(5, 69, 6)
(5, 69, 7)
(5, 70, 0)
(5, 70, 1)
(5, 70, 2)
(5, 70, 3)
(5, 70, 4)
(5, 70, 5)
(5, 70, 6)
(5, 70, 7)
(5, 71, 0)
(5, 71, 1)
(5, 71, 2)
(5, 71, 3)
(5, 71, 4)
(5, 71, 5)
(5, 71, 6)
(5, 71, 7)
(5, 72, 0)
(5, 72, 1)
(5, 72, 2)
(5, 72, 3)
(5, 72, 4)
(5, 72, 5)
(5, 72, 6)
(5, 72, 7)
(5, 73, 0)
(5, 73, 1)
(5, 73, 2)
(5, 73, 3)
(5, 73, 4)
(5, 73, 5)
(5, 73, 6)
(5, 73, 7)
(5, 74, 0)
(5, 74, 1)
(5, 74, 2)
(5, 74, 3)
(5, 74, 4)
(5, 74, 5)
(5, 74, 6)
(5, 74, 7)
(5, 75, 0)
(5, 75, 1)
(5, 75, 2)
(5, 75, 3)
(5, 75, 4)
(5, 75, 5)
(5, 75, 6)
(5, 75, 7)
(5, 76, 0)
(5, 76, 1)
(5, 76, 2)
(5, 76, 3)
(5, 76, 4)
(5, 76, 5)
(5, 76, 6)
(5, 76, 7)
(5, 77, 0)
(5, 77, 1)
(5, 77, 2)
(5, 77, 3)
(5, 77, 4)
(5, 77, 5)
(5, 77, 6)
(5, 77, 7)
(5, 78, 0)
(5, 78, 1)
(5, 78, 2)
(5, 78, 3)
(5, 78, 4)
(5, 78, 5)
(5, 78, 6)
(5, 78, 7)
(5, 79, 0)
(5, 79, 1)
(5, 79, 2)
(5, 79, 3)
(5, 79, 4)
(5, 79, 5)
(5, 79, 6)
(5, 79, 7)
(5, 80, 0)
(5, 80, 1)
(5, 80, 2)
(5, 80, 3)
(5, 80, 4)
(5, 80, 5)
(5, 80, 6)
(5, 80, 7)
(5, 81, 0)
(5, 81, 1)
(5, 81, 2)
(5, 81, 3)
(5, 81, 4)
(5, 81, 5)
(5, 81, 6)
(5, 81, 7)
(5, 82, 0)
(5, 82, 1)
(5, 82, 2)
(5, 82, 3)
(5, 82, 4)
(5, 82, 5)
(5, 82, 6)
(5, 82, 7)
(5, 83, 0)
(5, 83, 1)
(5, 83, 2)
(5, 83, 3)
(5, 83, 4)
(5, 83, 5)
(5, 83, 6)
(5, 83, 7)
(5, 84, 0)
(5, 84, 1)
(5, 84, 2)
(5, 84, 3)
(5, 84, 4)
(5, 84, 5)
(5, 84, 6)
(5, 84, 7)
(5, 85, 0)
(5, 85, 1)
(5, 85, 2)
(5, 85, 3)
(5, 85, 4)
(5, 85, 5)
(5, 85, 6)
(5, 85, 7)
(5, 86, 0)
(5, 86, 1)
(5, 86, 2)
(5, 86, 3)
(5, 86, 4)
(5, 86, 5)
(5, 86, 6)
(5, 86, 7)
(5, 87, 0)
(5, 87, 1)
(5, 87, 2)
(5, 87, 3)
(5, 87, 4)
(5, 87, 5)
(5, 87, 6)
(5, 87, 7)
(5, 88, 0)
(5, 88, 1)
(5, 88, 2)
(5, 88, 3)
(5, 88, 4)
(5, 88, 5)
(5, 88, 6)
(5, 88, 7)
(5, 89, 0)
(5, 89, 1)
(5, 89, 2)
(5, 89, 3)
(5, 89, 4)
(5, 89, 5)
(5, 89, 6)
(5, 89, 7)
(5, 90, 0)
(5, 90, 1)
(5, 90, 2)
(5, 90, 3)
(5, 90, 4)
(5, 90, 5)
(5, 90, 6)
(5, 90, 7)
(5, 91, 0)
(5, 91, 1)
(5, 91, 2)
(5, 91, 3)
(5, 91, 4)
(5, 91, 5)
(5, 91, 6)
(5, 91, 7)
(5, 92, 0)
(5, 92, 1)
(5, 92, 2)
(5, 92, 3)
(5, 92, 4)
(5, 92, 5)
(5, 92, 6)
(5, 92, 7)
(5, 93, 0)
(5, 93, 1)
(5, 93, 2)
(5, 93, 3)
(5, 93, 4)
(5, 93, 5)
(5, 93, 6)
(5, 93, 7)
(5, 94, 0)
(5, 94, 1)
(5, 94, 2)
(5, 94, 3)
(5, 94, 4)
(5, 94, 5)
(5, 94, 6)
(5, 94, 7)
(5, 95, 0)
(5, 95, 1)
(5, 95, 2)
(5, 95, 3)
(5, 95, 4)
(5, 95, 5)
(5, 95, 6)
(5, 95, 7)
(5, 96, 0)
(5, 96, 1)
(5, 96, 2)
(5, 96, 3)
(5, 96, 4)
(5, 96, 5)
(5, 96, 6)
(5, 96, 7)
(5, 97, 0)
(5, 97, 1)
(5, 97, 2)
(5, 97, 3)
(5, 97, 4)
(5, 97, 5)
(5, 97, 6)
(5, 97, 7)
(5, 98, 0)
(5, 98, 1)
(5, 98, 2)
(5, 98, 3)
(5, 98, 4)
(5, 98, 5)
(5, 98, 6)
(5, 98, 7)
(5, 99, 0)
(5, 99, 1)
(5, 99, 2)
(5, 99, 3)
(5, 99, 4)
(5, 99, 5)
(5, 99, 6)
(5, 99, 7)
(5, 100, 0)
(5, 100, 1)
(5, 100, 2)
(5, 100, 3)
(5, 100, 4)
(5, 100, 5)
(5, 100, 6)
(5, 100, 7)
(5, 101, 0)
(5, 101, 1)
(5, 101, 2)
(5, 101, 3)
(5, 101, 4)
(5, 101, 5)
(5, 101, 6)
(5, 101, 7)
(5, 102, 0)
(5, 102, 1)
(5, 102, 2)
(5, 102, 3)
(5, 102, 4)
(5, 102, 5)
(5, 102, 6)
(5, 102, 7)
(5, 103, 0)
(5, 103, 1)
(5, 103, 2)
(5, 103, 3)
(5, 103, 4)
(5, 103, 5)
(5, 103, 6)
(5, 103, 7)
(5, 104, 0)
(5, 104, 1)
(5, 104, 2)
(5, 104, 3)
(5, 104, 4)
(5, 104, 5)
(5, 104, 6)
(5, 104, 7)
(5, 105, 0)
(5, 105, 1)
(5, 105, 2)
(5, 105, 3)
(5, 105, 4)
(5, 105, 5)
(5, 105, 6)
(5, 105, 7)
(5, 106, 0)
(5, 106, 1)
(5, 106, 2)
(5, 106, 3)
(5, 106, 4)
(5, 106, 5)
(5, 106, 6)
(5, 106, 7)
(5, 107, 0)
(5, 107, 1)
(5, 107, 2)
(5, 107, 3)
(5, 107, 4)
(5, 107, 5)
(5, 107, 6)
(5, 107, 7)
(5, 108, 0)
(5, 108, 1)
(5, 108, 2)
(5, 108, 3)
(5, 108, 4)
(5, 108, 5)
(5, 108, 6)
(5, 108, 7)
(5, 109, 0)
(5, 109, 1)
(5, 109, 2)
(5, 109, 3)
(5, 109, 4)
(5, 109, 5)
(5, 109, 6)
(5, 109, 7)
(5, 110, 0)
(5, 110, 1)
(5, 110, 2)
(5, 110, 3)
(5, 110, 4)
(5, 110, 5)
(5, 110, 6)
(5, 110, 7)
(5, 111, 0)
(5, 111, 1)
(5, 111, 2)
(5, 111, 3)
(5, 111, 4)
(5, 111, 5)
(5, 111, 6)
(5, 111, 7)
(5, 112, 0)
(5, 112, 1)
(5, 112, 2)
(5, 112, 3)
(5, 112, 4)
(5, 112, 5)
(5, 112, 6)
(5, 112, 7)
(5, 113, 0)
(5, 113, 1)
(5, 113, 2)
(5, 113, 3)
(5, 113, 4)
(5, 113, 5)
(5, 113, 6)
(5, 113, 7)
(5, 114, 0)
(5, 114, 1)
(5, 114, 2)
(5, 114, 3)
(5, 114, 4)
(5, 114, 5)
(5, 114, 6)
(5, 114, 7)
(5, 115, 0)
(5, 115, 1)
(5, 115, 2)
(5, 115, 3)
(5, 115, 4)
(5, 115, 5)
(5, 115, 6)
(5, 115, 7)
(5, 116, 0)
(5, 116, 1)
(5, 116, 2)
(5, 116, 3)
(5, 116, 4)
(5, 116, 5)
(5, 116, 6)
(5, 116, 7)
(5, 117, 0)
(5, 117, 1)
(5, 117, 2)
(5, 117, 3)
(5, 117, 4)
(5, 117, 5)
(5, 117, 6)
(5, 117, 7)
(5, 118, 0)
(5, 118, 1)
(5, 118, 2)
(5, 118, 3)
(5, 118, 4)
(5, 118, 5)
(5, 118, 6)
(5, 118, 7)
(5, 119, 0)
(5, 119, 1)
(5, 119, 2)
(5, 119, 3)
(5, 119, 4)
(5, 119, 5)
(5, 119, 6)
(5, 119, 7)
(5, 120, 0)
(5, 120, 1)
(5, 120, 2)
(5, 120, 3)
(5, 120, 4)
(5, 120, 5)
(5, 120, 6)
(5, 120, 7)
(5, 121, 0)
(5, 121, 1)
(5, 121, 2)
(5, 121, 3)
(5, 121, 4)
(5, 121, 5)
(5, 121, 6)
(5, 121, 7)
(5, 122, 0)
(5, 122, 1)
(5, 122, 2)
(5, 122, 3)
(5, 122, 4)
(5, 122, 5)
(5, 122, 6)
(5, 122, 7)
(5, 123, 0)
(5, 123, 1)
(5, 123, 2)
(5, 123, 3)
(5, 123, 4)
(5, 123, 5)
(5, 123, 6)
(5, 123, 7)
(5, 124, 0)
(5, 124, 1)
(5, 124, 2)
(5, 124, 3)
(5, 124, 4)
(5, 124, 5)
(5, 124, 6)
(5, 124, 7)
(5, 125, 0)
(5, 125, 1)
(5, 125, 2)
(5, 125, 3)
(5, 125, 4)
(5, 125, 5)
(5, 125, 6)
(5, 125, 7)
(5, 126, 0)
(5, 126, 1)
(5, 126, 2)
(5, 126, 3)
(5, 126, 4)
(5, 126, 5)
(5, 126, 6)
(5, 126, 7)
(5, 127, 0)
(5, 127, 1)
(5, 127, 2)
(5, 127, 3)
(5, 127, 4)
(5, 127, 5)
(5, 127, 6)
(5, 127, 7)
(5, 128, 0)
(5, 128, 1)
(5, 128, 2)
(5, 128, 3)
(5, 128, 4)
(5, 128, 5)
(5, 128, 6)
(5, 128, 7)
(5, 129, 0)
(5, 129, 1)
(5, 129, 2)
(5, 129, 3)
(5, 129, 4)
(5, 129, 5)
(5, 129, 6)
(5, 129, 7)
(5, 130, 0)
(5, 130, 1)
(5, 130, 2)
(5, 130, 3)
(5, 130, 4)
(5, 130, 5)
(5, 130, 6)
(5, 130, 7)
(5, 131, 0)
(5, 131, 1)
(5, 131, 2)
(5, 131, 3)
(5, 131, 4)
(5, 131, 5)
(5, 131, 6)
(5, 131, 7)
(5, 132, 0)
(5, 132, 1)
(5, 132, 2)
(5, 132, 3)
(5, 132, 4)
(5, 132, 5)
(5, 132, 6)
(5, 132, 7)
(5, 133, 0)
(5, 133, 1)
(5, 133, 2)
(5, 133, 3)
(5, 133, 4)
(5, 133, 5)
(5, 133, 6)
(5, 133, 7)
(5, 134, 0)
(5, 134, 1)
(5, 134, 2)
(5, 134, 3)
(5, 134, 4)
(5, 134, 5)
(5, 134, 6)
(5, 134, 7)
(5, 135, 0)
(5, 135, 1)
(5, 135, 2)
(5, 135, 3)
(5, 135, 4)
(5, 135, 5)
(5, 135, 6)
(5, 135, 7)
(5, 136, 0)
(5, 136, 1)
(5, 136, 2)
(5, 136, 3)
(5, 136, 4)
(5, 136, 5)
(5, 136, 6)
(5, 136, 7)
(5, 137, 0)
(5, 137, 1)
(5, 137, 2)
(5, 137, 3)
(5, 137, 4)
(5, 137, 5)
(5, 137, 6)
(5, 137, 7)
(5, 138, 0)
(5, 138, 1)
(5, 138, 2)
(5, 138, 3)
(5, 138, 4)
(5, 138, 5)
(5, 138, 6)
(5, 138, 7)
(5, 139, 0)
(5, 139, 1)
(5, 139, 2)
(5, 139, 3)
(5, 139, 4)
(5, 139, 5)
(5, 139, 6)
(5, 139, 7)
(5, 140, 0)
(5, 140, 1)
(5, 140, 2)
(5, 140, 3)
(5, 140, 4)
(5, 140, 5)
(5, 140, 6)
(5, 140, 7)
(5, 141, 0)
(5, 141, 1)
(5, 141, 2)
(5, 141, 3)
(5, 141, 4)
(5, 141, 5)
(5, 141, 6)
(5, 141, 7)
(5, 142, 0)
(5, 142, 1)
(5, 142, 2)
(5, 142, 3)
(5, 142, 4)
(5, 142, 5)
(5, 142, 6)
(5, 142, 7)
(5, 143, 0)
(5, 143, 1)
(5, 143, 2)
(5, 143, 3)
(5, 143, 4)
(5, 143, 5)
(5, 143, 6)
(5, 143, 7)
(5, 144, 0)
(5, 144, 1)
(5, 144, 2)
(5, 144, 3)
(5, 144, 4)
(5, 144, 5)
(5, 144, 6)
(5, 144, 7)
(5, 145, 0)
(5, 145, 1)
(5, 145, 2)
(5, 145, 3)
(5, 145, 4)
(5, 145, 5)
(5, 145, 6)
(5, 145, 7)
(5, 146, 0)
(5, 146, 1)
(5, 146, 2)
(5, 146, 3)
(5, 146, 4)
(5, 146, 5)
(5, 146, 6)
(5, 146, 7)
(5, 147, 0)
(5, 147, 1)
(5, 147, 2)
(5, 147, 3)
(5, 147, 4)
(5, 147, 5)
(5, 147, 6)
(5, 147, 7)
(5, 148, 0)
(5, 148, 1)
(5, 148, 2)
(5, 148, 3)
(5, 148, 4)
(5, 148, 5)
(5, 148, 6)
(5, 148, 7)
(5, 149, 0)
(5, 149, 1)
(5, 149, 2)
(5, 149, 3)
(5, 149, 4)
(5, 149, 5)
(5, 149, 6)
(5, 149, 7)
(5, 150, 0)
(5, 150, 1)
(5, 150, 2)
(5, 150, 3)
(5, 150, 4)
(5, 150, 5)
(5, 150, 6)
(5, 150, 7)
(5, 151, 0)
(5, 151, 1)
(5, 151, 2)
(5, 151, 3)
(5, 151, 4)
(5, 151, 5)
(5, 151, 6)
(5, 151, 7)
(5, 152, 0)
(5, 152, 1)
(5, 152, 2)
(5, 152, 3)
(5, 152, 4)
(5, 152, 5)
(5, 152, 6)
(5, 152, 7)
(5, 153, 0)
(5, 153, 1)
(5, 153, 2)
(5, 153, 3)
(5, 153, 4)
(5, 153, 5)
(5, 153, 6)
(5, 153, 7)
(5, 154, 0)
(5, 154, 1)
(5, 154, 2)
(5, 154, 3)
(5, 154, 4)
(5, 154, 5)
(5, 154, 6)
(5, 154, 7)
(5, 155, 0)
(5, 155, 1)
(5, 155, 2)
(5, 155, 3)
(5, 155, 4)
(5, 155, 5)
(5, 155, 6)
(5, 155, 7)
(5, 156, 0)
(5, 156, 1)
(5, 156, 2)
(5, 156, 3)
(5, 156, 4)
(5, 156, 5)
(5, 156, 6)
(5, 156, 7)
(5, 157, 0)
(5, 157, 1)
(5, 157, 2)
(5, 157, 3)
(5, 157, 4)
(5, 157, 5)
(5, 157, 6)
(5, 157, 7)
(5, 158, 0)
(5, 158, 1)
(5, 158, 2)
(5, 158, 3)
(5, 158, 4)
(5, 158, 5)
(5, 158, 6)
(5, 158, 7)
(5, 159, 0)
(5, 159, 1)
(5, 159, 2)
(5, 159, 3)
(5, 159, 4)
(5, 159, 5)
(5, 159, 6)
(5, 159, 7)
(5, 160, 0)
(5, 160, 1)
(5, 160, 2)
(5, 160, 3)
(5, 160, 4)
(5, 160, 5)
(5, 160, 6)
(5, 160, 7)
(5, 161, 0)
(5, 161, 1)
(5, 161, 2)
(5, 161, 3)
(5, 161, 4)
(5, 161, 5)
(5, 161, 6)
(5, 161, 7)
(5, 162, 0)
(5, 162, 1)
(5, 162, 2)
(5, 162, 3)
(5, 162, 4)
(5, 162, 5)
(5, 162, 6)
(5, 162, 7)
(5, 163, 0)
(5, 163, 1)
(5, 163, 2)
(5, 163, 3)
(5, 163, 4)
(5, 163, 5)
(5, 163, 6)
(5, 163, 7)
(5, 164, 0)
(5, 164, 1)
(5, 164, 2)
(5, 164, 3)
(5, 164, 4)
(5, 164, 5)
(5, 164, 6)
(5, 164, 7)
(5, 165, 0)
(5, 165, 1)
(5, 165, 2)
(5, 165, 3)
(5, 165, 4)
(5, 165, 5)
(5, 165, 6)
(5, 165, 7)
(5, 166, 0)
(5, 166, 1)
(5, 166, 2)
(5, 166, 3)
(5, 166, 4)
(5, 166, 5)
(5, 166, 6)
(5, 166, 7)
(5, 167, 0)
(5, 167, 1)
(5, 167, 2)
(5, 167, 3)
(5, 167, 4)
(5, 167, 5)
(5, 167, 6)
(5, 167, 7)
(5, 168, 0)
(5, 168, 1)
(5, 168, 2)
(5, 168, 3)
(5, 168, 4)
(5, 168, 5)
(5, 168, 6)
(5, 168, 7)
(5, 169, 0)
(5, 169, 1)
(5, 169, 2)
(5, 169, 3)
(5, 169, 4)
(5, 169, 5)
(5, 169, 6)
(5, 169, 7)
(5, 170, 0)
(5, 170, 1)
(5, 170, 2)
(5, 170, 3)
(5, 170, 4)
(5, 170, 5)
(5, 170, 6)
(5, 170, 7)
(5, 171, 0)
(5, 171, 1)
(5, 171, 2)
(5, 171, 3)
(5, 171, 4)
(5, 171, 5)
(5, 171, 6)
(5, 171, 7)
(5, 172, 0)
(5, 172, 1)
(5, 172, 2)
(5, 172, 3)
(5, 172, 4)
(5, 172, 5)
(5, 172, 6)
(5, 172, 7)
(5, 173, 0)
(5, 173, 1)
(5, 173, 2)
(5, 173, 3)
(5, 173, 4)
(5, 173, 5)
(5, 173, 6)
(5, 173, 7)
(5, 174, 0)
(5, 174, 1)
(5, 174, 2)
(5, 174, 3)
(5, 174, 4)
(5, 174, 5)
(5, 174, 6)
(5, 174, 7)
(5, 175, 0)
(5, 175, 1)
(5, 175, 2)
(5, 175, 3)
(5, 175, 4)
(5, 175, 5)
(5, 175, 6)
(5, 175, 7)
(5, 176, 0)
(5, 176, 1)
(5, 176, 2)
(5, 176, 3)
(5, 176, 4)
(5, 176, 5)
(5, 176, 6)
(5, 176, 7)
(5, 177, 0)
(5, 177, 1)
(5, 177, 2)
(5, 177, 3)
(5, 177, 4)
(5, 177, 5)
(5, 177, 6)
(5, 177, 7)
(5, 178, 0)
(5, 178, 1)
(5, 178, 2)
(5, 178, 3)
(5, 178, 4)
(5, 178, 5)
(5, 178, 6)
(5, 178, 7)
(5, 179, 0)
(5, 179, 1)
(5, 179, 2)
(5, 179, 3)
(5, 179, 4)
(5, 179, 5)
(5, 179, 6)
(5, 179, 7)
(5, 180, 0)
(5, 180, 1)
(5, 180, 2)
(5, 180, 3)
(5, 180, 4)
(5, 180, 5)
(5, 180, 6)
(5, 180, 7)
(5, 181, 0)
(5, 181, 1)
(5, 181, 2)
(5, 181, 3)
(5, 181, 4)
(5, 181, 5)
(5, 181, 6)
(5, 181, 7)
(5, 182, 0)
(5, 182, 1)
(5, 182, 2)
(5, 182, 3)
(5, 182, 4)
(5, 182, 5)
(5, 182, 6)
(5, 182, 7)
(5, 183, 0)
(5, 183, 1)
(5, 183, 2)
(5, 183, 3)
(5, 183, 4)
(5, 183, 5)
(5, 183, 6)
(5, 183, 7)
(5, 184, 0)
(5, 184, 1)
(5, 184, 2)
(5, 184, 3)
(5, 184, 4)
(5, 184, 5)
(5, 184, 6)
(5, 184, 7)
(5, 185, 0)
(5, 185, 1)
(5, 185, 2)
(5, 185, 3)
(5, 185, 4)
(5, 185, 5)
(5, 185, 6)
(5, 185, 7)
(5, 186, 0)
(5, 186, 1)
(5, 186, 2)
(5, 186, 3)
(5, 186, 4)
(5, 186, 5)
(5, 186, 6)
(5, 186, 7)
(5, 187, 0)
(5, 187, 1)
(5, 187, 2)
(5, 187, 3)
(5, 187, 4)
(5, 187, 5)
(5, 187, 6)
(5, 187, 7)
(5, 188, 0)
(5, 188, 1)
(5, 188, 2)
(5, 188, 3)
(5, 188, 4)
(5, 188, 5)
(5, 188, 6)
(5, 188, 7)
(5, 189, 0)
(5, 189, 1)
(5, 189, 2)
(5, 189, 3)
(5, 189, 4)
(5, 189, 5)
(5, 189, 6)
(5, 189, 7)
(5, 190, 0)
(5, 190, 1)
(5, 190, 2)
(5, 190, 3)
(5, 190, 4)
(5, 190, 5)
(5, 190, 6)
(5, 190, 7)
(5, 191, 0)
(5, 191, 1)
(5, 191, 2)
(5, 191, 3)
(5, 191, 4)
(5, 191, 5)
(5, 191, 6)
(5, 191, 7)
(5, 192, 0)
(5, 192, 1)
(5, 192, 2)
(5, 192, 3)
(5, 192, 4)
(5, 192, 5)
(5, 192, 6)
(5, 192, 7)
(5, 193, 0)
(5, 193, 1)
(5, 193, 2)
(5, 193, 3)
(5, 193, 4)
(5, 193, 5)
(5, 193, 6)
(5, 193, 7)
(5, 194, 0)
(5, 194, 1)
(5, 194, 2)
(5, 194, 3)
(5, 194, 4)
(5, 194, 5)
(5, 194, 6)
(5, 194, 7)
(5, 195, 0)
(5, 195, 1)
(5, 195, 2)
(5, 195, 3)
(5, 195, 4)
(5, 195, 5)
(5, 195, 6)
(5, 195, 7)
(5, 196, 0)
(5, 196, 1)
(5, 196, 2)
(5, 196, 3)
(5, 196, 4)
(5, 196, 5)
(5, 196, 6)
(5, 196, 7)
(5, 197, 0)
(5, 197, 1)
(5, 197, 2)
(5, 197, 3)
(5, 197, 4)
(5, 197, 5)
(5, 197, 6)
(5, 197, 7)
(5, 198, 0)
(5, 198, 1)
(5, 198, 2)
(5, 198, 3)
(5, 198, 4)
(5, 198, 5)
(5, 198, 6)
(5, 198, 7)
(5, 199, 0)
(5, 199, 1)
(5, 199, 2)
(5, 199, 3)
(5, 199, 4)
(5, 199, 5)
(5, 199, 6)
(5, 199, 7)
(5, 200, 0)
(5, 200, 1)
(5, 200, 2)
(5, 200, 3)
(5, 200, 4)
(5, 200, 5)
(5, 200, 6)
(5, 200, 7)
(5, 201, 0)
(5, 201, 1)
(5, 201, 2)
(5, 201, 3)
(5, 201, 4)
(5, 201, 5)
(5, 201, 6)
(5, 201, 7)
(5, 202, 0)
(5, 202, 1)
(5, 202, 2)
(5, 202, 3)
(5, 202, 4)
(5, 202, 5)
(5, 202, 6)
(5, 202, 7)
(5, 203, 0)
(5, 203, 1)
(5, 203, 2)
(5, 203, 3)
(5, 203, 4)
(5, 203, 5)
(5, 203, 6)
(5, 203, 7)
(5, 204, 0)
(5, 204, 1)
(5, 204, 2)
(5, 204, 3)
(5, 204, 4)
(5, 204, 5)
(5, 204, 6)
(5, 204, 7)
(5, 205, 0)
(5, 205, 1)
(5, 205, 2)
(5, 205, 3)
(5, 205, 4)
(5, 205, 5)
(5, 205, 6)
(5, 205, 7)
(5, 206, 0)
(5, 206, 1)
(5, 206, 2)
(5, 206, 3)
(5, 206, 4)
(5, 206, 5)
(5, 206, 6)
(5, 206, 7)
(5, 207, 0)
(5, 207, 1)
(5, 207, 2)
(5, 207, 3)
(5, 207, 4)
(5, 207, 5)
(5, 207, 6)
(5, 207, 7)
(5, 208, 0)
(5, 208, 1)
(5, 208, 2)
(5, 208, 3)
(5, 208, 4)
(5, 208, 5)
(5, 208, 6)
(5, 208, 7)
(5, 209, 0)
(5, 209, 1)
(5, 209, 2)
(5, 209, 3)
(5, 209, 4)
(5, 209, 5)
(5, 209, 6)
(5, 209, 7)
(5, 210, 0)
(5, 210, 1)
(5, 210, 2)
(5, 210, 3)
(5, 210, 4)
(5, 210, 5)
(5, 210, 6)
(5, 210, 7)
(5, 211, 0)
(5, 211, 1)
(5, 211, 2)
(5, 211, 3)
(5, 211, 4)
(5, 211, 5)
(5, 211, 6)
(5, 211, 7)
(5, 212, 0)
(5, 212, 1)
(5, 212, 2)
(5, 212, 3)
(5, 212, 4)
(5, 212, 5)
(5, 212, 6)
(5, 212, 7)
(5, 213, 0)
(5, 213, 1)
(5, 213, 2)
(5, 213, 3)
(5, 213, 4)
(5, 213, 5)
(5, 213, 6)
(5, 213, 7)
(5, 214, 0)
(5, 214, 1)
(5, 214, 2)
(5, 214, 3)
(5, 214, 4)
(5, 214, 5)
(5, 214, 6)
(5, 214, 7)
(5, 215, 0)
(5, 215, 1)
(5, 215, 2)
(5, 215, 3)
(5, 215, 4)
(5, 215, 5)
(5, 215, 6)
(5, 215, 7)
(5, 216, 0)
(5, 216, 1)
(5, 216, 2)
(5, 216, 3)
(5, 216, 4)
(5, 216, 5)
(5, 216, 6)
(5, 216, 7)
(5, 217, 0)
(5, 217, 1)
(5, 217, 2)
(5, 217, 3)
(5, 217, 4)
(5, 217, 5)
(5, 217, 6)
(5, 217, 7)
(5, 218, 0)
(5, 218, 1)
(5, 218, 2)
(5, 218, 3)
(5, 218, 4)
(5, 218, 5)
(5, 218, 6)
(5, 218, 7)
(5, 219, 0)
(5, 219, 1)
(5, 219, 2)
(5, 219, 3)
(5, 219, 4)
(5, 219, 5)
(5, 219, 6)
(5, 219, 7)
(5, 220, 0)
(5, 220, 1)
(5, 220, 2)
(5, 220, 3)
(5, 220, 4)
(5, 220, 5)
(5, 220, 6)
(5, 220, 7)
(5, 221, 0)
(5, 221, 1)
(5, 221, 2)
(5, 221, 3)
(5, 221, 4)
(5, 221, 5)
(5, 221, 6)
(5, 221, 7)
(5, 222, 0)
(5, 222, 1)
(5, 222, 2)
(5, 222, 3)
(5, 222, 4)
(5, 222, 5)
(5, 222, 6)
(5, 222, 7)
(5, 223, 0)
(5, 223, 1)
(5, 223, 2)
(5, 223, 3)
(5, 223, 4)
(5, 223, 5)
(5, 223, 6)
(5, 223, 7)
(5, 224, 0)
(5, 224, 1)
(5, 224, 2)
(5, 224, 3)
(5, 224, 4)
(5, 224, 5)
(5, 224, 6)
(5, 224, 7)
(5, 225, 0)
(5, 225, 1)
(5, 225, 2)
(5, 225, 3)
(5, 225, 4)
(5, 225, 5)
(5, 225, 6)
(5, 225, 7)
(5, 226, 0)
(5, 226, 1)
(5, 226, 2)
(5, 226, 3)
(5, 226, 4)
(5, 226, 5)
(5, 226, 6)
(5, 226, 7)
(5, 227, 0)
(5, 227, 1)
(5, 227, 2)
(5, 227, 3)
(5, 227, 4)
(5, 227, 5)
(5, 227, 6)
(5, 227, 7)
(5, 228, 0)
(5, 228, 1)
(5, 228, 2)
(5, 228, 3)
(5, 228, 4)
(5, 228, 5)
(5, 228, 6)
(5, 228, 7)
(5, 229, 0)
(5, 229, 1)
(5, 229, 2)
(5, 229, 3)
(5, 229, 4)
(5, 229, 5)
(5, 229, 6)
(5, 229, 7)
(5, 230, 0)
(5, 230, 1)
(5, 230, 2)
(5, 230, 3)
(5, 230, 4)
(5, 230, 5)
(5, 230, 6)
(5, 230, 7)
(5, 231, 0)
(5, 231, 1)
(5, 231, 2)
(5, 231, 3)
(5, 231, 4)
(5, 231, 5)
(5, 231, 6)
(5, 231, 7)
(5, 232, 0)
(5, 232, 1)
(5, 232, 2)
(5, 232, 3)
(5, 232, 4)
(5, 232, 5)
(5, 232, 6)
(5, 232, 7)
(5, 233, 0)
(5, 233, 1)
(5, 233, 2)
(5, 233, 3)
(5, 233, 4)
(5, 233, 5)
(5, 233, 6)
(5, 233, 7)
(5, 234, 0)
(5, 234, 1)
(5, 234, 2)
(5, 234, 3)
(5, 234, 4)
(5, 234, 5)
(5, 234, 6)
(5, 234, 7)
(5, 235, 0)
(5, 235, 1)
(5, 235, 2)
(5, 235, 3)
(5, 235, 4)
(5, 235, 5)
(5, 235, 6)
(5, 235, 7)
(5, 236, 0)
(5, 236, 1)
(5, 236, 2)
(5, 236, 3)
(5, 236, 4)
(5, 236, 5)
(5, 236, 6)
(5, 236, 7)
(5, 237, 0)
(5, 237, 1)
(5, 237, 2)
(5, 237, 3)
(5, 237, 4)
(5, 237, 5)
(5, 237, 6)
(5, 237, 7)
(5, 238, 0)
(5, 238, 1)
(5, 238, 2)
(5, 238, 3)
(5, 238, 4)
(5, 238, 5)
(5, 238, 6)
(5, 238, 7)
(5, 239, 0)
(5, 239, 1)
(5, 239, 2)
(5, 239, 3)
(5, 239, 4)
(5, 239, 5)
(5, 239, 6)
(5, 239, 7)
(5, 240, 0)
(5, 240, 1)
(5, 240, 2)
(5, 240, 3)
(5, 240, 4)
(5, 240, 5)
(5, 240, 6)
(5, 240, 7)
(5, 241, 0)
(5, 241, 1)
(5, 241, 2)
(5, 241, 3)
(5, 241, 4)
(5, 241, 5)
(5, 241, 6)
(5, 241, 7)
(5, 242, 0)
(5, 242, 1)
(5, 242, 2)
(5, 242, 3)
(5, 242, 4)
(5, 242, 5)
(5, 242, 6)
(5, 242, 7)
(5, 243, 0)
(5, 243, 1)
(5, 243, 2)
(5, 243, 3)
(5, 243, 4)
(5, 243, 5)
(5, 243, 6)
(5, 243, 7)
(5, 244, 0)
(5, 244, 1)
(5, 244, 2)
(5, 244, 3)
(5, 244, 4)
(5, 244, 5)
(5, 244, 6)
(5, 244, 7)
(5, 245, 0)
(5, 245, 1)
(5, 245, 2)
(5, 245, 3)
(5, 245, 4)
(5, 245, 5)
(5, 245, 6)
(5, 245, 7)
(5, 246, 0)
(5, 246, 1)
(5, 246, 2)
(5, 246, 3)
(5, 246, 4)
(5, 246, 5)
(5, 246, 6)
(5, 246, 7)
(5, 247, 0)
(5, 247, 1)
(5, 247, 2)
(5, 247, 3)
(5, 247, 4)
(5, 247, 5)
(5, 247, 6)
(5, 247, 7)
(5, 248, 0)
(5, 248, 1)
(5, 248, 2)
(5, 248, 3)
(5, 248, 4)
(5, 248, 5)
(5, 248, 6)
(5, 248, 7)
(5, 249, 0)
(5, 249, 1)
(5, 249, 2)
(5, 249, 3)
(5, 249, 4)
(5, 249, 5)
(5, 249, 6)
(5, 249, 7)
(5, 250, 0)
(5, 250, 1)
(5, 250, 2)
(5, 250, 3)
(5, 250, 4)
(5, 250, 5)
(5, 250, 6)
(5, 250, 7)
(5, 251, 0)
(5, 251, 1)
(5, 251, 2)
(5, 251, 3)
(5, 251, 4)
(5, 251, 5)
(5, 251, 6)
(5, 251, 7)
(5, 252, 0)
(5, 252, 1)
(5, 252, 2)
(5, 252, 3)
(5, 252, 4)
(5, 252, 5)
(5, 252, 6)
(5, 252, 7)
(5, 253, 0)
(5, 253, 1)
(5, 253, 2)
(5, 253, 3)
(5, 253, 4)
(5, 253, 5)
(5, 253, 6)
(5, 253, 7)
(5, 254, 0)
(5, 254, 1)
(5, 254, 2)
(5, 254, 3)
(5, 254, 4)
(5, 254, 5)
(5, 254, 6)
(5, 254, 7)
(5, 255, 0)
(5, 255, 1)
(5, 255, 2)
(5, 255, 3)
(5, 255, 4)
(5, 255, 5)
(5, 255, 6)
(5, 255, 7)
(6, 0, 0)
(6, 0, 1)
(6, 0, 2)
(6, 0, 3)
(6, 0, 4)
(6, 0, 5)
(6, 0, 6)
(6, 0, 7)
(6, 1, 0)
(6, 1, 1)
(6, 1, 2)
(6, 1, 3)
(6, 1, 4)
(6, 1, 5)
(6, 1, 6)
(6, 1, 7)
(6, 2, 0)
(6, 2, 1)
(6, 2, 2)
(6, 2, 3)
(6, 2, 4)
(6, 2, 5)
(6, 2, 6)
(6, 2, 7)
(6, 3, 0)
(6, 3, 1)
(6, 3, 2)
(6, 3, 3)
(6, 3, 4)
(6, 3, 5)
(6, 3, 6)
(6, 3, 7)
(6, 4, 0)
(6, 4, 1)
(6, 4, 2)
(6, 4, 3)
(6, 4, 4)
(6, 4, 5)
(6, 4, 6)
(6, 4, 7)
(6, 5, 0)
(6, 5, 1)
(6, 5, 2)
(6, 5, 3)
(6, 5, 4)
(6, 5, 5)
(6, 5, 6)
(6, 5, 7)
(6, 6, 0)
(6, 6, 1)
(6, 6, 2)
(6, 6, 3)
(6, 6, 4)
(6, 6, 5)
(6, 6, 6)
(6, 6, 7)
(6, 7, 0)
(6, 7, 1)
(6, 7, 2)
(6, 7, 3)
(6, 7, 4)
(6, 7, 5)
(6, 7, 6)
(6, 7, 7)
(6, 8, 0)
(6, 8, 1)
(6, 8, 2)
(6, 8, 3)
(6, 8, 4)
(6, 8, 5)
(6, 8, 6)
(6, 8, 7)
(6, 9, 0)
(6, 9, 1)
(6, 9, 2)
(6, 9, 3)
(6, 9, 4)
(6, 9, 5)
(6, 9, 6)
(6, 9, 7)
(6, 10, 0)
(6, 10, 1)
(6, 10, 2)
(6, 10, 3)
(6, 10, 4)
(6, 10, 5)
(6, 10, 6)
(6, 10, 7)
(6, 11, 0)
(6, 11, 1)
(6, 11, 2)
(6, 11, 3)
(6, 11, 4)
(6, 11, 5)
(6, 11, 6)
(6, 11, 7)
(6, 12, 0)
(6, 12, 1)
(6, 12, 2)
(6, 12, 3)
(6, 12, 4)
(6, 12, 5)
(6, 12, 6)
(6, 12, 7)
(6, 13, 0)
(6, 13, 1)
(6, 13, 2)
(6, 13, 3)
(6, 13, 4)
(6, 13, 5)
(6, 13, 6)
(6, 13, 7)
(6, 14, 0)
(6, 14, 1)
(6, 14, 2)
(6, 14, 3)
(6, 14, 4)
(6, 14, 5)
(6, 14, 6)
(6, 14, 7)
(6, 15, 0)
(6, 15, 1)
(6, 15, 2)
(6, 15, 3)
(6, 15, 4)
(6, 15, 5)
(6, 15, 6)
(6, 15, 7)
(6, 16, 0)
(6, 16, 1)
(6, 16, 2)
(6, 16, 3)
(6, 16, 4)
(6, 16, 5)
(6, 16, 6)
(6, 16, 7)
(6, 17, 0)
(6, 17, 1)
(6, 17, 2)
(6, 17, 3)
(6, 17, 4)
(6, 17, 5)
(6, 17, 6)
(6, 17, 7)
(6, 18, 0)
(6, 18, 1)
(6, 18, 2)
(6, 18, 3)
(6, 18, 4)
(6, 18, 5)
(6, 18, 6)
(6, 18, 7)
(6, 19, 0)
(6, 19, 1)
(6, 19, 2)
(6, 19, 3)
(6, 19, 4)
(6, 19, 5)
(6, 19, 6)
(6, 19, 7)
(6, 20, 0)
(6, 20, 1)
(6, 20, 2)
(6, 20, 3)
(6, 20, 4)
(6, 20, 5)
(6, 20, 6)
(6, 20, 7)
(6, 21, 0)
(6, 21, 1)
(6, 21, 2)
(6, 21, 3)
(6, 21, 4)
(6, 21, 5)
(6, 21, 6)
(6, 21, 7)
(6, 22, 0)
(6, 22, 1)
(6, 22, 2)
(6, 22, 3)
(6, 22, 4)
(6, 22, 5)
(6, 22, 6)
(6, 22, 7)
(6, 23, 0)
(6, 23, 1)
(6, 23, 2)
(6, 23, 3)
(6, 23, 4)
(6, 23, 5)
(6, 23, 6)
(6, 23, 7)
(6, 24, 0)
(6, 24, 1)
(6, 24, 2)
(6, 24, 3)
(6, 24, 4)
(6, 24, 5)
(6, 24, 6)
(6, 24, 7)
(6, 25, 0)
(6, 25, 1)
(6, 25, 2)
(6, 25, 3)
(6, 25, 4)
(6, 25, 5)
(6, 25, 6)
(6, 25, 7)
(6, 26, 0)
(6, 26, 1)
(6, 26, 2)
(6, 26, 3)
(6, 26, 4)
(6, 26, 5)
(6, 26, 6)
(6, 26, 7)
(6, 27, 0)
(6, 27, 1)
(6, 27, 2)
(6, 27, 3)
(6, 27, 4)
(6, 27, 5)
(6, 27, 6)
(6, 27, 7)
(6, 28, 0)
(6, 28, 1)
(6, 28, 2)
(6, 28, 3)
(6, 28, 4)
(6, 28, 5)
(6, 28, 6)
(6, 28, 7)
(6, 29, 0)
(6, 29, 1)
(6, 29, 2)
(6, 29, 3)
(6, 29, 4)
(6, 29, 5)
(6, 29, 6)
(6, 29, 7)
(6, 30, 0)
(6, 30, 1)
(6, 30, 2)
(6, 30, 3)
(6, 30, 4)
(6, 30, 5)
(6, 30, 6)
(6, 30, 7)
(6, 31, 0)
(6, 31, 1)
(6, 31, 2)
(6, 31, 3)
(6, 31, 4)
(6, 31, 5)
(6, 31, 6)
(6, 31, 7)
(6, 32, 0)
(6, 32, 1)
(6, 32, 2)
(6, 32, 3)
(6, 32, 4)
(6, 32, 5)
(6, 32, 6)
(6, 32, 7)
(6, 33, 0)
(6, 33, 1)
(6, 33, 2)
(6, 33, 3)
(6, 33, 4)
(6, 33, 5)
(6, 33, 6)
(6, 33, 7)
(6, 34, 0)
(6, 34, 1)
(6, 34, 2)
(6, 34, 3)
(6, 34, 4)
(6, 34, 5)
(6, 34, 6)
(6, 34, 7)
(6, 35, 0)
(6, 35, 1)
(6, 35, 2)
(6, 35, 3)
(6, 35, 4)
(6, 35, 5)
(6, 35, 6)
(6, 35, 7)
(6, 36, 0)
(6, 36, 1)
(6, 36, 2)
(6, 36, 3)
(6, 36, 4)
(6, 36, 5)
(6, 36, 6)
(6, 36, 7)
(6, 37, 0)
(6, 37, 1)
(6, 37, 2)
(6, 37, 3)
(6, 37, 4)
(6, 37, 5)
(6, 37, 6)
(6, 37, 7)
(6, 38, 0)
(6, 38, 1)
(6, 38, 2)
(6, 38, 3)
(6, 38, 4)
(6, 38, 5)
(6, 38, 6)
(6, 38, 7)
(6, 39, 0)
(6, 39, 1)
(6, 39, 2)
(6, 39, 3)
(6, 39, 4)
(6, 39, 5)
(6, 39, 6)
(6, 39, 7)
(6, 40, 0)
(6, 40, 1)
(6, 40, 2)
(6, 40, 3)
(6, 40, 4)
(6, 40, 5)
(6, 40, 6)
(6, 40, 7)
(6, 41, 0)
(6, 41, 1)
(6, 41, 2)
(6, 41, 3)
(6, 41, 4)
(6, 41, 5)
(6, 41, 6)
(6, 41, 7)
(6, 42, 0)
(6, 42, 1)
(6, 42, 2)
(6, 42, 3)
(6, 42, 4)
(6, 42, 5)
(6, 42, 6)
(6, 42, 7)
(6, 43, 0)
(6, 43, 1)
(6, 43, 2)
(6, 43, 3)
(6, 43, 4)
(6, 43, 5)
(6, 43, 6)
(6, 43, 7)
(6, 44, 0)
(6, 44, 1)
(6, 44, 2)
(6, 44, 3)
(6, 44, 4)
(6, 44, 5)
(6, 44, 6)
(6, 44, 7)
(6, 45, 0)
(6, 45, 1)
(6, 45, 2)
(6, 45, 3)
(6, 45, 4)
(6, 45, 5)
(6, 45, 6)
(6, 45, 7)
(6, 46, 0)
(6, 46, 1)
(6, 46, 2)
(6, 46, 3)
(6, 46, 4)
(6, 46, 5)
(6, 46, 6)
(6, 46, 7)
(6, 47, 0)
(6, 47, 1)
(6, 47, 2)
(6, 47, 3)
(6, 47, 4)
(6, 47, 5)
(6, 47, 6)
(6, 47, 7)
(6, 48, 0)
(6, 48, 1)
(6, 48, 2)
(6, 48, 3)
(6, 48, 4)
(6, 48, 5)
(6, 48, 6)
(6, 48, 7)
(6, 49, 0)
(6, 49, 1)
(6, 49, 2)
(6, 49, 3)
(6, 49, 4)
(6, 49, 5)
(6, 49, 6)
(6, 49, 7)
(6, 50, 0)
(6, 50, 1)
(6, 50, 2)
(6, 50, 3)
(6, 50, 4)
(6, 50, 5)
(6, 50, 6)
(6, 50, 7)
(6, 51, 0)
(6, 51, 1)
(6, 51, 2)
(6, 51, 3)
(6, 51, 4)
(6, 51, 5)
(6, 51, 6)
(6, 51, 7)
(6, 52, 0)
(6, 52, 1)
(6, 52, 2)
(6, 52, 3)
(6, 52, 4)
(6, 52, 5)
(6, 52, 6)
(6, 52, 7)
(6, 53, 0)
(6, 53, 1)
(6, 53, 2)
(6, 53, 3)
(6, 53, 4)
(6, 53, 5)
(6, 53, 6)
(6, 53, 7)
(6, 54, 0)
(6, 54, 1)
(6, 54, 2)
(6, 54, 3)
(6, 54, 4)
(6, 54, 5)
(6, 54, 6)
(6, 54, 7)
(6, 55, 0)
(6, 55, 1)
(6, 55, 2)
(6, 55, 3)
(6, 55, 4)
(6, 55, 5)
(6, 55, 6)
(6, 55, 7)
(6, 56, 0)
(6, 56, 1)
(6, 56, 2)
(6, 56, 3)
(6, 56, 4)
(6, 56, 5)
(6, 56, 6)
(6, 56, 7)
(6, 57, 0)
(6, 57, 1)
(6, 57, 2)
(6, 57, 3)
(6, 57, 4)
(6, 57, 5)
(6, 57, 6)
(6, 57, 7)
(6, 58, 0)
(6, 58, 1)
(6, 58, 2)
(6, 58, 3)
(6, 58, 4)
(6, 58, 5)
(6, 58, 6)
(6, 58, 7)
(6, 59, 0)
(6, 59, 1)
(6, 59, 2)
(6, 59, 3)
(6, 59, 4)
(6, 59, 5)
(6, 59, 6)
(6, 59, 7)
(6, 60, 0)
(6, 60, 1)
(6, 60, 2)
(6, 60, 3)
(6, 60, 4)
(6, 60, 5)
(6, 60, 6)
(6, 60, 7)
(6, 61, 0)
(6, 61, 1)
(6, 61, 2)
(6, 61, 3)
(6, 61, 4)
(6, 61, 5)
(6, 61, 6)
(6, 61, 7)
(6, 62, 0)
(6, 62, 1)
(6, 62, 2)
(6, 62, 3)
(6, 62, 4)
(6, 62, 5)
(6, 62, 6)
(6, 62, 7)
(6, 63, 0)
(6, 63, 1)
(6, 63, 2)
(6, 63, 3)
(6, 63, 4)
(6, 63, 5)
(6, 63, 6)
(6, 63, 7)
(6, 64, 0)
(6, 64, 1)
(6, 64, 2)
(6, 64, 3)
(6, 64, 4)
(6, 64, 5)
(6, 64, 6)
(6, 64, 7)
(6, 65, 0)
(6, 65, 1)
(6, 65, 2)
(6, 65, 3)
(6, 65, 4)
(6, 65, 5)
(6, 65, 6)
(6, 65, 7)
(6, 66, 0)
(6, 66, 1)
(6, 66, 2)
(6, 66, 3)
(6, 66, 4)
(6, 66, 5)
(6, 66, 6)
(6, 66, 7)
(6, 67, 0)
(6, 67, 1)
(6, 67, 2)
(6, 67, 3)
(6, 67, 4)
(6, 67, 5)
(6, 67, 6)
(6, 67, 7)
(6, 68, 0)
(6, 68, 1)
(6, 68, 2)
(6, 68, 3)
(6, 68, 4)
(6, 68, 5)
(6, 68, 6)
(6, 68, 7)
(6, 69, 0)
(6, 69, 1)
(6, 69, 2)
(6, 69, 3)
(6, 69, 4)
(6, 69, 5)
(6, 69, 6)
(6, 69, 7)
(6, 70, 0)
(6, 70, 1)
(6, 70, 2)
(6, 70, 3)
(6, 70, 4)
(6, 70, 5)
(6, 70, 6)
(6, 70, 7)
(6, 71, 0)
(6, 71, 1)
(6, 71, 2)
(6, 71, 3)
(6, 71, 4)
(6, 71, 5)
(6, 71, 6)
(6, 71, 7)
(6, 72, 0)
(6, 72, 1)
(6, 72, 2)
(6, 72, 3)
(6, 72, 4)
(6, 72, 5)
(6, 72, 6)
(6, 72, 7)
(6, 73, 0)
(6, 73, 1)
(6, 73, 2)
(6, 73, 3)
(6, 73, 4)
(6, 73, 5)
(6, 73, 6)
(6, 73, 7)
(6, 74, 0)
(6, 74, 1)
(6, 74, 2)
(6, 74, 3)
(6, 74, 4)
(6, 74, 5)
(6, 74, 6)
(6, 74, 7)
(6, 75, 0)
(6, 75, 1)
(6, 75, 2)
(6, 75, 3)
(6, 75, 4)
(6, 75, 5)
(6, 75, 6)
(6, 75, 7)
(6, 76, 0)
(6, 76, 1)
(6, 76, 2)
(6, 76, 3)
(6, 76, 4)
(6, 76, 5)
(6, 76, 6)
(6, 76, 7)
(6, 77, 0)
(6, 77, 1)
(6, 77, 2)
(6, 77, 3)
(6, 77, 4)
(6, 77, 5)
(6, 77, 6)
(6, 77, 7)
(6, 78, 0)
(6, 78, 1)
(6, 78, 2)
(6, 78, 3)
(6, 78, 4)
(6, 78, 5)
(6, 78, 6)
(6, 78, 7)
(6, 79, 0)
(6, 79, 1)
(6, 79, 2)
(6, 79, 3)
(6, 79, 4)
(6, 79, 5)
(6, 79, 6)
(6, 79, 7)
(6, 80, 0)
(6, 80, 1)
(6, 80, 2)
(6, 80, 3)
(6, 80, 4)
(6, 80, 5)
(6, 80, 6)
(6, 80, 7)
(6, 81, 0)
(6, 81, 1)
(6, 81, 2)
(6, 81, 3)
(6, 81, 4)
(6, 81, 5)
(6, 81, 6)
(6, 81, 7)
(6, 82, 0)
(6, 82, 1)
(6, 82, 2)
(6, 82, 3)
(6, 82, 4)
(6, 82, 5)
(6, 82, 6)
(6, 82, 7)
(6, 83, 0)
(6, 83, 1)
(6, 83, 2)
(6, 83, 3)
(6, 83, 4)
(6, 83, 5)
(6, 83, 6)
(6, 83, 7)
(6, 84, 0)
(6, 84, 1)
(6, 84, 2)
(6, 84, 3)
(6, 84, 4)
(6, 84, 5)
(6, 84, 6)
(6, 84, 7)
(6, 85, 0)
(6, 85, 1)
(6, 85, 2)
(6, 85, 3)
(6, 85, 4)
(6, 85, 5)
(6, 85, 6)
(6, 85, 7)
(6, 86, 0)
(6, 86, 1)
(6, 86, 2)
(6, 86, 3)
(6, 86, 4)
(6, 86, 5)
(6, 86, 6)
(6, 86, 7)
(6, 87, 0)
(6, 87, 1)
(6, 87, 2)
(6, 87, 3)
(6, 87, 4)
(6, 87, 5)
(6, 87, 6)
(6, 87, 7)
(6, 88, 0)
(6, 88, 1)
(6, 88, 2)
(6, 88, 3)
(6, 88, 4)
(6, 88, 5)
(6, 88, 6)
(6, 88, 7)
(6, 89, 0)
(6, 89, 1)
(6, 89, 2)
(6, 89, 3)
(6, 89, 4)
(6, 89, 5)
(6, 89, 6)
(6, 89, 7)
(6, 90, 0)
(6, 90, 1)
(6, 90, 2)
(6, 90, 3)
(6, 90, 4)
(6, 90, 5)
(6, 90, 6)
(6, 90, 7)
(6, 91, 0)
(6, 91, 1)
(6, 91, 2)
(6, 91, 3)
(6, 91, 4)
(6, 91, 5)
(6, 91, 6)
(6, 91, 7)
(6, 92, 0)
(6, 92, 1)
(6, 92, 2)
(6, 92, 3)
(6, 92, 4)
(6, 92, 5)
(6, 92, 6)
(6, 92, 7)
(6, 93, 0)
(6, 93, 1)
(6, 93, 2)
(6, 93, 3)
(6, 93, 4)
(6, 93, 5)
(6, 93, 6)
(6, 93, 7)
(6, 94, 0)
(6, 94, 1)
(6, 94, 2)
(6, 94, 3)
(6, 94, 4)
(6, 94, 5)
(6, 94, 6)
(6, 94, 7)
(6, 95, 0)
(6, 95, 1)
(6, 95, 2)
(6, 95, 3)
(6, 95, 4)
(6, 95, 5)
(6, 95, 6)
(6, 95, 7)
(6, 96, 0)
(6, 96, 1)
(6, 96, 2)
(6, 96, 3)
(6, 96, 4)
(6, 96, 5)
(6, 96, 6)
(6, 96, 7)
(6, 97, 0)
(6, 97, 1)
(6, 97, 2)
(6, 97, 3)
(6, 97, 4)
(6, 97, 5)
(6, 97, 6)
(6, 97, 7)
(6, 98, 0)
(6, 98, 1)
(6, 98, 2)
(6, 98, 3)
(6, 98, 4)
(6, 98, 5)
(6, 98, 6)
(6, 98, 7)
(6, 99, 0)
(6, 99, 1)
(6, 99, 2)
(6, 99, 3)
(6, 99, 4)
(6, 99, 5)
(6, 99, 6)
(6, 99, 7)
(6, 100, 0)
(6, 100, 1)
(6, 100, 2)
(6, 100, 3)
(6, 100, 4)
(6, 100, 5)
(6, 100, 6)
(6, 100, 7)
(6, 101, 0)
(6, 101, 1)
(6, 101, 2)
(6, 101, 3)
(6, 101, 4)
(6, 101, 5)
(6, 101, 6)
(6, 101, 7)
(6, 102, 0)
(6, 102, 1)
(6, 102, 2)
(6, 102, 3)
(6, 102, 4)
(6, 102, 5)
(6, 102, 6)
(6, 102, 7)
(6, 103, 0)
(6, 103, 1)
(6, 103, 2)
(6, 103, 3)
(6, 103, 4)
(6, 103, 5)
(6, 103, 6)
(6, 103, 7)
(6, 104, 0)
(6, 104, 1)
(6, 104, 2)
(6, 104, 3)
(6, 104, 4)
(6, 104, 5)
(6, 104, 6)
(6, 104, 7)
(6, 105, 0)
(6, 105, 1)
(6, 105, 2)
(6, 105, 3)
(6, 105, 4)
(6, 105, 5)
(6, 105, 6)
(6, 105, 7)
(6, 106, 0)
(6, 106, 1)
(6, 106, 2)
(6, 106, 3)
(6, 106, 4)
(6, 106, 5)
(6, 106, 6)
(6, 106, 7)
(6, 107, 0)
(6, 107, 1)
(6, 107, 2)
(6, 107, 3)
(6, 107, 4)
(6, 107, 5)
(6, 107, 6)
(6, 107, 7)
(6, 108, 0)
(6, 108, 1)
(6, 108, 2)
(6, 108, 3)
(6, 108, 4)
(6, 108, 5)
(6, 108, 6)
(6, 108, 7)
(6, 109, 0)
(6, 109, 1)
(6, 109, 2)
(6, 109, 3)
(6, 109, 4)
(6, 109, 5)
(6, 109, 6)
(6, 109, 7)
(6, 110, 0)
(6, 110, 1)
(6, 110, 2)
(6, 110, 3)
(6, 110, 4)
(6, 110, 5)
(6, 110, 6)
(6, 110, 7)
(6, 111, 0)
(6, 111, 1)
(6, 111, 2)
(6, 111, 3)
(6, 111, 4)
(6, 111, 5)
(6, 111, 6)
(6, 111, 7)
(6, 112, 0)
(6, 112, 1)
(6, 112, 2)
(6, 112, 3)
(6, 112, 4)
(6, 112, 5)
(6, 112, 6)
(6, 112, 7)
(6, 113, 0)
(6, 113, 1)
(6, 113, 2)
(6, 113, 3)
(6, 113, 4)
(6, 113, 5)
(6, 113, 6)
(6, 113, 7)
(6, 114, 0)
(6, 114, 1)
(6, 114, 2)
(6, 114, 3)
(6, 114, 4)
(6, 114, 5)
(6, 114, 6)
(6, 114, 7)
(6, 115, 0)
(6, 115, 1)
(6, 115, 2)
(6, 115, 3)
(6, 115, 4)
(6, 115, 5)
(6, 115, 6)
(6, 115, 7)
(6, 116, 0)
(6, 116, 1)
(6, 116, 2)
(6, 116, 3)
(6, 116, 4)
(6, 116, 5)
(6, 116, 6)
(6, 116, 7)
(6, 117, 0)
(6, 117, 1)
(6, 117, 2)
(6, 117, 3)
(6, 117, 4)
(6, 117, 5)
(6, 117, 6)
(6, 117, 7)
(6, 118, 0)
(6, 118, 1)
(6, 118, 2)
(6, 118, 3)
(6, 118, 4)
(6, 118, 5)
(6, 118, 6)
(6, 118, 7)
(6, 119, 0)
(6, 119, 1)
(6, 119, 2)
(6, 119, 3)
(6, 119, 4)
(6, 119, 5)
(6, 119, 6)
(6, 119, 7)
(6, 120, 0)
(6, 120, 1)
(6, 120, 2)
(6, 120, 3)
(6, 120, 4)
(6, 120, 5)
(6, 120, 6)
(6, 120, 7)
(6, 121, 0)
(6, 121, 1)
(6, 121, 2)
(6, 121, 3)
(6, 121, 4)
(6, 121, 5)
(6, 121, 6)
(6, 121, 7)
(6, 122, 0)
(6, 122, 1)
(6, 122, 2)
(6, 122, 3)
(6, 122, 4)
(6, 122, 5)
(6, 122, 6)
(6, 122, 7)
(6, 123, 0)
(6, 123, 1)
(6, 123, 2)
(6, 123, 3)
(6, 123, 4)
(6, 123, 5)
(6, 123, 6)
(6, 123, 7)
(6, 124, 0)
(6, 124, 1)
(6, 124, 2)
(6, 124, 3)
(6, 124, 4)
(6, 124, 5)
(6, 124, 6)
(6, 124, 7)
(6, 125, 0)
(6, 125, 1)
(6, 125, 2)
(6, 125, 3)
(6, 125, 4)
(6, 125, 5)
(6, 125, 6)
(6, 125, 7)
(6, 126, 0)
(6, 126, 1)
(6, 126, 2)
(6, 126, 3)
(6, 126, 4)
(6, 126, 5)
(6, 126, 6)
(6, 126, 7)
(6, 127, 0)
(6, 127, 1)
(6, 127, 2)
(6, 127, 3)
(6, 127, 4)
(6, 127, 5)
(6, 127, 6)
(6, 127, 7)
(6, 128, 0)
(6, 128, 1)
(6, 128, 2)
(6, 128, 3)
(6, 128, 4)
(6, 128, 5)
(6, 128, 6)
(6, 128, 7)
(6, 129, 0)
(6, 129, 1)
(6, 129, 2)
(6, 129, 3)
(6, 129, 4)
(6, 129, 5)
(6, 129, 6)
(6, 129, 7)
(6, 130, 0)
(6, 130, 1)
(6, 130, 2)
(6, 130, 3)
(6, 130, 4)
(6, 130, 5)
(6, 130, 6)
(6, 130, 7)
(6, 131, 0)
(6, 131, 1)
(6, 131, 2)
(6, 131, 3)
(6, 131, 4)
(6, 131, 5)
(6, 131, 6)
(6, 131, 7)
(6, 132, 0)
(6, 132, 1)
(6, 132, 2)
(6, 132, 3)
(6, 132, 4)
(6, 132, 5)
(6, 132, 6)
(6, 132, 7)
(6, 133, 0)
(6, 133, 1)
(6, 133, 2)
(6, 133, 3)
(6, 133, 4)
(6, 133, 5)
(6, 133, 6)
(6, 133, 7)
(6, 134, 0)
(6, 134, 1)
(6, 134, 2)
(6, 134, 3)
(6, 134, 4)
(6, 134, 5)
(6, 134, 6)
(6, 134, 7)
(6, 135, 0)
(6, 135, 1)
(6, 135, 2)
(6, 135, 3)
(6, 135, 4)
(6, 135, 5)
(6, 135, 6)
(6, 135, 7)
(6, 136, 0)
(6, 136, 1)
(6, 136, 2)
(6, 136, 3)
(6, 136, 4)
(6, 136, 5)
(6, 136, 6)
(6, 136, 7)
(6, 137, 0)
(6, 137, 1)
(6, 137, 2)
(6, 137, 3)
(6, 137, 4)
(6, 137, 5)
(6, 137, 6)
(6, 137, 7)
(6, 138, 0)
(6, 138, 1)
(6, 138, 2)
(6, 138, 3)
(6, 138, 4)
(6, 138, 5)
(6, 138, 6)
(6, 138, 7)
(6, 139, 0)
(6, 139, 1)
(6, 139, 2)
(6, 139, 3)
(6, 139, 4)
(6, 139, 5)
(6, 139, 6)
(6, 139, 7)
(6, 140, 0)
(6, 140, 1)
(6, 140, 2)
(6, 140, 3)
(6, 140, 4)
(6, 140, 5)
(6, 140, 6)
(6, 140, 7)
(6, 141, 0)
(6, 141, 1)
(6, 141, 2)
(6, 141, 3)
(6, 141, 4)
(6, 141, 5)
(6, 141, 6)
(6, 141, 7)
(6, 142, 0)
(6, 142, 1)
(6, 142, 2)
(6, 142, 3)
(6, 142, 4)
(6, 142, 5)
(6, 142, 6)
(6, 142, 7)
(6, 143, 0)
(6, 143, 1)
(6, 143, 2)
(6, 143, 3)
(6, 143, 4)
(6, 143, 5)
(6, 143, 6)
(6, 143, 7)
(6, 144, 0)
(6, 144, 1)
(6, 144, 2)
(6, 144, 3)
(6, 144, 4)
(6, 144, 5)
(6, 144, 6)
(6, 144, 7)
(6, 145, 0)
(6, 145, 1)
(6, 145, 2)
(6, 145, 3)
(6, 145, 4)
(6, 145, 5)
(6, 145, 6)
(6, 145, 7)
(6, 146, 0)
(6, 146, 1)
(6, 146, 2)
(6, 146, 3)
(6, 146, 4)
(6, 146, 5)
(6, 146, 6)
(6, 146, 7)
(6, 147, 0)
(6, 147, 1)
(6, 147, 2)
(6, 147, 3)
(6, 147, 4)
(6, 147, 5)
(6, 147, 6)
(6, 147, 7)
(6, 148, 0)
(6, 148, 1)
(6, 148, 2)
(6, 148, 3)
(6, 148, 4)
(6, 148, 5)
(6, 148, 6)
(6, 148, 7)
(6, 149, 0)
(6, 149, 1)
(6, 149, 2)
(6, 149, 3)
(6, 149, 4)
(6, 149, 5)
(6, 149, 6)
(6, 149, 7)
(6, 150, 0)
(6, 150, 1)
(6, 150, 2)
(6, 150, 3)
(6, 150, 4)
(6, 150, 5)
(6, 150, 6)
(6, 150, 7)
(6, 151, 0)
(6, 151, 1)
(6, 151, 2)
(6, 151, 3)
(6, 151, 4)
(6, 151, 5)
(6, 151, 6)
(6, 151, 7)
(6, 152, 0)
(6, 152, 1)
(6, 152, 2)
(6, 152, 3)
(6, 152, 4)
(6, 152, 5)
(6, 152, 6)
(6, 152, 7)
(6, 153, 0)
(6, 153, 1)
(6, 153, 2)
(6, 153, 3)
(6, 153, 4)
(6, 153, 5)
(6, 153, 6)
(6, 153, 7)
(6, 154, 0)
(6, 154, 1)
(6, 154, 2)
(6, 154, 3)
(6, 154, 4)
(6, 154, 5)
(6, 154, 6)
(6, 154, 7)
(6, 155, 0)
(6, 155, 1)
(6, 155, 2)
(6, 155, 3)
(6, 155, 4)
(6, 155, 5)
(6, 155, 6)
(6, 155, 7)
(6, 156, 0)
(6, 156, 1)
(6, 156, 2)
(6, 156, 3)
(6, 156, 4)
(6, 156, 5)
(6, 156, 6)
(6, 156, 7)
(6, 157, 0)
(6, 157, 1)
(6, 157, 2)
(6, 157, 3)
(6, 157, 4)
(6, 157, 5)
(6, 157, 6)
(6, 157, 7)
(6, 158, 0)
(6, 158, 1)
(6, 158, 2)
(6, 158, 3)
(6, 158, 4)
(6, 158, 5)
(6, 158, 6)
(6, 158, 7)
(6, 159, 0)
(6, 159, 1)
(6, 159, 2)
(6, 159, 3)
(6, 159, 4)
(6, 159, 5)
(6, 159, 6)
(6, 159, 7)
(6, 160, 0)
(6, 160, 1)
(6, 160, 2)
(6, 160, 3)
(6, 160, 4)
(6, 160, 5)
(6, 160, 6)
(6, 160, 7)
(6, 161, 0)
(6, 161, 1)
(6, 161, 2)
(6, 161, 3)
(6, 161, 4)
(6, 161, 5)
(6, 161, 6)
(6, 161, 7)
(6, 162, 0)
(6, 162, 1)
(6, 162, 2)
(6, 162, 3)
(6, 162, 4)
(6, 162, 5)
(6, 162, 6)
(6, 162, 7)
(6, 163, 0)
(6, 163, 1)
(6, 163, 2)
(6, 163, 3)
(6, 163, 4)
(6, 163, 5)
(6, 163, 6)
(6, 163, 7)
(6, 164, 0)
(6, 164, 1)
(6, 164, 2)
(6, 164, 3)
(6, 164, 4)
(6, 164, 5)
(6, 164, 6)
(6, 164, 7)
(6, 165, 0)
(6, 165, 1)
(6, 165, 2)
(6, 165, 3)
(6, 165, 4)
(6, 165, 5)
(6, 165, 6)
(6, 165, 7)
(6, 166, 0)
(6, 166, 1)
(6, 166, 2)
(6, 166, 3)
(6, 166, 4)
(6, 166, 5)
(6, 166, 6)
(6, 166, 7)
(6, 167, 0)
(6, 167, 1)
(6, 167, 2)
(6, 167, 3)
(6, 167, 4)
(6, 167, 5)
(6, 167, 6)
(6, 167, 7)
(6, 168, 0)
(6, 168, 1)
(6, 168, 2)
(6, 168, 3)
(6, 168, 4)
(6, 168, 5)
(6, 168, 6)
(6, 168, 7)
(6, 169, 0)
(6, 169, 1)
(6, 169, 2)
(6, 169, 3)
(6, 169, 4)
(6, 169, 5)
(6, 169, 6)
(6, 169, 7)
(6, 170, 0)
(6, 170, 1)
(6, 170, 2)
(6, 170, 3)
(6, 170, 4)
(6, 170, 5)
(6, 170, 6)
(6, 170, 7)
(6, 171, 0)
(6, 171, 1)
(6, 171, 2)
(6, 171, 3)
(6, 171, 4)
(6, 171, 5)
(6, 171, 6)
(6, 171, 7)
(6, 172, 0)
(6, 172, 1)
(6, 172, 2)
(6, 172, 3)
(6, 172, 4)
(6, 172, 5)
(6, 172, 6)
(6, 172, 7)
(6, 173, 0)
(6, 173, 1)
(6, 173, 2)
(6, 173, 3)
(6, 173, 4)
(6, 173, 5)
(6, 173, 6)
(6, 173, 7)
(6, 174, 0)
(6, 174, 1)
(6, 174, 2)
(6, 174, 3)
(6, 174, 4)
(6, 174, 5)
(6, 174, 6)
(6, 174, 7)
(6, 175, 0)
(6, 175, 1)
(6, 175, 2)
(6, 175, 3)
(6, 175, 4)
(6, 175, 5)
(6, 175, 6)
(6, 175, 7)
(6, 176, 0)
(6, 176, 1)
(6, 176, 2)
(6, 176, 3)
(6, 176, 4)
(6, 176, 5)
(6, 176, 6)
(6, 176, 7)
(6, 177, 0)
(6, 177, 1)
(6, 177, 2)
(6, 177, 3)
(6, 177, 4)
(6, 177, 5)
(6, 177, 6)
(6, 177, 7)
(6, 178, 0)
(6, 178, 1)
(6, 178, 2)
(6, 178, 3)
(6, 178, 4)
(6, 178, 5)
(6, 178, 6)
(6, 178, 7)
(6, 179, 0)
(6, 179, 1)
(6, 179, 2)
(6, 179, 3)
(6, 179, 4)
(6, 179, 5)
(6, 179, 6)
(6, 179, 7)
(6, 180, 0)
(6, 180, 1)
(6, 180, 2)
(6, 180, 3)
(6, 180, 4)
(6, 180, 5)
(6, 180, 6)
(6, 180, 7)
(6, 181, 0)
(6, 181, 1)
(6, 181, 2)
(6, 181, 3)
(6, 181, 4)
(6, 181, 5)
(6, 181, 6)
(6, 181, 7)
(6, 182, 0)
(6, 182, 1)
(6, 182, 2)
(6, 182, 3)
(6, 182, 4)
(6, 182, 5)
(6, 182, 6)
(6, 182, 7)
(6, 183, 0)
(6, 183, 1)
(6, 183, 2)
(6, 183, 3)
(6, 183, 4)
(6, 183, 5)
(6, 183, 6)
(6, 183, 7)
(6, 184, 0)
(6, 184, 1)
(6, 184, 2)
(6, 184, 3)
(6, 184, 4)
(6, 184, 5)
(6, 184, 6)
(6, 184, 7)
(6, 185, 0)
(6, 185, 1)
(6, 185, 2)
(6, 185, 3)
(6, 185, 4)
(6, 185, 5)
(6, 185, 6)
(6, 185, 7)
(6, 186, 0)
(6, 186, 1)
(6, 186, 2)
(6, 186, 3)
(6, 186, 4)
(6, 186, 5)
(6, 186, 6)
(6, 186, 7)
(6, 187, 0)
(6, 187, 1)
(6, 187, 2)
(6, 187, 3)
(6, 187, 4)
(6, 187, 5)
(6, 187, 6)
(6, 187, 7)
(6, 188, 0)
(6, 188, 1)
(6, 188, 2)
(6, 188, 3)
(6, 188, 4)
(6, 188, 5)
(6, 188, 6)
(6, 188, 7)
(6, 189, 0)
(6, 189, 1)
(6, 189, 2)
(6, 189, 3)
(6, 189, 4)
(6, 189, 5)
(6, 189, 6)
(6, 189, 7)
(6, 190, 0)
(6, 190, 1)
(6, 190, 2)
(6, 190, 3)
(6, 190, 4)
(6, 190, 5)
(6, 190, 6)
(6, 190, 7)
(6, 191, 0)
(6, 191, 1)
(6, 191, 2)
(6, 191, 3)
(6, 191, 4)
(6, 191, 5)
(6, 191, 6)
(6, 191, 7)
(6, 192, 0)
(6, 192, 1)
(6, 192, 2)
(6, 192, 3)
(6, 192, 4)
(6, 192, 5)
(6, 192, 6)
(6, 192, 7)
(6, 193, 0)
(6, 193, 1)
(6, 193, 2)
(6, 193, 3)
(6, 193, 4)
(6, 193, 5)
(6, 193, 6)
(6, 193, 7)
(6, 194, 0)
(6, 194, 1)
(6, 194, 2)
(6, 194, 3)
(6, 194, 4)
(6, 194, 5)
(6, 194, 6)
(6, 194, 7)
(6, 195, 0)
(6, 195, 1)
(6, 195, 2)
(6, 195, 3)
(6, 195, 4)
(6, 195, 5)
(6, 195, 6)
(6, 195, 7)
(6, 196, 0)
(6, 196, 1)
(6, 196, 2)
(6, 196, 3)
(6, 196, 4)
(6, 196, 5)
(6, 196, 6)
(6, 196, 7)
(6, 197, 0)
(6, 197, 1)
(6, 197, 2)
(6, 197, 3)
(6, 197, 4)
(6, 197, 5)
(6, 197, 6)
(6, 197, 7)
(6, 198, 0)
(6, 198, 1)
(6, 198, 2)
(6, 198, 3)
(6, 198, 4)
(6, 198, 5)
(6, 198, 6)
(6, 198, 7)
(6, 199, 0)
(6, 199, 1)
(6, 199, 2)
(6, 199, 3)
(6, 199, 4)
(6, 199, 5)
(6, 199, 6)
(6, 199, 7)
(6, 200, 0)
(6, 200, 1)
(6, 200, 2)
(6, 200, 3)
(6, 200, 4)
(6, 200, 5)
(6, 200, 6)
(6, 200, 7)
(6, 201, 0)
(6, 201, 1)
(6, 201, 2)
(6, 201, 3)
(6, 201, 4)
(6, 201, 5)
(6, 201, 6)
(6, 201, 7)
(6, 202, 0)
(6, 202, 1)
(6, 202, 2)
(6, 202, 3)
(6, 202, 4)
(6, 202, 5)
(6, 202, 6)
(6, 202, 7)
(6, 203, 0)
(6, 203, 1)
(6, 203, 2)
(6, 203, 3)
(6, 203, 4)
(6, 203, 5)
(6, 203, 6)
(6, 203, 7)
(6, 204, 0)
(6, 204, 1)
(6, 204, 2)
(6, 204, 3)
(6, 204, 4)
(6, 204, 5)
(6, 204, 6)
(6, 204, 7)
(6, 205, 0)
(6, 205, 1)
(6, 205, 2)
(6, 205, 3)
(6, 205, 4)
(6, 205, 5)
(6, 205, 6)
(6, 205, 7)
(6, 206, 0)
(6, 206, 1)
(6, 206, 2)
(6, 206, 3)
(6, 206, 4)
(6, 206, 5)
(6, 206, 6)
(6, 206, 7)
(6, 207, 0)
(6, 207, 1)
(6, 207, 2)
(6, 207, 3)
(6, 207, 4)
(6, 207, 5)
(6, 207, 6)
(6, 207, 7)
(6, 208, 0)
(6, 208, 1)
(6, 208, 2)
(6, 208, 3)
(6, 208, 4)
(6, 208, 5)
(6, 208, 6)
(6, 208, 7)
(6, 209, 0)
(6, 209, 1)
(6, 209, 2)
(6, 209, 3)
(6, 209, 4)
(6, 209, 5)
(6, 209, 6)
(6, 209, 7)
(6, 210, 0)
(6, 210, 1)
(6, 210, 2)
(6, 210, 3)
(6, 210, 4)
(6, 210, 5)
(6, 210, 6)
(6, 210, 7)
(6, 211, 0)
(6, 211, 1)
(6, 211, 2)
(6, 211, 3)
(6, 211, 4)
(6, 211, 5)
(6, 211, 6)
(6, 211, 7)
(6, 212, 0)
(6, 212, 1)
(6, 212, 2)
(6, 212, 3)
(6, 212, 4)
(6, 212, 5)
(6, 212, 6)
(6, 212, 7)
(6, 213, 0)
(6, 213, 1)
(6, 213, 2)
(6, 213, 3)
(6, 213, 4)
(6, 213, 5)
(6, 213, 6)
(6, 213, 7)
(6, 214, 0)
(6, 214, 1)
(6, 214, 2)
(6, 214, 3)
(6, 214, 4)
(6, 214, 5)
(6, 214, 6)
(6, 214, 7)
(6, 215, 0)
(6, 215, 1)
(6, 215, 2)
(6, 215, 3)
(6, 215, 4)
(6, 215, 5)
(6, 215, 6)
(6, 215, 7)
(6, 216, 0)
(6, 216, 1)
(6, 216, 2)
(6, 216, 3)
(6, 216, 4)
(6, 216, 5)
(6, 216, 6)
(6, 216, 7)
(6, 217, 0)
(6, 217, 1)
(6, 217, 2)
(6, 217, 3)
(6, 217, 4)
(6, 217, 5)
(6, 217, 6)
(6, 217, 7)
(6, 218, 0)
(6, 218, 1)
(6, 218, 2)
(6, 218, 3)
(6, 218, 4)
(6, 218, 5)
(6, 218, 6)
(6, 218, 7)
(6, 219, 0)
(6, 219, 1)
(6, 219, 2)
(6, 219, 3)
(6, 219, 4)
(6, 219, 5)
(6, 219, 6)
(6, 219, 7)
(6, 220, 0)
(6, 220, 1)
(6, 220, 2)
(6, 220, 3)
(6, 220, 4)
(6, 220, 5)
(6, 220, 6)
(6, 220, 7)
(6, 221, 0)
(6, 221, 1)
(6, 221, 2)
(6, 221, 3)
(6, 221, 4)
(6, 221, 5)
(6, 221, 6)
(6, 221, 7)
(6, 222, 0)
(6, 222, 1)
(6, 222, 2)
(6, 222, 3)
(6, 222, 4)
(6, 222, 5)
(6, 222, 6)
(6, 222, 7)
(6, 223, 0)
(6, 223, 1)
(6, 223, 2)
(6, 223, 3)
(6, 223, 4)
(6, 223, 5)
(6, 223, 6)
(6, 223, 7)
(6, 224, 0)
(6, 224, 1)
(6, 224, 2)
(6, 224, 3)
(6, 224, 4)
(6, 224, 5)
(6, 224, 6)
(6, 224, 7)
(6, 225, 0)
(6, 225, 1)
(6, 225, 2)
(6, 225, 3)
(6, 225, 4)
(6, 225, 5)
(6, 225, 6)
(6, 225, 7)
(6, 226, 0)
(6, 226, 1)
(6, 226, 2)
(6, 226, 3)
(6, 226, 4)
(6, 226, 5)
(6, 226, 6)
(6, 226, 7)
(6, 227, 0)
(6, 227, 1)
(6, 227, 2)
(6, 227, 3)
(6, 227, 4)
(6, 227, 5)
(6, 227, 6)
(6, 227, 7)
(6, 228, 0)
(6, 228, 1)
(6, 228, 2)
(6, 228, 3)
(6, 228, 4)
(6, 228, 5)
(6, 228, 6)
(6, 228, 7)
(6, 229, 0)
(6, 229, 1)
(6, 229, 2)
(6, 229, 3)
(6, 229, 4)
(6, 229, 5)
(6, 229, 6)
(6, 229, 7)
(6, 230, 0)
(6, 230, 1)
(6, 230, 2)
(6, 230, 3)
(6, 230, 4)
(6, 230, 5)
(6, 230, 6)
(6, 230, 7)
(6, 231, 0)
(6, 231, 1)
(6, 231, 2)
(6, 231, 3)
(6, 231, 4)
(6, 231, 5)
(6, 231, 6)
(6, 231, 7)
(6, 232, 0)
(6, 232, 1)
(6, 232, 2)
(6, 232, 3)
(6, 232, 4)
(6, 232, 5)
(6, 232, 6)
(6, 232, 7)
(6, 233, 0)
(6, 233, 1)
(6, 233, 2)
(6, 233, 3)
(6, 233, 4)
(6, 233, 5)
(6, 233, 6)
(6, 233, 7)
(6, 234, 0)
(6, 234, 1)
(6, 234, 2)
(6, 234, 3)
(6, 234, 4)
(6, 234, 5)
(6, 234, 6)
(6, 234, 7)
(6, 235, 0)
(6, 235, 1)
(6, 235, 2)
(6, 235, 3)
(6, 235, 4)
(6, 235, 5)
(6, 235, 6)
(6, 235, 7)
(6, 236, 0)
(6, 236, 1)
(6, 236, 2)
(6, 236, 3)
(6, 236, 4)
(6, 236, 5)
(6, 236, 6)
(6, 236, 7)
(6, 237, 0)
(6, 237, 1)
(6, 237, 2)
(6, 237, 3)
(6, 237, 4)
(6, 237, 5)
(6, 237, 6)
(6, 237, 7)
(6, 238, 0)
(6, 238, 1)
(6, 238, 2)
(6, 238, 3)
(6, 238, 4)
(6, 238, 5)
(6, 238, 6)
(6, 238, 7)
(6, 239, 0)
(6, 239, 1)
(6, 239, 2)
(6, 239, 3)
(6, 239, 4)
(6, 239, 5)
(6, 239, 6)
(6, 239, 7)
(6, 240, 0)
(6, 240, 1)
(6, 240, 2)
(6, 240, 3)
(6, 240, 4)
(6, 240, 5)
(6, 240, 6)
(6, 240, 7)
(6, 241, 0)
(6, 241, 1)
(6, 241, 2)
(6, 241, 3)
(6, 241, 4)
(6, 241, 5)
(6, 241, 6)
(6, 241, 7)
(6, 242, 0)
(6, 242, 1)
(6, 242, 2)
(6, 242, 3)
(6, 242, 4)
(6, 242, 5)
(6, 242, 6)
(6, 242, 7)
(6, 243, 0)
(6, 243, 1)
(6, 243, 2)
(6, 243, 3)
(6, 243, 4)
(6, 243, 5)
(6, 243, 6)
(6, 243, 7)
(6, 244, 0)
(6, 244, 1)
(6, 244, 2)
(6, 244, 3)
(6, 244, 4)
(6, 244, 5)
(6, 244, 6)
(6, 244, 7)
(6, 245, 0)
(6, 245, 1)
(6, 245, 2)
(6, 245, 3)
(6, 245, 4)
(6, 245, 5)
(6, 245, 6)
(6, 245, 7)
(6, 246, 0)
(6, 246, 1)
(6, 246, 2)
(6, 246, 3)
(6, 246, 4)
(6, 246, 5)
(6, 246, 6)
(6, 246, 7)
(6, 247, 0)
(6, 247, 1)
(6, 247, 2)
(6, 247, 3)
(6, 247, 4)
(6, 247, 5)
(6, 247, 6)
(6, 247, 7)
(6, 248, 0)
(6, 248, 1)
(6, 248, 2)
(6, 248, 3)
(6, 248, 4)
(6, 248, 5)
(6, 248, 6)
(6, 248, 7)
(6, 249, 0)
(6, 249, 1)
(6, 249, 2)
(6, 249, 3)
(6, 249, 4)
(6, 249, 5)
(6, 249, 6)
(6, 249, 7)
(6, 250, 0)
(6, 250, 1)
(6, 250, 2)
(6, 250, 3)
(6, 250, 4)
(6, 250, 5)
(6, 250, 6)
(6, 250, 7)
(6, 251, 0)
(6, 251, 1)
(6, 251, 2)
(6, 251, 3)
(6, 251, 4)
(6, 251, 5)
(6, 251, 6)
(6, 251, 7)
(6, 252, 0)
(6, 252, 1)
(6, 252, 2)
(6, 252, 3)
(6, 252, 4)
(6, 252, 5)
(6, 252, 6)
(6, 252, 7)
(6, 253, 0)
(6, 253, 1)
(6, 253, 2)
(6, 253, 3)
(6, 253, 4)
(6, 253, 5)
(6, 253, 6)
(6, 253, 7)
(6, 254, 0)
(6, 254, 1)
(6, 254, 2)
(6, 254, 3)
(6, 254, 4)
(6, 254, 5)
(6, 254, 6)
(6, 254, 7)
(6, 255, 0)
(6, 255, 1)
(6, 255, 2)
(6, 255, 3)
(6, 255, 4)
(6, 255, 5)
(6, 255, 6)
(6, 255, 7)
(7, 0, 0)
(7, 0, 1)
(7, 0, 2)
(7, 0, 3)
(7, 0, 4)
(7, 0, 5)
(7, 0, 6)
(7, 0, 7)
(7, 1, 0)
(7, 1, 1)
(7, 1, 2)
(7, 1, 3)
(7, 1, 4)
(7, 1, 5)
(7, 1, 6)
(7, 1, 7)
(7, 2, 0)
(7, 2, 1)
(7, 2, 2)
(7, 2, 3)
(7, 2, 4)
(7, 2, 5)
(7, 2, 6)
(7, 2, 7)
(7, 3, 0)
(7, 3, 1)
(7, 3, 2)
(7, 3, 3)
(7, 3, 4)
(7, 3, 5)
(7, 3, 6)
(7, 3, 7)
(7, 4, 0)
(7, 4, 1)
(7, 4, 2)
(7, 4, 3)
(7, 4, 4)
(7, 4, 5)
(7, 4, 6)
(7, 4, 7)
(7, 5, 0)
(7, 5, 1)
(7, 5, 2)
(7, 5, 3)
(7, 5, 4)
(7, 5, 5)
(7, 5, 6)
(7, 5, 7)
(7, 6, 0)
(7, 6, 1)
(7, 6, 2)
(7, 6, 3)
(7, 6, 4)
(7, 6, 5)
(7, 6, 6)
(7, 6, 7)
(7, 7, 0)
(7, 7, 1)
(7, 7, 2)
(7, 7, 3)
(7, 7, 4)
(7, 7, 5)
(7, 7, 6)
(7, 7, 7)
(7, 8, 0)
(7, 8, 1)
(7, 8, 2)
(7, 8, 3)
(7, 8, 4)
(7, 8, 5)
(7, 8, 6)
(7, 8, 7)
(7, 9, 0)
(7, 9, 1)
(7, 9, 2)
(7, 9, 3)
(7, 9, 4)
(7, 9, 5)
(7, 9, 6)
(7, 9, 7)
(7, 10, 0)
(7, 10, 1)
(7, 10, 2)
(7, 10, 3)
(7, 10, 4)
(7, 10, 5)
(7, 10, 6)
(7, 10, 7)
(7, 11, 0)
(7, 11, 1)
(7, 11, 2)
(7, 11, 3)
(7, 11, 4)
(7, 11, 5)
(7, 11, 6)
(7, 11, 7)
(7, 12, 0)
(7, 12, 1)
(7, 12, 2)
(7, 12, 3)
(7, 12, 4)
(7, 12, 5)
(7, 12, 6)
(7, 12, 7)
(7, 13, 0)
(7, 13, 1)
(7, 13, 2)
(7, 13, 3)
(7, 13, 4)
(7, 13, 5)
(7, 13, 6)
(7, 13, 7)
(7, 14, 0)
(7, 14, 1)
(7, 14, 2)
(7, 14, 3)
(7, 14, 4)
(7, 14, 5)
(7, 14, 6)
(7, 14, 7)
(7, 15, 0)
(7, 15, 1)
(7, 15, 2)
(7, 15, 3)
(7, 15, 4)
(7, 15, 5)
(7, 15, 6)
(7, 15, 7)
(7, 16, 0)
(7, 16, 1)
(7, 16, 2)
(7, 16, 3)
(7, 16, 4)
(7, 16, 5)
(7, 16, 6)
(7, 16, 7)
(7, 17, 0)
(7, 17, 1)
(7, 17, 2)
(7, 17, 3)
(7, 17, 4)
(7, 17, 5)
(7, 17, 6)
(7, 17, 7)
(7, 18, 0)
(7, 18, 1)
(7, 18, 2)
(7, 18, 3)
(7, 18, 4)
(7, 18, 5)
(7, 18, 6)
(7, 18, 7)
(7, 19, 0)
(7, 19, 1)
(7, 19, 2)
(7, 19, 3)
(7, 19, 4)
(7, 19, 5)
(7, 19, 6)
(7, 19, 7)
(7, 20, 0)
(7, 20, 1)
(7, 20, 2)
(7, 20, 3)
(7, 20, 4)
(7, 20, 5)
(7, 20, 6)
(7, 20, 7)
(7, 21, 0)
(7, 21, 1)
(7, 21, 2)
(7, 21, 3)
(7, 21, 4)
(7, 21, 5)
(7, 21, 6)
(7, 21, 7)
(7, 22, 0)
(7, 22, 1)
(7, 22, 2)
(7, 22, 3)
(7, 22, 4)
(7, 22, 5)
(7, 22, 6)
(7, 22, 7)
(7, 23, 0)
(7, 23, 1)
(7, 23, 2)
(7, 23, 3)
(7, 23, 4)
(7, 23, 5)
(7, 23, 6)
(7, 23, 7)
(7, 24, 0)
(7, 24, 1)
(7, 24, 2)
(7, 24, 3)
(7, 24, 4)
(7, 24, 5)
(7, 24, 6)
(7, 24, 7)
(7, 25, 0)
(7, 25, 1)
(7, 25, 2)
(7, 25, 3)
(7, 25, 4)
(7, 25, 5)
(7, 25, 6)
(7, 25, 7)
(7, 26, 0)
(7, 26, 1)
(7, 26, 2)
(7, 26, 3)
(7, 26, 4)
(7, 26, 5)
(7, 26, 6)
(7, 26, 7)
(7, 27, 0)
(7, 27, 1)
(7, 27, 2)
(7, 27, 3)
(7, 27, 4)
(7, 27, 5)
(7, 27, 6)
(7, 27, 7)
(7, 28, 0)
(7, 28, 1)
(7, 28, 2)
(7, 28, 3)
(7, 28, 4)
(7, 28, 5)
(7, 28, 6)
(7, 28, 7)
(7, 29, 0)
(7, 29, 1)
(7, 29, 2)
(7, 29, 3)
(7, 29, 4)
(7, 29, 5)
(7, 29, 6)
(7, 29, 7)
(7, 30, 0)
(7, 30, 1)
(7, 30, 2)
(7, 30, 3)
(7, 30, 4)
(7, 30, 5)
(7, 30, 6)
(7, 30, 7)
(7, 31, 0)
(7, 31, 1)
(7, 31, 2)
(7, 31, 3)
(7, 31, 4)
(7, 31, 5)
(7, 31, 6)
(7, 31, 7)
(7, 32, 0)
(7, 32, 1)
(7, 32, 2)
(7, 32, 3)
(7, 32, 4)
(7, 32, 5)
(7, 32, 6)
(7, 32, 7)
(7, 33, 0)
(7, 33, 1)
(7, 33, 2)
(7, 33, 3)
(7, 33, 4)
(7, 33, 5)
(7, 33, 6)
(7, 33, 7)
(7, 34, 0)
(7, 34, 1)
(7, 34, 2)
(7, 34, 3)
(7, 34, 4)
(7, 34, 5)
(7, 34, 6)
(7, 34, 7)
(7, 35, 0)
(7, 35, 1)
(7, 35, 2)
(7, 35, 3)
(7, 35, 4)
(7, 35, 5)
(7, 35, 6)
(7, 35, 7)
(7, 36, 0)
(7, 36, 1)
(7, 36, 2)
(7, 36, 3)
(7, 36, 4)
(7, 36, 5)
(7, 36, 6)
(7, 36, 7)
(7, 37, 0)
(7, 37, 1)
(7, 37, 2)
(7, 37, 3)
(7, 37, 4)
(7, 37, 5)
(7, 37, 6)
(7, 37, 7)
(7, 38, 0)
(7, 38, 1)
(7, 38, 2)
(7, 38, 3)
(7, 38, 4)
(7, 38, 5)
(7, 38, 6)
(7, 38, 7)
(7, 39, 0)
(7, 39, 1)
(7, 39, 2)
(7, 39, 3)
(7, 39, 4)
(7, 39, 5)
(7, 39, 6)
(7, 39, 7)
(7, 40, 0)
(7, 40, 1)
(7, 40, 2)
(7, 40, 3)
(7, 40, 4)
(7, 40, 5)
(7, 40, 6)
(7, 40, 7)
(7, 41, 0)
(7, 41, 1)
(7, 41, 2)
(7, 41, 3)
(7, 41, 4)
(7, 41, 5)
(7, 41, 6)
(7, 41, 7)
(7, 42, 0)
(7, 42, 1)
(7, 42, 2)
(7, 42, 3)
(7, 42, 4)
(7, 42, 5)
(7, 42, 6)
(7, 42, 7)
(7, 43, 0)
(7, 43, 1)
(7, 43, 2)
(7, 43, 3)
(7, 43, 4)
(7, 43, 5)
(7, 43, 6)
(7, 43, 7)
(7, 44, 0)
(7, 44, 1)
(7, 44, 2)
(7, 44, 3)
(7, 44, 4)
(7, 44, 5)
(7, 44, 6)
(7, 44, 7)
(7, 45, 0)
(7, 45, 1)
(7, 45, 2)
(7, 45, 3)
(7, 45, 4)
(7, 45, 5)
(7, 45, 6)
(7, 45, 7)
(7, 46, 0)
(7, 46, 1)
(7, 46, 2)
(7, 46, 3)
(7, 46, 4)
(7, 46, 5)
(7, 46, 6)
(7, 46, 7)
(7, 47, 0)
(7, 47, 1)
(7, 47, 2)
(7, 47, 3)
(7, 47, 4)
(7, 47, 5)
(7, 47, 6)
(7, 47, 7)
(7, 48, 0)
(7, 48, 1)
(7, 48, 2)
(7, 48, 3)
(7, 48, 4)
(7, 48, 5)
(7, 48, 6)
(7, 48, 7)
(7, 49, 0)
(7, 49, 1)
(7, 49, 2)
(7, 49, 3)
(7, 49, 4)
(7, 49, 5)
(7, 49, 6)
(7, 49, 7)
(7, 50, 0)
(7, 50, 1)
(7, 50, 2)
(7, 50, 3)
(7, 50, 4)
(7, 50, 5)
(7, 50, 6)
(7, 50, 7)
(7, 51, 0)
(7, 51, 1)
(7, 51, 2)
(7, 51, 3)
(7, 51, 4)
(7, 51, 5)
(7, 51, 6)
(7, 51, 7)
(7, 52, 0)
(7, 52, 1)
(7, 52, 2)
(7, 52, 3)
(7, 52, 4)
(7, 52, 5)
(7, 52, 6)
(7, 52, 7)
(7, 53, 0)
(7, 53, 1)
(7, 53, 2)
(7, 53, 3)
(7, 53, 4)
(7, 53, 5)
(7, 53, 6)
(7, 53, 7)
(7, 54, 0)
(7, 54, 1)
(7, 54, 2)
(7, 54, 3)
(7, 54, 4)
(7, 54, 5)
(7, 54, 6)
(7, 54, 7)
(7, 55, 0)
(7, 55, 1)
(7, 55, 2)
(7, 55, 3)
(7, 55, 4)
(7, 55, 5)
(7, 55, 6)
(7, 55, 7)
(7, 56, 0)
(7, 56, 1)
(7, 56, 2)
(7, 56, 3)
(7, 56, 4)
(7, 56, 5)
(7, 56, 6)
(7, 56, 7)
(7, 57, 0)
(7, 57, 1)
(7, 57, 2)
(7, 57, 3)
(7, 57, 4)
(7, 57, 5)
(7, 57, 6)
(7, 57, 7)
(7, 58, 0)
(7, 58, 1)
(7, 58, 2)
(7, 58, 3)
(7, 58, 4)
(7, 58, 5)
(7, 58, 6)
(7, 58, 7)
(7, 59, 0)
(7, 59, 1)
(7, 59, 2)
(7, 59, 3)
(7, 59, 4)
(7, 59, 5)
(7, 59, 6)
(7, 59, 7)
(7, 60, 0)
(7, 60, 1)
(7, 60, 2)
(7, 60, 3)
(7, 60, 4)
(7, 60, 5)
(7, 60, 6)
(7, 60, 7)
(7, 61, 0)
(7, 61, 1)
(7, 61, 2)
(7, 61, 3)
(7, 61, 4)
(7, 61, 5)
(7, 61, 6)
(7, 61, 7)
(7, 62, 0)
(7, 62, 1)
(7, 62, 2)
(7, 62, 3)
(7, 62, 4)
(7, 62, 5)
(7, 62, 6)
(7, 62, 7)
(7, 63, 0)
(7, 63, 1)
(7, 63, 2)
(7, 63, 3)
(7, 63, 4)
(7, 63, 5)
(7, 63, 6)
(7, 63, 7)
(7, 64, 0)
(7, 64, 1)
(7, 64, 2)
(7, 64, 3)
(7, 64, 4)
(7, 64, 5)
(7, 64, 6)
(7, 64, 7)
(7, 65, 0)
(7, 65, 1)
(7, 65, 2)
(7, 65, 3)
(7, 65, 4)
(7, 65, 5)
(7, 65, 6)
(7, 65, 7)
(7, 66, 0)
(7, 66, 1)
(7, 66, 2)
(7, 66, 3)
(7, 66, 4)
(7, 66, 5)
(7, 66, 6)
(7, 66, 7)
(7, 67, 0)
(7, 67, 1)
(7, 67, 2)
(7, 67, 3)
(7, 67, 4)
(7, 67, 5)
(7, 67, 6)
(7, 67, 7)
(7, 68, 0)
(7, 68, 1)
(7, 68, 2)
(7, 68, 3)
(7, 68, 4)
(7, 68, 5)
(7, 68, 6)
(7, 68, 7)
(7, 69, 0)
(7, 69, 1)
(7, 69, 2)
(7, 69, 3)
(7, 69, 4)
(7, 69, 5)
(7, 69, 6)
(7, 69, 7)
(7, 70, 0)
(7, 70, 1)
(7, 70, 2)
(7, 70, 3)
(7, 70, 4)
(7, 70, 5)
(7, 70, 6)
(7, 70, 7)
(7, 71, 0)
(7, 71, 1)
(7, 71, 2)
(7, 71, 3)
(7, 71, 4)
(7, 71, 5)
(7, 71, 6)
(7, 71, 7)
(7, 72, 0)
(7, 72, 1)
(7, 72, 2)
(7, 72, 3)
(7, 72, 4)
(7, 72, 5)
(7, 72, 6)
(7, 72, 7)
(7, 73, 0)
(7, 73, 1)
(7, 73, 2)
(7, 73, 3)
(7, 73, 4)
(7, 73, 5)
(7, 73, 6)
(7, 73, 7)
(7, 74, 0)
(7, 74, 1)
(7, 74, 2)
(7, 74, 3)
(7, 74, 4)
(7, 74, 5)
(7, 74, 6)
(7, 74, 7)
(7, 75, 0)
(7, 75, 1)
(7, 75, 2)
(7, 75, 3)
(7, 75, 4)
(7, 75, 5)
(7, 75, 6)
(7, 75, 7)
(7, 76, 0)
(7, 76, 1)
(7, 76, 2)
(7, 76, 3)
(7, 76, 4)
(7, 76, 5)
(7, 76, 6)
(7, 76, 7)
(7, 77, 0)
(7, 77, 1)
(7, 77, 2)
(7, 77, 3)
(7, 77, 4)
(7, 77, 5)
(7, 77, 6)
(7, 77, 7)
(7, 78, 0)
(7, 78, 1)
(7, 78, 2)
(7, 78, 3)
(7, 78, 4)
(7, 78, 5)
(7, 78, 6)
(7, 78, 7)
(7, 79, 0)
(7, 79, 1)
(7, 79, 2)
(7, 79, 3)
(7, 79, 4)
(7, 79, 5)
(7, 79, 6)
(7, 79, 7)
(7, 80, 0)
(7, 80, 1)
(7, 80, 2)
(7, 80, 3)
(7, 80, 4)
(7, 80, 5)
(7, 80, 6)
(7, 80, 7)
(7, 81, 0)
(7, 81, 1)
(7, 81, 2)
(7, 81, 3)
(7, 81, 4)
(7, 81, 5)
(7, 81, 6)
(7, 81, 7)
(7, 82, 0)
(7, 82, 1)
(7, 82, 2)
(7, 82, 3)
(7, 82, 4)
(7, 82, 5)
(7, 82, 6)
(7, 82, 7)
(7, 83, 0)
(7, 83, 1)
(7, 83, 2)
(7, 83, 3)
(7, 83, 4)
(7, 83, 5)
(7, 83, 6)
(7, 83, 7)
(7, 84, 0)
(7, 84, 1)
(7, 84, 2)
(7, 84, 3)
(7, 84, 4)
(7, 84, 5)
(7, 84, 6)
(7, 84, 7)
(7, 85, 0)
(7, 85, 1)
(7, 85, 2)
(7, 85, 3)
(7, 85, 4)
(7, 85, 5)
(7, 85, 6)
(7, 85, 7)
(7, 86, 0)
(7, 86, 1)
(7, 86, 2)
(7, 86, 3)
(7, 86, 4)
(7, 86, 5)
(7, 86, 6)
(7, 86, 7)
(7, 87, 0)
(7, 87, 1)
(7, 87, 2)
(7, 87, 3)
(7, 87, 4)
(7, 87, 5)
(7, 87, 6)
(7, 87, 7)
(7, 88, 0)
(7, 88, 1)
(7, 88, 2)
(7, 88, 3)
(7, 88, 4)
(7, 88, 5)
(7, 88, 6)
(7, 88, 7)
(7, 89, 0)
(7, 89, 1)
(7, 89, 2)
(7, 89, 3)
(7, 89, 4)
(7, 89, 5)
(7, 89, 6)
(7, 89, 7)
(7, 90, 0)
(7, 90, 1)
(7, 90, 2)
(7, 90, 3)
(7, 90, 4)
(7, 90, 5)
(7, 90, 6)
(7, 90, 7)
(7, 91, 0)
(7, 91, 1)
(7, 91, 2)
(7, 91, 3)
(7, 91, 4)
(7, 91, 5)
(7, 91, 6)
(7, 91, 7)
(7, 92, 0)
(7, 92, 1)
(7, 92, 2)
(7, 92, 3)
(7, 92, 4)
(7, 92, 5)
(7, 92, 6)
(7, 92, 7)
(7, 93, 0)
(7, 93, 1)
(7, 93, 2)
(7, 93, 3)
(7, 93, 4)
(7, 93, 5)
(7, 93, 6)
(7, 93, 7)
(7, 94, 0)
(7, 94, 1)
(7, 94, 2)
(7, 94, 3)
(7, 94, 4)
(7, 94, 5)
(7, 94, 6)
(7, 94, 7)
(7, 95, 0)
(7, 95, 1)
(7, 95, 2)
(7, 95, 3)
(7, 95, 4)
(7, 95, 5)
(7, 95, 6)
(7, 95, 7)
(7, 96, 0)
(7, 96, 1)
(7, 96, 2)
(7, 96, 3)
(7, 96, 4)
(7, 96, 5)
(7, 96, 6)
(7, 96, 7)
(7, 97, 0)
(7, 97, 1)
(7, 97, 2)
(7, 97, 3)
(7, 97, 4)
(7, 97, 5)
(7, 97, 6)
(7, 97, 7)
(7, 98, 0)
(7, 98, 1)
(7, 98, 2)
(7, 98, 3)
(7, 98, 4)
(7, 98, 5)
(7, 98, 6)
(7, 98, 7)
(7, 99, 0)
(7, 99, 1)
(7, 99, 2)
(7, 99, 3)
(7, 99, 4)
(7, 99, 5)
(7, 99, 6)
(7, 99, 7)
(7, 100, 0)
(7, 100, 1)
(7, 100, 2)
(7, 100, 3)
(7, 100, 4)
(7, 100, 5)
(7, 100, 6)
(7, 100, 7)
(7, 101, 0)
(7, 101, 1)
(7, 101, 2)
(7, 101, 3)
(7, 101, 4)
(7, 101, 5)
(7, 101, 6)
(7, 101, 7)
(7, 102, 0)
(7, 102, 1)
(7, 102, 2)
(7, 102, 3)
(7, 102, 4)
(7, 102, 5)
(7, 102, 6)
(7, 102, 7)
(7, 103, 0)
(7, 103, 1)
(7, 103, 2)
(7, 103, 3)
(7, 103, 4)
(7, 103, 5)
(7, 103, 6)
(7, 103, 7)
(7, 104, 0)
(7, 104, 1)
(7, 104, 2)
(7, 104, 3)
(7, 104, 4)
(7, 104, 5)
(7, 104, 6)
(7, 104, 7)
(7, 105, 0)
(7, 105, 1)
(7, 105, 2)
(7, 105, 3)
(7, 105, 4)
(7, 105, 5)
(7, 105, 6)
(7, 105, 7)
(7, 106, 0)
(7, 106, 1)
(7, 106, 2)
(7, 106, 3)
(7, 106, 4)
(7, 106, 5)
(7, 106, 6)
(7, 106, 7)
(7, 107, 0)
(7, 107, 1)
(7, 107, 2)
(7, 107, 3)
(7, 107, 4)
(7, 107, 5)
(7, 107, 6)
(7, 107, 7)
(7, 108, 0)
(7, 108, 1)
(7, 108, 2)
(7, 108, 3)
(7, 108, 4)
(7, 108, 5)
(7, 108, 6)
(7, 108, 7)
(7, 109, 0)
(7, 109, 1)
(7, 109, 2)
(7, 109, 3)
(7, 109, 4)
(7, 109, 5)
(7, 109, 6)
(7, 109, 7)
(7, 110, 0)
(7, 110, 1)
(7, 110, 2)
(7, 110, 3)
(7, 110, 4)
(7, 110, 5)
(7, 110, 6)
(7, 110, 7)
(7, 111, 0)
(7, 111, 1)
(7, 111, 2)
(7, 111, 3)
(7, 111, 4)
(7, 111, 5)
(7, 111, 6)
(7, 111, 7)
(7, 112, 0)
(7, 112, 1)
(7, 112, 2)
(7, 112, 3)
(7, 112, 4)
(7, 112, 5)
(7, 112, 6)
(7, 112, 7)
(7, 113, 0)
(7, 113, 1)
(7, 113, 2)
(7, 113, 3)
(7, 113, 4)
(7, 113, 5)
(7, 113, 6)
(7, 113, 7)
(7, 114, 0)
(7, 114, 1)
(7, 114, 2)
(7, 114, 3)
(7, 114, 4)
(7, 114, 5)
(7, 114, 6)
(7, 114, 7)
(7, 115, 0)
(7, 115, 1)
(7, 115, 2)
(7, 115, 3)
(7, 115, 4)
(7, 115, 5)
(7, 115, 6)
(7, 115, 7)
(7, 116, 0)
(7, 116, 1)
(7, 116, 2)
(7, 116, 3)
(7, 116, 4)
(7, 116, 5)
(7, 116, 6)
(7, 116, 7)
(7, 117, 0)
(7, 117, 1)
(7, 117, 2)
(7, 117, 3)
(7, 117, 4)
(7, 117, 5)
(7, 117, 6)
(7, 117, 7)
(7, 118, 0)
(7, 118, 1)
(7, 118, 2)
(7, 118, 3)
(7, 118, 4)
(7, 118, 5)
(7, 118, 6)
(7, 118, 7)
(7, 119, 0)
(7, 119, 1)
(7, 119, 2)
(7, 119, 3)
(7, 119, 4)
(7, 119, 5)
(7, 119, 6)
(7, 119, 7)
(7, 120, 0)
(7, 120, 1)
(7, 120, 2)
(7, 120, 3)
(7, 120, 4)
(7, 120, 5)
(7, 120, 6)
(7, 120, 7)
(7, 121, 0)
(7, 121, 1)
(7, 121, 2)
(7, 121, 3)
(7, 121, 4)
(7, 121, 5)
(7, 121, 6)
(7, 121, 7)
(7, 122, 0)
(7, 122, 1)
(7, 122, 2)
(7, 122, 3)
(7, 122, 4)
(7, 122, 5)
(7, 122, 6)
(7, 122, 7)
(7, 123, 0)
(7, 123, 1)
(7, 123, 2)
(7, 123, 3)
(7, 123, 4)
(7, 123, 5)
(7, 123, 6)
(7, 123, 7)
(7, 124, 0)
(7, 124, 1)
(7, 124, 2)
(7, 124, 3)
(7, 124, 4)
(7, 124, 5)
(7, 124, 6)
(7, 124, 7)
(7, 125, 0)
(7, 125, 1)
(7, 125, 2)
(7, 125, 3)
(7, 125, 4)
(7, 125, 5)
(7, 125, 6)
(7, 125, 7)
(7, 126, 0)
(7, 126, 1)
(7, 126, 2)
(7, 126, 3)
(7, 126, 4)
(7, 126, 5)
(7, 126, 6)
(7, 126, 7)
(7, 127, 0)
(7, 127, 1)
(7, 127, 2)
(7, 127, 3)
(7, 127, 4)
(7, 127, 5)
(7, 127, 6)
(7, 127, 7)
(7, 128, 0)
(7, 128, 1)
(7, 128, 2)
(7, 128, 3)
(7, 128, 4)
(7, 128, 5)
(7, 128, 6)
(7, 128, 7)
(7, 129, 0)
(7, 129, 1)
(7, 129, 2)
(7, 129, 3)
(7, 129, 4)
(7, 129, 5)
(7, 129, 6)
(7, 129, 7)
(7, 130, 0)
(7, 130, 1)
(7, 130, 2)
(7, 130, 3)
(7, 130, 4)
(7, 130, 5)
(7, 130, 6)
(7, 130, 7)
(7, 131, 0)
(7, 131, 1)
(7, 131, 2)
(7, 131, 3)
(7, 131, 4)
(7, 131, 5)
(7, 131, 6)
(7, 131, 7)
(7, 132, 0)
(7, 132, 1)
(7, 132, 2)
(7, 132, 3)
(7, 132, 4)
(7, 132, 5)
(7, 132, 6)
(7, 132, 7)
(7, 133, 0)
(7, 133, 1)
(7, 133, 2)
(7, 133, 3)
(7, 133, 4)
(7, 133, 5)
(7, 133, 6)
(7, 133, 7)
(7, 134, 0)
(7, 134, 1)
(7, 134, 2)
(7, 134, 3)
(7, 134, 4)
(7, 134, 5)
(7, 134, 6)
(7, 134, 7)
(7, 135, 0)
(7, 135, 1)
(7, 135, 2)
(7, 135, 3)
(7, 135, 4)
(7, 135, 5)
(7, 135, 6)
(7, 135, 7)
(7, 136, 0)
(7, 136, 1)
(7, 136, 2)
(7, 136, 3)
(7, 136, 4)
(7, 136, 5)
(7, 136, 6)
(7, 136, 7)
(7, 137, 0)
(7, 137, 1)
(7, 137, 2)
(7, 137, 3)
(7, 137, 4)
(7, 137, 5)
(7, 137, 6)
(7, 137, 7)
(7, 138, 0)
(7, 138, 1)
(7, 138, 2)
(7, 138, 3)
(7, 138, 4)
(7, 138, 5)
(7, 138, 6)
(7, 138, 7)
(7, 139, 0)
(7, 139, 1)
(7, 139, 2)
(7, 139, 3)
(7, 139, 4)
(7, 139, 5)
(7, 139, 6)
(7, 139, 7)
(7, 140, 0)
(7, 140, 1)
(7, 140, 2)
(7, 140, 3)
(7, 140, 4)
(7, 140, 5)
(7, 140, 6)
(7, 140, 7)
(7, 141, 0)
(7, 141, 1)
(7, 141, 2)
(7, 141, 3)
(7, 141, 4)
(7, 141, 5)
(7, 141, 6)
(7, 141, 7)
(7, 142, 0)
(7, 142, 1)
(7, 142, 2)
(7, 142, 3)
(7, 142, 4)
(7, 142, 5)
(7, 142, 6)
(7, 142, 7)
(7, 143, 0)
(7, 143, 1)
(7, 143, 2)
(7, 143, 3)
(7, 143, 4)
(7, 143, 5)
(7, 143, 6)
(7, 143, 7)
(7, 144, 0)
(7, 144, 1)
(7, 144, 2)
(7, 144, 3)
(7, 144, 4)
(7, 144, 5)
(7, 144, 6)
(7, 144, 7)
(7, 145, 0)
(7, 145, 1)
(7, 145, 2)
(7, 145, 3)
(7, 145, 4)
(7, 145, 5)
(7, 145, 6)
(7, 145, 7)
(7, 146, 0)
(7, 146, 1)
(7, 146, 2)
(7, 146, 3)
(7, 146, 4)
(7, 146, 5)
(7, 146, 6)
(7, 146, 7)
(7, 147, 0)
(7, 147, 1)
(7, 147, 2)
(7, 147, 3)
(7, 147, 4)
(7, 147, 5)
(7, 147, 6)
(7, 147, 7)
(7, 148, 0)
(7, 148, 1)
(7, 148, 2)
(7, 148, 3)
(7, 148, 4)
(7, 148, 5)
(7, 148, 6)
(7, 148, 7)
(7, 149, 0)
(7, 149, 1)
(7, 149, 2)
(7, 149, 3)
(7, 149, 4)
(7, 149, 5)
(7, 149, 6)
(7, 149, 7)
(7, 150, 0)
(7, 150, 1)
(7, 150, 2)
(7, 150, 3)
(7, 150, 4)
(7, 150, 5)
(7, 150, 6)
(7, 150, 7)
(7, 151, 0)
(7, 151, 1)
(7, 151, 2)
(7, 151, 3)
(7, 151, 4)
(7, 151, 5)
(7, 151, 6)
(7, 151, 7)
(7, 152, 0)
(7, 152, 1)
(7, 152, 2)
(7, 152, 3)
(7, 152, 4)
(7, 152, 5)
(7, 152, 6)
(7, 152, 7)
(7, 153, 0)
(7, 153, 1)
(7, 153, 2)
(7, 153, 3)
(7, 153, 4)
(7, 153, 5)
(7, 153, 6)
(7, 153, 7)
(7, 154, 0)
(7, 154, 1)
(7, 154, 2)
(7, 154, 3)
(7, 154, 4)
(7, 154, 5)
(7, 154, 6)
(7, 154, 7)
(7, 155, 0)
(7, 155, 1)
(7, 155, 2)
(7, 155, 3)
(7, 155, 4)
(7, 155, 5)
(7, 155, 6)
(7, 155, 7)
(7, 156, 0)
(7, 156, 1)
(7, 156, 2)
(7, 156, 3)
(7, 156, 4)
(7, 156, 5)
(7, 156, 6)
(7, 156, 7)
(7, 157, 0)
(7, 157, 1)
(7, 157, 2)
(7, 157, 3)
(7, 157, 4)
(7, 157, 5)
(7, 157, 6)
(7, 157, 7)
(7, 158, 0)
(7, 158, 1)
(7, 158, 2)
(7, 158, 3)
(7, 158, 4)
(7, 158, 5)
(7, 158, 6)
(7, 158, 7)
(7, 159, 0)
(7, 159, 1)
(7, 159, 2)
(7, 159, 3)
(7, 159, 4)
(7, 159, 5)
(7, 159, 6)
(7, 159, 7)
(7, 160, 0)
(7, 160, 1)
(7, 160, 2)
(7, 160, 3)
(7, 160, 4)
(7, 160, 5)
(7, 160, 6)
(7, 160, 7)
(7, 161, 0)
(7, 161, 1)
(7, 161, 2)
(7, 161, 3)
(7, 161, 4)
(7, 161, 5)
(7, 161, 6)
(7, 161, 7)
(7, 162, 0)
(7, 162, 1)
(7, 162, 2)
(7, 162, 3)
(7, 162, 4)
(7, 162, 5)
(7, 162, 6)
(7, 162, 7)
(7, 163, 0)
(7, 163, 1)
(7, 163, 2)
(7, 163, 3)
(7, 163, 4)
(7, 163, 5)
(7, 163, 6)
(7, 163, 7)
(7, 164, 0)
(7, 164, 1)
(7, 164, 2)
(7, 164, 3)
(7, 164, 4)
(7, 164, 5)
(7, 164, 6)
(7, 164, 7)
(7, 165, 0)
(7, 165, 1)
(7, 165, 2)
(7, 165, 3)
(7, 165, 4)
(7, 165, 5)
(7, 165, 6)
(7, 165, 7)
(7, 166, 0)
(7, 166, 1)
(7, 166, 2)
(7, 166, 3)
(7, 166, 4)
(7, 166, 5)
(7, 166, 6)
(7, 166, 7)
(7, 167, 0)
(7, 167, 1)
(7, 167, 2)
(7, 167, 3)
(7, 167, 4)
(7, 167, 5)
(7, 167, 6)
(7, 167, 7)
(7, 168, 0)
(7, 168, 1)
(7, 168, 2)
(7, 168, 3)
(7, 168, 4)
(7, 168, 5)
(7, 168, 6)
(7, 168, 7)
(7, 169, 0)
(7, 169, 1)
(7, 169, 2)
(7, 169, 3)
(7, 169, 4)
(7, 169, 5)
(7, 169, 6)
(7, 169, 7)
(7, 170, 0)
(7, 170, 1)
(7, 170, 2)
(7, 170, 3)
(7, 170, 4)
(7, 170, 5)
(7, 170, 6)
(7, 170, 7)
(7, 171, 0)
(7, 171, 1)
(7, 171, 2)
(7, 171, 3)
(7, 171, 4)
(7, 171, 5)
(7, 171, 6)
(7, 171, 7)
(7, 172, 0)
(7, 172, 1)
(7, 172, 2)
(7, 172, 3)
(7, 172, 4)
(7, 172, 5)
(7, 172, 6)
(7, 172, 7)
(7, 173, 0)
(7, 173, 1)
(7, 173, 2)
(7, 173, 3)
(7, 173, 4)
(7, 173, 5)
(7, 173, 6)
(7, 173, 7)
(7, 174, 0)
(7, 174, 1)
(7, 174, 2)
(7, 174, 3)
(7, 174, 4)
(7, 174, 5)
(7, 174, 6)
(7, 174, 7)
(7, 175, 0)
(7, 175, 1)
(7, 175, 2)
(7, 175, 3)
(7, 175, 4)
(7, 175, 5)
(7, 175, 6)
(7, 175, 7)
(7, 176, 0)
(7, 176, 1)
(7, 176, 2)
(7, 176, 3)
(7, 176, 4)
(7, 176, 5)
(7, 176, 6)
(7, 176, 7)
(7, 177, 0)
(7, 177, 1)
(7, 177, 2)
(7, 177, 3)
(7, 177, 4)
(7, 177, 5)
(7, 177, 6)
(7, 177, 7)
(7, 178, 0)
(7, 178, 1)
(7, 178, 2)
(7, 178, 3)
(7, 178, 4)
(7, 178, 5)
(7, 178, 6)
(7, 178, 7)
(7, 179, 0)
(7, 179, 1)
(7, 179, 2)
(7, 179, 3)
(7, 179, 4)
(7, 179, 5)
(7, 179, 6)
(7, 179, 7)
(7, 180, 0)
(7, 180, 1)
(7, 180, 2)
(7, 180, 3)
(7, 180, 4)
(7, 180, 5)
(7, 180, 6)
(7, 180, 7)
(7, 181, 0)
(7, 181, 1)
(7, 181, 2)
(7, 181, 3)
(7, 181, 4)
(7, 181, 5)
(7, 181, 6)
(7, 181, 7)
(7, 182, 0)
(7, 182, 1)
(7, 182, 2)
(7, 182, 3)
(7, 182, 4)
(7, 182, 5)
(7, 182, 6)
(7, 182, 7)
(7, 183, 0)
(7, 183, 1)
(7, 183, 2)
(7, 183, 3)
(7, 183, 4)
(7, 183, 5)
(7, 183, 6)
(7, 183, 7)
(7, 184, 0)
(7, 184, 1)
(7, 184, 2)
(7, 184, 3)
(7, 184, 4)
(7, 184, 5)
(7, 184, 6)
(7, 184, 7)
(7, 185, 0)
(7, 185, 1)
(7, 185, 2)
(7, 185, 3)
(7, 185, 4)
(7, 185, 5)
(7, 185, 6)
(7, 185, 7)
(7, 186, 0)
(7, 186, 1)
(7, 186, 2)
(7, 186, 3)
(7, 186, 4)
(7, 186, 5)
(7, 186, 6)
(7, 186, 7)
(7, 187, 0)
(7, 187, 1)
(7, 187, 2)
(7, 187, 3)
(7, 187, 4)
(7, 187, 5)
(7, 187, 6)
(7, 187, 7)
(7, 188, 0)
(7, 188, 1)
(7, 188, 2)
(7, 188, 3)
(7, 188, 4)
(7, 188, 5)
(7, 188, 6)
(7, 188, 7)
(7, 189, 0)
(7, 189, 1)
(7, 189, 2)
(7, 189, 3)
(7, 189, 4)
(7, 189, 5)
(7, 189, 6)
(7, 189, 7)
(7, 190, 0)
(7, 190, 1)
(7, 190, 2)
(7, 190, 3)
(7, 190, 4)
(7, 190, 5)
(7, 190, 6)
(7, 190, 7)
(7, 191, 0)
(7, 191, 1)
(7, 191, 2)
(7, 191, 3)
(7, 191, 4)
(7, 191, 5)
(7, 191, 6)
(7, 191, 7)
(7, 192, 0)
(7, 192, 1)
(7, 192, 2)
(7, 192, 3)
(7, 192, 4)
(7, 192, 5)
(7, 192, 6)
(7, 192, 7)
(7, 193, 0)
(7, 193, 1)
(7, 193, 2)
(7, 193, 3)
(7, 193, 4)
(7, 193, 5)
(7, 193, 6)
(7, 193, 7)
(7, 194, 0)
(7, 194, 1)
(7, 194, 2)
(7, 194, 3)
(7, 194, 4)
(7, 194, 5)
(7, 194, 6)
(7, 194, 7)
(7, 195, 0)
(7, 195, 1)
(7, 195, 2)
(7, 195, 3)
(7, 195, 4)
(7, 195, 5)
(7, 195, 6)
(7, 195, 7)
(7, 196, 0)
(7, 196, 1)
(7, 196, 2)
(7, 196, 3)
(7, 196, 4)
(7, 196, 5)
(7, 196, 6)
(7, 196, 7)
(7, 197, 0)
(7, 197, 1)
(7, 197, 2)
(7, 197, 3)
(7, 197, 4)
(7, 197, 5)
(7, 197, 6)
(7, 197, 7)
(7, 198, 0)
(7, 198, 1)
(7, 198, 2)
(7, 198, 3)
(7, 198, 4)
(7, 198, 5)
(7, 198, 6)
(7, 198, 7)
(7, 199, 0)
(7, 199, 1)
(7, 199, 2)
(7, 199, 3)
(7, 199, 4)
(7, 199, 5)
(7, 199, 6)
(7, 199, 7)
(7, 200, 0)
(7, 200, 1)
(7, 200, 2)
(7, 200, 3)
(7, 200, 4)
(7, 200, 5)
(7, 200, 6)
(7, 200, 7)
(7, 201, 0)
(7, 201, 1)
(7, 201, 2)
(7, 201, 3)
(7, 201, 4)
(7, 201, 5)
(7, 201, 6)
(7, 201, 7)
(7, 202, 0)
(7, 202, 1)
(7, 202, 2)
(7, 202, 3)
(7, 202, 4)
(7, 202, 5)
(7, 202, 6)
(7, 202, 7)
(7, 203, 0)
(7, 203, 1)
(7, 203, 2)
(7, 203, 3)
(7, 203, 4)
(7, 203, 5)
(7, 203, 6)
(7, 203, 7)
(7, 204, 0)
(7, 204, 1)
(7, 204, 2)
(7, 204, 3)
(7, 204, 4)
(7, 204, 5)
(7, 204, 6)
(7, 204, 7)
(7, 205, 0)
(7, 205, 1)
(7, 205, 2)
(7, 205, 3)
(7, 205, 4)
(7, 205, 5)
(7, 205, 6)
(7, 205, 7)
(7, 206, 0)
(7, 206, 1)
(7, 206, 2)
(7, 206, 3)
(7, 206, 4)
(7, 206, 5)
(7, 206, 6)
(7, 206, 7)
(7, 207, 0)
(7, 207, 1)
(7, 207, 2)
(7, 207, 3)
(7, 207, 4)
(7, 207, 5)
(7, 207, 6)
(7, 207, 7)
(7, 208, 0)
(7, 208, 1)
(7, 208, 2)
(7, 208, 3)
(7, 208, 4)
(7, 208, 5)
(7, 208, 6)
(7, 208, 7)
(7, 209, 0)
(7, 209, 1)
(7, 209, 2)
(7, 209, 3)
(7, 209, 4)
(7, 209, 5)
(7, 209, 6)
(7, 209, 7)
(7, 210, 0)
(7, 210, 1)
(7, 210, 2)
(7, 210, 3)
(7, 210, 4)
(7, 210, 5)
(7, 210, 6)
(7, 210, 7)
(7, 211, 0)
(7, 211, 1)
(7, 211, 2)
(7, 211, 3)
(7, 211, 4)
(7, 211, 5)
(7, 211, 6)
(7, 211, 7)
(7, 212, 0)
(7, 212, 1)
(7, 212, 2)
(7, 212, 3)
(7, 212, 4)
(7, 212, 5)
(7, 212, 6)
(7, 212, 7)
(7, 213, 0)
(7, 213, 1)
(7, 213, 2)
(7, 213, 3)
(7, 213, 4)
(7, 213, 5)
(7, 213, 6)
(7, 213, 7)
(7, 214, 0)
(7, 214, 1)
(7, 214, 2)
(7, 214, 3)
(7, 214, 4)
(7, 214, 5)
(7, 214, 6)
(7, 214, 7)
(7, 215, 0)
(7, 215, 1)
(7, 215, 2)
(7, 215, 3)
(7, 215, 4)
(7, 215, 5)
(7, 215, 6)
(7, 215, 7)
(7, 216, 0)
(7, 216, 1)
(7, 216, 2)
(7, 216, 3)
(7, 216, 4)
(7, 216, 5)
(7, 216, 6)
(7, 216, 7)
(7, 217, 0)
(7, 217, 1)
(7, 217, 2)
(7, 217, 3)
(7, 217, 4)
(7, 217, 5)
(7, 217, 6)
(7, 217, 7)
(7, 218, 0)
(7, 218, 1)
(7, 218, 2)
(7, 218, 3)
(7, 218, 4)
(7, 218, 5)
(7, 218, 6)
(7, 218, 7)
(7, 219, 0)
(7, 219, 1)
(7, 219, 2)
(7, 219, 3)
(7, 219, 4)
(7, 219, 5)
(7, 219, 6)
(7, 219, 7)
(7, 220, 0)
(7, 220, 1)
(7, 220, 2)
(7, 220, 3)
(7, 220, 4)
(7, 220, 5)
(7, 220, 6)
(7, 220, 7)
(7, 221, 0)
(7, 221, 1)
(7, 221, 2)
(7, 221, 3)
(7, 221, 4)
(7, 221, 5)
(7, 221, 6)
(7, 221, 7)
(7, 222, 0)
(7, 222, 1)
(7, 222, 2)
(7, 222, 3)
(7, 222, 4)
(7, 222, 5)
(7, 222, 6)
(7, 222, 7)
(7, 223, 0)
(7, 223, 1)
(7, 223, 2)
(7, 223, 3)
(7, 223, 4)
(7, 223, 5)
(7, 223, 6)
(7, 223, 7)
(7, 224, 0)
(7, 224, 1)
(7, 224, 2)
(7, 224, 3)
(7, 224, 4)
(7, 224, 5)
(7, 224, 6)
(7, 224, 7)
(7, 225, 0)
(7, 225, 1)
(7, 225, 2)
(7, 225, 3)
(7, 225, 4)
(7, 225, 5)
(7, 225, 6)
(7, 225, 7)
(7, 226, 0)
(7, 226, 1)
(7, 226, 2)
(7, 226, 3)
(7, 226, 4)
(7, 226, 5)
(7, 226, 6)
(7, 226, 7)
(7, 227, 0)
(7, 227, 1)
(7, 227, 2)
(7, 227, 3)
(7, 227, 4)
(7, 227, 5)
(7, 227, 6)
(7, 227, 7)
(7, 228, 0)
(7, 228, 1)
(7, 228, 2)
(7, 228, 3)
(7, 228, 4)
(7, 228, 5)
(7, 228, 6)
(7, 228, 7)
(7, 229, 0)
(7, 229, 1)
(7, 229, 2)
(7, 229, 3)
(7, 229, 4)
(7, 229, 5)
(7, 229, 6)
(7, 229, 7)
(7, 230, 0)
(7, 230, 1)
(7, 230, 2)
(7, 230, 3)
(7, 230, 4)
(7, 230, 5)
(7, 230, 6)
(7, 230, 7)
(7, 231, 0)
(7, 231, 1)
(7, 231, 2)
(7, 231, 3)
(7, 231, 4)
(7, 231, 5)
(7, 231, 6)
(7, 231, 7)
(7, 232, 0)
(7, 232, 1)
(7, 232, 2)
(7, 232, 3)
(7, 232, 4)
(7, 232, 5)
(7, 232, 6)
(7, 232, 7)
(7, 233, 0)
(7, 233, 1)
(7, 233, 2)
(7, 233, 3)
(7, 233, 4)
(7, 233, 5)
(7, 233, 6)
(7, 233, 7)
(7, 234, 0)
(7, 234, 1)
(7, 234, 2)
(7, 234, 3)
(7, 234, 4)
(7, 234, 5)
(7, 234, 6)
(7, 234, 7)
(7, 235, 0)
(7, 235, 1)
(7, 235, 2)
(7, 235, 3)
(7, 235, 4)
(7, 235, 5)
(7, 235, 6)
(7, 235, 7)
(7, 236, 0)
(7, 236, 1)
(7, 236, 2)
(7, 236, 3)
(7, 236, 4)
(7, 236, 5)
(7, 236, 6)
(7, 236, 7)
(7, 237, 0)
(7, 237, 1)
(7, 237, 2)
(7, 237, 3)
(7, 237, 4)
(7, 237, 5)
(7, 237, 6)
(7, 237, 7)
(7, 238, 0)
(7, 238, 1)
(7, 238, 2)
(7, 238, 3)
(7, 238, 4)
(7, 238, 5)
(7, 238, 6)
(7, 238, 7)
(7, 239, 0)
(7, 239, 1)
(7, 239, 2)
(7, 239, 3)
(7, 239, 4)
(7, 239, 5)
(7, 239, 6)
(7, 239, 7)
(7, 240, 0)
(7, 240, 1)
(7, 240, 2)
(7, 240, 3)
(7, 240, 4)
(7, 240, 5)
(7, 240, 6)
(7, 240, 7)
(7, 241, 0)
(7, 241, 1)
(7, 241, 2)
(7, 241, 3)
(7, 241, 4)
(7, 241, 5)
(7, 241, 6)
(7, 241, 7)
(7, 242, 0)
(7, 242, 1)
(7, 242, 2)
(7, 242, 3)
(7, 242, 4)
(7, 242, 5)
(7, 242, 6)
(7, 242, 7)
(7, 243, 0)
(7, 243, 1)
(7, 243, 2)
(7, 243, 3)
(7, 243, 4)
(7, 243, 5)
(7, 243, 6)
(7, 243, 7)
(7, 244, 0)
(7, 244, 1)
(7, 244, 2)
(7, 244, 3)
(7, 244, 4)
(7, 244, 5)
(7, 244, 6)
(7, 244, 7)
(7, 245, 0)
(7, 245, 1)
(7, 245, 2)
(7, 245, 3)
(7, 245, 4)
(7, 245, 5)
(7, 245, 6)
(7, 245, 7)
(7, 246, 0)
(7, 246, 1)
(7, 246, 2)
(7, 246, 3)
(7, 246, 4)
(7, 246, 5)
(7, 246, 6)
(7, 246, 7)
(7, 247, 0)
(7, 247, 1)
(7, 247, 2)
(7, 247, 3)
(7, 247, 4)
(7, 247, 5)
(7, 247, 6)
(7, 247, 7)
(7, 248, 0)
(7, 248, 1)
(7, 248, 2)
(7, 248, 3)
(7, 248, 4)
(7, 248, 5)
(7, 248, 6)
(7, 248, 7)
(7, 249, 0)
(7, 249, 1)
(7, 249, 2)
(7, 249, 3)
(7, 249, 4)
(7, 249, 5)
(7, 249, 6)
(7, 249, 7)
(7, 250, 0)
(7, 250, 1)
(7, 250, 2)
(7, 250, 3)
(7, 250, 4)
(7, 250, 5)
(7, 250, 6)
(7, 250, 7)
(7, 251, 0)
(7, 251, 1)
(7, 251, 2)
(7, 251, 3)
(7, 251, 4)
(7, 251, 5)
(7, 251, 6)
(7, 251, 7)
(7, 252, 0)
(7, 252, 1)
(7, 252, 2)
(7, 252, 3)
(7, 252, 4)
(7, 252, 5)
(7, 252, 6)
(7, 252, 7)
(7, 253, 0)
(7, 253, 1)
(7, 253, 2)
(7, 253, 3)
(7, 253, 4)
(7, 253, 5)
(7, 253, 6)
(7, 253, 7)
(7, 254, 0)
(7, 254, 1)
(7, 254, 2)
(7, 254, 3)
(7, 254, 4)
(7, 254, 5)
(7, 254, 6)
(7, 254, 7)
(7, 255, 0)
(7, 255, 1)
(7, 255, 2)
(7, 255, 3)
(7, 255, 4)
(7, 255, 5)
(7, 255, 6)
(7, 255, 7)
(8, 0, 0)
(8, 0, 1)
(8, 0, 2)
(8, 0, 3)
(8, 0, 4)
(8, 0, 5)
(8, 0, 6)
(8, 0, 7)
(8, 1, 0)
(8, 1, 1)
(8, 1, 2)
(8, 1, 3)
(8, 1, 4)
(8, 1, 5)
(8, 1, 6)
(8, 1, 7)
(8, 2, 0)
(8, 2, 1)
(8, 2, 2)
(8, 2, 3)
(8, 2, 4)
(8, 2, 5)
(8, 2, 6)
(8, 2, 7)
(8, 3, 0)
(8, 3, 1)
(8, 3, 2)
(8, 3, 3)
(8, 3, 4)
(8, 3, 5)
(8, 3, 6)
(8, 3, 7)
(8, 4, 0)
(8, 4, 1)
(8, 4, 2)
(8, 4, 3)
(8, 4, 4)
(8, 4, 5)
(8, 4, 6)
(8, 4, 7)
(8, 5, 0)
(8, 5, 1)
(8, 5, 2)
(8, 5, 3)
(8, 5, 4)
(8, 5, 5)
(8, 5, 6)
(8, 5, 7)
(8, 6, 0)
(8, 6, 1)
(8, 6, 2)
(8, 6, 3)
(8, 6, 4)
(8, 6, 5)
(8, 6, 6)
(8, 6, 7)
(8, 7, 0)
(8, 7, 1)
(8, 7, 2)
(8, 7, 3)
(8, 7, 4)
(8, 7, 5)
(8, 7, 6)
(8, 7, 7)
(8, 8, 0)
(8, 8, 1)
(8, 8, 2)
(8, 8, 3)
(8, 8, 4)
(8, 8, 5)
(8, 8, 6)
(8, 8, 7)
(8, 9, 0)
(8, 9, 1)
(8, 9, 2)
(8, 9, 3)
(8, 9, 4)
(8, 9, 5)
(8, 9, 6)
(8, 9, 7)
(8, 10, 0)
(8, 10, 1)
(8, 10, 2)
(8, 10, 3)
(8, 10, 4)
(8, 10, 5)
(8, 10, 6)
(8, 10, 7)
(8, 11, 0)
(8, 11, 1)
(8, 11, 2)
(8, 11, 3)
(8, 11, 4)
(8, 11, 5)
(8, 11, 6)
(8, 11, 7)
(8, 12, 0)
(8, 12, 1)
(8, 12, 2)
(8, 12, 3)
(8, 12, 4)
(8, 12, 5)
(8, 12, 6)
(8, 12, 7)
(8, 13, 0)
(8, 13, 1)
(8, 13, 2)
(8, 13, 3)
(8, 13, 4)
(8, 13, 5)
(8, 13, 6)
(8, 13, 7)
(8, 14, 0)
(8, 14, 1)
(8, 14, 2)
(8, 14, 3)
(8, 14, 4)
(8, 14, 5)
(8, 14, 6)
(8, 14, 7)
(8, 15, 0)
(8, 15, 1)
(8, 15, 2)
(8, 15, 3)
(8, 15, 4)
(8, 15, 5)
(8, 15, 6)
(8, 15, 7)
(8, 16, 0)
(8, 16, 1)
(8, 16, 2)
(8, 16, 3)
(8, 16, 4)
(8, 16, 5)
(8, 16, 6)
(8, 16, 7)
(8, 17, 0)
(8, 17, 1)
(8, 17, 2)
(8, 17, 3)
(8, 17, 4)
(8, 17, 5)
(8, 17, 6)
(8, 17, 7)
(8, 18, 0)
(8, 18, 1)
(8, 18, 2)
(8, 18, 3)
(8, 18, 4)
(8, 18, 5)
(8, 18, 6)
(8, 18, 7)
(8, 19, 0)
(8, 19, 1)
(8, 19, 2)
(8, 19, 3)
(8, 19, 4)
(8, 19, 5)
(8, 19, 6)
(8, 19, 7)
(8, 20, 0)
(8, 20, 1)
(8, 20, 2)
(8, 20, 3)
(8, 20, 4)
(8, 20, 5)
(8, 20, 6)
(8, 20, 7)
(8, 21, 0)
(8, 21, 1)
(8, 21, 2)
(8, 21, 3)
(8, 21, 4)
(8, 21, 5)
(8, 21, 6)
(8, 21, 7)
(8, 22, 0)
(8, 22, 1)
(8, 22, 2)
(8, 22, 3)
(8, 22, 4)
(8, 22, 5)
(8, 22, 6)
(8, 22, 7)
(8, 23, 0)
(8, 23, 1)
(8, 23, 2)
(8, 23, 3)
(8, 23, 4)
(8, 23, 5)
(8, 23, 6)
(8, 23, 7)
(8, 24, 0)
(8, 24, 1)
(8, 24, 2)
(8, 24, 3)
(8, 24, 4)
(8, 24, 5)
(8, 24, 6)
(8, 24, 7)
(8, 25, 0)
(8, 25, 1)
(8, 25, 2)
(8, 25, 3)
(8, 25, 4)
(8, 25, 5)
(8, 25, 6)
(8, 25, 7)
(8, 26, 0)
(8, 26, 1)
(8, 26, 2)
(8, 26, 3)
(8, 26, 4)
(8, 26, 5)
(8, 26, 6)
(8, 26, 7)
(8, 27, 0)
(8, 27, 1)
(8, 27, 2)
(8, 27, 3)
(8, 27, 4)
(8, 27, 5)
(8, 27, 6)
(8, 27, 7)
(8, 28, 0)
(8, 28, 1)
(8, 28, 2)
(8, 28, 3)
(8, 28, 4)
(8, 28, 5)
(8, 28, 6)
(8, 28, 7)
(8, 29, 0)
(8, 29, 1)
(8, 29, 2)
(8, 29, 3)
(8, 29, 4)
(8, 29, 5)
(8, 29, 6)
(8, 29, 7)
(8, 30, 0)
(8, 30, 1)
(8, 30, 2)
(8, 30, 3)
(8, 30, 4)
(8, 30, 5)
(8, 30, 6)
(8, 30, 7)
(8, 31, 0)
(8, 31, 1)
(8, 31, 2)
(8, 31, 3)
(8, 31, 4)
(8, 31, 5)
(8, 31, 6)
(8, 31, 7)
(8, 32, 0)
(8, 32, 1)
(8, 32, 2)
(8, 32, 3)
(8, 32, 4)
(8, 32, 5)
(8, 32, 6)
(8, 32, 7)
(8, 33, 0)
(8, 33, 1)
(8, 33, 2)
(8, 33, 3)
(8, 33, 4)
(8, 33, 5)
(8, 33, 6)
(8, 33, 7)
(8, 34, 0)
(8, 34, 1)
(8, 34, 2)
(8, 34, 3)
(8, 34, 4)
(8, 34, 5)
(8, 34, 6)
(8, 34, 7)
(8, 35, 0)
(8, 35, 1)
(8, 35, 2)
(8, 35, 3)
(8, 35, 4)
(8, 35, 5)
(8, 35, 6)
(8, 35, 7)
(8, 36, 0)
(8, 36, 1)
(8, 36, 2)
(8, 36, 3)
(8, 36, 4)
(8, 36, 5)
(8, 36, 6)
(8, 36, 7)
(8, 37, 0)
(8, 37, 1)
(8, 37, 2)
(8, 37, 3)
(8, 37, 4)
(8, 37, 5)
(8, 37, 6)
(8, 37, 7)
(8, 38, 0)
(8, 38, 1)
(8, 38, 2)
(8, 38, 3)
(8, 38, 4)
(8, 38, 5)
(8, 38, 6)
(8, 38, 7)
(8, 39, 0)
(8, 39, 1)
(8, 39, 2)
(8, 39, 3)
(8, 39, 4)
(8, 39, 5)
(8, 39, 6)
(8, 39, 7)
(8, 40, 0)
(8, 40, 1)
(8, 40, 2)
(8, 40, 3)
(8, 40, 4)
(8, 40, 5)
(8, 40, 6)
(8, 40, 7)
(8, 41, 0)
(8, 41, 1)
(8, 41, 2)
(8, 41, 3)
(8, 41, 4)
(8, 41, 5)
(8, 41, 6)
(8, 41, 7)
(8, 42, 0)
(8, 42, 1)
(8, 42, 2)
(8, 42, 3)
(8, 42, 4)
(8, 42, 5)
(8, 42, 6)
(8, 42, 7)
(8, 43, 0)
(8, 43, 1)
(8, 43, 2)
(8, 43, 3)
(8, 43, 4)
(8, 43, 5)
(8, 43, 6)
(8, 43, 7)
(8, 44, 0)
(8, 44, 1)
(8, 44, 2)
(8, 44, 3)
(8, 44, 4)
(8, 44, 5)
(8, 44, 6)
(8, 44, 7)
(8, 45, 0)
(8, 45, 1)
(8, 45, 2)
(8, 45, 3)
(8, 45, 4)
(8, 45, 5)
(8, 45, 6)
(8, 45, 7)
(8, 46, 0)
(8, 46, 1)
(8, 46, 2)
(8, 46, 3)
(8, 46, 4)
(8, 46, 5)
(8, 46, 6)
(8, 46, 7)
(8, 47, 0)
(8, 47, 1)
(8, 47, 2)
(8, 47, 3)
(8, 47, 4)
(8, 47, 5)
(8, 47, 6)
(8, 47, 7)
(8, 48, 0)
(8, 48, 1)
(8, 48, 2)
(8, 48, 3)
(8, 48, 4)
(8, 48, 5)
(8, 48, 6)
(8, 48, 7)
(8, 49, 0)
(8, 49, 1)
(8, 49, 2)
(8, 49, 3)
(8, 49, 4)
(8, 49, 5)
(8, 49, 6)
(8, 49, 7)
(8, 50, 0)
(8, 50, 1)
(8, 50, 2)
(8, 50, 3)
(8, 50, 4)
(8, 50, 5)
(8, 50, 6)
(8, 50, 7)
(8, 51, 0)
(8, 51, 1)
(8, 51, 2)
(8, 51, 3)
(8, 51, 4)
(8, 51, 5)
(8, 51, 6)
(8, 51, 7)
(8, 52, 0)
(8, 52, 1)
(8, 52, 2)
(8, 52, 3)
(8, 52, 4)
(8, 52, 5)
(8, 52, 6)
(8, 52, 7)
(8, 53, 0)
(8, 53, 1)
(8, 53, 2)
(8, 53, 3)
(8, 53, 4)
(8, 53, 5)
(8, 53, 6)
(8, 53, 7)
(8, 54, 0)
(8, 54, 1)
(8, 54, 2)
(8, 54, 3)
(8, 54, 4)
(8, 54, 5)
(8, 54, 6)
(8, 54, 7)
(8, 55, 0)
(8, 55, 1)
(8, 55, 2)
(8, 55, 3)
(8, 55, 4)
(8, 55, 5)
(8, 55, 6)
(8, 55, 7)
(8, 56, 0)
(8, 56, 1)
(8, 56, 2)
(8, 56, 3)
(8, 56, 4)
(8, 56, 5)
(8, 56, 6)
(8, 56, 7)
(8, 57, 0)
(8, 57, 1)
(8, 57, 2)
(8, 57, 3)
(8, 57, 4)
(8, 57, 5)
(8, 57, 6)
(8, 57, 7)
(8, 58, 0)
(8, 58, 1)
(8, 58, 2)
(8, 58, 3)
(8, 58, 4)
(8, 58, 5)
(8, 58, 6)
(8, 58, 7)
(8, 59, 0)
(8, 59, 1)
(8, 59, 2)
(8, 59, 3)
(8, 59, 4)
(8, 59, 5)
(8, 59, 6)
(8, 59, 7)
(8, 60, 0)
(8, 60, 1)
(8, 60, 2)
(8, 60, 3)
(8, 60, 4)
(8, 60, 5)
(8, 60, 6)
(8, 60, 7)
(8, 61, 0)
(8, 61, 1)
(8, 61, 2)
(8, 61, 3)
(8, 61, 4)
(8, 61, 5)
(8, 61, 6)
(8, 61, 7)
(8, 62, 0)
(8, 62, 1)
(8, 62, 2)
(8, 62, 3)
(8, 62, 4)
(8, 62, 5)
(8, 62, 6)
(8, 62, 7)
(8, 63, 0)
(8, 63, 1)
(8, 63, 2)
(8, 63, 3)
(8, 63, 4)
(8, 63, 5)
(8, 63, 6)
(8, 63, 7)
(8, 64, 0)
(8, 64, 1)
(8, 64, 2)
(8, 64, 3)
(8, 64, 4)
(8, 64, 5)
(8, 64, 6)
(8, 64, 7)
(8, 65, 0)
(8, 65, 1)
(8, 65, 2)
(8, 65, 3)
(8, 65, 4)
(8, 65, 5)
(8, 65, 6)
(8, 65, 7)
(8, 66, 0)
(8, 66, 1)
(8, 66, 2)
(8, 66, 3)
(8, 66, 4)
(8, 66, 5)
(8, 66, 6)
(8, 66, 7)
(8, 67, 0)
(8, 67, 1)
(8, 67, 2)
(8, 67, 3)
(8, 67, 4)
(8, 67, 5)
(8, 67, 6)
(8, 67, 7)
(8, 68, 0)
(8, 68, 1)
(8, 68, 2)
(8, 68, 3)
(8, 68, 4)
(8, 68, 5)
(8, 68, 6)
(8, 68, 7)
(8, 69, 0)
(8, 69, 1)
(8, 69, 2)
(8, 69, 3)
(8, 69, 4)
(8, 69, 5)
(8, 69, 6)
(8, 69, 7)
(8, 70, 0)
(8, 70, 1)
(8, 70, 2)
(8, 70, 3)
(8, 70, 4)
(8, 70, 5)
(8, 70, 6)
(8, 70, 7)
(8, 71, 0)
(8, 71, 1)
(8, 71, 2)
(8, 71, 3)
(8, 71, 4)
(8, 71, 5)
(8, 71, 6)
(8, 71, 7)
(8, 72, 0)
(8, 72, 1)
(8, 72, 2)
(8, 72, 3)
(8, 72, 4)
(8, 72, 5)
(8, 72, 6)
(8, 72, 7)
(8, 73, 0)
(8, 73, 1)
(8, 73, 2)
(8, 73, 3)
(8, 73, 4)
(8, 73, 5)
(8, 73, 6)
(8, 73, 7)
(8, 74, 0)
(8, 74, 1)
(8, 74, 2)
(8, 74, 3)
(8, 74, 4)
(8, 74, 5)
(8, 74, 6)
(8, 74, 7)
(8, 75, 0)
(8, 75, 1)
(8, 75, 2)
(8, 75, 3)
(8, 75, 4)
(8, 75, 5)
(8, 75, 6)
(8, 75, 7)
(8, 76, 0)
(8, 76, 1)
(8, 76, 2)
(8, 76, 3)
(8, 76, 4)
(8, 76, 5)
(8, 76, 6)
(8, 76, 7)
(8, 77, 0)
(8, 77, 1)
(8, 77, 2)
(8, 77, 3)
(8, 77, 4)
(8, 77, 5)
(8, 77, 6)
(8, 77, 7)
(8, 78, 0)
(8, 78, 1)
(8, 78, 2)
(8, 78, 3)
(8, 78, 4)
(8, 78, 5)
(8, 78, 6)
(8, 78, 7)
(8, 79, 0)
(8, 79, 1)
(8, 79, 2)
(8, 79, 3)
(8, 79, 4)
(8, 79, 5)
(8, 79, 6)
(8, 79, 7)
(8, 80, 0)
(8, 80, 1)
(8, 80, 2)
(8, 80, 3)
(8, 80, 4)
(8, 80, 5)
(8, 80, 6)
(8, 80, 7)
(8, 81, 0)
(8, 81, 1)
(8, 81, 2)
(8, 81, 3)
(8, 81, 4)
(8, 81, 5)
(8, 81, 6)
(8, 81, 7)
(8, 82, 0)
(8, 82, 1)
(8, 82, 2)
(8, 82, 3)
(8, 82, 4)
(8, 82, 5)
(8, 82, 6)
(8, 82, 7)
(8, 83, 0)
(8, 83, 1)
(8, 83, 2)
(8, 83, 3)
(8, 83, 4)
(8, 83, 5)
(8, 83, 6)
(8, 83, 7)
(8, 84, 0)
(8, 84, 1)
(8, 84, 2)
(8, 84, 3)
(8, 84, 4)
(8, 84, 5)
(8, 84, 6)
(8, 84, 7)
(8, 85, 0)
(8, 85, 1)
(8, 85, 2)
(8, 85, 3)
(8, 85, 4)
(8, 85, 5)
(8, 85, 6)
(8, 85, 7)
(8, 86, 0)
(8, 86, 1)
(8, 86, 2)
(8, 86, 3)
(8, 86, 4)
(8, 86, 5)
(8, 86, 6)
(8, 86, 7)
(8, 87, 0)
(8, 87, 1)
(8, 87, 2)
(8, 87, 3)
(8, 87, 4)
(8, 87, 5)
(8, 87, 6)
(8, 87, 7)
(8, 88, 0)
(8, 88, 1)
(8, 88, 2)
(8, 88, 3)
(8, 88, 4)
(8, 88, 5)
(8, 88, 6)
(8, 88, 7)
(8, 89, 0)
(8, 89, 1)
(8, 89, 2)
(8, 89, 3)
(8, 89, 4)
(8, 89, 5)
(8, 89, 6)
(8, 89, 7)
(8, 90, 0)
(8, 90, 1)
(8, 90, 2)
(8, 90, 3)
(8, 90, 4)
(8, 90, 5)
(8, 90, 6)
(8, 90, 7)
(8, 91, 0)
(8, 91, 1)
(8, 91, 2)
(8, 91, 3)
(8, 91, 4)
(8, 91, 5)
(8, 91, 6)
(8, 91, 7)
(8, 92, 0)
(8, 92, 1)
(8, 92, 2)
(8, 92, 3)
(8, 92, 4)
(8, 92, 5)
(8, 92, 6)
(8, 92, 7)
(8, 93, 0)
(8, 93, 1)
(8, 93, 2)
(8, 93, 3)
(8, 93, 4)
(8, 93, 5)
(8, 93, 6)
(8, 93, 7)
(8, 94, 0)
(8, 94, 1)
(8, 94, 2)
(8, 94, 3)
(8, 94, 4)
(8, 94, 5)
(8, 94, 6)
(8, 94, 7)
(8, 95, 0)
(8, 95, 1)
(8, 95, 2)
(8, 95, 3)
(8, 95, 4)
(8, 95, 5)
(8, 95, 6)
(8, 95, 7)
(8, 96, 0)
(8, 96, 1)
(8, 96, 2)
(8, 96, 3)
(8, 96, 4)
(8, 96, 5)
(8, 96, 6)
(8, 96, 7)
(8, 97, 0)
(8, 97, 1)
(8, 97, 2)
(8, 97, 3)
(8, 97, 4)
(8, 97, 5)
(8, 97, 6)
(8, 97, 7)
(8, 98, 0)
(8, 98, 1)
(8, 98, 2)
(8, 98, 3)
(8, 98, 4)
(8, 98, 5)
(8, 98, 6)
(8, 98, 7)
(8, 99, 0)
(8, 99, 1)
(8, 99, 2)
(8, 99, 3)
(8, 99, 4)
(8, 99, 5)
(8, 99, 6)
(8, 99, 7)
(8, 100, 0)
(8, 100, 1)
(8, 100, 2)
(8, 100, 3)
(8, 100, 4)
(8, 100, 5)
(8, 100, 6)
(8, 100, 7)
(8, 101, 0)
(8, 101, 1)
(8, 101, 2)
(8, 101, 3)
(8, 101, 4)
(8, 101, 5)
(8, 101, 6)
(8, 101, 7)
(8, 102, 0)
(8, 102, 1)
(8, 102, 2)
(8, 102, 3)
(8, 102, 4)
(8, 102, 5)
(8, 102, 6)
(8, 102, 7)
(8, 103, 0)
(8, 103, 1)
(8, 103, 2)
(8, 103, 3)
(8, 103, 4)
(8, 103, 5)
(8, 103, 6)
(8, 103, 7)
(8, 104, 0)
(8, 104, 1)
(8, 104, 2)
(8, 104, 3)
(8, 104, 4)
(8, 104, 5)
(8, 104, 6)
(8, 104, 7)
(8, 105, 0)
(8, 105, 1)
(8, 105, 2)
(8, 105, 3)
(8, 105, 4)
(8, 105, 5)
(8, 105, 6)
(8, 105, 7)
(8, 106, 0)
(8, 106, 1)
(8, 106, 2)
(8, 106, 3)
(8, 106, 4)
(8, 106, 5)
(8, 106, 6)
(8, 106, 7)
(8, 107, 0)
(8, 107, 1)
(8, 107, 2)
(8, 107, 3)
(8, 107, 4)
(8, 107, 5)
(8, 107, 6)
(8, 107, 7)
(8, 108, 0)
(8, 108, 1)
(8, 108, 2)
(8, 108, 3)
(8, 108, 4)
(8, 108, 5)
(8, 108, 6)
(8, 108, 7)
(8, 109, 0)
(8, 109, 1)
(8, 109, 2)
(8, 109, 3)
(8, 109, 4)
(8, 109, 5)
(8, 109, 6)
(8, 109, 7)
(8, 110, 0)
(8, 110, 1)
(8, 110, 2)
(8, 110, 3)
(8, 110, 4)
(8, 110, 5)
(8, 110, 6)
(8, 110, 7)
(8, 111, 0)
(8, 111, 1)
(8, 111, 2)
(8, 111, 3)
(8, 111, 4)
(8, 111, 5)
(8, 111, 6)
(8, 111, 7)
(8, 112, 0)
(8, 112, 1)
(8, 112, 2)
(8, 112, 3)
(8, 112, 4)
(8, 112, 5)
(8, 112, 6)
(8, 112, 7)
(8, 113, 0)
(8, 113, 1)
(8, 113, 2)
(8, 113, 3)
(8, 113, 4)
(8, 113, 5)
(8, 113, 6)
(8, 113, 7)
(8, 114, 0)
(8, 114, 1)
(8, 114, 2)
(8, 114, 3)
(8, 114, 4)
(8, 114, 5)
(8, 114, 6)
(8, 114, 7)
(8, 115, 0)
(8, 115, 1)
(8, 115, 2)
(8, 115, 3)
(8, 115, 4)
(8, 115, 5)
(8, 115, 6)
(8, 115, 7)
(8, 116, 0)
(8, 116, 1)
(8, 116, 2)
(8, 116, 3)
(8, 116, 4)
(8, 116, 5)
(8, 116, 6)
(8, 116, 7)
(8, 117, 0)
(8, 117, 1)
(8, 117, 2)
(8, 117, 3)
(8, 117, 4)
(8, 117, 5)
(8, 117, 6)
(8, 117, 7)
(8, 118, 0)
(8, 118, 1)
(8, 118, 2)
(8, 118, 3)
(8, 118, 4)
(8, 118, 5)
(8, 118, 6)
(8, 118, 7)
(8, 119, 0)
(8, 119, 1)
(8, 119, 2)
(8, 119, 3)
(8, 119, 4)
(8, 119, 5)
(8, 119, 6)
(8, 119, 7)
(8, 120, 0)
(8, 120, 1)
(8, 120, 2)
(8, 120, 3)
(8, 120, 4)
(8, 120, 5)
(8, 120, 6)
(8, 120, 7)
(8, 121, 0)
(8, 121, 1)
(8, 121, 2)
(8, 121, 3)
(8, 121, 4)
(8, 121, 5)
(8, 121, 6)
(8, 121, 7)
(8, 122, 0)
(8, 122, 1)
(8, 122, 2)
(8, 122, 3)
(8, 122, 4)
(8, 122, 5)
(8, 122, 6)
(8, 122, 7)
(8, 123, 0)
(8, 123, 1)
(8, 123, 2)
(8, 123, 3)
(8, 123, 4)
(8, 123, 5)
(8, 123, 6)
(8, 123, 7)
(8, 124, 0)
(8, 124, 1)
(8, 124, 2)
(8, 124, 3)
(8, 124, 4)
(8, 124, 5)
(8, 124, 6)
(8, 124, 7)
(8, 125, 0)
(8, 125, 1)
(8, 125, 2)
(8, 125, 3)
(8, 125, 4)
(8, 125, 5)
(8, 125, 6)
(8, 125, 7)
(8, 126, 0)
(8, 126, 1)
(8, 126, 2)
(8, 126, 3)
(8, 126, 4)
(8, 126, 5)
(8, 126, 6)
(8, 126, 7)
(8, 127, 0)
(8, 127, 1)
(8, 127, 2)
(8, 127, 3)
(8, 127, 4)
(8, 127, 5)
(8, 127, 6)
(8, 127, 7)
(8, 128, 0)
(8, 128, 1)
(8, 128, 2)
(8, 128, 3)
(8, 128, 4)
(8, 128, 5)
(8, 128, 6)
(8, 128, 7)
(8, 129, 0)
(8, 129, 1)
(8, 129, 2)
(8, 129, 3)
(8, 129, 4)
(8, 129, 5)
(8, 129, 6)
(8, 129, 7)
(8, 130, 0)
(8, 130, 1)
(8, 130, 2)
(8, 130, 3)
(8, 130, 4)
(8, 130, 5)
(8, 130, 6)
(8, 130, 7)
(8, 131, 0)
(8, 131, 1)
(8, 131, 2)
(8, 131, 3)
(8, 131, 4)
(8, 131, 5)
(8, 131, 6)
(8, 131, 7)
(8, 132, 0)
(8, 132, 1)
(8, 132, 2)
(8, 132, 3)
(8, 132, 4)
(8, 132, 5)
(8, 132, 6)
(8, 132, 7)
(8, 133, 0)
(8, 133, 1)
(8, 133, 2)
(8, 133, 3)
(8, 133, 4)
(8, 133, 5)
(8, 133, 6)
(8, 133, 7)
(8, 134, 0)
(8, 134, 1)
(8, 134, 2)
(8, 134, 3)
(8, 134, 4)
(8, 134, 5)
(8, 134, 6)
(8, 134, 7)
(8, 135, 0)
(8, 135, 1)
(8, 135, 2)
(8, 135, 3)
(8, 135, 4)
(8, 135, 5)
(8, 135, 6)
(8, 135, 7)
(8, 136, 0)
(8, 136, 1)
(8, 136, 2)
(8, 136, 3)
(8, 136, 4)
(8, 136, 5)
(8, 136, 6)
(8, 136, 7)
(8, 137, 0)
(8, 137, 1)
(8, 137, 2)
(8, 137, 3)
(8, 137, 4)
(8, 137, 5)
(8, 137, 6)
(8, 137, 7)
(8, 138, 0)
(8, 138, 1)
(8, 138, 2)
(8, 138, 3)
(8, 138, 4)
(8, 138, 5)
(8, 138, 6)
(8, 138, 7)
(8, 139, 0)
(8, 139, 1)
(8, 139, 2)
(8, 139, 3)
(8, 139, 4)
(8, 139, 5)
(8, 139, 6)
(8, 139, 7)
(8, 140, 0)
(8, 140, 1)
(8, 140, 2)
(8, 140, 3)
(8, 140, 4)
(8, 140, 5)
(8, 140, 6)
(8, 140, 7)
(8, 141, 0)
(8, 141, 1)
(8, 141, 2)
(8, 141, 3)
(8, 141, 4)
(8, 141, 5)
(8, 141, 6)
(8, 141, 7)
(8, 142, 0)
(8, 142, 1)
(8, 142, 2)
(8, 142, 3)
(8, 142, 4)
(8, 142, 5)
(8, 142, 6)
(8, 142, 7)
(8, 143, 0)
(8, 143, 1)
(8, 143, 2)
(8, 143, 3)
(8, 143, 4)
(8, 143, 5)
(8, 143, 6)
(8, 143, 7)
(8, 144, 0)
(8, 144, 1)
(8, 144, 2)
(8, 144, 3)
(8, 144, 4)
(8, 144, 5)
(8, 144, 6)
(8, 144, 7)
(8, 145, 0)
(8, 145, 1)
(8, 145, 2)
(8, 145, 3)
(8, 145, 4)
(8, 145, 5)
(8, 145, 6)
(8, 145, 7)
(8, 146, 0)
(8, 146, 1)
(8, 146, 2)
(8, 146, 3)
(8, 146, 4)
(8, 146, 5)
(8, 146, 6)
(8, 146, 7)
(8, 147, 0)
(8, 147, 1)
(8, 147, 2)
(8, 147, 3)
(8, 147, 4)
(8, 147, 5)
(8, 147, 6)
(8, 147, 7)
(8, 148, 0)
(8, 148, 1)
(8, 148, 2)
(8, 148, 3)
(8, 148, 4)
(8, 148, 5)
(8, 148, 6)
(8, 148, 7)
(8, 149, 0)
(8, 149, 1)
(8, 149, 2)
(8, 149, 3)
(8, 149, 4)
(8, 149, 5)
(8, 149, 6)
(8, 149, 7)
(8, 150, 0)
(8, 150, 1)
(8, 150, 2)
(8, 150, 3)
(8, 150, 4)
(8, 150, 5)
(8, 150, 6)
(8, 150, 7)
(8, 151, 0)
(8, 151, 1)
(8, 151, 2)
(8, 151, 3)
(8, 151, 4)
(8, 151, 5)
(8, 151, 6)
(8, 151, 7)
(8, 152, 0)
(8, 152, 1)
(8, 152, 2)
(8, 152, 3)
(8, 152, 4)
(8, 152, 5)
(8, 152, 6)
(8, 152, 7)
(8, 153, 0)
(8, 153, 1)
(8, 153, 2)
(8, 153, 3)
(8, 153, 4)
(8, 153, 5)
(8, 153, 6)
(8, 153, 7)
(8, 154, 0)
(8, 154, 1)
(8, 154, 2)
(8, 154, 3)
(8, 154, 4)
(8, 154, 5)
(8, 154, 6)
(8, 154, 7)
(8, 155, 0)
(8, 155, 1)
(8, 155, 2)
(8, 155, 3)
(8, 155, 4)
(8, 155, 5)
(8, 155, 6)
(8, 155, 7)
(8, 156, 0)
(8, 156, 1)
(8, 156, 2)
(8, 156, 3)
(8, 156, 4)
(8, 156, 5)
(8, 156, 6)
(8, 156, 7)
(8, 157, 0)
(8, 157, 1)
(8, 157, 2)
(8, 157, 3)
(8, 157, 4)
(8, 157, 5)
(8, 157, 6)
(8, 157, 7)
(8, 158, 0)
(8, 158, 1)
(8, 158, 2)
(8, 158, 3)
(8, 158, 4)
(8, 158, 5)
(8, 158, 6)
(8, 158, 7)
(8, 159, 0)
(8, 159, 1)
(8, 159, 2)
(8, 159, 3)
(8, 159, 4)
(8, 159, 5)
(8, 159, 6)
(8, 159, 7)
(8, 160, 0)
(8, 160, 1)
(8, 160, 2)
(8, 160, 3)
(8, 160, 4)
(8, 160, 5)
(8, 160, 6)
(8, 160, 7)
(8, 161, 0)
(8, 161, 1)
(8, 161, 2)
(8, 161, 3)
(8, 161, 4)
(8, 161, 5)
(8, 161, 6)
(8, 161, 7)
(8, 162, 0)
(8, 162, 1)
(8, 162, 2)
(8, 162, 3)
(8, 162, 4)
(8, 162, 5)
(8, 162, 6)
(8, 162, 7)
(8, 163, 0)
(8, 163, 1)
(8, 163, 2)
(8, 163, 3)
(8, 163, 4)
(8, 163, 5)
(8, 163, 6)
(8, 163, 7)
(8, 164, 0)
(8, 164, 1)
(8, 164, 2)
(8, 164, 3)
(8, 164, 4)
(8, 164, 5)
(8, 164, 6)
(8, 164, 7)
(8, 165, 0)
(8, 165, 1)
(8, 165, 2)
(8, 165, 3)
(8, 165, 4)
(8, 165, 5)
(8, 165, 6)
(8, 165, 7)
(8, 166, 0)
(8, 166, 1)
(8, 166, 2)
(8, 166, 3)
(8, 166, 4)
(8, 166, 5)
(8, 166, 6)
(8, 166, 7)
(8, 167, 0)
(8, 167, 1)
(8, 167, 2)
(8, 167, 3)
(8, 167, 4)
(8, 167, 5)
(8, 167, 6)
(8, 167, 7)
(8, 168, 0)
(8, 168, 1)
(8, 168, 2)
(8, 168, 3)
(8, 168, 4)
(8, 168, 5)
(8, 168, 6)
(8, 168, 7)
(8, 169, 0)
(8, 169, 1)
(8, 169, 2)
(8, 169, 3)
(8, 169, 4)
(8, 169, 5)
(8, 169, 6)
(8, 169, 7)
(8, 170, 0)
(8, 170, 1)
(8, 170, 2)
(8, 170, 3)
(8, 170, 4)
(8, 170, 5)
(8, 170, 6)
(8, 170, 7)
(8, 171, 0)
(8, 171, 1)
(8, 171, 2)
(8, 171, 3)
(8, 171, 4)
(8, 171, 5)
(8, 171, 6)
(8, 171, 7)
(8, 172, 0)
(8, 172, 1)
(8, 172, 2)
(8, 172, 3)
(8, 172, 4)
(8, 172, 5)
(8, 172, 6)
(8, 172, 7)
(8, 173, 0)
(8, 173, 1)
(8, 173, 2)
(8, 173, 3)
(8, 173, 4)
(8, 173, 5)
(8, 173, 6)
(8, 173, 7)
(8, 174, 0)
(8, 174, 1)
(8, 174, 2)
(8, 174, 3)
(8, 174, 4)
(8, 174, 5)
(8, 174, 6)
(8, 174, 7)
(8, 175, 0)
(8, 175, 1)
(8, 175, 2)
(8, 175, 3)
(8, 175, 4)
(8, 175, 5)
(8, 175, 6)
(8, 175, 7)
(8, 176, 0)
(8, 176, 1)
(8, 176, 2)
(8, 176, 3)
(8, 176, 4)
(8, 176, 5)
(8, 176, 6)
(8, 176, 7)
(8, 177, 0)
(8, 177, 1)
(8, 177, 2)
(8, 177, 3)
(8, 177, 4)
(8, 177, 5)
(8, 177, 6)
(8, 177, 7)
(8, 178, 0)
(8, 178, 1)
(8, 178, 2)
(8, 178, 3)
(8, 178, 4)
(8, 178, 5)
(8, 178, 6)
(8, 178, 7)
(8, 179, 0)
(8, 179, 1)
(8, 179, 2)
(8, 179, 3)
(8, 179, 4)
(8, 179, 5)
(8, 179, 6)
(8, 179, 7)
(8, 180, 0)
(8, 180, 1)
(8, 180, 2)
(8, 180, 3)
(8, 180, 4)
(8, 180, 5)
(8, 180, 6)
(8, 180, 7)
(8, 181, 0)
(8, 181, 1)
(8, 181, 2)
(8, 181, 3)
(8, 181, 4)
(8, 181, 5)
(8, 181, 6)
(8, 181, 7)
(8, 182, 0)
(8, 182, 1)
(8, 182, 2)
(8, 182, 3)
(8, 182, 4)
(8, 182, 5)
(8, 182, 6)
(8, 182, 7)
(8, 183, 0)
(8, 183, 1)
(8, 183, 2)
(8, 183, 3)
(8, 183, 4)
(8, 183, 5)
(8, 183, 6)
(8, 183, 7)
(8, 184, 0)
(8, 184, 1)
(8, 184, 2)
(8, 184, 3)
(8, 184, 4)
(8, 184, 5)
(8, 184, 6)
(8, 184, 7)
(8, 185, 0)
(8, 185, 1)
(8, 185, 2)
(8, 185, 3)
(8, 185, 4)
(8, 185, 5)
(8, 185, 6)
(8, 185, 7)
(8, 186, 0)
(8, 186, 1)
(8, 186, 2)
(8, 186, 3)
(8, 186, 4)
(8, 186, 5)
(8, 186, 6)
(8, 186, 7)
(8, 187, 0)
(8, 187, 1)
(8, 187, 2)
(8, 187, 3)
(8, 187, 4)
(8, 187, 5)
(8, 187, 6)
(8, 187, 7)
(8, 188, 0)
(8, 188, 1)
(8, 188, 2)
(8, 188, 3)
(8, 188, 4)
(8, 188, 5)
(8, 188, 6)
(8, 188, 7)
(8, 189, 0)
(8, 189, 1)
(8, 189, 2)
(8, 189, 3)
(8, 189, 4)
(8, 189, 5)
(8, 189, 6)
(8, 189, 7)
(8, 190, 0)
(8, 190, 1)
(8, 190, 2)
(8, 190, 3)
(8, 190, 4)
(8, 190, 5)
(8, 190, 6)
(8, 190, 7)
(8, 191, 0)
(8, 191, 1)
(8, 191, 2)
(8, 191, 3)
(8, 191, 4)
(8, 191, 5)
(8, 191, 6)
(8, 191, 7)
(8, 192, 0)
(8, 192, 1)
(8, 192, 2)
(8, 192, 3)
(8, 192, 4)
(8, 192, 5)
(8, 192, 6)
(8, 192, 7)
(8, 193, 0)
(8, 193, 1)
(8, 193, 2)
(8, 193, 3)
(8, 193, 4)
(8, 193, 5)
(8, 193, 6)
(8, 193, 7)
(8, 194, 0)
(8, 194, 1)
(8, 194, 2)
(8, 194, 3)
(8, 194, 4)
(8, 194, 5)
(8, 194, 6)
(8, 194, 7)
(8, 195, 0)
(8, 195, 1)
(8, 195, 2)
(8, 195, 3)
(8, 195, 4)
(8, 195, 5)
(8, 195, 6)
(8, 195, 7)
(8, 196, 0)
(8, 196, 1)
(8, 196, 2)
(8, 196, 3)
(8, 196, 4)
(8, 196, 5)
(8, 196, 6)
(8, 196, 7)
(8, 197, 0)
(8, 197, 1)
(8, 197, 2)
(8, 197, 3)
(8, 197, 4)
(8, 197, 5)
(8, 197, 6)
(8, 197, 7)
(8, 198, 0)
(8, 198, 1)
(8, 198, 2)
(8, 198, 3)
(8, 198, 4)
(8, 198, 5)
(8, 198, 6)
(8, 198, 7)
(8, 199, 0)
(8, 199, 1)
(8, 199, 2)
(8, 199, 3)
(8, 199, 4)
(8, 199, 5)
(8, 199, 6)
(8, 199, 7)
(8, 200, 0)
(8, 200, 1)
(8, 200, 2)
(8, 200, 3)
(8, 200, 4)
(8, 200, 5)
(8, 200, 6)
(8, 200, 7)
(8, 201, 0)
(8, 201, 1)
(8, 201, 2)
(8, 201, 3)
(8, 201, 4)
(8, 201, 5)
(8, 201, 6)
(8, 201, 7)
(8, 202, 0)
(8, 202, 1)
(8, 202, 2)
(8, 202, 3)
(8, 202, 4)
(8, 202, 5)
(8, 202, 6)
(8, 202, 7)
(8, 203, 0)
(8, 203, 1)
(8, 203, 2)
(8, 203, 3)
(8, 203, 4)
(8, 203, 5)
(8, 203, 6)
(8, 203, 7)
(8, 204, 0)
(8, 204, 1)
(8, 204, 2)
(8, 204, 3)
(8, 204, 4)
(8, 204, 5)
(8, 204, 6)
(8, 204, 7)
(8, 205, 0)
(8, 205, 1)
(8, 205, 2)
(8, 205, 3)
(8, 205, 4)
(8, 205, 5)
(8, 205, 6)
(8, 205, 7)
(8, 206, 0)
(8, 206, 1)
(8, 206, 2)
(8, 206, 3)
(8, 206, 4)
(8, 206, 5)
(8, 206, 6)
(8, 206, 7)
(8, 207, 0)
(8, 207, 1)
(8, 207, 2)
(8, 207, 3)
(8, 207, 4)
(8, 207, 5)
(8, 207, 6)
(8, 207, 7)
(8, 208, 0)
(8, 208, 1)
(8, 208, 2)
(8, 208, 3)
(8, 208, 4)
(8, 208, 5)
(8, 208, 6)
(8, 208, 7)
(8, 209, 0)
(8, 209, 1)
(8, 209, 2)
(8, 209, 3)
(8, 209, 4)
(8, 209, 5)
(8, 209, 6)
(8, 209, 7)
(8, 210, 0)
(8, 210, 1)
(8, 210, 2)
(8, 210, 3)
(8, 210, 4)
(8, 210, 5)
(8, 210, 6)
(8, 210, 7)
(8, 211, 0)
(8, 211, 1)
(8, 211, 2)
(8, 211, 3)
(8, 211, 4)
(8, 211, 5)
(8, 211, 6)
(8, 211, 7)
(8, 212, 0)
(8, 212, 1)
(8, 212, 2)
(8, 212, 3)
(8, 212, 4)
(8, 212, 5)
(8, 212, 6)
(8, 212, 7)
(8, 213, 0)
(8, 213, 1)
(8, 213, 2)
(8, 213, 3)
(8, 213, 4)
(8, 213, 5)
(8, 213, 6)
(8, 213, 7)
(8, 214, 0)
(8, 214, 1)
(8, 214, 2)
(8, 214, 3)
(8, 214, 4)
(8, 214, 5)
(8, 214, 6)
(8, 214, 7)
(8, 215, 0)
(8, 215, 1)
(8, 215, 2)
(8, 215, 3)
(8, 215, 4)
(8, 215, 5)
(8, 215, 6)
(8, 215, 7)
(8, 216, 0)
(8, 216, 1)
(8, 216, 2)
(8, 216, 3)
(8, 216, 4)
(8, 216, 5)
(8, 216, 6)
(8, 216, 7)
(8, 217, 0)
(8, 217, 1)
(8, 217, 2)
(8, 217, 3)
(8, 217, 4)
(8, 217, 5)
(8, 217, 6)
(8, 217, 7)
(8, 218, 0)
(8, 218, 1)
(8, 218, 2)
(8, 218, 3)
(8, 218, 4)
(8, 218, 5)
(8, 218, 6)
(8, 218, 7)
(8, 219, 0)
(8, 219, 1)
(8, 219, 2)
(8, 219, 3)
(8, 219, 4)
(8, 219, 5)
(8, 219, 6)
(8, 219, 7)
(8, 220, 0)
(8, 220, 1)
(8, 220, 2)
(8, 220, 3)
(8, 220, 4)
(8, 220, 5)
(8, 220, 6)
(8, 220, 7)
(8, 221, 0)
(8, 221, 1)
(8, 221, 2)
(8, 221, 3)
(8, 221, 4)
(8, 221, 5)
(8, 221, 6)
(8, 221, 7)
(8, 222, 0)
(8, 222, 1)
(8, 222, 2)
(8, 222, 3)
(8, 222, 4)
(8, 222, 5)
(8, 222, 6)
(8, 222, 7)
(8, 223, 0)
(8, 223, 1)
(8, 223, 2)
(8, 223, 3)
(8, 223, 4)
(8, 223, 5)
(8, 223, 6)
(8, 223, 7)
(8, 224, 0)
(8, 224, 1)
(8, 224, 2)
(8, 224, 3)
(8, 224, 4)
(8, 224, 5)
(8, 224, 6)
(8, 224, 7)
(8, 225, 0)
(8, 225, 1)
(8, 225, 2)
(8, 225, 3)
(8, 225, 4)
(8, 225, 5)
(8, 225, 6)
(8, 225, 7)
(8, 226, 0)
(8, 226, 1)
(8, 226, 2)
(8, 226, 3)
(8, 226, 4)
(8, 226, 5)
(8, 226, 6)
(8, 226, 7)
(8, 227, 0)
(8, 227, 1)
(8, 227, 2)
(8, 227, 3)
(8, 227, 4)
(8, 227, 5)
(8, 227, 6)
(8, 227, 7)
(8, 228, 0)
(8, 228, 1)
(8, 228, 2)
(8, 228, 3)
(8, 228, 4)
(8, 228, 5)
(8, 228, 6)
(8, 228, 7)
(8, 229, 0)
(8, 229, 1)
(8, 229, 2)
(8, 229, 3)
(8, 229, 4)
(8, 229, 5)
(8, 229, 6)
(8, 229, 7)
(8, 230, 0)
(8, 230, 1)
(8, 230, 2)
(8, 230, 3)
(8, 230, 4)
(8, 230, 5)
(8, 230, 6)
(8, 230, 7)
(8, 231, 0)
(8, 231, 1)
(8, 231, 2)
(8, 231, 3)
(8, 231, 4)
(8, 231, 5)
(8, 231, 6)
(8, 231, 7)
(8, 232, 0)
(8, 232, 1)
(8, 232, 2)
(8, 232, 3)
(8, 232, 4)
(8, 232, 5)
(8, 232, 6)
(8, 232, 7)
(8, 233, 0)
(8, 233, 1)
(8, 233, 2)
(8, 233, 3)
(8, 233, 4)
(8, 233, 5)
(8, 233, 6)
(8, 233, 7)
(8, 234, 0)
(8, 234, 1)
(8, 234, 2)
(8, 234, 3)
(8, 234, 4)
(8, 234, 5)
(8, 234, 6)
(8, 234, 7)
(8, 235, 0)
(8, 235, 1)
(8, 235, 2)
(8, 235, 3)
(8, 235, 4)
(8, 235, 5)
(8, 235, 6)
(8, 235, 7)
(8, 236, 0)
(8, 236, 1)
(8, 236, 2)
(8, 236, 3)
(8, 236, 4)
(8, 236, 5)
(8, 236, 6)
(8, 236, 7)
(8, 237, 0)
(8, 237, 1)
(8, 237, 2)
(8, 237, 3)
(8, 237, 4)
(8, 237, 5)
(8, 237, 6)
(8, 237, 7)
(8, 238, 0)
(8, 238, 1)
(8, 238, 2)
(8, 238, 3)
(8, 238, 4)
(8, 238, 5)
(8, 238, 6)
(8, 238, 7)
(8, 239, 0)
(8, 239, 1)
(8, 239, 2)
(8, 239, 3)
(8, 239, 4)
(8, 239, 5)
(8, 239, 6)
(8, 239, 7)
(8, 240, 0)
(8, 240, 1)
(8, 240, 2)
(8, 240, 3)
(8, 240, 4)
(8, 240, 5)
(8, 240, 6)
(8, 240, 7)
(8, 241, 0)
(8, 241, 1)
(8, 241, 2)
(8, 241, 3)
(8, 241, 4)
(8, 241, 5)
(8, 241, 6)
(8, 241, 7)
(8, 242, 0)
(8, 242, 1)
(8, 242, 2)
(8, 242, 3)
(8, 242, 4)
(8, 242, 5)
(8, 242, 6)
(8, 242, 7)
(8, 243, 0)
(8, 243, 1)
(8, 243, 2)
(8, 243, 3)
(8, 243, 4)
(8, 243, 5)
(8, 243, 6)
(8, 243, 7)
(8, 244, 0)
(8, 244, 1)
(8, 244, 2)
(8, 244, 3)
(8, 244, 4)
(8, 244, 5)
(8, 244, 6)
(8, 244, 7)
(8, 245, 0)
(8, 245, 1)
(8, 245, 2)
(8, 245, 3)
(8, 245, 4)
(8, 245, 5)
(8, 245, 6)
(8, 245, 7)
(8, 246, 0)
(8, 246, 1)
(8, 246, 2)
(8, 246, 3)
(8, 246, 4)
(8, 246, 5)
(8, 246, 6)
(8, 246, 7)
(8, 247, 0)
(8, 247, 1)
(8, 247, 2)
(8, 247, 3)
(8, 247, 4)
(8, 247, 5)
(8, 247, 6)
(8, 247, 7)
(8, 248, 0)
(8, 248, 1)
(8, 248, 2)
(8, 248, 3)
(8, 248, 4)
(8, 248, 5)
(8, 248, 6)
(8, 248, 7)
(8, 249, 0)
(8, 249, 1)
(8, 249, 2)
(8, 249, 3)
(8, 249, 4)
(8, 249, 5)
(8, 249, 6)
(8, 249, 7)
(8, 250, 0)
(8, 250, 1)
(8, 250, 2)
(8, 250, 3)
(8, 250, 4)
(8, 250, 5)
(8, 250, 6)
(8, 250, 7)
(8, 251, 0)
(8, 251, 1)
(8, 251, 2)
(8, 251, 3)
(8, 251, 4)
(8, 251, 5)
(8, 251, 6)
(8, 251, 7)
(8, 252, 0)
(8, 252, 1)
(8, 252, 2)
(8, 252, 3)
(8, 252, 4)
(8, 252, 5)
(8, 252, 6)
(8, 252, 7)
(8, 253, 0)
(8, 253, 1)
(8, 253, 2)
(8, 253, 3)
(8, 253, 4)
(8, 253, 5)
(8, 253, 6)
(8, 253, 7)
(8, 254, 0)
(8, 254, 1)
(8, 254, 2)
(8, 254, 3)
(8, 254, 4)
(8, 254, 5)
(8, 254, 6)
(8, 254, 7)
(8, 255, 0)
(8, 255, 1)
(8, 255, 2)
(8, 255, 3)
(8, 255, 4)
(8, 255, 5)
(8, 255, 6)
(8, 255, 7)
(1, 0, 0)
(1, 0, 1)
(1, 0, 2)
(1, 0, 3)
(1, 0, 4)
(1, 0, 5)
(1, 0, 6)
(1, 0, 7)
(1, 1, 0)
(1, 1, 1)
(1, 1, 2)
(1, 1, 3)
(1, 1, 4)
(1, 1, 5)
(1, 1, 6)
(1, 1, 7)
(1, 2, 0)
(1, 2, 1)
(1, 2, 2)
(1, 2, 3)
(1, 2, 4)
(1, 2, 5)
(1, 2, 6)
(1, 2, 7)
(1, 3, 0)
(1, 3, 1)
(1, 3, 2)
(1, 3, 3)
(1, 3, 4)
(1, 3, 5)
(1, 3, 6)
(1, 3, 7)
(1, 4, 0)
(1, 4, 1)
(1, 4, 2)
(1, 4, 3)
(1, 4, 4)
(1, 4, 5)
(1, 4, 6)
(1, 4, 7)
(1, 5, 0)
(1, 5, 1)
(1, 5, 2)
(1, 5, 3)
(1, 5, 4)
(1, 5, 5)
(1, 5, 6)
(1, 5, 7)
(1, 6, 0)
(1, 6, 1)
(1, 6, 2)
(1, 6, 3)
(1, 6, 4)
(1, 6, 5)
(1, 6, 6)
(1, 6, 7)
(1, 7, 0)
(1, 7, 1)
(1, 7, 2)
(1, 7, 3)
(1, 7, 4)
(1, 7, 5)
(1, 7, 6)
(1, 7, 7)
(1, 8, 0)
(1, 8, 1)
(1, 8, 2)
(1, 8, 3)
(1, 8, 4)
(1, 8, 5)
(1, 8, 6)
(1, 8, 7)
(1, 9, 0)
(1, 9, 1)
(1, 9, 2)
(1, 9, 3)
(1, 9, 4)
(1, 9, 5)
(1, 9, 6)
(1, 9, 7)
(1, 10, 0)
(1, 10, 1)
(1, 10, 2)
(1, 10, 3)
(1, 10, 4)
(1, 10, 5)
(1, 10, 6)
(1, 10, 7)
(1, 11, 0)
(1, 11, 1)
(1, 11, 2)
(1, 11, 3)
(1, 11, 4)
(1, 11, 5)
(1, 11, 6)
(1, 11, 7)
(1, 12, 0)
(1, 12, 1)
(1, 12, 2)
(1, 12, 3)
(1, 12, 4)
(1, 12, 5)
(1, 12, 6)
(1, 12, 7)
(1, 13, 0)
(1, 13, 1)
(1, 13, 2)
(1, 13, 3)
(1, 13, 4)
(1, 13, 5)
(1, 13, 6)
(1, 13, 7)
(1, 14, 0)
(1, 14, 1)
(1, 14, 2)
(1, 14, 3)
(1, 14, 4)
(1, 14, 5)
(1, 14, 6)
(1, 14, 7)
(1, 15, 0)
(1, 15, 1)
(1, 15, 2)
(1, 15, 3)
(1, 15, 4)
(1, 15, 5)
(1, 15, 6)
(1, 15, 7)
(1, 16, 0)
(1, 16, 1)
(1, 16, 2)
(1, 16, 3)
(1, 16, 4)
(1, 16, 5)
(1, 16, 6)
(1, 16, 7)
(1, 17, 0)
(1, 17, 1)
(1, 17, 2)
(1, 17, 3)
(1, 17, 4)
(1, 17, 5)
(1, 17, 6)
(1, 17, 7)
(1, 18, 0)
(1, 18, 1)
(1, 18, 2)
(1, 18, 3)
(1, 18, 4)
(1, 18, 5)
(1, 18, 6)
(1, 18, 7)
(1, 19, 0)
(1, 19, 1)
(1, 19, 2)
(1, 19, 3)
(1, 19, 4)
(1, 19, 5)
(1, 19, 6)
(1, 19, 7)
(1, 20, 0)
(1, 20, 1)
(1, 20, 2)
(1, 20, 3)
(1, 20, 4)
(1, 20, 5)
(1, 20, 6)
(1, 20, 7)
(1, 21, 0)
(1, 21, 1)
(1, 21, 2)
(1, 21, 3)
(1, 21, 4)
(1, 21, 5)
(1, 21, 6)
(1, 21, 7)
(1, 22, 0)
(1, 22, 1)
(1, 22, 2)
(1, 22, 3)
(1, 22, 4)
(1, 22, 5)
(1, 22, 6)
(1, 22, 7)
(1, 23, 0)
(1, 23, 1)
(1, 23, 2)
(1, 23, 3)
(1, 23, 4)
(1, 23, 5)
(1, 23, 6)
(1, 23, 7)
(1, 24, 0)
(1, 24, 1)
(1, 24, 2)
(1, 24, 3)
(1, 24, 4)
(1, 24, 5)
(1, 24, 6)
(1, 24, 7)
(1, 25, 0)
(1, 25, 1)
(1, 25, 2)
(1, 25, 3)
(1, 25, 4)
(1, 25, 5)
(1, 25, 6)
(1, 25, 7)
(1, 26, 0)
(1, 26, 1)
(1, 26, 2)
(1, 26, 3)
(1, 26, 4)
(1, 26, 5)
(1, 26, 6)
(1, 26, 7)
(1, 27, 0)
(1, 27, 1)
(1, 27, 2)
(1, 27, 3)
(1, 27, 4)
(1, 27, 5)
(1, 27, 6)
(1, 27, 7)
(1, 28, 0)
(1, 28, 1)
(1, 28, 2)
(1, 28, 3)
(1, 28, 4)
(1, 28, 5)
(1, 28, 6)
(1, 28, 7)
(1, 29, 0)
(1, 29, 1)
(1, 29, 2)
(1, 29, 3)
(1, 29, 4)
(1, 29, 5)
(1, 29, 6)
(1, 29, 7)
(1, 30, 0)
(1, 30, 1)
(1, 30, 2)
(1, 30, 3)
(1, 30, 4)
(1, 30, 5)
(1, 30, 6)
(1, 30, 7)
(1, 31, 0)
(1, 31, 1)
(1, 31, 2)
(1, 31, 3)
(1, 31, 4)
(1, 31, 5)
(1, 31, 6)
(1, 31, 7)
(1, 32, 0)
(1, 32, 1)
(1, 32, 2)
(1, 32, 3)
(1, 32, 4)
(1, 32, 5)
(1, 32, 6)
(1, 32, 7)
(1, 33, 0)
(1, 33, 1)
(1, 33, 2)
(1, 33, 3)
(1, 33, 4)
(1, 33, 5)
(1, 33, 6)
(1, 33, 7)
(1, 34, 0)
(1, 34, 1)
(1, 34, 2)
(1, 34, 3)
(1, 34, 4)
(1, 34, 5)
(1, 34, 6)
(1, 34, 7)
(1, 35, 0)
(1, 35, 1)
(1, 35, 2)
(1, 35, 3)
(1, 35, 4)
(1, 35, 5)
(1, 35, 6)
(1, 35, 7)
(1, 36, 0)
(1, 36, 1)
(1, 36, 2)
(1, 36, 3)
(1, 36, 4)
(1, 36, 5)
(1, 36, 6)
(1, 36, 7)
(1, 37, 0)
(1, 37, 1)
(1, 37, 2)
(1, 37, 3)
(1, 37, 4)
(1, 37, 5)
(1, 37, 6)
(1, 37, 7)
(1, 38, 0)
(1, 38, 1)
(1, 38, 2)
(1, 38, 3)
(1, 38, 4)
(1, 38, 5)
(1, 38, 6)
(1, 38, 7)
(1, 39, 0)
(1, 39, 1)
(1, 39, 2)
(1, 39, 3)
(1, 39, 4)
(1, 39, 5)
(1, 39, 6)
(1, 39, 7)
(1, 40, 0)
(1, 40, 1)
(1, 40, 2)
(1, 40, 3)
(1, 40, 4)
(1, 40, 5)
(1, 40, 6)
(1, 40, 7)
(1, 41, 0)
(1, 41, 1)
(1, 41, 2)
(1, 41, 3)
(1, 41, 4)
(1, 41, 5)
(1, 41, 6)
(1, 41, 7)
(1, 42, 0)
(1, 42, 1)
(1, 42, 2)
(1, 42, 3)
(1, 42, 4)
(1, 42, 5)
(1, 42, 6)
(1, 42, 7)
(1, 43, 0)
(1, 43, 1)
(1, 43, 2)
(1, 43, 3)
(1, 43, 4)
(1, 43, 5)
(1, 43, 6)
(1, 43, 7)
(1, 44, 0)
(1, 44, 1)
(1, 44, 2)
(1, 44, 3)
(1, 44, 4)
(1, 44, 5)
(1, 44, 6)
(1, 44, 7)
(1, 45, 0)
(1, 45, 1)
(1, 45, 2)
(1, 45, 3)
(1, 45, 4)
(1, 45, 5)
(1, 45, 6)
(1, 45, 7)
(1, 46, 0)
(1, 46, 1)
(1, 46, 2)
(1, 46, 3)
(1, 46, 4)
(1, 46, 5)
(1, 46, 6)
(1, 46, 7)
(1, 47, 0)
(1, 47, 1)
(1, 47, 2)
(1, 47, 3)
(1, 47, 4)
(1, 47, 5)
(1, 47, 6)
(1, 47, 7)
(1, 48, 0)
(1, 48, 1)
(1, 48, 2)
(1, 48, 3)
(1, 48, 4)
(1, 48, 5)
(1, 48, 6)
(1, 48, 7)
(1, 49, 0)
(1, 49, 1)
(1, 49, 2)
(1, 49, 3)
(1, 49, 4)
(1, 49, 5)
(1, 49, 6)
(1, 49, 7)
(1, 50, 0)
(1, 50, 1)
(1, 50, 2)
(1, 50, 3)
(1, 50, 4)
(1, 50, 5)
(1, 50, 6)
(1, 50, 7)
(1, 51, 0)
(1, 51, 1)
(1, 51, 2)
(1, 51, 3)
(1, 51, 4)
(1, 51, 5)
(1, 51, 6)
(1, 51, 7)
(1, 52, 0)
(1, 52, 1)
(1, 52, 2)
(1, 52, 3)
(1, 52, 4)
(1, 52, 5)
(1, 52, 6)
(1, 52, 7)
(1, 53, 0)
(1, 53, 1)
(1, 53, 2)
(1, 53, 3)
(1, 53, 4)
(1, 53, 5)
(1, 53, 6)
(1, 53, 7)
(1, 54, 0)
(1, 54, 1)
(1, 54, 2)
(1, 54, 3)
(1, 54, 4)
(1, 54, 5)
(1, 54, 6)
(1, 54, 7)
(1, 55, 0)
(1, 55, 1)
(1, 55, 2)
(1, 55, 3)
(1, 55, 4)
(1, 55, 5)
(1, 55, 6)
(1, 55, 7)
(1, 56, 0)
(1, 56, 1)
(1, 56, 2)
(1, 56, 3)
(1, 56, 4)
(1, 56, 5)
(1, 56, 6)
(1, 56, 7)
(1, 57, 0)
(1, 57, 1)
(1, 57, 2)
(1, 57, 3)
(1, 57, 4)
(1, 57, 5)
(1, 57, 6)
(1, 57, 7)
(1, 58, 0)
(1, 58, 1)
(1, 58, 2)
(1, 58, 3)
(1, 58, 4)
(1, 58, 5)
(1, 58, 6)
(1, 58, 7)
(1, 59, 0)
(1, 59, 1)
(1, 59, 2)
(1, 59, 3)
(1, 59, 4)
(1, 59, 5)
(1, 59, 6)
(1, 59, 7)
(1, 60, 0)
(1, 60, 1)
(1, 60, 2)
(1, 60, 3)
(1, 60, 4)
(1, 60, 5)
(1, 60, 6)
(1, 60, 7)
(1, 61, 0)
(1, 61, 1)
(1, 61, 2)
(1, 61, 3)
(1, 61, 4)
(1, 61, 5)
(1, 61, 6)
(1, 61, 7)
(1, 62, 0)
(1, 62, 1)
(1, 62, 2)
(1, 62, 3)
(1, 62, 4)
(1, 62, 5)
(1, 62, 6)
(1, 62, 7)
(1, 63, 0)
(1, 63, 1)
(1, 63, 2)
(1, 63, 3)
(1, 63, 4)
(1, 63, 5)
(1, 63, 6)
(1, 63, 7)
(1, 64, 0)
(1, 64, 1)
(1, 64, 2)
(1, 64, 3)
(1, 64, 4)
(1, 64, 5)
(1, 64, 6)
(1, 64, 7)
(1, 65, 0)
(1, 65, 1)
(1, 65, 2)
(1, 65, 3)
(1, 65, 4)
(1, 65, 5)
(1, 65, 6)
(1, 65, 7)
(1, 66, 0)
(1, 66, 1)
(1, 66, 2)
(1, 66, 3)
(1, 66, 4)
(1, 66, 5)
(1, 66, 6)
(1, 66, 7)
(1, 67, 0)
(1, 67, 1)
(1, 67, 2)
(1, 67, 3)
(1, 67, 4)
(1, 67, 5)
(1, 67, 6)
(1, 67, 7)
(1, 68, 0)
(1, 68, 1)
(1, 68, 2)
(1, 68, 3)
(1, 68, 4)
(1, 68, 5)
(1, 68, 6)
(1, 68, 7)
(1, 69, 0)
(1, 69, 1)
(1, 69, 2)
(1, 69, 3)
(1, 69, 4)
(1, 69, 5)
(1, 69, 6)
(1, 69, 7)
(1, 70, 0)
(1, 70, 1)
(1, 70, 2)
(1, 70, 3)
(1, 70, 4)
(1, 70, 5)
(1, 70, 6)
(1, 70, 7)
(1, 71, 0)
(1, 71, 1)
(1, 71, 2)
(1, 71, 3)
(1, 71, 4)
(1, 71, 5)
(1, 71, 6)
(1, 71, 7)
(1, 72, 0)
(1, 72, 1)
(1, 72, 2)
(1, 72, 3)
(1, 72, 4)
(1, 72, 5)
(1, 72, 6)
(1, 72, 7)
(1, 73, 0)
(1, 73, 1)
(1, 73, 2)
(1, 73, 3)
(1, 73, 4)
(1, 73, 5)
(1, 73, 6)
(1, 73, 7)
(1, 74, 0)
(1, 74, 1)
(1, 74, 2)
(1, 74, 3)
(1, 74, 4)
(1, 74, 5)
(1, 74, 6)
(1, 74, 7)
(1, 75, 0)
(1, 75, 1)
(1, 75, 2)
(1, 75, 3)
(1, 75, 4)
(1, 75, 5)
(1, 75, 6)
(1, 75, 7)
(1, 76, 0)
(1, 76, 1)
(1, 76, 2)
(1, 76, 3)
(1, 76, 4)
(1, 76, 5)
(1, 76, 6)
(1, 76, 7)
(1, 77, 0)
(1, 77, 1)
(1, 77, 2)
(1, 77, 3)
(1, 77, 4)
(1, 77, 5)
(1, 77, 6)
(1, 77, 7)
(1, 78, 0)
(1, 78, 1)
(1, 78, 2)
(1, 78, 3)
(1, 78, 4)
(1, 78, 5)
(1, 78, 6)
(1, 78, 7)
(1, 79, 0)
(1, 79, 1)
(1, 79, 2)
(1, 79, 3)
(1, 79, 4)
(1, 79, 5)
(1, 79, 6)
(1, 79, 7)
(1, 80, 0)
(1, 80, 1)
(1, 80, 2)
(1, 80, 3)
(1, 80, 4)
(1, 80, 5)
(1, 80, 6)
(1, 80, 7)
(1, 81, 0)
(1, 81, 1)
(1, 81, 2)
(1, 81, 3)
(1, 81, 4)
(1, 81, 5)
(1, 81, 6)
(1, 81, 7)
(1, 82, 0)
(1, 82, 1)
(1, 82, 2)
(1, 82, 3)
(1, 82, 4)
(1, 82, 5)
(1, 82, 6)
(1, 82, 7)
(1, 83, 0)
(1, 83, 1)
(1, 83, 2)
(1, 83, 3)
(1, 83, 4)
(1, 83, 5)
(1, 83, 6)
(1, 83, 7)
(1, 84, 0)
(1, 84, 1)
(1, 84, 2)
(1, 84, 3)
(1, 84, 4)
(1, 84, 5)
(1, 84, 6)
(1, 84, 7)
(1, 85, 0)
(1, 85, 1)
(1, 85, 2)
(1, 85, 3)
(1, 85, 4)
(1, 85, 5)
(1, 85, 6)
(1, 85, 7)
(1, 86, 0)
(1, 86, 1)
(1, 86, 2)
(1, 86, 3)
(1, 86, 4)
(1, 86, 5)
(1, 86, 6)
(1, 86, 7)
(1, 87, 0)
(1, 87, 1)
(1, 87, 2)
(1, 87, 3)
(1, 87, 4)
(1, 87, 5)
(1, 87, 6)
(1, 87, 7)
(1, 88, 0)
(1, 88, 1)
(1, 88, 2)
(1, 88, 3)
(1, 88, 4)
(1, 88, 5)
(1, 88, 6)
(1, 88, 7)
(1, 89, 0)
(1, 89, 1)
(1, 89, 2)
(1, 89, 3)
(1, 89, 4)
(1, 89, 5)
(1, 89, 6)
(1, 89, 7)
(1, 90, 0)
(1, 90, 1)
(1, 90, 2)
(1, 90, 3)
(1, 90, 4)
(1, 90, 5)
(1, 90, 6)
(1, 90, 7)
(1, 91, 0)
(1, 91, 1)
(1, 91, 2)
(1, 91, 3)
(1, 91, 4)
(1, 91, 5)
(1, 91, 6)
(1, 91, 7)
(1, 92, 0)
(1, 92, 1)
(1, 92, 2)
(1, 92, 3)
(1, 92, 4)
(1, 92, 5)
(1, 92, 6)
(1, 92, 7)
(1, 93, 0)
(1, 93, 1)
(1, 93, 2)
(1, 93, 3)
(1, 93, 4)
(1, 93, 5)
(1, 93, 6)
(1, 93, 7)
(1, 94, 0)
(1, 94, 1)
(1, 94, 2)
(1, 94, 3)
(1, 94, 4)
(1, 94, 5)
(1, 94, 6)
(1, 94, 7)
(1, 95, 0)
(1, 95, 1)
(1, 95, 2)
(1, 95, 3)
(1, 95, 4)
(1, 95, 5)
(1, 95, 6)
(1, 95, 7)
(1, 96, 0)
(1, 96, 1)
(1, 96, 2)
(1, 96, 3)
(1, 96, 4)
(1, 96, 5)
(1, 96, 6)
(1, 96, 7)
(1, 97, 0)
(1, 97, 1)
(1, 97, 2)
(1, 97, 3)
(1, 97, 4)
(1, 97, 5)
(1, 97, 6)
(1, 97, 7)
(1, 98, 0)
(1, 98, 1)
(1, 98, 2)
(1, 98, 3)
(1, 98, 4)
(1, 98, 5)
(1, 98, 6)
(1, 98, 7)
(1, 99, 0)
(1, 99, 1)
(1, 99, 2)
(1, 99, 3)
(1, 99, 4)
(1, 99, 5)
(1, 99, 6)
(1, 99, 7)
(1, 100, 0)
(1, 100, 1)
(1, 100, 2)
(1, 100, 3)
(1, 100, 4)
(1, 100, 5)
(1, 100, 6)
(1, 100, 7)
(1, 101, 0)
(1, 101, 1)
(1, 101, 2)
(1, 101, 3)
(1, 101, 4)
(1, 101, 5)
(1, 101, 6)
(1, 101, 7)
(1, 102, 0)
(1, 102, 1)
(1, 102, 2)
(1, 102, 3)
(1, 102, 4)
(1, 102, 5)
(1, 102, 6)
(1, 102, 7)
(1, 103, 0)
(1, 103, 1)
(1, 103, 2)
(1, 103, 3)
(1, 103, 4)
(1, 103, 5)
(1, 103, 6)
(1, 103, 7)
(1, 104, 0)
(1, 104, 1)
(1, 104, 2)
(1, 104, 3)
(1, 104, 4)
(1, 104, 5)
(1, 104, 6)
(1, 104, 7)
(1, 105, 0)
(1, 105, 1)
(1, 105, 2)
(1, 105, 3)
(1, 105, 4)
(1, 105, 5)
(1, 105, 6)
(1, 105, 7)
(1, 106, 0)
(1, 106, 1)
(1, 106, 2)
(1, 106, 3)
(1, 106, 4)
(1, 106, 5)
(1, 106, 6)
(1, 106, 7)
(1, 107, 0)
(1, 107, 1)
(1, 107, 2)
(1, 107, 3)
(1, 107, 4)
(1, 107, 5)
(1, 107, 6)
(1, 107, 7)
(1, 108, 0)
(1, 108, 1)
(1, 108, 2)
(1, 108, 3)
(1, 108, 4)
(1, 108, 5)
(1, 108, 6)
(1, 108, 7)
(1, 109, 0)
(1, 109, 1)
(1, 109, 2)
(1, 109, 3)
(1, 109, 4)
(1, 109, 5)
(1, 109, 6)
(1, 109, 7)
(1, 110, 0)
(1, 110, 1)
(1, 110, 2)
(1, 110, 3)
(1, 110, 4)
(1, 110, 5)
(1, 110, 6)
(1, 110, 7)
(1, 111, 0)
(1, 111, 1)
(1, 111, 2)
(1, 111, 3)
(1, 111, 4)
(1, 111, 5)
(1, 111, 6)
(1, 111, 7)
(1, 112, 0)
(1, 112, 1)
(1, 112, 2)
(1, 112, 3)
(1, 112, 4)
(1, 112, 5)
(1, 112, 6)
(1, 112, 7)
(1, 113, 0)
(1, 113, 1)
(1, 113, 2)
(1, 113, 3)
(1, 113, 4)
(1, 113, 5)
(1, 113, 6)
(1, 113, 7)
(1, 114, 0)
(1, 114, 1)
(1, 114, 2)
(1, 114, 3)
(1, 114, 4)
(1, 114, 5)
(1, 114, 6)
(1, 114, 7)
(1, 115, 0)
(1, 115, 1)
(1, 115, 2)
(1, 115, 3)
(1, 115, 4)
(1, 115, 5)
(1, 115, 6)
(1, 115, 7)
(1, 116, 0)
(1, 116, 1)
(1, 116, 2)
(1, 116, 3)
(1, 116, 4)
(1, 116, 5)
(1, 116, 6)
(1, 116, 7)
(1, 117, 0)
(1, 117, 1)
(1, 117, 2)
(1, 117, 3)
(1, 117, 4)
(1, 117, 5)
(1, 117, 6)
(1, 117, 7)
(1, 118, 0)
(1, 118, 1)
(1, 118, 2)
(1, 118, 3)
(1, 118, 4)
(1, 118, 5)
(1, 118, 6)
(1, 118, 7)
(1, 119, 0)
(1, 119, 1)
(1, 119, 2)
(1, 119, 3)
(1, 119, 4)
(1, 119, 5)
(1, 119, 6)
(1, 119, 7)
(1, 120, 0)
(1, 120, 1)
(1, 120, 2)
(1, 120, 3)
(1, 120, 4)
(1, 120, 5)
(1, 120, 6)
(1, 120, 7)
(1, 121, 0)
(1, 121, 1)
(1, 121, 2)
(1, 121, 3)
(1, 121, 4)
(1, 121, 5)
(1, 121, 6)
(1, 121, 7)
(1, 122, 0)
(1, 122, 1)
(1, 122, 2)
(1, 122, 3)
(1, 122, 4)
(1, 122, 5)
(1, 122, 6)
(1, 122, 7)
(1, 123, 0)
(1, 123, 1)
(1, 123, 2)
(1, 123, 3)
(1, 123, 4)
(1, 123, 5)
(1, 123, 6)
(1, 123, 7)
(1, 124, 0)
(1, 124, 1)
(1, 124, 2)
(1, 124, 3)
(1, 124, 4)
(1, 124, 5)
(1, 124, 6)
(1, 124, 7)
(1, 125, 0)
(1, 125, 1)
(1, 125, 2)
(1, 125, 3)
(1, 125, 4)
(1, 125, 5)
(1, 125, 6)
(1, 125, 7)
(1, 126, 0)
(1, 126, 1)
(1, 126, 2)
(1, 126, 3)
(1, 126, 4)
(1, 126, 5)
(1, 126, 6)
(1, 126, 7)
(1, 127, 0)
(1, 127, 1)
(1, 127, 2)
(1, 127, 3)
(1, 127, 4)
(1, 127, 5)
(1, 127, 6)
(1, 127, 7)
(1, 128, 0)
(1, 128, 1)
(1, 128, 2)
(1, 128, 3)
(1, 128, 4)
(1, 128, 5)
(1, 128, 6)
(1, 128, 7)
(1, 129, 0)
(1, 129, 1)
(1, 129, 2)
(1, 129, 3)
(1, 129, 4)
(1, 129, 5)
(1, 129, 6)
(1, 129, 7)
(1, 130, 0)
(1, 130, 1)
(1, 130, 2)
(1, 130, 3)
(1, 130, 4)
(1, 130, 5)
(1, 130, 6)
(1, 130, 7)
(1, 131, 0)
(1, 131, 1)
(1, 131, 2)
(1, 131, 3)
(1, 131, 4)
(1, 131, 5)
(1, 131, 6)
(1, 131, 7)
(1, 132, 0)
(1, 132, 1)
(1, 132, 2)
(1, 132, 3)
(1, 132, 4)
(1, 132, 5)
(1, 132, 6)
(1, 132, 7)
(1, 133, 0)
(1, 133, 1)
(1, 133, 2)
(1, 133, 3)
(1, 133, 4)
(1, 133, 5)
(1, 133, 6)
(1, 133, 7)
(1, 134, 0)
(1, 134, 1)
(1, 134, 2)
(1, 134, 3)
(1, 134, 4)
(1, 134, 5)
(1, 134, 6)
(1, 134, 7)
(1, 135, 0)
(1, 135, 1)
(1, 135, 2)
(1, 135, 3)
(1, 135, 4)
(1, 135, 5)
(1, 135, 6)
(1, 135, 7)
(1, 136, 0)
(1, 136, 1)
(1, 136, 2)
(1, 136, 3)
(1, 136, 4)
(1, 136, 5)
(1, 136, 6)
(1, 136, 7)
(1, 137, 0)
(1, 137, 1)
(1, 137, 2)
(1, 137, 3)
(1, 137, 4)
(1, 137, 5)
(1, 137, 6)
(1, 137, 7)
(1, 138, 0)
(1, 138, 1)
(1, 138, 2)
(1, 138, 3)
(1, 138, 4)
(1, 138, 5)
(1, 138, 6)
(1, 138, 7)
(1, 139, 0)
(1, 139, 1)
(1, 139, 2)
(1, 139, 3)
(1, 139, 4)
(1, 139, 5)
(1, 139, 6)
(1, 139, 7)
(1, 140, 0)
(1, 140, 1)
(1, 140, 2)
(1, 140, 3)
(1, 140, 4)
(1, 140, 5)
(1, 140, 6)
(1, 140, 7)
(1, 141, 0)
(1, 141, 1)
(1, 141, 2)
(1, 141, 3)
(1, 141, 4)
(1, 141, 5)
(1, 141, 6)
(1, 141, 7)
(1, 142, 0)
(1, 142, 1)
(1, 142, 2)
(1, 142, 3)
(1, 142, 4)
(1, 142, 5)
(1, 142, 6)
(1, 142, 7)
(1, 143, 0)
(1, 143, 1)
(1, 143, 2)
(1, 143, 3)
(1, 143, 4)
(1, 143, 5)
(1, 143, 6)
(1, 143, 7)
(1, 144, 0)
(1, 144, 1)
(1, 144, 2)
(1, 144, 3)
(1, 144, 4)
(1, 144, 5)
(1, 144, 6)
(1, 144, 7)
(1, 145, 0)
(1, 145, 1)
(1, 145, 2)
(1, 145, 3)
(1, 145, 4)
(1, 145, 5)
(1, 145, 6)
(1, 145, 7)
(1, 146, 0)
(1, 146, 1)
(1, 146, 2)
(1, 146, 3)
(1, 146, 4)
(1, 146, 5)
(1, 146, 6)
(1, 146, 7)
(1, 147, 0)
(1, 147, 1)
(1, 147, 2)
(1, 147, 3)
(1, 147, 4)
(1, 147, 5)
(1, 147, 6)
(1, 147, 7)
(1, 148, 0)
(1, 148, 1)
(1, 148, 2)
(1, 148, 3)
(1, 148, 4)
(1, 148, 5)
(1, 148, 6)
(1, 148, 7)
(1, 149, 0)
(1, 149, 1)
(1, 149, 2)
(1, 149, 3)
(1, 149, 4)
(1, 149, 5)
(1, 149, 6)
(1, 149, 7)
(1, 150, 0)
(1, 150, 1)
(1, 150, 2)
(1, 150, 3)
(1, 150, 4)
(1, 150, 5)
(1, 150, 6)
(1, 150, 7)
(1, 151, 0)
(1, 151, 1)
(1, 151, 2)
(1, 151, 3)
(1, 151, 4)
(1, 151, 5)
(1, 151, 6)
(1, 151, 7)
(1, 152, 0)
(1, 152, 1)
(1, 152, 2)
(1, 152, 3)
(1, 152, 4)
(1, 152, 5)
(1, 152, 6)
(1, 152, 7)
(1, 153, 0)
(1, 153, 1)
(1, 153, 2)
(1, 153, 3)
(1, 153, 4)
(1, 153, 5)
(1, 153, 6)
(1, 153, 7)
(1, 154, 0)
(1, 154, 1)
(1, 154, 2)
(1, 154, 3)
(1, 154, 4)
(1, 154, 5)
(1, 154, 6)
(1, 154, 7)
(1, 155, 0)
(1, 155, 1)
(1, 155, 2)
(1, 155, 3)
(1, 155, 4)
(1, 155, 5)
(1, 155, 6)
(1, 155, 7)
(1, 156, 0)
(1, 156, 1)
(1, 156, 2)
(1, 156, 3)
(1, 156, 4)
(1, 156, 5)
(1, 156, 6)
(1, 156, 7)
(1, 157, 0)
(1, 157, 1)
(1, 157, 2)
(1, 157, 3)
(1, 157, 4)
(1, 157, 5)
(1, 157, 6)
(1, 157, 7)
(1, 158, 0)
(1, 158, 1)
(1, 158, 2)
(1, 158, 3)
(1, 158, 4)
(1, 158, 5)
(1, 158, 6)
(1, 158, 7)
(1, 159, 0)
(1, 159, 1)
(1, 159, 2)
(1, 159, 3)
(1, 159, 4)
(1, 159, 5)
(1, 159, 6)
(1, 159, 7)
(1, 160, 0)
(1, 160, 1)
(1, 160, 2)
(1, 160, 3)
(1, 160, 4)
(1, 160, 5)
(1, 160, 6)
(1, 160, 7)
(1, 161, 0)
(1, 161, 1)
(1, 161, 2)
(1, 161, 3)
(1, 161, 4)
(1, 161, 5)
(1, 161, 6)
(1, 161, 7)
(1, 162, 0)
(1, 162, 1)
(1, 162, 2)
(1, 162, 3)
(1, 162, 4)
(1, 162, 5)
(1, 162, 6)
(1, 162, 7)
(1, 163, 0)
(1, 163, 1)
(1, 163, 2)
(1, 163, 3)
(1, 163, 4)
(1, 163, 5)
(1, 163, 6)
(1, 163, 7)
(1, 164, 0)
(1, 164, 1)
(1, 164, 2)
(1, 164, 3)
(1, 164, 4)
(1, 164, 5)
(1, 164, 6)
(1, 164, 7)
(1, 165, 0)
(1, 165, 1)
(1, 165, 2)
(1, 165, 3)
(1, 165, 4)
(1, 165, 5)
(1, 165, 6)
(1, 165, 7)
(1, 166, 0)
(1, 166, 1)
(1, 166, 2)
(1, 166, 3)
(1, 166, 4)
(1, 166, 5)
(1, 166, 6)
(1, 166, 7)
(1, 167, 0)
(1, 167, 1)
(1, 167, 2)
(1, 167, 3)
(1, 167, 4)
(1, 167, 5)
(1, 167, 6)
(1, 167, 7)
(1, 168, 0)
(1, 168, 1)
(1, 168, 2)
(1, 168, 3)
(1, 168, 4)
(1, 168, 5)
(1, 168, 6)
(1, 168, 7)
(1, 169, 0)
(1, 169, 1)
(1, 169, 2)
(1, 169, 3)
(1, 169, 4)
(1, 169, 5)
(1, 169, 6)
(1, 169, 7)
(1, 170, 0)
(1, 170, 1)
(1, 170, 2)
(1, 170, 3)
(1, 170, 4)
(1, 170, 5)
(1, 170, 6)
(1, 170, 7)
(1, 171, 0)
(1, 171, 1)
(1, 171, 2)
(1, 171, 3)
(1, 171, 4)
(1, 171, 5)
(1, 171, 6)
(1, 171, 7)
(1, 172, 0)
(1, 172, 1)
(1, 172, 2)
(1, 172, 3)
(1, 172, 4)
(1, 172, 5)
(1, 172, 6)
(1, 172, 7)
(1, 173, 0)
(1, 173, 1)
(1, 173, 2)
(1, 173, 3)
(1, 173, 4)
(1, 173, 5)
(1, 173, 6)
(1, 173, 7)
(1, 174, 0)
(1, 174, 1)
(1, 174, 2)
(1, 174, 3)
(1, 174, 4)
(1, 174, 5)
(1, 174, 6)
(1, 174, 7)
(1, 175, 0)
(1, 175, 1)
(1, 175, 2)
(1, 175, 3)
(1, 175, 4)
(1, 175, 5)
(1, 175, 6)
(1, 175, 7)
(1, 176, 0)
(1, 176, 1)
(1, 176, 2)
(1, 176, 3)
(1, 176, 4)
(1, 176, 5)
(1, 176, 6)
(1, 176, 7)
(1, 177, 0)
(1, 177, 1)
(1, 177, 2)
(1, 177, 3)
(1, 177, 4)
(1, 177, 5)
(1, 177, 6)
(1, 177, 7)
(1, 178, 0)
(1, 178, 1)
(1, 178, 2)
(1, 178, 3)
(1, 178, 4)
(1, 178, 5)
(1, 178, 6)
(1, 178, 7)
(1, 179, 0)
(1, 179, 1)
(1, 179, 2)
(1, 179, 3)
(1, 179, 4)
(1, 179, 5)
(1, 179, 6)
(1, 179, 7)
(1, 180, 0)
(1, 180, 1)
(1, 180, 2)
(1, 180, 3)
(1, 180, 4)
(1, 180, 5)
(1, 180, 6)
(1, 180, 7)
(1, 181, 0)
(1, 181, 1)
(1, 181, 2)
(1, 181, 3)
(1, 181, 4)
(1, 181, 5)
(1, 181, 6)
(1, 181, 7)
(1, 182, 0)
(1, 182, 1)
(1, 182, 2)
(1, 182, 3)
(1, 182, 4)
(1, 182, 5)
(1, 182, 6)
(1, 182, 7)
(1, 183, 0)
(1, 183, 1)
(1, 183, 2)
(1, 183, 3)
(1, 183, 4)
(1, 183, 5)
(1, 183, 6)
(1, 183, 7)
(1, 184, 0)
(1, 184, 1)
(1, 184, 2)
(1, 184, 3)
(1, 184, 4)
(1, 184, 5)
(1, 184, 6)
(1, 184, 7)
(1, 185, 0)
(1, 185, 1)
(1, 185, 2)
(1, 185, 3)
(1, 185, 4)
(1, 185, 5)
(1, 185, 6)
(1, 185, 7)
(1, 186, 0)
(1, 186, 1)
(1, 186, 2)
(1, 186, 3)
(1, 186, 4)
(1, 186, 5)
(1, 186, 6)
(1, 186, 7)
(1, 187, 0)
(1, 187, 1)
(1, 187, 2)
(1, 187, 3)
(1, 187, 4)
(1, 187, 5)
(1, 187, 6)
(1, 187, 7)
(1, 188, 0)
(1, 188, 1)
(1, 188, 2)
(1, 188, 3)
(1, 188, 4)
(1, 188, 5)
(1, 188, 6)
(1, 188, 7)
(1, 189, 0)
(1, 189, 1)
(1, 189, 2)
(1, 189, 3)
(1, 189, 4)
(1, 189, 5)
(1, 189, 6)
(1, 189, 7)
(1, 190, 0)
(1, 190, 1)
(1, 190, 2)
(1, 190, 3)
(1, 190, 4)
(1, 190, 5)
(1, 190, 6)
(1, 190, 7)
(1, 191, 0)
(1, 191, 1)
(1, 191, 2)
(1, 191, 3)
(1, 191, 4)
(1, 191, 5)
(1, 191, 6)
(1, 191, 7)
(1, 192, 0)
(1, 192, 1)
(1, 192, 2)
(1, 192, 3)
(1, 192, 4)
(1, 192, 5)
(1, 192, 6)
(1, 192, 7)
(1, 193, 0)
(1, 193, 1)
(1, 193, 2)
(1, 193, 3)
(1, 193, 4)
(1, 193, 5)
(1, 193, 6)
(1, 193, 7)
(1, 194, 0)
(1, 194, 1)
(1, 194, 2)
(1, 194, 3)
(1, 194, 4)
(1, 194, 5)
(1, 194, 6)
(1, 194, 7)
(1, 195, 0)
(1, 195, 1)
(1, 195, 2)
(1, 195, 3)
(1, 195, 4)
(1, 195, 5)
(1, 195, 6)
(1, 195, 7)
(1, 196, 0)
(1, 196, 1)
(1, 196, 2)
(1, 196, 3)
(1, 196, 4)
(1, 196, 5)
(1, 196, 6)
(1, 196, 7)
(1, 197, 0)
(1, 197, 1)
(1, 197, 2)
(1, 197, 3)
(1, 197, 4)
(1, 197, 5)
(1, 197, 6)
(1, 197, 7)
(1, 198, 0)
(1, 198, 1)
(1, 198, 2)
(1, 198, 3)
(1, 198, 4)
(1, 198, 5)
(1, 198, 6)
(1, 198, 7)
(1, 199, 0)
(1, 199, 1)
(1, 199, 2)
(1, 199, 3)
(1, 199, 4)
(1, 199, 5)
(1, 199, 6)
(1, 199, 7)
(1, 200, 0)
(1, 200, 1)
(1, 200, 2)
(1, 200, 3)
(1, 200, 4)
(1, 200, 5)
(1, 200, 6)
(1, 200, 7)
(1, 201, 0)
(1, 201, 1)
(1, 201, 2)
(1, 201, 3)
(1, 201, 4)
(1, 201, 5)
(1, 201, 6)
(1, 201, 7)
(1, 202, 0)
(1, 202, 1)
(1, 202, 2)
(1, 202, 3)
(1, 202, 4)
(1, 202, 5)
(1, 202, 6)
(1, 202, 7)
(1, 203, 0)
(1, 203, 1)
(1, 203, 2)
(1, 203, 3)
(1, 203, 4)
(1, 203, 5)
(1, 203, 6)
(1, 203, 7)
(1, 204, 0)
(1, 204, 1)
(1, 204, 2)
(1, 204, 3)
(1, 204, 4)
(1, 204, 5)
(1, 204, 6)
(1, 204, 7)
(1, 205, 0)
(1, 205, 1)
(1, 205, 2)
(1, 205, 3)
(1, 205, 4)
(1, 205, 5)
(1, 205, 6)
(1, 205, 7)
(1, 206, 0)
(1, 206, 1)
(1, 206, 2)
(1, 206, 3)
(1, 206, 4)
(1, 206, 5)
(1, 206, 6)
(1, 206, 7)
(1, 207, 0)
(1, 207, 1)
(1, 207, 2)
(1, 207, 3)
(1, 207, 4)
(1, 207, 5)
(1, 207, 6)
(1, 207, 7)
(1, 208, 0)
(1, 208, 1)
(1, 208, 2)
(1, 208, 3)
(1, 208, 4)
(1, 208, 5)
(1, 208, 6)
(1, 208, 7)
(1, 209, 0)
(1, 209, 1)
(1, 209, 2)
(1, 209, 3)
(1, 209, 4)
(1, 209, 5)
(1, 209, 6)
(1, 209, 7)
(1, 210, 0)
(1, 210, 1)
(1, 210, 2)
(1, 210, 3)
(1, 210, 4)
(1, 210, 5)
(1, 210, 6)
(1, 210, 7)
(1, 211, 0)
(1, 211, 1)
(1, 211, 2)
(1, 211, 3)
(1, 211, 4)
(1, 211, 5)
(1, 211, 6)
(1, 211, 7)
(1, 212, 0)
(1, 212, 1)
(1, 212, 2)
(1, 212, 3)
(1, 212, 4)
(1, 212, 5)
(1, 212, 6)
(1, 212, 7)
(1, 213, 0)
(1, 213, 1)
(1, 213, 2)
(1, 213, 3)
(1, 213, 4)
(1, 213, 5)
(1, 213, 6)
(1, 213, 7)
(1, 214, 0)
(1, 214, 1)
(1, 214, 2)
(1, 214, 3)
(1, 214, 4)
(1, 214, 5)
(1, 214, 6)
(1, 214, 7)
(1, 215, 0)
(1, 215, 1)
(1, 215, 2)
(1, 215, 3)
(1, 215, 4)
(1, 215, 5)
(1, 215, 6)
(1, 215, 7)
(1, 216, 0)
(1, 216, 1)
(1, 216, 2)
(1, 216, 3)
(1, 216, 4)
(1, 216, 5)
(1, 216, 6)
(1, 216, 7)
(1, 217, 0)
(1, 217, 1)
(1, 217, 2)
(1, 217, 3)
(1, 217, 4)
(1, 217, 5)
(1, 217, 6)
(1, 217, 7)
(1, 218, 0)
(1, 218, 1)
(1, 218, 2)
(1, 218, 3)
(1, 218, 4)
(1, 218, 5)
(1, 218, 6)
(1, 218, 7)
(1, 219, 0)
(1, 219, 1)
(1, 219, 2)
(1, 219, 3)
(1, 219, 4)
(1, 219, 5)
(1, 219, 6)
(1, 219, 7)
(1, 220, 0)
(1, 220, 1)
(1, 220, 2)
(1, 220, 3)
(1, 220, 4)
(1, 220, 5)
(1, 220, 6)
(1, 220, 7)
(1, 221, 0)
(1, 221, 1)
(1, 221, 2)
(1, 221, 3)
(1, 221, 4)
(1, 221, 5)
(1, 221, 6)
(1, 221, 7)
(1, 222, 0)
(1, 222, 1)
(1, 222, 2)
(1, 222, 3)
(1, 222, 4)
(1, 222, 5)
(1, 222, 6)
(1, 222, 7)
(1, 223, 0)
(1, 223, 1)
(1, 223, 2)
(1, 223, 3)
(1, 223, 4)
(1, 223, 5)
(1, 223, 6)
(1, 223, 7)
(1, 224, 0)
(1, 224, 1)
(1, 224, 2)
(1, 224, 3)
(1, 224, 4)
(1, 224, 5)
(1, 224, 6)
(1, 224, 7)
(1, 225, 0)
(1, 225, 1)
(1, 225, 2)
(1, 225, 3)
(1, 225, 4)
(1, 225, 5)
(1, 225, 6)
(1, 225, 7)
(1, 226, 0)
(1, 226, 1)
(1, 226, 2)
(1, 226, 3)
(1, 226, 4)
(1, 226, 5)
(1, 226, 6)
(1, 226, 7)
(1, 227, 0)
(1, 227, 1)
(1, 227, 2)
(1, 227, 3)
(1, 227, 4)
(1, 227, 5)
(1, 227, 6)
(1, 227, 7)
(1, 228, 0)
(1, 228, 1)
(1, 228, 2)
(1, 228, 3)
(1, 228, 4)
(1, 228, 5)
(1, 228, 6)
(1, 228, 7)
(1, 229, 0)
(1, 229, 1)
(1, 229, 2)
(1, 229, 3)
(1, 229, 4)
(1, 229, 5)
(1, 229, 6)
(1, 229, 7)
(1, 230, 0)
(1, 230, 1)
(1, 230, 2)
(1, 230, 3)
(1, 230, 4)
(1, 230, 5)
(1, 230, 6)
(1, 230, 7)
(1, 231, 0)
(1, 231, 1)
(1, 231, 2)
(1, 231, 3)
(1, 231, 4)
(1, 231, 5)
(1, 231, 6)
(1, 231, 7)
(1, 232, 0)
(1, 232, 1)
(1, 232, 2)
(1, 232, 3)
(1, 232, 4)
(1, 232, 5)
(1, 232, 6)
(1, 232, 7)
(1, 233, 0)
(1, 233, 1)
(1, 233, 2)
(1, 233, 3)
(1, 233, 4)
(1, 233, 5)
(1, 233, 6)
(1, 233, 7)
(1, 234, 0)
(1, 234, 1)
(1, 234, 2)
(1, 234, 3)
(1, 234, 4)
(1, 234, 5)
(1, 234, 6)
(1, 234, 7)
(1, 235, 0)
(1, 235, 1)
(1, 235, 2)
(1, 235, 3)
(1, 235, 4)
(1, 235, 5)
(1, 235, 6)
(1, 235, 7)
(1, 236, 0)
(1, 236, 1)
(1, 236, 2)
(1, 236, 3)
(1, 236, 4)
(1, 236, 5)
(1, 236, 6)
(1, 236, 7)
(1, 237, 0)
(1, 237, 1)
(1, 237, 2)
(1, 237, 3)
(1, 237, 4)
(1, 237, 5)
(1, 237, 6)
(1, 237, 7)
(1, 238, 0)
(1, 238, 1)
(1, 238, 2)
(1, 238, 3)
(1, 238, 4)
(1, 238, 5)
(1, 238, 6)
(1, 238, 7)
(1, 239, 0)
(1, 239, 1)
(1, 239, 2)
(1, 239, 3)
(1, 239, 4)
(1, 239, 5)
(1, 239, 6)
(1, 239, 7)
(1, 240, 0)
(1, 240, 1)
(1, 240, 2)
(1, 240, 3)
(1, 240, 4)
(1, 240, 5)
(1, 240, 6)
(1, 240, 7)
(1, 241, 0)
(1, 241, 1)
(1, 241, 2)
(1, 241, 3)
(1, 241, 4)
(1, 241, 5)
(1, 241, 6)
(1, 241, 7)
(1, 242, 0)
(1, 242, 1)
(1, 242, 2)
(1, 242, 3)
(1, 242, 4)
(1, 242, 5)
(1, 242, 6)
(1, 242, 7)
(1, 243, 0)
(1, 243, 1)
(1, 243, 2)
(1, 243, 3)
(1, 243, 4)
(1, 243, 5)
(1, 243, 6)
(1, 243, 7)
(1, 244, 0)
(1, 244, 1)
(1, 244, 2)
(1, 244, 3)
(1, 244, 4)
(1, 244, 5)
(1, 244, 6)
(1, 244, 7)
(1, 245, 0)
(1, 245, 1)
(1, 245, 2)
(1, 245, 3)
(1, 245, 4)
(1, 245, 5)
(1, 245, 6)
(1, 245, 7)
(1, 246, 0)
(1, 246, 1)
(1, 246, 2)
(1, 246, 3)
(1, 246, 4)
(1, 246, 5)
(1, 246, 6)
(1, 246, 7)
(1, 247, 0)
(1, 247, 1)
(1, 247, 2)
(1, 247, 3)
(1, 247, 4)
(1, 247, 5)
(1, 247, 6)
(1, 247, 7)
(1, 248, 0)
(1, 248, 1)
(1, 248, 2)
(1, 248, 3)
(1, 248, 4)
(1, 248, 5)
(1, 248, 6)
(1, 248, 7)
(1, 249, 0)
(1, 249, 1)
(1, 249, 2)
(1, 249, 3)
(1, 249, 4)
(1, 249, 5)
(1, 249, 6)
(1, 249, 7)
(1, 250, 0)
(1, 250, 1)
(1, 250, 2)
(1, 250, 3)
(1, 250, 4)
(1, 250, 5)
(1, 250, 6)
(1, 250, 7)
(1, 251, 0)
(1, 251, 1)
(1, 251, 2)
(1, 251, 3)
(1, 251, 4)
(1, 251, 5)
(1, 251, 6)
(1, 251, 7)
(1, 252, 0)
(1, 252, 1)
(1, 252, 2)
(1, 252, 3)
(1, 252, 4)
(1, 252, 5)
(1, 252, 6)
(1, 252, 7)
(1, 253, 0)
(1, 253, 1)
(1, 253, 2)
(1, 253, 3)
(1, 253, 4)
(1, 253, 5)
(1, 253, 6)
(1, 253, 7)
(1, 254, 0)
(1, 254, 1)
(1, 254, 2)
(1, 254, 3)
(1, 254, 4)
(1, 254, 5)
(1, 254, 6)
(1, 254, 7)
(1, 255, 0)
(1, 255, 1)
(1, 255, 2)
(1, 255, 3)
(1, 255, 4)
(1, 255, 5)
(1, 255, 6)
(1, 255, 7)
(2, 0, 0)
(2, 0, 1)
(2, 0, 2)
(2, 0, 3)
(2, 0, 4)
(2, 0, 5)
(2, 0, 6)
(2, 0, 7)
(2, 1, 0)
(2, 1, 1)
(2, 1, 2)
(2, 1, 3)
(2, 1, 4)
(2, 1, 5)
(2, 1, 6)
(2, 1, 7)
(2, 2, 0)
(2, 2, 1)
(2, 2, 2)
(2, 2, 3)
(2, 2, 4)
(2, 2, 5)
(2, 2, 6)
(2, 2, 7)
(2, 3, 0)
(2, 3, 1)
(2, 3, 2)
(2, 3, 3)
(2, 3, 4)
(2, 3, 5)
(2, 3, 6)
(2, 3, 7)
(2, 4, 0)
(2, 4, 1)
(2, 4, 2)
(2, 4, 3)
(2, 4, 4)
(2, 4, 5)
(2, 4, 6)
(2, 4, 7)
(2, 5, 0)
(2, 5, 1)
(2, 5, 2)
(2, 5, 3)
(2, 5, 4)
(2, 5, 5)
(2, 5, 6)
(2, 5, 7)
(2, 6, 0)
(2, 6, 1)
(2, 6, 2)
(2, 6, 3)
(2, 6, 4)
(2, 6, 5)
(2, 6, 6)
(2, 6, 7)
(2, 7, 0)
(2, 7, 1)
(2, 7, 2)
(2, 7, 3)
(2, 7, 4)
(2, 7, 5)
(2, 7, 6)
(2, 7, 7)
(2, 8, 0)
(2, 8, 1)
(2, 8, 2)
(2, 8, 3)
(2, 8, 4)
(2, 8, 5)
(2, 8, 6)
(2, 8, 7)
(2, 9, 0)
(2, 9, 1)
(2, 9, 2)
(2, 9, 3)
(2, 9, 4)
(2, 9, 5)
(2, 9, 6)
(2, 9, 7)
(2, 10, 0)
(2, 10, 1)
(2, 10, 2)
(2, 10, 3)
(2, 10, 4)
(2, 10, 5)
(2, 10, 6)
(2, 10, 7)
(2, 11, 0)
(2, 11, 1)
(2, 11, 2)
(2, 11, 3)
(2, 11, 4)
(2, 11, 5)
(2, 11, 6)
(2, 11, 7)
(2, 12, 0)
(2, 12, 1)
(2, 12, 2)
(2, 12, 3)
(2, 12, 4)
(2, 12, 5)
(2, 12, 6)
(2, 12, 7)
(2, 13, 0)
(2, 13, 1)
(2, 13, 2)
(2, 13, 3)
(2, 13, 4)
(2, 13, 5)
(2, 13, 6)
(2, 13, 7)
(2, 14, 0)
(2, 14, 1)
(2, 14, 2)
(2, 14, 3)
(2, 14, 4)
(2, 14, 5)
(2, 14, 6)
(2, 14, 7)
(2, 15, 0)
(2, 15, 1)
(2, 15, 2)
(2, 15, 3)
(2, 15, 4)
(2, 15, 5)
(2, 15, 6)
(2, 15, 7)
(2, 16, 0)
(2, 16, 1)
(2, 16, 2)
(2, 16, 3)
(2, 16, 4)
(2, 16, 5)
(2, 16, 6)
(2, 16, 7)
(2, 17, 0)
(2, 17, 1)
(2, 17, 2)
(2, 17, 3)
(2, 17, 4)
(2, 17, 5)
(2, 17, 6)
(2, 17, 7)
(2, 18, 0)
(2, 18, 1)
(2, 18, 2)
(2, 18, 3)
(2, 18, 4)
(2, 18, 5)
(2, 18, 6)
(2, 18, 7)
(2, 19, 0)
(2, 19, 1)
(2, 19, 2)
(2, 19, 3)
(2, 19, 4)
(2, 19, 5)
(2, 19, 6)
(2, 19, 7)
(2, 20, 0)
(2, 20, 1)
(2, 20, 2)
(2, 20, 3)
(2, 20, 4)
(2, 20, 5)
(2, 20, 6)
(2, 20, 7)
(2, 21, 0)
(2, 21, 1)
(2, 21, 2)
(2, 21, 3)
(2, 21, 4)
(2, 21, 5)
(2, 21, 6)
(2, 21, 7)
(2, 22, 0)
(2, 22, 1)
(2, 22, 2)
(2, 22, 3)
(2, 22, 4)
(2, 22, 5)
(2, 22, 6)
(2, 22, 7)
(2, 23, 0)
(2, 23, 1)
(2, 23, 2)
(2, 23, 3)
(2, 23, 4)
(2, 23, 5)
(2, 23, 6)
(2, 23, 7)
(2, 24, 0)
(2, 24, 1)
(2, 24, 2)
(2, 24, 3)
(2, 24, 4)
(2, 24, 5)
(2, 24, 6)
(2, 24, 7)
(2, 25, 0)
(2, 25, 1)
(2, 25, 2)
(2, 25, 3)
(2, 25, 4)
(2, 25, 5)
(2, 25, 6)
(2, 25, 7)
(2, 26, 0)
(2, 26, 1)
(2, 26, 2)
(2, 26, 3)
(2, 26, 4)
(2, 26, 5)
(2, 26, 6)
(2, 26, 7)
(2, 27, 0)
(2, 27, 1)
(2, 27, 2)
(2, 27, 3)
(2, 27, 4)
(2, 27, 5)
(2, 27, 6)
(2, 27, 7)
(2, 28, 0)
(2, 28, 1)
(2, 28, 2)
(2, 28, 3)
(2, 28, 4)
(2, 28, 5)
(2, 28, 6)
(2, 28, 7)
(2, 29, 0)
(2, 29, 1)
(2, 29, 2)
(2, 29, 3)
(2, 29, 4)
(2, 29, 5)
(2, 29, 6)
(2, 29, 7)
(2, 30, 0)
(2, 30, 1)
(2, 30, 2)
(2, 30, 3)
(2, 30, 4)
(2, 30, 5)
(2, 30, 6)
(2, 30, 7)
(2, 31, 0)
(2, 31, 1)
(2, 31, 2)
(2, 31, 3)
(2, 31, 4)
(2, 31, 5)
(2, 31, 6)
(2, 31, 7)
(2, 32, 0)
(2, 32, 1)
(2, 32, 2)
(2, 32, 3)
(2, 32, 4)
(2, 32, 5)
(2, 32, 6)
(2, 32, 7)
(2, 33, 0)
(2, 33, 1)
(2, 33, 2)
(2, 33, 3)
(2, 33, 4)
(2, 33, 5)
(2, 33, 6)
(2, 33, 7)
(2, 34, 0)
(2, 34, 1)
(2, 34, 2)
(2, 34, 3)
(2, 34, 4)
(2, 34, 5)
(2, 34, 6)
(2, 34, 7)
(2, 35, 0)
(2, 35, 1)
(2, 35, 2)
(2, 35, 3)
(2, 35, 4)
(2, 35, 5)
(2, 35, 6)
(2, 35, 7)
(2, 36, 0)
(2, 36, 1)
(2, 36, 2)
(2, 36, 3)
(2, 36, 4)
(2, 36, 5)
(2, 36, 6)
(2, 36, 7)
(2, 37, 0)
(2, 37, 1)
(2, 37, 2)
(2, 37, 3)
(2, 37, 4)
(2, 37, 5)
(2, 37, 6)
(2, 37, 7)
(2, 38, 0)
(2, 38, 1)
(2, 38, 2)
(2, 38, 3)
(2, 38, 4)
(2, 38, 5)
(2, 38, 6)
(2, 38, 7)
(2, 39, 0)
(2, 39, 1)
(2, 39, 2)
(2, 39, 3)
(2, 39, 4)
(2, 39, 5)
(2, 39, 6)
(2, 39, 7)
(2, 40, 0)
(2, 40, 1)
(2, 40, 2)
(2, 40, 3)
(2, 40, 4)
(2, 40, 5)
(2, 40, 6)
(2, 40, 7)
(2, 41, 0)
(2, 41, 1)
(2, 41, 2)
(2, 41, 3)
(2, 41, 4)
(2, 41, 5)
(2, 41, 6)
(2, 41, 7)
(2, 42, 0)
(2, 42, 1)
(2, 42, 2)
(2, 42, 3)
(2, 42, 4)
(2, 42, 5)
(2, 42, 6)
(2, 42, 7)
(2, 43, 0)
(2, 43, 1)
(2, 43, 2)
(2, 43, 3)
(2, 43, 4)
(2, 43, 5)
(2, 43, 6)
(2, 43, 7)
(2, 44, 0)
(2, 44, 1)
(2, 44, 2)
(2, 44, 3)
(2, 44, 4)
(2, 44, 5)
(2, 44, 6)
(2, 44, 7)
(2, 45, 0)
(2, 45, 1)
(2, 45, 2)
(2, 45, 3)
(2, 45, 4)
(2, 45, 5)
(2, 45, 6)
(2, 45, 7)
(2, 46, 0)
(2, 46, 1)
(2, 46, 2)
(2, 46, 3)
(2, 46, 4)
(2, 46, 5)
(2, 46, 6)
(2, 46, 7)
(2, 47, 0)
(2, 47, 1)
(2, 47, 2)
(2, 47, 3)
(2, 47, 4)
(2, 47, 5)
(2, 47, 6)
(2, 47, 7)
(2, 48, 0)
(2, 48, 1)
(2, 48, 2)
(2, 48, 3)
(2, 48, 4)
(2, 48, 5)
(2, 48, 6)
(2, 48, 7)
(2, 49, 0)
(2, 49, 1)
(2, 49, 2)
(2, 49, 3)
(2, 49, 4)
(2, 49, 5)
(2, 49, 6)
(2, 49, 7)
(2, 50, 0)
(2, 50, 1)
(2, 50, 2)
(2, 50, 3)
(2, 50, 4)
(2, 50, 5)
(2, 50, 6)
(2, 50, 7)
(2, 51, 0)
(2, 51, 1)
(2, 51, 2)
(2, 51, 3)
(2, 51, 4)
(2, 51, 5)
(2, 51, 6)
(2, 51, 7)
(2, 52, 0)
(2, 52, 1)
(2, 52, 2)
(2, 52, 3)
(2, 52, 4)
(2, 52, 5)
(2, 52, 6)
(2, 52, 7)
(2, 53, 0)
(2, 53, 1)
(2, 53, 2)
(2, 53, 3)
(2, 53, 4)
(2, 53, 5)
(2, 53, 6)
(2, 53, 7)
(2, 54, 0)
(2, 54, 1)
(2, 54, 2)
(2, 54, 3)
(2, 54, 4)
(2, 54, 5)
(2, 54, 6)
(2, 54, 7)
(2, 55, 0)
(2, 55, 1)
(2, 55, 2)
(2, 55, 3)
(2, 55, 4)
(2, 55, 5)
(2, 55, 6)
(2, 55, 7)
(2, 56, 0)
(2, 56, 1)
(2, 56, 2)
(2, 56, 3)
(2, 56, 4)
(2, 56, 5)
(2, 56, 6)
(2, 56, 7)
(2, 57, 0)
(2, 57, 1)
(2, 57, 2)
(2, 57, 3)
(2, 57, 4)
(2, 57, 5)
(2, 57, 6)
(2, 57, 7)
(2, 58, 0)
(2, 58, 1)
(2, 58, 2)
(2, 58, 3)
(2, 58, 4)
(2, 58, 5)
(2, 58, 6)
(2, 58, 7)
(2, 59, 0)
(2, 59, 1)
(2, 59, 2)
(2, 59, 3)
(2, 59, 4)
(2, 59, 5)
(2, 59, 6)
(2, 59, 7)
(2, 60, 0)
(2, 60, 1)
(2, 60, 2)
(2, 60, 3)
(2, 60, 4)
(2, 60, 5)
(2, 60, 6)
(2, 60, 7)
(2, 61, 0)
(2, 61, 1)
(2, 61, 2)
(2, 61, 3)
(2, 61, 4)
(2, 61, 5)
(2, 61, 6)
(2, 61, 7)
(2, 62, 0)
(2, 62, 1)
(2, 62, 2)
(2, 62, 3)
(2, 62, 4)
(2, 62, 5)
(2, 62, 6)
(2, 62, 7)
(2, 63, 0)
(2, 63, 1)
(2, 63, 2)
(2, 63, 3)
(2, 63, 4)
(2, 63, 5)
(2, 63, 6)
(2, 63, 7)
(2, 64, 0)
(2, 64, 1)
(2, 64, 2)
(2, 64, 3)
(2, 64, 4)
(2, 64, 5)
(2, 64, 6)
(2, 64, 7)
(2, 65, 0)
(2, 65, 1)
(2, 65, 2)
(2, 65, 3)
(2, 65, 4)
(2, 65, 5)
(2, 65, 6)
(2, 65, 7)
(2, 66, 0)
(2, 66, 1)
(2, 66, 2)
(2, 66, 3)
(2, 66, 4)
(2, 66, 5)
(2, 66, 6)
(2, 66, 7)
(2, 67, 0)
(2, 67, 1)
(2, 67, 2)
(2, 67, 3)
(2, 67, 4)
(2, 67, 5)
(2, 67, 6)
(2, 67, 7)
(2, 68, 0)
(2, 68, 1)
(2, 68, 2)
(2, 68, 3)
(2, 68, 4)
(2, 68, 5)
(2, 68, 6)
(2, 68, 7)
(2, 69, 0)
(2, 69, 1)
(2, 69, 2)
(2, 69, 3)
(2, 69, 4)
(2, 69, 5)
(2, 69, 6)
(2, 69, 7)
(2, 70, 0)
(2, 70, 1)
(2, 70, 2)
(2, 70, 3)
(2, 70, 4)
(2, 70, 5)
(2, 70, 6)
(2, 70, 7)
(2, 71, 0)
(2, 71, 1)
(2, 71, 2)
(2, 71, 3)
(2, 71, 4)
(2, 71, 5)
(2, 71, 6)
(2, 71, 7)
(2, 72, 0)
(2, 72, 1)
(2, 72, 2)
(2, 72, 3)
(2, 72, 4)
(2, 72, 5)
(2, 72, 6)
(2, 72, 7)
(2, 73, 0)
(2, 73, 1)
(2, 73, 2)
(2, 73, 3)
(2, 73, 4)
(2, 73, 5)
(2, 73, 6)
(2, 73, 7)
(2, 74, 0)
(2, 74, 1)
(2, 74, 2)
(2, 74, 3)
(2, 74, 4)
(2, 74, 5)
(2, 74, 6)
(2, 74, 7)
(2, 75, 0)
(2, 75, 1)
(2, 75, 2)
(2, 75, 3)
(2, 75, 4)
(2, 75, 5)
(2, 75, 6)
(2, 75, 7)
(2, 76, 0)
(2, 76, 1)
(2, 76, 2)
(2, 76, 3)
(2, 76, 4)
(2, 76, 5)
(2, 76, 6)
(2, 76, 7)
(2, 77, 0)
(2, 77, 1)
(2, 77, 2)
(2, 77, 3)
(2, 77, 4)
(2, 77, 5)
(2, 77, 6)
(2, 77, 7)
(2, 78, 0)
(2, 78, 1)
(2, 78, 2)
(2, 78, 3)
(2, 78, 4)
(2, 78, 5)
(2, 78, 6)
(2, 78, 7)
(2, 79, 0)
(2, 79, 1)
(2, 79, 2)
(2, 79, 3)
(2, 79, 4)
(2, 79, 5)
(2, 79, 6)
(2, 79, 7)
(2, 80, 0)
(2, 80, 1)
(2, 80, 2)
(2, 80, 3)
(2, 80, 4)
(2, 80, 5)
(2, 80, 6)
(2, 80, 7)
(2, 81, 0)
(2, 81, 1)
(2, 81, 2)
(2, 81, 3)
(2, 81, 4)
(2, 81, 5)
(2, 81, 6)
(2, 81, 7)
(2, 82, 0)
(2, 82, 1)
(2, 82, 2)
(2, 82, 3)
(2, 82, 4)
(2, 82, 5)
(2, 82, 6)
(2, 82, 7)
(2, 83, 0)
(2, 83, 1)
(2, 83, 2)
(2, 83, 3)
(2, 83, 4)
(2, 83, 5)
(2, 83, 6)
(2, 83, 7)
(2, 84, 0)
(2, 84, 1)
(2, 84, 2)
(2, 84, 3)
(2, 84, 4)
(2, 84, 5)
(2, 84, 6)
(2, 84, 7)
(2, 85, 0)
(2, 85, 1)
(2, 85, 2)
(2, 85, 3)
(2, 85, 4)
(2, 85, 5)
(2, 85, 6)
(2, 85, 7)
(2, 86, 0)
(2, 86, 1)
(2, 86, 2)
(2, 86, 3)
(2, 86, 4)
(2, 86, 5)
(2, 86, 6)
(2, 86, 7)
(2, 87, 0)
(2, 87, 1)
(2, 87, 2)
(2, 87, 3)
(2, 87, 4)
(2, 87, 5)
(2, 87, 6)
(2, 87, 7)
(2, 88, 0)
(2, 88, 1)
(2, 88, 2)
(2, 88, 3)
(2, 88, 4)
(2, 88, 5)
(2, 88, 6)
(2, 88, 7)
(2, 89, 0)
(2, 89, 1)
(2, 89, 2)
(2, 89, 3)
(2, 89, 4)
(2, 89, 5)
(2, 89, 6)
(2, 89, 7)
(2, 90, 0)
(2, 90, 1)
(2, 90, 2)
(2, 90, 3)
(2, 90, 4)
(2, 90, 5)
(2, 90, 6)
(2, 90, 7)
(2, 91, 0)
(2, 91, 1)
(2, 91, 2)
(2, 91, 3)
(2, 91, 4)
(2, 91, 5)
(2, 91, 6)
(2, 91, 7)
(2, 92, 0)
(2, 92, 1)
(2, 92, 2)
(2, 92, 3)
(2, 92, 4)
(2, 92, 5)
(2, 92, 6)
(2, 92, 7)
(2, 93, 0)
(2, 93, 1)
(2, 93, 2)
(2, 93, 3)
(2, 93, 4)
(2, 93, 5)
(2, 93, 6)
(2, 93, 7)
(2, 94, 0)
(2, 94, 1)
(2, 94, 2)
(2, 94, 3)
(2, 94, 4)
(2, 94, 5)
(2, 94, 6)
(2, 94, 7)
(2, 95, 0)
(2, 95, 1)
(2, 95, 2)
(2, 95, 3)
(2, 95, 4)
(2, 95, 5)
(2, 95, 6)
(2, 95, 7)
(2, 96, 0)
(2, 96, 1)
(2, 96, 2)
(2, 96, 3)
(2, 96, 4)
(2, 96, 5)
(2, 96, 6)
(2, 96, 7)
(2, 97, 0)
(2, 97, 1)
(2, 97, 2)
(2, 97, 3)
(2, 97, 4)
(2, 97, 5)
(2, 97, 6)
(2, 97, 7)
(2, 98, 0)
(2, 98, 1)
(2, 98, 2)
(2, 98, 3)
(2, 98, 4)
(2, 98, 5)
(2, 98, 6)
(2, 98, 7)
(2, 99, 0)
(2, 99, 1)
(2, 99, 2)
(2, 99, 3)
(2, 99, 4)
(2, 99, 5)
(2, 99, 6)
(2, 99, 7)
(2, 100, 0)
(2, 100, 1)
(2, 100, 2)
(2, 100, 3)
(2, 100, 4)
(2, 100, 5)
(2, 100, 6)
(2, 100, 7)
(2, 101, 0)
(2, 101, 1)
(2, 101, 2)
(2, 101, 3)
(2, 101, 4)
(2, 101, 5)
(2, 101, 6)
(2, 101, 7)
(2, 102, 0)
(2, 102, 1)
(2, 102, 2)
(2, 102, 3)
(2, 102, 4)
(2, 102, 5)
(2, 102, 6)
(2, 102, 7)
(2, 103, 0)
(2, 103, 1)
(2, 103, 2)
(2, 103, 3)
(2, 103, 4)
(2, 103, 5)
(2, 103, 6)
(2, 103, 7)
(2, 104, 0)
(2, 104, 1)
(2, 104, 2)
(2, 104, 3)
(2, 104, 4)
(2, 104, 5)
(2, 104, 6)
(2, 104, 7)
(2, 105, 0)
(2, 105, 1)
(2, 105, 2)
(2, 105, 3)
(2, 105, 4)
(2, 105, 5)
(2, 105, 6)
(2, 105, 7)
(2, 106, 0)
(2, 106, 1)
(2, 106, 2)
(2, 106, 3)
(2, 106, 4)
(2, 106, 5)
(2, 106, 6)
(2, 106, 7)
(2, 107, 0)
(2, 107, 1)
(2, 107, 2)
(2, 107, 3)
(2, 107, 4)
(2, 107, 5)
(2, 107, 6)
(2, 107, 7)
(2, 108, 0)
(2, 108, 1)
(2, 108, 2)
(2, 108, 3)
(2, 108, 4)
(2, 108, 5)
(2, 108, 6)
(2, 108, 7)
(2, 109, 0)
(2, 109, 1)
(2, 109, 2)
(2, 109, 3)
(2, 109, 4)
(2, 109, 5)
(2, 109, 6)
(2, 109, 7)
(2, 110, 0)
(2, 110, 1)
(2, 110, 2)
(2, 110, 3)
(2, 110, 4)
(2, 110, 5)
(2, 110, 6)
(2, 110, 7)
(2, 111, 0)
(2, 111, 1)
(2, 111, 2)
(2, 111, 3)
(2, 111, 4)
(2, 111, 5)
(2, 111, 6)
(2, 111, 7)
(2, 112, 0)
(2, 112, 1)
(2, 112, 2)
(2, 112, 3)
(2, 112, 4)
(2, 112, 5)
(2, 112, 6)
(2, 112, 7)
(2, 113, 0)
(2, 113, 1)
(2, 113, 2)
(2, 113, 3)
(2, 113, 4)
(2, 113, 5)
(2, 113, 6)
(2, 113, 7)
(2, 114, 0)
(2, 114, 1)
(2, 114, 2)
(2, 114, 3)
(2, 114, 4)
(2, 114, 5)
(2, 114, 6)
(2, 114, 7)
(2, 115, 0)
(2, 115, 1)
(2, 115, 2)
(2, 115, 3)
(2, 115, 4)
(2, 115, 5)
(2, 115, 6)
(2, 115, 7)
(2, 116, 0)
(2, 116, 1)
(2, 116, 2)
(2, 116, 3)
(2, 116, 4)
(2, 116, 5)
(2, 116, 6)
(2, 116, 7)
(2, 117, 0)
(2, 117, 1)
(2, 117, 2)
(2, 117, 3)
(2, 117, 4)
(2, 117, 5)
(2, 117, 6)
(2, 117, 7)
(2, 118, 0)
(2, 118, 1)
(2, 118, 2)
(2, 118, 3)
(2, 118, 4)
(2, 118, 5)
(2, 118, 6)
(2, 118, 7)
(2, 119, 0)
(2, 119, 1)
(2, 119, 2)
(2, 119, 3)
(2, 119, 4)
(2, 119, 5)
(2, 119, 6)
(2, 119, 7)
(2, 120, 0)
(2, 120, 1)
(2, 120, 2)
(2, 120, 3)
(2, 120, 4)
(2, 120, 5)
(2, 120, 6)
(2, 120, 7)
(2, 121, 0)
(2, 121, 1)
(2, 121, 2)
(2, 121, 3)
(2, 121, 4)
(2, 121, 5)
(2, 121, 6)
(2, 121, 7)
(2, 122, 0)
(2, 122, 1)
(2, 122, 2)
(2, 122, 3)
(2, 122, 4)
(2, 122, 5)
(2, 122, 6)
(2, 122, 7)
(2, 123, 0)
(2, 123, 1)
(2, 123, 2)
(2, 123, 3)
(2, 123, 4)
(2, 123, 5)
(2, 123, 6)
(2, 123, 7)
(2, 124, 0)
(2, 124, 1)
(2, 124, 2)
(2, 124, 3)
(2, 124, 4)
(2, 124, 5)
(2, 124, 6)
(2, 124, 7)
(2, 125, 0)
(2, 125, 1)
(2, 125, 2)
(2, 125, 3)
(2, 125, 4)
(2, 125, 5)
(2, 125, 6)
(2, 125, 7)
(2, 126, 0)
(2, 126, 1)
(2, 126, 2)
(2, 126, 3)
(2, 126, 4)
(2, 126, 5)
(2, 126, 6)
(2, 126, 7)
(2, 127, 0)
(2, 127, 1)
(2, 127, 2)
(2, 127, 3)
(2, 127, 4)
(2, 127, 5)
(2, 127, 6)
(2, 127, 7)
(2, 128, 0)
(2, 128, 1)
(2, 128, 2)
(2, 128, 3)
(2, 128, 4)
(2, 128, 5)
(2, 128, 6)
(2, 128, 7)
(2, 129, 0)
(2, 129, 1)
(2, 129, 2)
(2, 129, 3)
(2, 129, 4)
(2, 129, 5)
(2, 129, 6)
(2, 129, 7)
(2, 130, 0)
(2, 130, 1)
(2, 130, 2)
(2, 130, 3)
(2, 130, 4)
(2, 130, 5)
(2, 130, 6)
(2, 130, 7)
(2, 131, 0)
(2, 131, 1)
(2, 131, 2)
(2, 131, 3)
(2, 131, 4)
(2, 131, 5)
(2, 131, 6)
(2, 131, 7)
(2, 132, 0)
(2, 132, 1)
(2, 132, 2)
(2, 132, 3)
(2, 132, 4)
(2, 132, 5)
(2, 132, 6)
(2, 132, 7)
(2, 133, 0)
(2, 133, 1)
(2, 133, 2)
(2, 133, 3)
(2, 133, 4)
(2, 133, 5)
(2, 133, 6)
(2, 133, 7)
(2, 134, 0)
(2, 134, 1)
(2, 134, 2)
(2, 134, 3)
(2, 134, 4)
(2, 134, 5)
(2, 134, 6)
(2, 134, 7)
(2, 135, 0)
(2, 135, 1)
(2, 135, 2)
(2, 135, 3)
(2, 135, 4)
(2, 135, 5)
(2, 135, 6)
(2, 135, 7)
(2, 136, 0)
(2, 136, 1)
(2, 136, 2)
(2, 136, 3)
(2, 136, 4)
(2, 136, 5)
(2, 136, 6)
(2, 136, 7)
(2, 137, 0)
(2, 137, 1)
(2, 137, 2)
(2, 137, 3)
(2, 137, 4)
(2, 137, 5)
(2, 137, 6)
(2, 137, 7)
(2, 138, 0)
(2, 138, 1)
(2, 138, 2)
(2, 138, 3)
(2, 138, 4)
(2, 138, 5)
(2, 138, 6)
(2, 138, 7)
(2, 139, 0)
(2, 139, 1)
(2, 139, 2)
(2, 139, 3)
(2, 139, 4)
(2, 139, 5)
(2, 139, 6)
(2, 139, 7)
(2, 140, 0)
(2, 140, 1)
(2, 140, 2)
(2, 140, 3)
(2, 140, 4)
(2, 140, 5)
(2, 140, 6)
(2, 140, 7)
(2, 141, 0)
(2, 141, 1)
(2, 141, 2)
(2, 141, 3)
(2, 141, 4)
(2, 141, 5)
(2, 141, 6)
(2, 141, 7)
(2, 142, 0)
(2, 142, 1)
(2, 142, 2)
(2, 142, 3)
(2, 142, 4)
(2, 142, 5)
(2, 142, 6)
(2, 142, 7)
(2, 143, 0)
(2, 143, 1)
(2, 143, 2)
(2, 143, 3)
(2, 143, 4)
(2, 143, 5)
(2, 143, 6)
(2, 143, 7)
(2, 144, 0)
(2, 144, 1)
(2, 144, 2)
(2, 144, 3)
(2, 144, 4)
(2, 144, 5)
(2, 144, 6)
(2, 144, 7)
(2, 145, 0)
(2, 145, 1)
(2, 145, 2)
(2, 145, 3)
(2, 145, 4)
(2, 145, 5)
(2, 145, 6)
(2, 145, 7)
(2, 146, 0)
(2, 146, 1)
(2, 146, 2)
(2, 146, 3)
(2, 146, 4)
(2, 146, 5)
(2, 146, 6)
(2, 146, 7)
(2, 147, 0)
(2, 147, 1)
(2, 147, 2)
(2, 147, 3)
(2, 147, 4)
(2, 147, 5)
(2, 147, 6)
(2, 147, 7)
(2, 148, 0)
(2, 148, 1)
(2, 148, 2)
(2, 148, 3)
(2, 148, 4)
(2, 148, 5)
(2, 148, 6)
(2, 148, 7)
(2, 149, 0)
(2, 149, 1)
(2, 149, 2)
(2, 149, 3)
(2, 149, 4)
(2, 149, 5)
(2, 149, 6)
(2, 149, 7)
(2, 150, 0)
(2, 150, 1)
(2, 150, 2)
(2, 150, 3)
(2, 150, 4)
(2, 150, 5)
(2, 150, 6)
(2, 150, 7)
(2, 151, 0)
(2, 151, 1)
(2, 151, 2)
(2, 151, 3)
(2, 151, 4)
(2, 151, 5)
(2, 151, 6)
(2, 151, 7)
(2, 152, 0)
(2, 152, 1)
(2, 152, 2)
(2, 152, 3)
(2, 152, 4)
(2, 152, 5)
(2, 152, 6)
(2, 152, 7)
(2, 153, 0)
(2, 153, 1)
(2, 153, 2)
(2, 153, 3)
(2, 153, 4)
(2, 153, 5)
(2, 153, 6)
(2, 153, 7)
(2, 154, 0)
(2, 154, 1)
(2, 154, 2)
(2, 154, 3)
(2, 154, 4)
(2, 154, 5)
(2, 154, 6)
(2, 154, 7)
(2, 155, 0)
(2, 155, 1)
(2, 155, 2)
(2, 155, 3)
(2, 155, 4)
(2, 155, 5)
(2, 155, 6)
(2, 155, 7)
(2, 156, 0)
(2, 156, 1)
(2, 156, 2)
(2, 156, 3)
(2, 156, 4)
(2, 156, 5)
(2, 156, 6)
(2, 156, 7)
(2, 157, 0)
(2, 157, 1)
(2, 157, 2)
(2, 157, 3)
(2, 157, 4)
(2, 157, 5)
(2, 157, 6)
(2, 157, 7)
(2, 158, 0)
(2, 158, 1)
(2, 158, 2)
(2, 158, 3)
(2, 158, 4)
(2, 158, 5)
(2, 158, 6)
(2, 158, 7)
(2, 159, 0)
(2, 159, 1)
(2, 159, 2)
(2, 159, 3)
(2, 159, 4)
(2, 159, 5)
(2, 159, 6)
(2, 159, 7)
(2, 160, 0)
(2, 160, 1)
(2, 160, 2)
(2, 160, 3)
(2, 160, 4)
(2, 160, 5)
(2, 160, 6)
(2, 160, 7)
(2, 161, 0)
(2, 161, 1)
(2, 161, 2)
(2, 161, 3)
(2, 161, 4)
(2, 161, 5)
(2, 161, 6)
(2, 161, 7)
(2, 162, 0)
(2, 162, 1)
(2, 162, 2)
(2, 162, 3)
(2, 162, 4)
(2, 162, 5)
(2, 162, 6)
(2, 162, 7)
(2, 163, 0)
(2, 163, 1)
(2, 163, 2)
(2, 163, 3)
(2, 163, 4)
(2, 163, 5)
(2, 163, 6)
(2, 163, 7)
(2, 164, 0)
(2, 164, 1)
(2, 164, 2)
(2, 164, 3)
(2, 164, 4)
(2, 164, 5)
(2, 164, 6)
(2, 164, 7)
(2, 165, 0)
(2, 165, 1)
(2, 165, 2)
(2, 165, 3)
(2, 165, 4)
(2, 165, 5)
(2, 165, 6)
(2, 165, 7)
(2, 166, 0)
(2, 166, 1)
(2, 166, 2)
(2, 166, 3)
(2, 166, 4)
(2, 166, 5)
(2, 166, 6)
(2, 166, 7)
(2, 167, 0)
(2, 167, 1)
(2, 167, 2)
(2, 167, 3)
(2, 167, 4)
(2, 167, 5)
(2, 167, 6)
(2, 167, 7)
(2, 168, 0)
(2, 168, 1)
(2, 168, 2)
(2, 168, 3)
(2, 168, 4)
(2, 168, 5)
(2, 168, 6)
(2, 168, 7)
(2, 169, 0)
(2, 169, 1)
(2, 169, 2)
(2, 169, 3)
(2, 169, 4)
(2, 169, 5)
(2, 169, 6)
(2, 169, 7)
(2, 170, 0)
(2, 170, 1)
(2, 170, 2)
(2, 170, 3)
(2, 170, 4)
(2, 170, 5)
(2, 170, 6)
(2, 170, 7)
(2, 171, 0)
(2, 171, 1)
(2, 171, 2)
(2, 171, 3)
(2, 171, 4)
(2, 171, 5)
(2, 171, 6)
(2, 171, 7)
(2, 172, 0)
(2, 172, 1)
(2, 172, 2)
(2, 172, 3)
(2, 172, 4)
(2, 172, 5)
(2, 172, 6)
(2, 172, 7)
(2, 173, 0)
(2, 173, 1)
(2, 173, 2)
(2, 173, 3)
(2, 173, 4)
(2, 173, 5)
(2, 173, 6)
(2, 173, 7)
(2, 174, 0)
(2, 174, 1)
(2, 174, 2)
(2, 174, 3)
(2, 174, 4)
(2, 174, 5)
(2, 174, 6)
(2, 174, 7)
(2, 175, 0)
(2, 175, 1)
(2, 175, 2)
(2, 175, 3)
(2, 175, 4)
(2, 175, 5)
(2, 175, 6)
(2, 175, 7)
(2, 176, 0)
(2, 176, 1)
(2, 176, 2)
(2, 176, 3)
(2, 176, 4)
(2, 176, 5)
(2, 176, 6)
(2, 176, 7)
(2, 177, 0)
(2, 177, 1)
(2, 177, 2)
(2, 177, 3)
(2, 177, 4)
(2, 177, 5)
(2, 177, 6)
(2, 177, 7)
(2, 178, 0)
(2, 178, 1)
(2, 178, 2)
(2, 178, 3)
(2, 178, 4)
(2, 178, 5)
(2, 178, 6)
(2, 178, 7)
(2, 179, 0)
(2, 179, 1)
(2, 179, 2)
(2, 179, 3)
(2, 179, 4)
(2, 179, 5)
(2, 179, 6)
(2, 179, 7)
(2, 180, 0)
(2, 180, 1)
(2, 180, 2)
(2, 180, 3)
(2, 180, 4)
(2, 180, 5)
(2, 180, 6)
(2, 180, 7)
(2, 181, 0)
(2, 181, 1)
(2, 181, 2)
(2, 181, 3)
(2, 181, 4)
(2, 181, 5)
(2, 181, 6)
(2, 181, 7)
(2, 182, 0)
(2, 182, 1)
(2, 182, 2)
(2, 182, 3)
(2, 182, 4)
(2, 182, 5)
(2, 182, 6)
(2, 182, 7)
(2, 183, 0)
(2, 183, 1)
(2, 183, 2)
(2, 183, 3)
(2, 183, 4)
(2, 183, 5)
(2, 183, 6)
(2, 183, 7)
(2, 184, 0)
(2, 184, 1)
(2, 184, 2)
(2, 184, 3)
(2, 184, 4)
(2, 184, 5)
(2, 184, 6)
(2, 184, 7)
(2, 185, 0)
(2, 185, 1)
(2, 185, 2)
(2, 185, 3)
(2, 185, 4)
(2, 185, 5)
(2, 185, 6)
(2, 185, 7)
(2, 186, 0)
(2, 186, 1)
(2, 186, 2)
(2, 186, 3)
(2, 186, 4)
(2, 186, 5)
(2, 186, 6)
(2, 186, 7)
(2, 187, 0)
(2, 187, 1)
(2, 187, 2)
(2, 187, 3)
(2, 187, 4)
(2, 187, 5)
(2, 187, 6)
(2, 187, 7)
(2, 188, 0)
(2, 188, 1)
(2, 188, 2)
(2, 188, 3)
(2, 188, 4)
(2, 188, 5)
(2, 188, 6)
(2, 188, 7)
(2, 189, 0)
(2, 189, 1)
(2, 189, 2)
(2, 189, 3)
(2, 189, 4)
(2, 189, 5)
(2, 189, 6)
(2, 189, 7)
(2, 190, 0)
(2, 190, 1)
(2, 190, 2)
(2, 190, 3)
(2, 190, 4)
(2, 190, 5)
(2, 190, 6)
(2, 190, 7)
(2, 191, 0)
(2, 191, 1)
(2, 191, 2)
(2, 191, 3)
(2, 191, 4)
(2, 191, 5)
(2, 191, 6)
(2, 191, 7)
(2, 192, 0)
(2, 192, 1)
(2, 192, 2)
(2, 192, 3)
(2, 192, 4)
(2, 192, 5)
(2, 192, 6)
(2, 192, 7)
(2, 193, 0)
(2, 193, 1)
(2, 193, 2)
(2, 193, 3)
(2, 193, 4)
(2, 193, 5)
(2, 193, 6)
(2, 193, 7)
(2, 194, 0)
(2, 194, 1)
(2, 194, 2)
(2, 194, 3)
(2, 194, 4)
(2, 194, 5)
(2, 194, 6)
(2, 194, 7)
(2, 195, 0)
(2, 195, 1)
(2, 195, 2)
(2, 195, 3)
(2, 195, 4)
(2, 195, 5)
(2, 195, 6)
(2, 195, 7)
(2, 196, 0)
(2, 196, 1)
(2, 196, 2)
(2, 196, 3)
(2, 196, 4)
(2, 196, 5)
(2, 196, 6)
(2, 196, 7)
(2, 197, 0)
(2, 197, 1)
(2, 197, 2)
(2, 197, 3)
(2, 197, 4)
(2, 197, 5)
(2, 197, 6)
(2, 197, 7)
(2, 198, 0)
(2, 198, 1)
(2, 198, 2)
(2, 198, 3)
(2, 198, 4)
(2, 198, 5)
(2, 198, 6)
(2, 198, 7)
(2, 199, 0)
(2, 199, 1)
(2, 199, 2)
(2, 199, 3)
(2, 199, 4)
(2, 199, 5)
(2, 199, 6)
(2, 199, 7)
(2, 200, 0)
(2, 200, 1)
(2, 200, 2)
(2, 200, 3)
(2, 200, 4)
(2, 200, 5)
(2, 200, 6)
(2, 200, 7)
(2, 201, 0)
(2, 201, 1)
(2, 201, 2)
(2, 201, 3)
(2, 201, 4)
(2, 201, 5)
(2, 201, 6)
(2, 201, 7)
(2, 202, 0)
(2, 202, 1)
(2, 202, 2)
(2, 202, 3)
(2, 202, 4)
(2, 202, 5)
(2, 202, 6)
(2, 202, 7)
(2, 203, 0)
(2, 203, 1)
(2, 203, 2)
(2, 203, 3)
(2, 203, 4)
(2, 203, 5)
(2, 203, 6)
(2, 203, 7)
(2, 204, 0)
(2, 204, 1)
(2, 204, 2)
(2, 204, 3)
(2, 204, 4)
(2, 204, 5)
(2, 204, 6)
(2, 204, 7)
(2, 205, 0)
(2, 205, 1)
(2, 205, 2)
(2, 205, 3)
(2, 205, 4)
(2, 205, 5)
(2, 205, 6)
(2, 205, 7)
(2, 206, 0)
(2, 206, 1)
(2, 206, 2)
(2, 206, 3)
(2, 206, 4)
(2, 206, 5)
(2, 206, 6)
(2, 206, 7)
(2, 207, 0)
(2, 207, 1)
(2, 207, 2)
(2, 207, 3)
(2, 207, 4)
(2, 207, 5)
(2, 207, 6)
(2, 207, 7)
(2, 208, 0)
(2, 208, 1)
(2, 208, 2)
(2, 208, 3)
(2, 208, 4)
(2, 208, 5)
(2, 208, 6)
(2, 208, 7)
(2, 209, 0)
(2, 209, 1)
(2, 209, 2)
(2, 209, 3)
(2, 209, 4)
(2, 209, 5)
(2, 209, 6)
(2, 209, 7)
(2, 210, 0)
(2, 210, 1)
(2, 210, 2)
(2, 210, 3)
(2, 210, 4)
(2, 210, 5)
(2, 210, 6)
(2, 210, 7)
(2, 211, 0)
(2, 211, 1)
(2, 211, 2)
(2, 211, 3)
(2, 211, 4)
(2, 211, 5)
(2, 211, 6)
(2, 211, 7)
(2, 212, 0)
(2, 212, 1)
(2, 212, 2)
(2, 212, 3)
(2, 212, 4)
(2, 212, 5)
(2, 212, 6)
(2, 212, 7)
(2, 213, 0)
(2, 213, 1)
(2, 213, 2)
(2, 213, 3)
(2, 213, 4)
(2, 213, 5)
(2, 213, 6)
(2, 213, 7)
(2, 214, 0)
(2, 214, 1)
(2, 214, 2)
(2, 214, 3)
(2, 214, 4)
(2, 214, 5)
(2, 214, 6)
(2, 214, 7)
(2, 215, 0)
(2, 215, 1)
(2, 215, 2)
(2, 215, 3)
(2, 215, 4)
(2, 215, 5)
(2, 215, 6)
(2, 215, 7)
(2, 216, 0)
(2, 216, 1)
(2, 216, 2)
(2, 216, 3)
(2, 216, 4)
(2, 216, 5)
(2, 216, 6)
(2, 216, 7)
(2, 217, 0)
(2, 217, 1)
(2, 217, 2)
(2, 217, 3)
(2, 217, 4)
(2, 217, 5)
(2, 217, 6)
(2, 217, 7)
(2, 218, 0)
(2, 218, 1)
(2, 218, 2)
(2, 218, 3)
(2, 218, 4)
(2, 218, 5)
(2, 218, 6)
(2, 218, 7)
(2, 219, 0)
(2, 219, 1)
(2, 219, 2)
(2, 219, 3)
(2, 219, 4)
(2, 219, 5)
(2, 219, 6)
(2, 219, 7)
(2, 220, 0)
(2, 220, 1)
(2, 220, 2)
(2, 220, 3)
(2, 220, 4)
(2, 220, 5)
(2, 220, 6)
(2, 220, 7)
(2, 221, 0)
(2, 221, 1)
(2, 221, 2)
(2, 221, 3)
(2, 221, 4)
(2, 221, 5)
(2, 221, 6)
(2, 221, 7)
(2, 222, 0)
(2, 222, 1)
(2, 222, 2)
(2, 222, 3)
(2, 222, 4)
(2, 222, 5)
(2, 222, 6)
(2, 222, 7)
(2, 223, 0)
(2, 223, 1)
(2, 223, 2)
(2, 223, 3)
(2, 223, 4)
(2, 223, 5)
(2, 223, 6)
(2, 223, 7)
(2, 224, 0)
(2, 224, 1)
(2, 224, 2)
(2, 224, 3)
(2, 224, 4)
(2, 224, 5)
(2, 224, 6)
(2, 224, 7)
(2, 225, 0)
(2, 225, 1)
(2, 225, 2)
(2, 225, 3)
(2, 225, 4)
(2, 225, 5)
(2, 225, 6)
(2, 225, 7)
(2, 226, 0)
(2, 226, 1)
(2, 226, 2)
(2, 226, 3)
(2, 226, 4)
(2, 226, 5)
(2, 226, 6)
(2, 226, 7)
(2, 227, 0)
(2, 227, 1)
(2, 227, 2)
(2, 227, 3)
(2, 227, 4)
(2, 227, 5)
(2, 227, 6)
(2, 227, 7)
(2, 228, 0)
(2, 228, 1)
(2, 228, 2)
(2, 228, 3)
(2, 228, 4)
(2, 228, 5)
(2, 228, 6)
(2, 228, 7)
(2, 229, 0)
(2, 229, 1)
(2, 229, 2)
(2, 229, 3)
(2, 229, 4)
(2, 229, 5)
(2, 229, 6)
(2, 229, 7)
(2, 230, 0)
(2, 230, 1)
(2, 230, 2)
(2, 230, 3)
(2, 230, 4)
(2, 230, 5)
(2, 230, 6)
(2, 230, 7)
(2, 231, 0)
(2, 231, 1)
(2, 231, 2)
(2, 231, 3)
(2, 231, 4)
(2, 231, 5)
(2, 231, 6)
(2, 231, 7)
(2, 232, 0)
(2, 232, 1)
(2, 232, 2)
(2, 232, 3)
(2, 232, 4)
(2, 232, 5)
(2, 232, 6)
(2, 232, 7)
(2, 233, 0)
(2, 233, 1)
(2, 233, 2)
(2, 233, 3)
(2, 233, 4)
(2, 233, 5)
(2, 233, 6)
(2, 233, 7)
(2, 234, 0)
(2, 234, 1)
(2, 234, 2)
(2, 234, 3)
(2, 234, 4)
(2, 234, 5)
(2, 234, 6)
(2, 234, 7)
(2, 235, 0)
(2, 235, 1)
(2, 235, 2)
(2, 235, 3)
(2, 235, 4)
(2, 235, 5)
(2, 235, 6)
(2, 235, 7)
(2, 236, 0)
(2, 236, 1)
(2, 236, 2)
(2, 236, 3)
(2, 236, 4)
(2, 236, 5)
(2, 236, 6)
(2, 236, 7)
(2, 237, 0)
(2, 237, 1)
(2, 237, 2)
(2, 237, 3)
(2, 237, 4)
(2, 237, 5)
(2, 237, 6)
(2, 237, 7)
(2, 238, 0)
(2, 238, 1)
(2, 238, 2)
(2, 238, 3)
(2, 238, 4)
(2, 238, 5)
(2, 238, 6)
(2, 238, 7)
(2, 239, 0)
(2, 239, 1)
(2, 239, 2)
(2, 239, 3)
(2, 239, 4)
(2, 239, 5)
(2, 239, 6)
(2, 239, 7)
(2, 240, 0)
(2, 240, 1)
(2, 240, 2)
(2, 240, 3)
(2, 240, 4)
(2, 240, 5)
(2, 240, 6)
(2, 240, 7)
(2, 241, 0)
(2, 241, 1)
(2, 241, 2)
(2, 241, 3)
(2, 241, 4)
(2, 241, 5)
(2, 241, 6)
(2, 241, 7)
(2, 242, 0)
(2, 242, 1)
(2, 242, 2)
(2, 242, 3)
(2, 242, 4)
(2, 242, 5)
(2, 242, 6)
(2, 242, 7)
(2, 243, 0)
(2, 243, 1)
(2, 243, 2)
(2, 243, 3)
(2, 243, 4)
(2, 243, 5)
(2, 243, 6)
(2, 243, 7)
(2, 244, 0)
(2, 244, 1)
(2, 244, 2)
(2, 244, 3)
(2, 244, 4)
(2, 244, 5)
(2, 244, 6)
(2, 244, 7)
(2, 245, 0)
(2, 245, 1)
(2, 245, 2)
(2, 245, 3)
(2, 245, 4)
(2, 245, 5)
(2, 245, 6)
(2, 245, 7)
(2, 246, 0)
(2, 246, 1)
(2, 246, 2)
(2, 246, 3)
(2, 246, 4)
(2, 246, 5)
(2, 246, 6)
(2, 246, 7)
(2, 247, 0)
(2, 247, 1)
(2, 247, 2)
(2, 247, 3)
(2, 247, 4)
(2, 247, 5)
(2, 247, 6)
(2, 247, 7)
(2, 248, 0)
(2, 248, 1)
(2, 248, 2)
(2, 248, 3)
(2, 248, 4)
(2, 248, 5)
(2, 248, 6)
(2, 248, 7)
(2, 249, 0)
(2, 249, 1)
(2, 249, 2)
(2, 249, 3)
(2, 249, 4)
(2, 249, 5)
(2, 249, 6)
(2, 249, 7)
(2, 250, 0)
(2, 250, 1)
(2, 250, 2)
(2, 250, 3)
(2, 250, 4)
(2, 250, 5)
(2, 250, 6)
(2, 250, 7)
(2, 251, 0)
(2, 251, 1)
(2, 251, 2)
(2, 251, 3)
(2, 251, 4)
(2, 251, 5)
(2, 251, 6)
(2, 251, 7)
(2, 252, 0)
(2, 252, 1)
(2, 252, 2)
(2, 252, 3)
(2, 252, 4)
(2, 252, 5)
(2, 252, 6)
(2, 252, 7)
(2, 253, 0)
(2, 253, 1)
(2, 253, 2)
(2, 253, 3)
(2, 253, 4)
(2, 253, 5)
(2, 253, 6)
(2, 253, 7)
(2, 254, 0)
(2, 254, 1)
(2, 254, 2)
(2, 254, 3)
(2, 254, 4)
(2, 254, 5)
(2, 254, 6)
(2, 254, 7)
(2, 255, 0)
(2, 255, 1)
(2, 255, 2)
(2, 255, 3)
(2, 255, 4)
(2, 255, 5)
(2, 255, 6)
(2, 255, 7)
(3, 0, 0)
(3, 0, 1)
(3, 0, 2)
(3, 0, 3)
(3, 0, 4)
(3, 0, 5)
(3, 0, 6)
(3, 0, 7)
(3, 1, 0)
(3, 1, 1)
(3, 1, 2)
(3, 1, 3)
(3, 1, 4)
(3, 1, 5)
(3, 1, 6)
(3, 1, 7)
(3, 2, 0)
(3, 2, 1)
(3, 2, 2)
(3, 2, 3)
(3, 2, 4)
(3, 2, 5)
(3, 2, 6)
(3, 2, 7)
(3, 3, 0)
(3, 3, 1)
(3, 3, 2)
(3, 3, 3)
(3, 3, 4)
(3, 3, 5)
(3, 3, 6)
(3, 3, 7)
(3, 4, 0)
(3, 4, 1)
(3, 4, 2)
(3, 4, 3)
(3, 4, 4)
(3, 4, 5)
(3, 4, 6)
(3, 4, 7)
(3, 5, 0)
(3, 5, 1)
(3, 5, 2)
(3, 5, 3)
(3, 5, 4)
(3, 5, 5)
(3, 5, 6)
(3, 5, 7)
(3, 6, 0)
(3, 6, 1)
(3, 6, 2)
(3, 6, 3)
(3, 6, 4)
(3, 6, 5)
(3, 6, 6)
(3, 6, 7)
(3, 7, 0)
(3, 7, 1)
(3, 7, 2)
(3, 7, 3)
(3, 7, 4)
(3, 7, 5)
(3, 7, 6)
(3, 7, 7)
(3, 8, 0)
(3, 8, 1)
(3, 8, 2)
(3, 8, 3)
(3, 8, 4)
(3, 8, 5)
(3, 8, 6)
(3, 8, 7)
(3, 9, 0)
(3, 9, 1)
(3, 9, 2)
(3, 9, 3)
(3, 9, 4)
(3, 9, 5)
(3, 9, 6)
(3, 9, 7)
(3, 10, 0)
(3, 10, 1)
(3, 10, 2)
(3, 10, 3)
(3, 10, 4)
(3, 10, 5)
(3, 10, 6)
(3, 10, 7)
(3, 11, 0)
(3, 11, 1)
(3, 11, 2)
(3, 11, 3)
(3, 11, 4)
(3, 11, 5)
(3, 11, 6)
(3, 11, 7)
(3, 12, 0)
(3, 12, 1)
(3, 12, 2)
(3, 12, 3)
(3, 12, 4)
(3, 12, 5)
(3, 12, 6)
(3, 12, 7)
(3, 13, 0)
(3, 13, 1)
(3, 13, 2)
(3, 13, 3)
(3, 13, 4)
(3, 13, 5)
(3, 13, 6)
(3, 13, 7)
(3, 14, 0)
(3, 14, 1)
(3, 14, 2)
(3, 14, 3)
(3, 14, 4)
(3, 14, 5)
(3, 14, 6)
(3, 14, 7)
(3, 15, 0)
(3, 15, 1)
(3, 15, 2)
(3, 15, 3)
(3, 15, 4)
(3, 15, 5)
(3, 15, 6)
(3, 15, 7)
(3, 16, 0)
(3, 16, 1)
(3, 16, 2)
(3, 16, 3)
(3, 16, 4)
(3, 16, 5)
(3, 16, 6)
(3, 16, 7)
(3, 17, 0)
(3, 17, 1)
(3, 17, 2)
(3, 17, 3)
(3, 17, 4)
(3, 17, 5)
(3, 17, 6)
(3, 17, 7)
(3, 18, 0)
(3, 18, 1)
(3, 18, 2)
(3, 18, 3)
(3, 18, 4)
(3, 18, 5)
(3, 18, 6)
(3, 18, 7)
(3, 19, 0)
(3, 19, 1)
(3, 19, 2)
(3, 19, 3)
(3, 19, 4)
(3, 19, 5)
(3, 19, 6)
(3, 19, 7)
(3, 20, 0)
(3, 20, 1)
(3, 20, 2)
(3, 20, 3)
(3, 20, 4)
(3, 20, 5)
(3, 20, 6)
(3, 20, 7)
(3, 21, 0)
(3, 21, 1)
(3, 21, 2)
(3, 21, 3)
(3, 21, 4)
(3, 21, 5)
(3, 21, 6)
(3, 21, 7)
(3, 22, 0)
(3, 22, 1)
(3, 22, 2)
(3, 22, 3)
(3, 22, 4)
(3, 22, 5)
(3, 22, 6)
(3, 22, 7)
(3, 23, 0)
(3, 23, 1)
(3, 23, 2)
(3, 23, 3)
(3, 23, 4)
(3, 23, 5)
(3, 23, 6)
(3, 23, 7)
(3, 24, 0)
(3, 24, 1)
(3, 24, 2)
(3, 24, 3)
(3, 24, 4)
(3, 24, 5)
(3, 24, 6)
(3, 24, 7)
(3, 25, 0)
(3, 25, 1)
(3, 25, 2)
(3, 25, 3)
(3, 25, 4)
(3, 25, 5)
(3, 25, 6)
(3, 25, 7)
(3, 26, 0)
(3, 26, 1)
(3, 26, 2)
(3, 26, 3)
(3, 26, 4)
(3, 26, 5)
(3, 26, 6)
(3, 26, 7)
(3, 27, 0)
(3, 27, 1)
(3, 27, 2)
(3, 27, 3)
(3, 27, 4)
(3, 27, 5)
(3, 27, 6)
(3, 27, 7)
(3, 28, 0)
(3, 28, 1)
(3, 28, 2)
(3, 28, 3)
(3, 28, 4)
(3, 28, 5)
(3, 28, 6)
(3, 28, 7)
(3, 29, 0)
(3, 29, 1)
(3, 29, 2)
(3, 29, 3)
(3, 29, 4)
(3, 29, 5)
(3, 29, 6)
(3, 29, 7)
(3, 30, 0)
(3, 30, 1)
(3, 30, 2)
(3, 30, 3)
(3, 30, 4)
(3, 30, 5)
(3, 30, 6)
(3, 30, 7)
(3, 31, 0)
(3, 31, 1)
(3, 31, 2)
(3, 31, 3)
(3, 31, 4)
(3, 31, 5)
(3, 31, 6)
(3, 31, 7)
(3, 32, 0)
(3, 32, 1)
(3, 32, 2)
(3, 32, 3)
(3, 32, 4)
(3, 32, 5)
(3, 32, 6)
(3, 32, 7)
(3, 33, 0)
(3, 33, 1)
(3, 33, 2)
(3, 33, 3)
(3, 33, 4)
(3, 33, 5)
(3, 33, 6)
(3, 33, 7)
(3, 34, 0)
(3, 34, 1)
(3, 34, 2)
(3, 34, 3)
(3, 34, 4)
(3, 34, 5)
(3, 34, 6)
(3, 34, 7)
(3, 35, 0)
(3, 35, 1)
(3, 35, 2)
(3, 35, 3)
(3, 35, 4)
(3, 35, 5)
(3, 35, 6)
(3, 35, 7)
(3, 36, 0)
(3, 36, 1)
(3, 36, 2)
(3, 36, 3)
(3, 36, 4)
(3, 36, 5)
(3, 36, 6)
(3, 36, 7)
(3, 37, 0)
(3, 37, 1)
(3, 37, 2)
(3, 37, 3)
(3, 37, 4)
(3, 37, 5)
(3, 37, 6)
(3, 37, 7)
(3, 38, 0)
(3, 38, 1)
(3, 38, 2)
(3, 38, 3)
(3, 38, 4)
(3, 38, 5)
(3, 38, 6)
(3, 38, 7)
(3, 39, 0)
(3, 39, 1)
(3, 39, 2)
(3, 39, 3)
(3, 39, 4)
(3, 39, 5)
(3, 39, 6)
(3, 39, 7)
(3, 40, 0)
(3, 40, 1)
(3, 40, 2)
(3, 40, 3)
(3, 40, 4)
(3, 40, 5)
(3, 40, 6)
(3, 40, 7)
(3, 41, 0)
(3, 41, 1)
(3, 41, 2)
(3, 41, 3)
(3, 41, 4)
(3, 41, 5)
(3, 41, 6)
(3, 41, 7)
(3, 42, 0)
(3, 42, 1)
(3, 42, 2)
(3, 42, 3)
(3, 42, 4)
(3, 42, 5)
(3, 42, 6)
(3, 42, 7)
(3, 43, 0)
(3, 43, 1)
(3, 43, 2)
(3, 43, 3)
(3, 43, 4)
(3, 43, 5)
(3, 43, 6)
(3, 43, 7)
(3, 44, 0)
(3, 44, 1)
(3, 44, 2)
(3, 44, 3)
(3, 44, 4)
(3, 44, 5)
(3, 44, 6)
(3, 44, 7)
(3, 45, 0)
(3, 45, 1)
(3, 45, 2)
(3, 45, 3)
(3, 45, 4)
(3, 45, 5)
(3, 45, 6)
(3, 45, 7)
(3, 46, 0)
(3, 46, 1)
(3, 46, 2)
(3, 46, 3)
(3, 46, 4)
(3, 46, 5)
(3, 46, 6)
(3, 46, 7)
(3, 47, 0)
(3, 47, 1)
(3, 47, 2)
(3, 47, 3)
(3, 47, 4)
(3, 47, 5)
(3, 47, 6)
(3, 47, 7)
(3, 48, 0)
(3, 48, 1)
(3, 48, 2)
(3, 48, 3)
(3, 48, 4)
(3, 48, 5)
(3, 48, 6)
(3, 48, 7)
(3, 49, 0)
(3, 49, 1)
(3, 49, 2)
(3, 49, 3)
(3, 49, 4)
(3, 49, 5)
(3, 49, 6)
(3, 49, 7)
(3, 50, 0)
(3, 50, 1)
(3, 50, 2)
(3, 50, 3)
(3, 50, 4)
(3, 50, 5)
(3, 50, 6)
(3, 50, 7)
(3, 51, 0)
(3, 51, 1)
(3, 51, 2)
(3, 51, 3)
(3, 51, 4)
(3, 51, 5)
(3, 51, 6)
(3, 51, 7)
(3, 52, 0)
(3, 52, 1)
(3, 52, 2)
(3, 52, 3)
(3, 52, 4)
(3, 52, 5)
(3, 52, 6)
(3, 52, 7)
(3, 53, 0)
(3, 53, 1)
(3, 53, 2)
(3, 53, 3)
(3, 53, 4)
(3, 53, 5)
(3, 53, 6)
(3, 53, 7)
(3, 54, 0)
(3, 54, 1)
(3, 54, 2)
(3, 54, 3)
(3, 54, 4)
(3, 54, 5)
(3, 54, 6)
(3, 54, 7)
(3, 55, 0)
(3, 55, 1)
(3, 55, 2)
(3, 55, 3)
(3, 55, 4)
(3, 55, 5)
(3, 55, 6)
(3, 55, 7)
(3, 56, 0)
(3, 56, 1)
(3, 56, 2)
(3, 56, 3)
(3, 56, 4)
(3, 56, 5)
(3, 56, 6)
(3, 56, 7)
(3, 57, 0)
(3, 57, 1)
(3, 57, 2)
(3, 57, 3)
(3, 57, 4)
(3, 57, 5)
(3, 57, 6)
(3, 57, 7)
(3, 58, 0)
(3, 58, 1)
(3, 58, 2)
(3, 58, 3)
(3, 58, 4)
(3, 58, 5)
(3, 58, 6)
(3, 58, 7)
(3, 59, 0)
(3, 59, 1)
(3, 59, 2)
(3, 59, 3)
(3, 59, 4)
(3, 59, 5)
(3, 59, 6)
(3, 59, 7)
(3, 60, 0)
(3, 60, 1)
(3, 60, 2)
(3, 60, 3)
(3, 60, 4)
(3, 60, 5)
(3, 60, 6)
(3, 60, 7)
(3, 61, 0)
(3, 61, 1)
(3, 61, 2)
(3, 61, 3)
(3, 61, 4)
(3, 61, 5)
(3, 61, 6)
(3, 61, 7)
(3, 62, 0)
(3, 62, 1)
(3, 62, 2)
(3, 62, 3)
(3, 62, 4)
(3, 62, 5)
(3, 62, 6)
(3, 62, 7)
(3, 63, 0)
(3, 63, 1)
(3, 63, 2)
(3, 63, 3)
(3, 63, 4)
(3, 63, 5)
(3, 63, 6)
(3, 63, 7)
(3, 64, 0)
(3, 64, 1)
(3, 64, 2)
(3, 64, 3)
(3, 64, 4)
(3, 64, 5)
(3, 64, 6)
(3, 64, 7)
(3, 65, 0)
(3, 65, 1)
(3, 65, 2)
(3, 65, 3)
(3, 65, 4)
(3, 65, 5)
(3, 65, 6)
(3, 65, 7)
(3, 66, 0)
(3, 66, 1)
(3, 66, 2)
(3, 66, 3)
(3, 66, 4)
(3, 66, 5)
(3, 66, 6)
(3, 66, 7)
(3, 67, 0)
(3, 67, 1)
(3, 67, 2)
(3, 67, 3)
(3, 67, 4)
(3, 67, 5)
(3, 67, 6)
(3, 67, 7)
(3, 68, 0)
(3, 68, 1)
(3, 68, 2)
(3, 68, 3)
(3, 68, 4)
(3, 68, 5)
(3, 68, 6)
(3, 68, 7)
(3, 69, 0)
(3, 69, 1)
(3, 69, 2)
(3, 69, 3)
(3, 69, 4)
(3, 69, 5)
(3, 69, 6)
(3, 69, 7)
(3, 70, 0)
(3, 70, 1)
(3, 70, 2)
(3, 70, 3)
(3, 70, 4)
(3, 70, 5)
(3, 70, 6)
(3, 70, 7)
(3, 71, 0)
(3, 71, 1)
(3, 71, 2)
(3, 71, 3)
(3, 71, 4)
(3, 71, 5)
(3, 71, 6)
(3, 71, 7)
(3, 72, 0)
(3, 72, 1)
(3, 72, 2)
(3, 72, 3)
(3, 72, 4)
(3, 72, 5)
(3, 72, 6)
(3, 72, 7)
(3, 73, 0)
(3, 73, 1)
(3, 73, 2)
(3, 73, 3)
(3, 73, 4)
(3, 73, 5)
(3, 73, 6)
(3, 73, 7)
(3, 74, 0)
(3, 74, 1)
(3, 74, 2)
(3, 74, 3)
(3, 74, 4)
(3, 74, 5)
(3, 74, 6)
(3, 74, 7)
(3, 75, 0)
(3, 75, 1)
(3, 75, 2)
(3, 75, 3)
(3, 75, 4)
(3, 75, 5)
(3, 75, 6)
(3, 75, 7)
(3, 76, 0)
(3, 76, 1)
(3, 76, 2)
(3, 76, 3)
(3, 76, 4)
(3, 76, 5)
(3, 76, 6)
(3, 76, 7)
(3, 77, 0)
(3, 77, 1)
(3, 77, 2)
(3, 77, 3)
(3, 77, 4)
(3, 77, 5)
(3, 77, 6)
(3, 77, 7)
(3, 78, 0)
(3, 78, 1)
(3, 78, 2)
(3, 78, 3)
(3, 78, 4)
(3, 78, 5)
(3, 78, 6)
(3, 78, 7)
(3, 79, 0)
(3, 79, 1)
(3, 79, 2)
(3, 79, 3)
(3, 79, 4)
(3, 79, 5)
(3, 79, 6)
(3, 79, 7)
(3, 80, 0)
(3, 80, 1)
(3, 80, 2)
(3, 80, 3)
(3, 80, 4)
(3, 80, 5)
(3, 80, 6)
(3, 80, 7)
(3, 81, 0)
(3, 81, 1)
(3, 81, 2)
(3, 81, 3)
(3, 81, 4)
(3, 81, 5)
(3, 81, 6)
(3, 81, 7)
(3, 82, 0)
(3, 82, 1)
(3, 82, 2)
(3, 82, 3)
(3, 82, 4)
(3, 82, 5)
(3, 82, 6)
(3, 82, 7)
(3, 83, 0)
(3, 83, 1)
(3, 83, 2)
(3, 83, 3)
(3, 83, 4)
(3, 83, 5)
(3, 83, 6)
(3, 83, 7)
(3, 84, 0)
(3, 84, 1)
(3, 84, 2)
(3, 84, 3)
(3, 84, 4)
(3, 84, 5)
(3, 84, 6)
(3, 84, 7)
(3, 85, 0)
(3, 85, 1)
(3, 85, 2)
(3, 85, 3)
(3, 85, 4)
(3, 85, 5)
(3, 85, 6)
(3, 85, 7)
(3, 86, 0)
(3, 86, 1)
(3, 86, 2)
(3, 86, 3)
(3, 86, 4)
(3, 86, 5)
(3, 86, 6)
(3, 86, 7)
(3, 87, 0)
(3, 87, 1)
(3, 87, 2)
(3, 87, 3)
(3, 87, 4)
(3, 87, 5)
(3, 87, 6)
(3, 87, 7)
(3, 88, 0)
(3, 88, 1)
(3, 88, 2)
(3, 88, 3)
(3, 88, 4)
(3, 88, 5)
(3, 88, 6)
(3, 88, 7)
(3, 89, 0)
(3, 89, 1)
(3, 89, 2)
(3, 89, 3)
(3, 89, 4)
(3, 89, 5)
(3, 89, 6)
(3, 89, 7)
(3, 90, 0)
(3, 90, 1)
(3, 90, 2)
(3, 90, 3)
(3, 90, 4)
(3, 90, 5)
(3, 90, 6)
(3, 90, 7)
(3, 91, 0)
(3, 91, 1)
(3, 91, 2)
(3, 91, 3)
(3, 91, 4)
(3, 91, 5)
(3, 91, 6)
(3, 91, 7)
(3, 92, 0)
(3, 92, 1)
(3, 92, 2)
(3, 92, 3)
(3, 92, 4)
(3, 92, 5)
(3, 92, 6)
(3, 92, 7)
(3, 93, 0)
(3, 93, 1)
(3, 93, 2)
(3, 93, 3)
(3, 93, 4)
(3, 93, 5)
(3, 93, 6)
(3, 93, 7)
(3, 94, 0)
(3, 94, 1)
(3, 94, 2)
(3, 94, 3)
(3, 94, 4)
(3, 94, 5)
(3, 94, 6)
(3, 94, 7)
(3, 95, 0)
(3, 95, 1)
(3, 95, 2)
(3, 95, 3)
(3, 95, 4)
(3, 95, 5)
(3, 95, 6)
(3, 95, 7)
(3, 96, 0)
(3, 96, 1)
(3, 96, 2)
(3, 96, 3)
(3, 96, 4)
(3, 96, 5)
(3, 96, 6)
(3, 96, 7)
(3, 97, 0)
(3, 97, 1)
(3, 97, 2)
(3, 97, 3)
(3, 97, 4)
(3, 97, 5)
(3, 97, 6)
(3, 97, 7)
(3, 98, 0)
(3, 98, 1)
(3, 98, 2)
(3, 98, 3)
(3, 98, 4)
(3, 98, 5)
(3, 98, 6)
(3, 98, 7)
(3, 99, 0)
(3, 99, 1)
(3, 99, 2)
(3, 99, 3)
(3, 99, 4)
(3, 99, 5)
(3, 99, 6)
(3, 99, 7)
(3, 100, 0)
(3, 100, 1)
(3, 100, 2)
(3, 100, 3)
(3, 100, 4)
(3, 100, 5)
(3, 100, 6)
(3, 100, 7)
(3, 101, 0)
(3, 101, 1)
(3, 101, 2)
(3, 101, 3)
(3, 101, 4)
(3, 101, 5)
(3, 101, 6)
(3, 101, 7)
(3, 102, 0)
(3, 102, 1)
(3, 102, 2)
(3, 102, 3)
(3, 102, 4)
(3, 102, 5)
(3, 102, 6)
(3, 102, 7)
(3, 103, 0)
(3, 103, 1)
(3, 103, 2)
(3, 103, 3)
(3, 103, 4)
(3, 103, 5)
(3, 103, 6)
(3, 103, 7)
(3, 104, 0)
(3, 104, 1)
(3, 104, 2)
(3, 104, 3)
(3, 104, 4)
(3, 104, 5)
(3, 104, 6)
(3, 104, 7)
(3, 105, 0)
(3, 105, 1)
(3, 105, 2)
(3, 105, 3)
(3, 105, 4)
(3, 105, 5)
(3, 105, 6)
(3, 105, 7)
(3, 106, 0)
(3, 106, 1)
(3, 106, 2)
(3, 106, 3)
(3, 106, 4)
(3, 106, 5)
(3, 106, 6)
(3, 106, 7)
(3, 107, 0)
(3, 107, 1)
(3, 107, 2)
(3, 107, 3)
(3, 107, 4)
(3, 107, 5)
(3, 107, 6)
(3, 107, 7)
(3, 108, 0)
(3, 108, 1)
(3, 108, 2)
(3, 108, 3)
(3, 108, 4)
(3, 108, 5)
(3, 108, 6)
(3, 108, 7)
(3, 109, 0)
(3, 109, 1)
(3, 109, 2)
(3, 109, 3)
(3, 109, 4)
(3, 109, 5)
(3, 109, 6)
(3, 109, 7)
(3, 110, 0)
(3, 110, 1)
(3, 110, 2)
(3, 110, 3)
(3, 110, 4)
(3, 110, 5)
(3, 110, 6)
(3, 110, 7)
(3, 111, 0)
(3, 111, 1)
(3, 111, 2)
(3, 111, 3)
(3, 111, 4)
(3, 111, 5)
(3, 111, 6)
(3, 111, 7)
(3, 112, 0)
(3, 112, 1)
(3, 112, 2)
(3, 112, 3)
(3, 112, 4)
(3, 112, 5)
(3, 112, 6)
(3, 112, 7)
(3, 113, 0)
(3, 113, 1)
(3, 113, 2)
(3, 113, 3)
(3, 113, 4)
(3, 113, 5)
(3, 113, 6)
(3, 113, 7)
(3, 114, 0)
(3, 114, 1)
(3, 114, 2)
(3, 114, 3)
(3, 114, 4)
(3, 114, 5)
(3, 114, 6)
(3, 114, 7)
(3, 115, 0)
(3, 115, 1)
(3, 115, 2)
(3, 115, 3)
(3, 115, 4)
(3, 115, 5)
(3, 115, 6)
(3, 115, 7)
(3, 116, 0)
(3, 116, 1)
(3, 116, 2)
(3, 116, 3)
(3, 116, 4)
(3, 116, 5)
(3, 116, 6)
(3, 116, 7)
(3, 117, 0)
(3, 117, 1)
(3, 117, 2)
(3, 117, 3)
(3, 117, 4)
(3, 117, 5)
(3, 117, 6)
(3, 117, 7)
(3, 118, 0)
(3, 118, 1)
(3, 118, 2)
(3, 118, 3)
(3, 118, 4)
(3, 118, 5)
(3, 118, 6)
(3, 118, 7)
(3, 119, 0)
(3, 119, 1)
(3, 119, 2)
(3, 119, 3)
(3, 119, 4)
(3, 119, 5)
(3, 119, 6)
(3, 119, 7)
(3, 120, 0)
(3, 120, 1)
(3, 120, 2)
(3, 120, 3)
(3, 120, 4)
(3, 120, 5)
(3, 120, 6)
(3, 120, 7)
(3, 121, 0)
(3, 121, 1)
(3, 121, 2)
(3, 121, 3)
(3, 121, 4)
(3, 121, 5)
(3, 121, 6)
(3, 121, 7)
(3, 122, 0)
(3, 122, 1)
(3, 122, 2)
(3, 122, 3)
(3, 122, 4)
(3, 122, 5)
(3, 122, 6)
(3, 122, 7)
(3, 123, 0)
(3, 123, 1)
(3, 123, 2)
(3, 123, 3)
(3, 123, 4)
(3, 123, 5)
(3, 123, 6)
(3, 123, 7)
(3, 124, 0)
(3, 124, 1)
(3, 124, 2)
(3, 124, 3)
(3, 124, 4)
(3, 124, 5)
(3, 124, 6)
(3, 124, 7)
(3, 125, 0)
(3, 125, 1)
(3, 125, 2)
(3, 125, 3)
(3, 125, 4)
(3, 125, 5)
(3, 125, 6)
(3, 125, 7)
(3, 126, 0)
(3, 126, 1)
(3, 126, 2)
(3, 126, 3)
(3, 126, 4)
(3, 126, 5)
(3, 126, 6)
(3, 126, 7)
(3, 127, 0)
(3, 127, 1)
(3, 127, 2)
(3, 127, 3)
(3, 127, 4)
(3, 127, 5)
(3, 127, 6)
(3, 127, 7)
(3, 128, 0)
(3, 128, 1)
(3, 128, 2)
(3, 128, 3)
(3, 128, 4)
(3, 128, 5)
(3, 128, 6)
(3, 128, 7)
(3, 129, 0)
(3, 129, 1)
(3, 129, 2)
(3, 129, 3)
(3, 129, 4)
(3, 129, 5)
(3, 129, 6)
(3, 129, 7)
(3, 130, 0)
(3, 130, 1)
(3, 130, 2)
(3, 130, 3)
(3, 130, 4)
(3, 130, 5)
(3, 130, 6)
(3, 130, 7)
(3, 131, 0)
(3, 131, 1)
(3, 131, 2)
(3, 131, 3)
(3, 131, 4)
(3, 131, 5)
(3, 131, 6)
(3, 131, 7)
(3, 132, 0)
(3, 132, 1)
(3, 132, 2)
(3, 132, 3)
(3, 132, 4)
(3, 132, 5)
(3, 132, 6)
(3, 132, 7)
(3, 133, 0)
(3, 133, 1)
(3, 133, 2)
(3, 133, 3)
(3, 133, 4)
(3, 133, 5)
(3, 133, 6)
(3, 133, 7)
(3, 134, 0)
(3, 134, 1)
(3, 134, 2)
(3, 134, 3)
(3, 134, 4)
(3, 134, 5)
(3, 134, 6)
(3, 134, 7)
(3, 135, 0)
(3, 135, 1)
(3, 135, 2)
(3, 135, 3)
(3, 135, 4)
(3, 135, 5)
(3, 135, 6)
(3, 135, 7)
(3, 136, 0)
(3, 136, 1)
(3, 136, 2)
(3, 136, 3)
(3, 136, 4)
(3, 136, 5)
(3, 136, 6)
(3, 136, 7)
(3, 137, 0)
(3, 137, 1)
(3, 137, 2)
(3, 137, 3)
(3, 137, 4)
(3, 137, 5)
(3, 137, 6)
(3, 137, 7)
(3, 138, 0)
(3, 138, 1)
(3, 138, 2)
(3, 138, 3)
(3, 138, 4)
(3, 138, 5)
(3, 138, 6)
(3, 138, 7)
(3, 139, 0)
(3, 139, 1)
(3, 139, 2)
(3, 139, 3)
(3, 139, 4)
(3, 139, 5)
(3, 139, 6)
(3, 139, 7)
(3, 140, 0)
(3, 140, 1)
(3, 140, 2)
(3, 140, 3)
(3, 140, 4)
(3, 140, 5)
(3, 140, 6)
(3, 140, 7)
(3, 141, 0)
(3, 141, 1)
(3, 141, 2)
(3, 141, 3)
(3, 141, 4)
(3, 141, 5)
(3, 141, 6)
(3, 141, 7)
(3, 142, 0)
(3, 142, 1)
(3, 142, 2)
(3, 142, 3)
(3, 142, 4)
(3, 142, 5)
(3, 142, 6)
(3, 142, 7)
(3, 143, 0)
(3, 143, 1)
(3, 143, 2)
(3, 143, 3)
(3, 143, 4)
(3, 143, 5)
(3, 143, 6)
(3, 143, 7)
(3, 144, 0)
(3, 144, 1)
(3, 144, 2)
(3, 144, 3)
(3, 144, 4)
(3, 144, 5)
(3, 144, 6)
(3, 144, 7)
(3, 145, 0)
(3, 145, 1)
(3, 145, 2)
(3, 145, 3)
(3, 145, 4)
(3, 145, 5)
(3, 145, 6)
(3, 145, 7)
(3, 146, 0)
(3, 146, 1)
(3, 146, 2)
(3, 146, 3)
(3, 146, 4)
(3, 146, 5)
(3, 146, 6)
(3, 146, 7)
(3, 147, 0)
(3, 147, 1)
(3, 147, 2)
(3, 147, 3)
(3, 147, 4)
(3, 147, 5)
(3, 147, 6)
(3, 147, 7)
(3, 148, 0)
(3, 148, 1)
(3, 148, 2)
(3, 148, 3)
(3, 148, 4)
(3, 148, 5)
(3, 148, 6)
(3, 148, 7)
(3, 149, 0)
(3, 149, 1)
(3, 149, 2)
(3, 149, 3)
(3, 149, 4)
(3, 149, 5)
(3, 149, 6)
(3, 149, 7)
(3, 150, 0)
(3, 150, 1)
(3, 150, 2)
(3, 150, 3)
(3, 150, 4)
(3, 150, 5)
(3, 150, 6)
(3, 150, 7)
(3, 151, 0)
(3, 151, 1)
(3, 151, 2)
(3, 151, 3)
(3, 151, 4)
(3, 151, 5)
(3, 151, 6)
(3, 151, 7)
(3, 152, 0)
(3, 152, 1)
(3, 152, 2)
(3, 152, 3)
(3, 152, 4)
(3, 152, 5)
(3, 152, 6)
(3, 152, 7)
(3, 153, 0)
(3, 153, 1)
(3, 153, 2)
(3, 153, 3)
(3, 153, 4)
(3, 153, 5)
(3, 153, 6)
(3, 153, 7)
(3, 154, 0)
(3, 154, 1)
(3, 154, 2)
(3, 154, 3)
(3, 154, 4)
(3, 154, 5)
(3, 154, 6)
(3, 154, 7)
(3, 155, 0)
(3, 155, 1)
(3, 155, 2)
(3, 155, 3)
(3, 155, 4)
(3, 155, 5)
(3, 155, 6)
(3, 155, 7)
(3, 156, 0)
(3, 156, 1)
(3, 156, 2)
(3, 156, 3)
(3, 156, 4)
(3, 156, 5)
(3, 156, 6)
(3, 156, 7)
(3, 157, 0)
(3, 157, 1)
(3, 157, 2)
(3, 157, 3)
(3, 157, 4)
(3, 157, 5)
(3, 157, 6)
(3, 157, 7)
(3, 158, 0)
(3, 158, 1)
(3, 158, 2)
(3, 158, 3)
(3, 158, 4)
(3, 158, 5)
(3, 158, 6)
(3, 158, 7)
(3, 159, 0)
(3, 159, 1)
(3, 159, 2)
(3, 159, 3)
(3, 159, 4)
(3, 159, 5)
(3, 159, 6)
(3, 159, 7)
(3, 160, 0)
(3, 160, 1)
(3, 160, 2)
(3, 160, 3)
(3, 160, 4)
(3, 160, 5)
(3, 160, 6)
(3, 160, 7)
(3, 161, 0)
(3, 161, 1)
(3, 161, 2)
(3, 161, 3)
(3, 161, 4)
(3, 161, 5)
(3, 161, 6)
(3, 161, 7)
(3, 162, 0)
(3, 162, 1)
(3, 162, 2)
(3, 162, 3)
(3, 162, 4)
(3, 162, 5)
(3, 162, 6)
(3, 162, 7)
(3, 163, 0)
(3, 163, 1)
(3, 163, 2)
(3, 163, 3)
(3, 163, 4)
(3, 163, 5)
(3, 163, 6)
(3, 163, 7)
(3, 164, 0)
(3, 164, 1)
(3, 164, 2)
(3, 164, 3)
(3, 164, 4)
(3, 164, 5)
(3, 164, 6)
(3, 164, 7)
(3, 165, 0)
(3, 165, 1)
(3, 165, 2)
(3, 165, 3)
(3, 165, 4)
(3, 165, 5)
(3, 165, 6)
(3, 165, 7)
(3, 166, 0)
(3, 166, 1)
(3, 166, 2)
(3, 166, 3)
(3, 166, 4)
(3, 166, 5)
(3, 166, 6)
(3, 166, 7)
(3, 167, 0)
(3, 167, 1)
(3, 167, 2)
(3, 167, 3)
(3, 167, 4)
(3, 167, 5)
(3, 167, 6)
(3, 167, 7)
(3, 168, 0)
(3, 168, 1)
(3, 168, 2)
(3, 168, 3)
(3, 168, 4)
(3, 168, 5)
(3, 168, 6)
(3, 168, 7)
(3, 169, 0)
(3, 169, 1)
(3, 169, 2)
(3, 169, 3)
(3, 169, 4)
(3, 169, 5)
(3, 169, 6)
(3, 169, 7)
(3, 170, 0)
(3, 170, 1)
(3, 170, 2)
(3, 170, 3)
(3, 170, 4)
(3, 170, 5)
(3, 170, 6)
(3, 170, 7)
(3, 171, 0)
(3, 171, 1)
(3, 171, 2)
(3, 171, 3)
(3, 171, 4)
(3, 171, 5)
(3, 171, 6)
(3, 171, 7)
(3, 172, 0)
(3, 172, 1)
(3, 172, 2)
(3, 172, 3)
(3, 172, 4)
(3, 172, 5)
(3, 172, 6)
(3, 172, 7)
(3, 173, 0)
(3, 173, 1)
(3, 173, 2)
(3, 173, 3)
(3, 173, 4)
(3, 173, 5)
(3, 173, 6)
(3, 173, 7)
(3, 174, 0)
(3, 174, 1)
(3, 174, 2)
(3, 174, 3)
(3, 174, 4)
(3, 174, 5)
(3, 174, 6)
(3, 174, 7)
(3, 175, 0)
(3, 175, 1)
(3, 175, 2)
(3, 175, 3)
(3, 175, 4)
(3, 175, 5)
(3, 175, 6)
(3, 175, 7)
(3, 176, 0)
(3, 176, 1)
(3, 176, 2)
(3, 176, 3)
(3, 176, 4)
(3, 176, 5)
(3, 176, 6)
(3, 176, 7)
(3, 177, 0)
(3, 177, 1)
(3, 177, 2)
(3, 177, 3)
(3, 177, 4)
(3, 177, 5)
(3, 177, 6)
(3, 177, 7)
(3, 178, 0)
(3, 178, 1)
(3, 178, 2)
(3, 178, 3)
(3, 178, 4)
(3, 178, 5)
(3, 178, 6)
(3, 178, 7)
(3, 179, 0)
(3, 179, 1)
(3, 179, 2)
(3, 179, 3)
(3, 179, 4)
(3, 179, 5)
(3, 179, 6)
(3, 179, 7)
(3, 180, 0)
(3, 180, 1)
(3, 180, 2)
(3, 180, 3)
(3, 180, 4)
(3, 180, 5)
(3, 180, 6)
(3, 180, 7)
(3, 181, 0)
(3, 181, 1)
(3, 181, 2)
(3, 181, 3)
(3, 181, 4)
(3, 181, 5)
(3, 181, 6)
(3, 181, 7)
(3, 182, 0)
(3, 182, 1)
(3, 182, 2)
(3, 182, 3)
(3, 182, 4)
(3, 182, 5)
(3, 182, 6)
(3, 182, 7)
(3, 183, 0)
(3, 183, 1)
(3, 183, 2)
(3, 183, 3)
(3, 183, 4)
(3, 183, 5)
(3, 183, 6)
(3, 183, 7)
(3, 184, 0)
(3, 184, 1)
(3, 184, 2)
(3, 184, 3)
(3, 184, 4)
(3, 184, 5)
(3, 184, 6)
(3, 184, 7)
(3, 185, 0)
(3, 185, 1)
(3, 185, 2)
(3, 185, 3)
(3, 185, 4)
(3, 185, 5)
(3, 185, 6)
(3, 185, 7)
(3, 186, 0)
(3, 186, 1)
(3, 186, 2)
(3, 186, 3)
(3, 186, 4)
(3, 186, 5)
(3, 186, 6)
(3, 186, 7)
(3, 187, 0)
(3, 187, 1)
(3, 187, 2)
(3, 187, 3)
(3, 187, 4)
(3, 187, 5)
(3, 187, 6)
(3, 187, 7)
(3, 188, 0)
(3, 188, 1)
(3, 188, 2)
(3, 188, 3)
(3, 188, 4)
(3, 188, 5)
(3, 188, 6)
(3, 188, 7)
(3, 189, 0)
(3, 189, 1)
(3, 189, 2)
(3, 189, 3)
(3, 189, 4)
(3, 189, 5)
(3, 189, 6)
(3, 189, 7)
(3, 190, 0)
(3, 190, 1)
(3, 190, 2)
(3, 190, 3)
(3, 190, 4)
(3, 190, 5)
(3, 190, 6)
(3, 190, 7)
(3, 191, 0)
(3, 191, 1)
(3, 191, 2)
(3, 191, 3)
(3, 191, 4)
(3, 191, 5)
(3, 191, 6)
(3, 191, 7)
(3, 192, 0)
(3, 192, 1)
(3, 192, 2)
(3, 192, 3)
(3, 192, 4)
(3, 192, 5)
(3, 192, 6)
(3, 192, 7)
(3, 193, 0)
(3, 193, 1)
(3, 193, 2)
(3, 193, 3)
(3, 193, 4)
(3, 193, 5)
(3, 193, 6)
(3, 193, 7)
(3, 194, 0)
(3, 194, 1)
(3, 194, 2)
(3, 194, 3)
(3, 194, 4)
(3, 194, 5)
(3, 194, 6)
(3, 194, 7)
(3, 195, 0)
(3, 195, 1)
(3, 195, 2)
(3, 195, 3)
(3, 195, 4)
(3, 195, 5)
(3, 195, 6)
(3, 195, 7)
(3, 196, 0)
(3, 196, 1)
(3, 196, 2)
(3, 196, 3)
(3, 196, 4)
(3, 196, 5)
(3, 196, 6)
(3, 196, 7)
(3, 197, 0)
(3, 197, 1)
(3, 197, 2)
(3, 197, 3)
(3, 197, 4)
(3, 197, 5)
(3, 197, 6)
(3, 197, 7)
(3, 198, 0)
(3, 198, 1)
(3, 198, 2)
(3, 198, 3)
(3, 198, 4)
(3, 198, 5)
(3, 198, 6)
(3, 198, 7)
(3, 199, 0)
(3, 199, 1)
(3, 199, 2)
(3, 199, 3)
(3, 199, 4)
(3, 199, 5)
(3, 199, 6)
(3, 199, 7)
(3, 200, 0)
(3, 200, 1)
(3, 200, 2)
(3, 200, 3)
(3, 200, 4)
(3, 200, 5)
(3, 200, 6)
(3, 200, 7)
(3, 201, 0)
(3, 201, 1)
(3, 201, 2)
(3, 201, 3)
(3, 201, 4)
(3, 201, 5)
(3, 201, 6)
(3, 201, 7)
(3, 202, 0)
(3, 202, 1)
(3, 202, 2)
(3, 202, 3)
(3, 202, 4)
(3, 202, 5)
(3, 202, 6)
(3, 202, 7)
(3, 203, 0)
(3, 203, 1)
(3, 203, 2)
(3, 203, 3)
(3, 203, 4)
(3, 203, 5)
(3, 203, 6)
(3, 203, 7)
(3, 204, 0)
(3, 204, 1)
(3, 204, 2)
(3, 204, 3)
(3, 204, 4)
(3, 204, 5)
(3, 204, 6)
(3, 204, 7)
(3, 205, 0)
(3, 205, 1)
(3, 205, 2)
(3, 205, 3)
(3, 205, 4)
(3, 205, 5)
(3, 205, 6)
(3, 205, 7)
(3, 206, 0)
(3, 206, 1)
(3, 206, 2)
(3, 206, 3)
(3, 206, 4)
(3, 206, 5)
(3, 206, 6)
(3, 206, 7)
(3, 207, 0)
(3, 207, 1)
(3, 207, 2)
(3, 207, 3)
(3, 207, 4)
(3, 207, 5)
(3, 207, 6)
(3, 207, 7)
(3, 208, 0)
(3, 208, 1)
(3, 208, 2)
(3, 208, 3)
(3, 208, 4)
(3, 208, 5)
(3, 208, 6)
(3, 208, 7)
(3, 209, 0)
(3, 209, 1)
(3, 209, 2)
(3, 209, 3)
(3, 209, 4)
(3, 209, 5)
(3, 209, 6)
(3, 209, 7)
(3, 210, 0)
(3, 210, 1)
(3, 210, 2)
(3, 210, 3)
(3, 210, 4)
(3, 210, 5)
(3, 210, 6)
(3, 210, 7)
(3, 211, 0)
(3, 211, 1)
(3, 211, 2)
(3, 211, 3)
(3, 211, 4)
(3, 211, 5)
(3, 211, 6)
(3, 211, 7)
(3, 212, 0)
(3, 212, 1)
(3, 212, 2)
(3, 212, 3)
(3, 212, 4)
(3, 212, 5)
(3, 212, 6)
(3, 212, 7)
(3, 213, 0)
(3, 213, 1)
(3, 213, 2)
(3, 213, 3)
(3, 213, 4)
(3, 213, 5)
(3, 213, 6)
(3, 213, 7)
(3, 214, 0)
(3, 214, 1)
(3, 214, 2)
(3, 214, 3)
(3, 214, 4)
(3, 214, 5)
(3, 214, 6)
(3, 214, 7)
(3, 215, 0)
(3, 215, 1)
(3, 215, 2)
(3, 215, 3)
(3, 215, 4)
(3, 215, 5)
(3, 215, 6)
(3, 215, 7)
(3, 216, 0)
(3, 216, 1)
(3, 216, 2)
(3, 216, 3)
(3, 216, 4)
(3, 216, 5)
(3, 216, 6)
(3, 216, 7)
(3, 217, 0)
(3, 217, 1)
(3, 217, 2)
(3, 217, 3)
(3, 217, 4)
(3, 217, 5)
(3, 217, 6)
(3, 217, 7)
(3, 218, 0)
(3, 218, 1)
(3, 218, 2)
(3, 218, 3)
(3, 218, 4)
(3, 218, 5)
(3, 218, 6)
(3, 218, 7)
(3, 219, 0)
(3, 219, 1)
(3, 219, 2)
(3, 219, 3)
(3, 219, 4)
(3, 219, 5)
(3, 219, 6)
(3, 219, 7)
(3, 220, 0)
(3, 220, 1)
(3, 220, 2)
(3, 220, 3)
(3, 220, 4)
(3, 220, 5)
(3, 220, 6)
(3, 220, 7)
(3, 221, 0)
(3, 221, 1)
(3, 221, 2)
(3, 221, 3)
(3, 221, 4)
(3, 221, 5)
(3, 221, 6)
(3, 221, 7)
(3, 222, 0)
(3, 222, 1)
(3, 222, 2)
(3, 222, 3)
(3, 222, 4)
(3, 222, 5)
(3, 222, 6)
(3, 222, 7)
(3, 223, 0)
(3, 223, 1)
(3, 223, 2)
(3, 223, 3)
(3, 223, 4)
(3, 223, 5)
(3, 223, 6)
(3, 223, 7)
(3, 224, 0)
(3, 224, 1)
(3, 224, 2)
(3, 224, 3)
(3, 224, 4)
(3, 224, 5)
(3, 224, 6)
(3, 224, 7)
(3, 225, 0)
(3, 225, 1)
(3, 225, 2)
(3, 225, 3)
(3, 225, 4)
(3, 225, 5)
(3, 225, 6)
(3, 225, 7)
(3, 226, 0)
(3, 226, 1)
(3, 226, 2)
(3, 226, 3)
(3, 226, 4)
(3, 226, 5)
(3, 226, 6)
(3, 226, 7)
(3, 227, 0)
(3, 227, 1)
(3, 227, 2)
(3, 227, 3)
(3, 227, 4)
(3, 227, 5)
(3, 227, 6)
(3, 227, 7)
(3, 228, 0)
(3, 228, 1)
(3, 228, 2)
(3, 228, 3)
(3, 228, 4)
(3, 228, 5)
(3, 228, 6)
(3, 228, 7)
(3, 229, 0)
(3, 229, 1)
(3, 229, 2)
(3, 229, 3)
(3, 229, 4)
(3, 229, 5)
(3, 229, 6)
(3, 229, 7)
(3, 230, 0)
(3, 230, 1)
(3, 230, 2)
(3, 230, 3)
(3, 230, 4)
(3, 230, 5)
(3, 230, 6)
(3, 230, 7)
(3, 231, 0)
(3, 231, 1)
(3, 231, 2)
(3, 231, 3)
(3, 231, 4)
(3, 231, 5)
(3, 231, 6)
(3, 231, 7)
(3, 232, 0)
(3, 232, 1)
(3, 232, 2)
(3, 232, 3)
(3, 232, 4)
(3, 232, 5)
(3, 232, 6)
(3, 232, 7)
(3, 233, 0)
(3, 233, 1)
(3, 233, 2)
(3, 233, 3)
(3, 233, 4)
(3, 233, 5)
(3, 233, 6)
(3, 233, 7)
(3, 234, 0)
(3, 234, 1)
(3, 234, 2)
(3, 234, 3)
(3, 234, 4)
(3, 234, 5)
(3, 234, 6)
(3, 234, 7)
(3, 235, 0)
(3, 235, 1)
(3, 235, 2)
(3, 235, 3)
(3, 235, 4)
(3, 235, 5)
(3, 235, 6)
(3, 235, 7)
(3, 236, 0)
(3, 236, 1)
(3, 236, 2)
(3, 236, 3)
(3, 236, 4)
(3, 236, 5)
(3, 236, 6)
(3, 236, 7)
(3, 237, 0)
(3, 237, 1)
(3, 237, 2)
(3, 237, 3)
(3, 237, 4)
(3, 237, 5)
(3, 237, 6)
(3, 237, 7)
(3, 238, 0)
(3, 238, 1)
(3, 238, 2)
(3, 238, 3)
(3, 238, 4)
(3, 238, 5)
(3, 238, 6)
(3, 238, 7)
(3, 239, 0)
(3, 239, 1)
(3, 239, 2)
(3, 239, 3)
(3, 239, 4)
(3, 239, 5)
(3, 239, 6)
(3, 239, 7)
(3, 240, 0)
(3, 240, 1)
(3, 240, 2)
(3, 240, 3)
(3, 240, 4)
(3, 240, 5)
(3, 240, 6)
(3, 240, 7)
(3, 241, 0)
(3, 241, 1)
(3, 241, 2)
(3, 241, 3)
(3, 241, 4)
(3, 241, 5)
(3, 241, 6)
(3, 241, 7)
(3, 242, 0)
(3, 242, 1)
(3, 242, 2)
(3, 242, 3)
(3, 242, 4)
(3, 242, 5)
(3, 242, 6)
(3, 242, 7)
(3, 243, 0)
(3, 243, 1)
(3, 243, 2)
(3, 243, 3)
(3, 243, 4)
(3, 243, 5)
(3, 243, 6)
(3, 243, 7)
(3, 244, 0)
(3, 244, 1)
(3, 244, 2)
(3, 244, 3)
(3, 244, 4)
(3, 244, 5)
(3, 244, 6)
(3, 244, 7)
(3, 245, 0)
(3, 245, 1)
(3, 245, 2)
(3, 245, 3)
(3, 245, 4)
(3, 245, 5)
(3, 245, 6)
(3, 245, 7)
(3, 246, 0)
(3, 246, 1)
(3, 246, 2)
(3, 246, 3)
(3, 246, 4)
(3, 246, 5)
(3, 246, 6)
(3, 246, 7)
(3, 247, 0)
(3, 247, 1)
(3, 247, 2)
(3, 247, 3)
(3, 247, 4)
(3, 247, 5)
(3, 247, 6)
(3, 247, 7)
(3, 248, 0)
(3, 248, 1)
(3, 248, 2)
(3, 248, 3)
(3, 248, 4)
(3, 248, 5)
(3, 248, 6)
(3, 248, 7)
(3, 249, 0)
(3, 249, 1)
(3, 249, 2)
(3, 249, 3)
(3, 249, 4)
(3, 249, 5)
(3, 249, 6)
(3, 249, 7)
(3, 250, 0)
(3, 250, 1)
(3, 250, 2)
(3, 250, 3)
(3, 250, 4)
(3, 250, 5)
(3, 250, 6)
(3, 250, 7)
(3, 251, 0)
(3, 251, 1)
(3, 251, 2)
(3, 251, 3)
(3, 251, 4)
(3, 251, 5)
(3, 251, 6)
(3, 251, 7)
(3, 252, 0)
(3, 252, 1)
(3, 252, 2)
(3, 252, 3)
(3, 252, 4)
(3, 252, 5)
(3, 252, 6)
(3, 252, 7)
(3, 253, 0)
(3, 253, 1)
(3, 253, 2)
(3, 253, 3)
(3, 253, 4)
(3, 253, 5)
(3, 253, 6)
(3, 253, 7)
(3, 254, 0)
(3, 254, 1)
(3, 254, 2)
(3, 254, 3)
(3, 254, 4)
(3, 254, 5)
(3, 254, 6)
(3, 254, 7)
(3, 255, 0)
(3, 255, 1)
(3, 255, 2)
(3, 255, 3)
(3, 255, 4)
(3, 255, 5)
(3, 255, 6)
(3, 255, 7)
(4, 0, 0)
(4, 0, 1)
(4, 0, 2)
(4, 0, 3)
(4, 0, 4)
(4, 0, 5)
(4, 0, 6)
(4, 0, 7)
(4, 1, 0)
(4, 1, 1)
(4, 1, 2)
(4, 1, 3)
(4, 1, 4)
(4, 1, 5)
(4, 1, 6)
(4, 1, 7)
(4, 2, 0)
(4, 2, 1)
(4, 2, 2)
(4, 2, 3)
(4, 2, 4)
(4, 2, 5)
(4, 2, 6)
(4, 2, 7)
(4, 3, 0)
(4, 3, 1)
(4, 3, 2)
(4, 3, 3)
(4, 3, 4)
(4, 3, 5)
(4, 3, 6)
(4, 3, 7)
(4, 4, 0)
(4, 4, 1)
(4, 4, 2)
(4, 4, 3)
(4, 4, 4)
(4, 4, 5)
(4, 4, 6)
(4, 4, 7)
(4, 5, 0)
(4, 5, 1)
(4, 5, 2)
(4, 5, 3)
(4, 5, 4)
(4, 5, 5)
(4, 5, 6)
(4, 5, 7)
(4, 6, 0)
(4, 6, 1)
(4, 6, 2)
(4, 6, 3)
(4, 6, 4)
(4, 6, 5)
(4, 6, 6)
(4, 6, 7)
(4, 7, 0)
(4, 7, 1)
(4, 7, 2)
(4, 7, 3)
(4, 7, 4)
(4, 7, 5)
(4, 7, 6)
(4, 7, 7)
(4, 8, 0)
(4, 8, 1)
(4, 8, 2)
(4, 8, 3)
(4, 8, 4)
(4, 8, 5)
(4, 8, 6)
(4, 8, 7)
(4, 9, 0)
(4, 9, 1)
(4, 9, 2)
(4, 9, 3)
(4, 9, 4)
(4, 9, 5)
(4, 9, 6)
(4, 9, 7)
(4, 10, 0)
(4, 10, 1)
(4, 10, 2)
(4, 10, 3)
(4, 10, 4)
(4, 10, 5)
(4, 10, 6)
(4, 10, 7)
(4, 11, 0)
(4, 11, 1)
(4, 11, 2)
(4, 11, 3)
(4, 11, 4)
(4, 11, 5)
(4, 11, 6)
(4, 11, 7)
(4, 12, 0)
(4, 12, 1)
(4, 12, 2)
(4, 12, 3)
(4, 12, 4)
(4, 12, 5)
(4, 12, 6)
(4, 12, 7)
(4, 13, 0)
(4, 13, 1)
(4, 13, 2)
(4, 13, 3)
(4, 13, 4)
(4, 13, 5)
(4, 13, 6)
(4, 13, 7)
(4, 14, 0)
(4, 14, 1)
(4, 14, 2)
(4, 14, 3)
(4, 14, 4)
(4, 14, 5)
(4, 14, 6)
(4, 14, 7)
(4, 15, 0)
(4, 15, 1)
(4, 15, 2)
(4, 15, 3)
(4, 15, 4)
(4, 15, 5)
(4, 15, 6)
(4, 15, 7)
(4, 16, 0)
(4, 16, 1)
(4, 16, 2)
(4, 16, 3)
(4, 16, 4)
(4, 16, 5)
(4, 16, 6)
(4, 16, 7)
(4, 17, 0)
(4, 17, 1)
(4, 17, 2)
(4, 17, 3)
(4, 17, 4)
(4, 17, 5)
(4, 17, 6)
(4, 17, 7)
(4, 18, 0)
(4, 18, 1)
(4, 18, 2)
(4, 18, 3)
(4, 18, 4)
(4, 18, 5)
(4, 18, 6)
(4, 18, 7)
(4, 19, 0)
(4, 19, 1)
(4, 19, 2)
(4, 19, 3)
(4, 19, 4)
(4, 19, 5)
(4, 19, 6)
(4, 19, 7)
(4, 20, 0)
(4, 20, 1)
(4, 20, 2)
(4, 20, 3)
(4, 20, 4)
(4, 20, 5)
(4, 20, 6)
(4, 20, 7)
(4, 21, 0)
(4, 21, 1)
(4, 21, 2)
(4, 21, 3)
(4, 21, 4)
(4, 21, 5)
(4, 21, 6)
(4, 21, 7)
(4, 22, 0)
(4, 22, 1)
(4, 22, 2)
(4, 22, 3)
(4, 22, 4)
(4, 22, 5)
(4, 22, 6)
(4, 22, 7)
(4, 23, 0)
(4, 23, 1)
(4, 23, 2)
(4, 23, 3)
(4, 23, 4)
(4, 23, 5)
(4, 23, 6)
(4, 23, 7)
(4, 24, 0)
(4, 24, 1)
(4, 24, 2)
(4, 24, 3)
(4, 24, 4)
(4, 24, 5)
(4, 24, 6)
(4, 24, 7)
(4, 25, 0)
(4, 25, 1)
(4, 25, 2)
(4, 25, 3)
(4, 25, 4)
(4, 25, 5)
(4, 25, 6)
(4, 25, 7)
(4, 26, 0)
(4, 26, 1)
(4, 26, 2)
(4, 26, 3)
(4, 26, 4)
(4, 26, 5)
(4, 26, 6)
(4, 26, 7)
(4, 27, 0)
(4, 27, 1)
(4, 27, 2)
(4, 27, 3)
(4, 27, 4)
(4, 27, 5)
(4, 27, 6)
(4, 27, 7)
(4, 28, 0)
(4, 28, 1)
(4, 28, 2)
(4, 28, 3)
(4, 28, 4)
(4, 28, 5)
(4, 28, 6)
(4, 28, 7)
(4, 29, 0)
(4, 29, 1)
(4, 29, 2)
(4, 29, 3)
(4, 29, 4)
(4, 29, 5)
(4, 29, 6)
(4, 29, 7)
(4, 30, 0)
(4, 30, 1)
(4, 30, 2)
(4, 30, 3)
(4, 30, 4)
(4, 30, 5)
(4, 30, 6)
(4, 30, 7)
(4, 31, 0)
(4, 31, 1)
(4, 31, 2)
(4, 31, 3)
(4, 31, 4)
(4, 31, 5)
(4, 31, 6)
(4, 31, 7)
(4, 32, 0)
(4, 32, 1)
(4, 32, 2)
(4, 32, 3)
(4, 32, 4)
(4, 32, 5)
(4, 32, 6)
(4, 32, 7)
(4, 33, 0)
(4, 33, 1)
(4, 33, 2)
(4, 33, 3)
(4, 33, 4)
(4, 33, 5)
(4, 33, 6)
(4, 33, 7)
(4, 34, 0)
(4, 34, 1)
(4, 34, 2)
(4, 34, 3)
(4, 34, 4)
(4, 34, 5)
(4, 34, 6)
(4, 34, 7)
(4, 35, 0)
(4, 35, 1)
(4, 35, 2)
(4, 35, 3)
(4, 35, 4)
(4, 35, 5)
(4, 35, 6)
(4, 35, 7)
(4, 36, 0)
(4, 36, 1)
(4, 36, 2)
(4, 36, 3)
(4, 36, 4)
(4, 36, 5)
(4, 36, 6)
(4, 36, 7)
(4, 37, 0)
(4, 37, 1)
(4, 37, 2)
(4, 37, 3)
(4, 37, 4)
(4, 37, 5)
(4, 37, 6)
(4, 37, 7)
(4, 38, 0)
(4, 38, 1)
(4, 38, 2)
(4, 38, 3)
(4, 38, 4)
(4, 38, 5)
(4, 38, 6)
(4, 38, 7)
(4, 39, 0)
(4, 39, 1)
(4, 39, 2)
(4, 39, 3)
(4, 39, 4)
(4, 39, 5)
(4, 39, 6)
(4, 39, 7)
(4, 40, 0)
(4, 40, 1)
(4, 40, 2)
(4, 40, 3)
(4, 40, 4)
(4, 40, 5)
(4, 40, 6)
(4, 40, 7)
(4, 41, 0)
(4, 41, 1)
(4, 41, 2)
(4, 41, 3)
(4, 41, 4)
(4, 41, 5)
(4, 41, 6)
(4, 41, 7)
(4, 42, 0)
(4, 42, 1)
(4, 42, 2)
(4, 42, 3)
(4, 42, 4)
(4, 42, 5)
(4, 42, 6)
(4, 42, 7)
(4, 43, 0)
(4, 43, 1)
(4, 43, 2)
(4, 43, 3)
(4, 43, 4)
(4, 43, 5)
(4, 43, 6)
(4, 43, 7)
(4, 44, 0)
(4, 44, 1)
(4, 44, 2)
(4, 44, 3)
(4, 44, 4)
(4, 44, 5)
(4, 44, 6)
(4, 44, 7)
(4, 45, 0)
(4, 45, 1)
(4, 45, 2)
(4, 45, 3)
(4, 45, 4)
(4, 45, 5)
(4, 45, 6)
(4, 45, 7)
(4, 46, 0)
(4, 46, 1)
(4, 46, 2)
(4, 46, 3)
(4, 46, 4)
(4, 46, 5)
(4, 46, 6)
(4, 46, 7)
(4, 47, 0)
(4, 47, 1)
(4, 47, 2)
(4, 47, 3)
(4, 47, 4)
(4, 47, 5)
(4, 47, 6)
(4, 47, 7)
(4, 48, 0)
(4, 48, 1)
(4, 48, 2)
(4, 48, 3)
(4, 48, 4)
(4, 48, 5)
(4, 48, 6)
(4, 48, 7)
(4, 49, 0)
(4, 49, 1)
(4, 49, 2)
(4, 49, 3)
(4, 49, 4)
(4, 49, 5)
(4, 49, 6)
(4, 49, 7)
(4, 50, 0)
(4, 50, 1)
(4, 50, 2)
(4, 50, 3)
(4, 50, 4)
(4, 50, 5)
(4, 50, 6)
(4, 50, 7)
(4, 51, 0)
(4, 51, 1)
(4, 51, 2)
(4, 51, 3)
(4, 51, 4)
(4, 51, 5)
(4, 51, 6)
(4, 51, 7)
(4, 52, 0)
(4, 52, 1)
(4, 52, 2)
(4, 52, 3)
(4, 52, 4)
(4, 52, 5)
(4, 52, 6)
(4, 52, 7)
(4, 53, 0)
(4, 53, 1)
(4, 53, 2)
(4, 53, 3)
(4, 53, 4)
(4, 53, 5)
(4, 53, 6)
(4, 53, 7)
(4, 54, 0)
(4, 54, 1)
(4, 54, 2)
(4, 54, 3)
(4, 54, 4)
(4, 54, 5)
(4, 54, 6)
(4, 54, 7)
(4, 55, 0)
(4, 55, 1)
(4, 55, 2)
(4, 55, 3)
(4, 55, 4)
(4, 55, 5)
(4, 55, 6)
(4, 55, 7)
(4, 56, 0)
(4, 56, 1)
(4, 56, 2)
(4, 56, 3)
(4, 56, 4)
(4, 56, 5)
(4, 56, 6)
(4, 56, 7)
(4, 57, 0)
(4, 57, 1)
(4, 57, 2)
(4, 57, 3)
(4, 57, 4)
(4, 57, 5)
(4, 57, 6)
(4, 57, 7)
(4, 58, 0)
(4, 58, 1)
(4, 58, 2)
(4, 58, 3)
(4, 58, 4)
(4, 58, 5)
(4, 58, 6)
(4, 58, 7)
(4, 59, 0)
(4, 59, 1)
(4, 59, 2)
(4, 59, 3)
(4, 59, 4)
(4, 59, 5)
(4, 59, 6)
(4, 59, 7)
(4, 60, 0)
(4, 60, 1)
(4, 60, 2)
(4, 60, 3)
(4, 60, 4)
(4, 60, 5)
(4, 60, 6)
(4, 60, 7)
(4, 61, 0)
(4, 61, 1)
(4, 61, 2)
(4, 61, 3)
(4, 61, 4)
(4, 61, 5)
(4, 61, 6)
(4, 61, 7)
(4, 62, 0)
(4, 62, 1)
(4, 62, 2)
(4, 62, 3)
(4, 62, 4)
(4, 62, 5)
(4, 62, 6)
(4, 62, 7)
(4, 63, 0)
(4, 63, 1)
(4, 63, 2)
(4, 63, 3)
(4, 63, 4)
(4, 63, 5)
(4, 63, 6)
(4, 63, 7)
(4, 64, 0)
(4, 64, 1)
(4, 64, 2)
(4, 64, 3)
(4, 64, 4)
(4, 64, 5)
(4, 64, 6)
(4, 64, 7)
(4, 65, 0)
(4, 65, 1)
(4, 65, 2)
(4, 65, 3)
(4, 65, 4)
(4, 65, 5)
(4, 65, 6)
(4, 65, 7)
(4, 66, 0)
(4, 66, 1)
(4, 66, 2)
(4, 66, 3)
(4, 66, 4)
(4, 66, 5)
(4, 66, 6)
(4, 66, 7)
(4, 67, 0)
(4, 67, 1)
(4, 67, 2)
(4, 67, 3)
(4, 67, 4)
(4, 67, 5)
(4, 67, 6)
(4, 67, 7)
(4, 68, 0)
(4, 68, 1)
(4, 68, 2)
(4, 68, 3)
(4, 68, 4)
(4, 68, 5)
(4, 68, 6)
(4, 68, 7)
(4, 69, 0)
(4, 69, 1)
(4, 69, 2)
(4, 69, 3)
(4, 69, 4)
(4, 69, 5)
(4, 69, 6)
(4, 69, 7)
(4, 70, 0)
(4, 70, 1)
(4, 70, 2)
(4, 70, 3)
(4, 70, 4)
(4, 70, 5)
(4, 70, 6)
(4, 70, 7)
(4, 71, 0)
(4, 71, 1)
(4, 71, 2)
(4, 71, 3)
(4, 71, 4)
(4, 71, 5)
(4, 71, 6)
(4, 71, 7)
(4, 72, 0)
(4, 72, 1)
(4, 72, 2)
(4, 72, 3)
(4, 72, 4)
(4, 72, 5)
(4, 72, 6)
(4, 72, 7)
(4, 73, 0)
(4, 73, 1)
(4, 73, 2)
(4, 73, 3)
(4, 73, 4)
(4, 73, 5)
(4, 73, 6)
(4, 73, 7)
(4, 74, 0)
(4, 74, 1)
(4, 74, 2)
(4, 74, 3)
(4, 74, 4)
(4, 74, 5)
(4, 74, 6)
(4, 74, 7)
(4, 75, 0)
(4, 75, 1)
(4, 75, 2)
(4, 75, 3)
(4, 75, 4)
(4, 75, 5)
(4, 75, 6)
(4, 75, 7)
(4, 76, 0)
(4, 76, 1)
(4, 76, 2)
(4, 76, 3)
(4, 76, 4)
(4, 76, 5)
(4, 76, 6)
(4, 76, 7)
(4, 77, 0)
(4, 77, 1)
(4, 77, 2)
(4, 77, 3)
(4, 77, 4)
(4, 77, 5)
(4, 77, 6)
(4, 77, 7)
(4, 78, 0)
(4, 78, 1)
(4, 78, 2)
(4, 78, 3)
(4, 78, 4)
(4, 78, 5)
(4, 78, 6)
(4, 78, 7)
(4, 79, 0)
(4, 79, 1)
(4, 79, 2)
(4, 79, 3)
(4, 79, 4)
(4, 79, 5)
(4, 79, 6)
(4, 79, 7)
(4, 80, 0)
(4, 80, 1)
(4, 80, 2)
(4, 80, 3)
(4, 80, 4)
(4, 80, 5)
(4, 80, 6)
(4, 80, 7)
(4, 81, 0)
(4, 81, 1)
(4, 81, 2)
(4, 81, 3)
(4, 81, 4)
(4, 81, 5)
(4, 81, 6)
(4, 81, 7)
(4, 82, 0)
(4, 82, 1)
(4, 82, 2)
(4, 82, 3)
(4, 82, 4)
(4, 82, 5)
(4, 82, 6)
(4, 82, 7)
(4, 83, 0)
(4, 83, 1)
(4, 83, 2)
(4, 83, 3)
(4, 83, 4)
(4, 83, 5)
(4, 83, 6)
(4, 83, 7)
(4, 84, 0)
(4, 84, 1)
(4, 84, 2)
(4, 84, 3)
(4, 84, 4)
(4, 84, 5)
(4, 84, 6)
(4, 84, 7)
(4, 85, 0)
(4, 85, 1)
(4, 85, 2)
(4, 85, 3)
(4, 85, 4)
(4, 85, 5)
(4, 85, 6)
(4, 85, 7)
(4, 86, 0)
(4, 86, 1)
(4, 86, 2)
(4, 86, 3)
(4, 86, 4)
(4, 86, 5)
(4, 86, 6)
(4, 86, 7)
(4, 87, 0)
(4, 87, 1)
(4, 87, 2)
(4, 87, 3)
(4, 87, 4)
(4, 87, 5)
(4, 87, 6)
(4, 87, 7)
(4, 88, 0)
(4, 88, 1)
(4, 88, 2)
(4, 88, 3)
(4, 88, 4)
(4, 88, 5)
(4, 88, 6)
(4, 88, 7)
(4, 89, 0)
(4, 89, 1)
(4, 89, 2)
(4, 89, 3)
(4, 89, 4)
(4, 89, 5)
(4, 89, 6)
(4, 89, 7)
(4, 90, 0)
(4, 90, 1)
(4, 90, 2)
(4, 90, 3)
(4, 90, 4)
(4, 90, 5)
(4, 90, 6)
(4, 90, 7)
(4, 91, 0)
(4, 91, 1)
(4, 91, 2)
(4, 91, 3)
(4, 91, 4)
(4, 91, 5)
(4, 91, 6)
(4, 91, 7)
(4, 92, 0)
(4, 92, 1)
(4, 92, 2)
(4, 92, 3)
(4, 92, 4)
(4, 92, 5)
(4, 92, 6)
(4, 92, 7)
(4, 93, 0)
(4, 93, 1)
(4, 93, 2)
(4, 93, 3)
(4, 93, 4)
(4, 93, 5)
(4, 93, 6)
(4, 93, 7)
(4, 94, 0)
(4, 94, 1)
(4, 94, 2)
(4, 94, 3)
(4, 94, 4)
(4, 94, 5)
(4, 94, 6)
(4, 94, 7)
(4, 95, 0)
(4, 95, 1)
(4, 95, 2)
(4, 95, 3)
(4, 95, 4)
(4, 95, 5)
(4, 95, 6)
(4, 95, 7)
(4, 96, 0)
(4, 96, 1)
(4, 96, 2)
(4, 96, 3)
(4, 96, 4)
(4, 96, 5)
(4, 96, 6)
(4, 96, 7)
(4, 97, 0)
(4, 97, 1)
(4, 97, 2)
(4, 97, 3)
(4, 97, 4)
(4, 97, 5)
(4, 97, 6)
(4, 97, 7)
(4, 98, 0)
(4, 98, 1)
(4, 98, 2)
(4, 98, 3)
(4, 98, 4)
(4, 98, 5)
(4, 98, 6)
(4, 98, 7)
(4, 99, 0)
(4, 99, 1)
(4, 99, 2)
(4, 99, 3)
(4, 99, 4)
(4, 99, 5)
(4, 99, 6)
(4, 99, 7)
(4, 100, 0)
(4, 100, 1)
(4, 100, 2)
(4, 100, 3)
(4, 100, 4)
(4, 100, 5)
(4, 100, 6)
(4, 100, 7)
(4, 101, 0)
(4, 101, 1)
(4, 101, 2)
(4, 101, 3)
(4, 101, 4)
(4, 101, 5)
(4, 101, 6)
(4, 101, 7)
(4, 102, 0)
(4, 102, 1)
(4, 102, 2)
(4, 102, 3)
(4, 102, 4)
(4, 102, 5)
(4, 102, 6)
(4, 102, 7)
(4, 103, 0)
(4, 103, 1)
(4, 103, 2)
(4, 103, 3)
(4, 103, 4)
(4, 103, 5)
(4, 103, 6)
(4, 103, 7)
(4, 104, 0)
(4, 104, 1)
(4, 104, 2)
(4, 104, 3)
(4, 104, 4)
(4, 104, 5)
(4, 104, 6)
(4, 104, 7)
(4, 105, 0)
(4, 105, 1)
(4, 105, 2)
(4, 105, 3)
(4, 105, 4)
(4, 105, 5)
(4, 105, 6)
(4, 105, 7)
(4, 106, 0)
(4, 106, 1)
(4, 106, 2)
(4, 106, 3)
(4, 106, 4)
(4, 106, 5)
(4, 106, 6)
(4, 106, 7)
(4, 107, 0)
(4, 107, 1)
(4, 107, 2)
(4, 107, 3)
(4, 107, 4)
(4, 107, 5)
(4, 107, 6)
(4, 107, 7)
(4, 108, 0)
(4, 108, 1)
(4, 108, 2)
(4, 108, 3)
(4, 108, 4)
(4, 108, 5)
(4, 108, 6)
(4, 108, 7)
(4, 109, 0)
(4, 109, 1)
(4, 109, 2)
(4, 109, 3)
(4, 109, 4)
(4, 109, 5)
(4, 109, 6)
(4, 109, 7)
(4, 110, 0)
(4, 110, 1)
(4, 110, 2)
(4, 110, 3)
(4, 110, 4)
(4, 110, 5)
(4, 110, 6)
(4, 110, 7)
(4, 111, 0)
(4, 111, 1)
(4, 111, 2)
(4, 111, 3)
(4, 111, 4)
(4, 111, 5)
(4, 111, 6)
(4, 111, 7)
(4, 112, 0)
(4, 112, 1)
(4, 112, 2)
(4, 112, 3)
(4, 112, 4)
(4, 112, 5)
(4, 112, 6)
(4, 112, 7)
(4, 113, 0)
(4, 113, 1)
(4, 113, 2)
(4, 113, 3)
(4, 113, 4)
(4, 113, 5)
(4, 113, 6)
(4, 113, 7)
(4, 114, 0)
(4, 114, 1)
(4, 114, 2)
(4, 114, 3)
(4, 114, 4)
(4, 114, 5)
(4, 114, 6)
(4, 114, 7)
(4, 115, 0)
(4, 115, 1)
(4, 115, 2)
(4, 115, 3)
(4, 115, 4)
(4, 115, 5)
(4, 115, 6)
(4, 115, 7)
(4, 116, 0)
(4, 116, 1)
(4, 116, 2)
(4, 116, 3)
(4, 116, 4)
(4, 116, 5)
(4, 116, 6)
(4, 116, 7)
(4, 117, 0)
(4, 117, 1)
(4, 117, 2)
(4, 117, 3)
(4, 117, 4)
(4, 117, 5)
(4, 117, 6)
(4, 117, 7)
(4, 118, 0)
(4, 118, 1)
(4, 118, 2)
(4, 118, 3)
(4, 118, 4)
(4, 118, 5)
(4, 118, 6)
(4, 118, 7)
(4, 119, 0)
(4, 119, 1)
(4, 119, 2)
(4, 119, 3)
(4, 119, 4)
(4, 119, 5)
(4, 119, 6)
(4, 119, 7)
(4, 120, 0)
(4, 120, 1)
(4, 120, 2)
(4, 120, 3)
(4, 120, 4)
(4, 120, 5)
(4, 120, 6)
(4, 120, 7)
(4, 121, 0)
(4, 121, 1)
(4, 121, 2)
(4, 121, 3)
(4, 121, 4)
(4, 121, 5)
(4, 121, 6)
(4, 121, 7)
(4, 122, 0)
(4, 122, 1)
(4, 122, 2)
(4, 122, 3)
(4, 122, 4)
(4, 122, 5)
(4, 122, 6)
(4, 122, 7)
(4, 123, 0)
(4, 123, 1)
(4, 123, 2)
(4, 123, 3)
(4, 123, 4)
(4, 123, 5)
(4, 123, 6)
(4, 123, 7)
(4, 124, 0)
(4, 124, 1)
(4, 124, 2)
(4, 124, 3)
(4, 124, 4)
(4, 124, 5)
(4, 124, 6)
(4, 124, 7)
(4, 125, 0)
(4, 125, 1)
(4, 125, 2)
(4, 125, 3)
(4, 125, 4)
(4, 125, 5)
(4, 125, 6)
(4, 125, 7)
(4, 126, 0)
(4, 126, 1)
(4, 126, 2)
(4, 126, 3)
(4, 126, 4)
(4, 126, 5)
(4, 126, 6)
(4, 126, 7)
(4, 127, 0)
(4, 127, 1)
(4, 127, 2)
(4, 127, 3)
(4, 127, 4)
(4, 127, 5)
(4, 127, 6)
(4, 127, 7)
(4, 128, 0)
(4, 128, 1)
(4, 128, 2)
(4, 128, 3)
(4, 128, 4)
(4, 128, 5)
(4, 128, 6)
(4, 128, 7)
(4, 129, 0)
(4, 129, 1)
(4, 129, 2)
(4, 129, 3)
(4, 129, 4)
(4, 129, 5)
(4, 129, 6)
(4, 129, 7)
(4, 130, 0)
(4, 130, 1)
(4, 130, 2)
(4, 130, 3)
(4, 130, 4)
(4, 130, 5)
(4, 130, 6)
(4, 130, 7)
(4, 131, 0)
(4, 131, 1)
(4, 131, 2)
(4, 131, 3)
(4, 131, 4)
(4, 131, 5)
(4, 131, 6)
(4, 131, 7)
(4, 132, 0)
(4, 132, 1)
(4, 132, 2)
(4, 132, 3)
(4, 132, 4)
(4, 132, 5)
(4, 132, 6)
(4, 132, 7)
(4, 133, 0)
(4, 133, 1)
(4, 133, 2)
(4, 133, 3)
(4, 133, 4)
(4, 133, 5)
(4, 133, 6)
(4, 133, 7)
(4, 134, 0)
(4, 134, 1)
(4, 134, 2)
(4, 134, 3)
(4, 134, 4)
(4, 134, 5)
(4, 134, 6)
(4, 134, 7)
(4, 135, 0)
(4, 135, 1)
(4, 135, 2)
(4, 135, 3)
(4, 135, 4)
(4, 135, 5)
(4, 135, 6)
(4, 135, 7)
(4, 136, 0)
(4, 136, 1)
(4, 136, 2)
(4, 136, 3)
(4, 136, 4)
(4, 136, 5)
(4, 136, 6)
(4, 136, 7)
(4, 137, 0)
(4, 137, 1)
(4, 137, 2)
(4, 137, 3)
(4, 137, 4)
(4, 137, 5)
(4, 137, 6)
(4, 137, 7)
(4, 138, 0)
(4, 138, 1)
(4, 138, 2)
(4, 138, 3)
(4, 138, 4)
(4, 138, 5)
(4, 138, 6)
(4, 138, 7)
(4, 139, 0)
(4, 139, 1)
(4, 139, 2)
(4, 139, 3)
(4, 139, 4)
(4, 139, 5)
(4, 139, 6)
(4, 139, 7)
(4, 140, 0)
(4, 140, 1)
(4, 140, 2)
(4, 140, 3)
(4, 140, 4)
(4, 140, 5)
(4, 140, 6)
(4, 140, 7)
(4, 141, 0)
(4, 141, 1)
(4, 141, 2)
(4, 141, 3)
(4, 141, 4)
(4, 141, 5)
(4, 141, 6)
(4, 141, 7)
(4, 142, 0)
(4, 142, 1)
(4, 142, 2)
(4, 142, 3)
(4, 142, 4)
(4, 142, 5)
(4, 142, 6)
(4, 142, 7)
(4, 143, 0)
(4, 143, 1)
(4, 143, 2)
(4, 143, 3)
(4, 143, 4)
(4, 143, 5)
(4, 143, 6)
(4, 143, 7)
(4, 144, 0)
(4, 144, 1)
(4, 144, 2)
(4, 144, 3)
(4, 144, 4)
(4, 144, 5)
(4, 144, 6)
(4, 144, 7)
(4, 145, 0)
(4, 145, 1)
(4, 145, 2)
(4, 145, 3)
(4, 145, 4)
(4, 145, 5)
(4, 145, 6)
(4, 145, 7)
(4, 146, 0)
(4, 146, 1)
(4, 146, 2)
(4, 146, 3)
(4, 146, 4)
(4, 146, 5)
(4, 146, 6)
(4, 146, 7)
(4, 147, 0)
(4, 147, 1)
(4, 147, 2)
(4, 147, 3)
(4, 147, 4)
(4, 147, 5)
(4, 147, 6)
(4, 147, 7)
(4, 148, 0)
(4, 148, 1)
(4, 148, 2)
(4, 148, 3)
(4, 148, 4)
(4, 148, 5)
(4, 148, 6)
(4, 148, 7)
(4, 149, 0)
(4, 149, 1)
(4, 149, 2)
(4, 149, 3)
(4, 149, 4)
(4, 149, 5)
(4, 149, 6)
(4, 149, 7)
(4, 150, 0)
(4, 150, 1)
(4, 150, 2)
(4, 150, 3)
(4, 150, 4)
(4, 150, 5)
(4, 150, 6)
(4, 150, 7)
(4, 151, 0)
(4, 151, 1)
(4, 151, 2)
(4, 151, 3)
(4, 151, 4)
(4, 151, 5)
(4, 151, 6)
(4, 151, 7)
(4, 152, 0)
(4, 152, 1)
(4, 152, 2)
(4, 152, 3)
(4, 152, 4)
(4, 152, 5)
(4, 152, 6)
(4, 152, 7)
(4, 153, 0)
(4, 153, 1)
(4, 153, 2)
(4, 153, 3)
(4, 153, 4)
(4, 153, 5)
(4, 153, 6)
(4, 153, 7)
(4, 154, 0)
(4, 154, 1)
(4, 154, 2)
(4, 154, 3)
(4, 154, 4)
(4, 154, 5)
(4, 154, 6)
(4, 154, 7)
(4, 155, 0)
(4, 155, 1)
(4, 155, 2)
(4, 155, 3)
(4, 155, 4)
(4, 155, 5)
(4, 155, 6)
(4, 155, 7)
(4, 156, 0)
(4, 156, 1)
(4, 156, 2)
(4, 156, 3)
(4, 156, 4)
(4, 156, 5)
(4, 156, 6)
(4, 156, 7)
(4, 157, 0)
(4, 157, 1)
(4, 157, 2)
(4, 157, 3)
(4, 157, 4)
(4, 157, 5)
(4, 157, 6)
(4, 157, 7)
(4, 158, 0)
(4, 158, 1)
(4, 158, 2)
(4, 158, 3)
(4, 158, 4)
(4, 158, 5)
(4, 158, 6)
(4, 158, 7)
(4, 159, 0)
(4, 159, 1)
(4, 159, 2)
(4, 159, 3)
(4, 159, 4)
(4, 159, 5)
(4, 159, 6)
(4, 159, 7)
(4, 160, 0)
(4, 160, 1)
(4, 160, 2)
(4, 160, 3)
(4, 160, 4)
(4, 160, 5)
(4, 160, 6)
(4, 160, 7)
(4, 161, 0)
(4, 161, 1)
(4, 161, 2)
(4, 161, 3)
(4, 161, 4)
(4, 161, 5)
(4, 161, 6)
(4, 161, 7)
(4, 162, 0)
(4, 162, 1)
(4, 162, 2)
(4, 162, 3)
(4, 162, 4)
(4, 162, 5)
(4, 162, 6)
(4, 162, 7)
(4, 163, 0)
(4, 163, 1)
(4, 163, 2)
(4, 163, 3)
(4, 163, 4)
(4, 163, 5)
(4, 163, 6)
(4, 163, 7)
(4, 164, 0)
(4, 164, 1)
(4, 164, 2)
(4, 164, 3)
(4, 164, 4)
(4, 164, 5)
(4, 164, 6)
(4, 164, 7)
(4, 165, 0)
(4, 165, 1)
(4, 165, 2)
(4, 165, 3)
(4, 165, 4)
(4, 165, 5)
(4, 165, 6)
(4, 165, 7)
(4, 166, 0)
(4, 166, 1)
(4, 166, 2)
(4, 166, 3)
(4, 166, 4)
(4, 166, 5)
(4, 166, 6)
(4, 166, 7)
(4, 167, 0)
(4, 167, 1)
(4, 167, 2)
(4, 167, 3)
(4, 167, 4)
(4, 167, 5)
(4, 167, 6)
(4, 167, 7)
(4, 168, 0)
(4, 168, 1)
(4, 168, 2)
(4, 168, 3)
(4, 168, 4)
(4, 168, 5)
(4, 168, 6)
(4, 168, 7)
(4, 169, 0)
(4, 169, 1)
(4, 169, 2)
(4, 169, 3)
(4, 169, 4)
(4, 169, 5)
(4, 169, 6)
(4, 169, 7)
(4, 170, 0)
(4, 170, 1)
(4, 170, 2)
(4, 170, 3)
(4, 170, 4)
(4, 170, 5)
(4, 170, 6)
(4, 170, 7)
(4, 171, 0)
(4, 171, 1)
(4, 171, 2)
(4, 171, 3)
(4, 171, 4)
(4, 171, 5)
(4, 171, 6)
(4, 171, 7)
(4, 172, 0)
(4, 172, 1)
(4, 172, 2)
(4, 172, 3)
(4, 172, 4)
(4, 172, 5)
(4, 172, 6)
(4, 172, 7)
(4, 173, 0)
(4, 173, 1)
(4, 173, 2)
(4, 173, 3)
(4, 173, 4)
(4, 173, 5)
(4, 173, 6)
(4, 173, 7)
(4, 174, 0)
(4, 174, 1)
(4, 174, 2)
(4, 174, 3)
(4, 174, 4)
(4, 174, 5)
(4, 174, 6)
(4, 174, 7)
(4, 175, 0)
(4, 175, 1)
(4, 175, 2)
(4, 175, 3)
(4, 175, 4)
(4, 175, 5)
(4, 175, 6)
(4, 175, 7)
(4, 176, 0)
(4, 176, 1)
(4, 176, 2)
(4, 176, 3)
(4, 176, 4)
(4, 176, 5)
(4, 176, 6)
(4, 176, 7)
(4, 177, 0)
(4, 177, 1)
(4, 177, 2)
(4, 177, 3)
(4, 177, 4)
(4, 177, 5)
(4, 177, 6)
(4, 177, 7)
(4, 178, 0)
(4, 178, 1)
(4, 178, 2)
(4, 178, 3)
(4, 178, 4)
(4, 178, 5)
(4, 178, 6)
(4, 178, 7)
(4, 179, 0)
(4, 179, 1)
(4, 179, 2)
(4, 179, 3)
(4, 179, 4)
(4, 179, 5)
(4, 179, 6)
(4, 179, 7)
(4, 180, 0)
(4, 180, 1)
(4, 180, 2)
(4, 180, 3)
(4, 180, 4)
(4, 180, 5)
(4, 180, 6)
(4, 180, 7)
(4, 181, 0)
(4, 181, 1)
(4, 181, 2)
(4, 181, 3)
(4, 181, 4)
(4, 181, 5)
(4, 181, 6)
(4, 181, 7)
(4, 182, 0)
(4, 182, 1)
(4, 182, 2)
(4, 182, 3)
(4, 182, 4)
(4, 182, 5)
(4, 182, 6)
(4, 182, 7)
(4, 183, 0)
(4, 183, 1)
(4, 183, 2)
(4, 183, 3)
(4, 183, 4)
(4, 183, 5)
(4, 183, 6)
(4, 183, 7)
(4, 184, 0)
(4, 184, 1)
(4, 184, 2)
(4, 184, 3)
(4, 184, 4)
(4, 184, 5)
(4, 184, 6)
(4, 184, 7)
(4, 185, 0)
(4, 185, 1)
(4, 185, 2)
(4, 185, 3)
(4, 185, 4)
(4, 185, 5)
(4, 185, 6)
(4, 185, 7)
(4, 186, 0)
(4, 186, 1)
(4, 186, 2)
(4, 186, 3)
(4, 186, 4)
(4, 186, 5)
(4, 186, 6)
(4, 186, 7)
(4, 187, 0)
(4, 187, 1)
(4, 187, 2)
(4, 187, 3)
(4, 187, 4)
(4, 187, 5)
(4, 187, 6)
(4, 187, 7)
(4, 188, 0)
(4, 188, 1)
(4, 188, 2)
(4, 188, 3)
(4, 188, 4)
(4, 188, 5)
(4, 188, 6)
(4, 188, 7)
(4, 189, 0)
(4, 189, 1)
(4, 189, 2)
(4, 189, 3)
(4, 189, 4)
(4, 189, 5)
(4, 189, 6)
(4, 189, 7)
(4, 190, 0)
(4, 190, 1)
(4, 190, 2)
(4, 190, 3)
(4, 190, 4)
(4, 190, 5)
(4, 190, 6)
(4, 190, 7)
(4, 191, 0)
(4, 191, 1)
(4, 191, 2)
(4, 191, 3)
(4, 191, 4)
(4, 191, 5)
(4, 191, 6)
(4, 191, 7)
(4, 192, 0)
(4, 192, 1)
(4, 192, 2)
(4, 192, 3)
(4, 192, 4)
(4, 192, 5)
(4, 192, 6)
(4, 192, 7)
(4, 193, 0)
(4, 193, 1)
(4, 193, 2)
(4, 193, 3)
(4, 193, 4)
(4, 193, 5)
(4, 193, 6)
(4, 193, 7)
(4, 194, 0)
(4, 194, 1)
(4, 194, 2)
(4, 194, 3)
(4, 194, 4)
(4, 194, 5)
(4, 194, 6)
(4, 194, 7)
(4, 195, 0)
(4, 195, 1)
(4, 195, 2)
(4, 195, 3)
(4, 195, 4)
(4, 195, 5)
(4, 195, 6)
(4, 195, 7)
(4, 196, 0)
(4, 196, 1)
(4, 196, 2)
(4, 196, 3)
(4, 196, 4)
(4, 196, 5)
(4, 196, 6)
(4, 196, 7)
(4, 197, 0)
(4, 197, 1)
(4, 197, 2)
(4, 197, 3)
(4, 197, 4)
(4, 197, 5)
(4, 197, 6)
(4, 197, 7)
(4, 198, 0)
(4, 198, 1)
(4, 198, 2)
(4, 198, 3)
(4, 198, 4)
(4, 198, 5)
(4, 198, 6)
(4, 198, 7)
(4, 199, 0)
(4, 199, 1)
(4, 199, 2)
(4, 199, 3)
(4, 199, 4)
(4, 199, 5)
(4, 199, 6)
(4, 199, 7)
(4, 200, 0)
(4, 200, 1)
(4, 200, 2)
(4, 200, 3)
(4, 200, 4)
(4, 200, 5)
(4, 200, 6)
(4, 200, 7)
(4, 201, 0)
(4, 201, 1)
(4, 201, 2)
(4, 201, 3)
(4, 201, 4)
(4, 201, 5)
(4, 201, 6)
(4, 201, 7)
(4, 202, 0)
(4, 202, 1)
(4, 202, 2)
(4, 202, 3)
(4, 202, 4)
(4, 202, 5)
(4, 202, 6)
(4, 202, 7)
(4, 203, 0)
(4, 203, 1)
(4, 203, 2)
(4, 203, 3)
(4, 203, 4)
(4, 203, 5)
(4, 203, 6)
(4, 203, 7)
(4, 204, 0)
(4, 204, 1)
(4, 204, 2)
(4, 204, 3)
(4, 204, 4)
(4, 204, 5)
(4, 204, 6)
(4, 204, 7)
(4, 205, 0)
(4, 205, 1)
(4, 205, 2)
(4, 205, 3)
(4, 205, 4)
(4, 205, 5)
(4, 205, 6)
(4, 205, 7)
(4, 206, 0)
(4, 206, 1)
(4, 206, 2)
(4, 206, 3)
(4, 206, 4)
(4, 206, 5)
(4, 206, 6)
(4, 206, 7)
(4, 207, 0)
(4, 207, 1)
(4, 207, 2)
(4, 207, 3)
(4, 207, 4)
(4, 207, 5)
(4, 207, 6)
(4, 207, 7)
(4, 208, 0)
(4, 208, 1)
(4, 208, 2)
(4, 208, 3)
(4, 208, 4)
(4, 208, 5)
(4, 208, 6)
(4, 208, 7)
(4, 209, 0)
(4, 209, 1)
(4, 209, 2)
(4, 209, 3)
(4, 209, 4)
(4, 209, 5)
(4, 209, 6)
(4, 209, 7)
(4, 210, 0)
(4, 210, 1)
(4, 210, 2)
(4, 210, 3)
(4, 210, 4)
(4, 210, 5)
(4, 210, 6)
(4, 210, 7)
(4, 211, 0)
(4, 211, 1)
(4, 211, 2)
(4, 211, 3)
(4, 211, 4)
(4, 211, 5)
(4, 211, 6)
(4, 211, 7)
(4, 212, 0)
(4, 212, 1)
(4, 212, 2)
(4, 212, 3)
(4, 212, 4)
(4, 212, 5)
(4, 212, 6)
(4, 212, 7)
(4, 213, 0)
(4, 213, 1)
(4, 213, 2)
(4, 213, 3)
(4, 213, 4)
(4, 213, 5)
(4, 213, 6)
(4, 213, 7)
(4, 214, 0)
(4, 214, 1)
(4, 214, 2)
(4, 214, 3)
(4, 214, 4)
(4, 214, 5)
(4, 214, 6)
(4, 214, 7)
(4, 215, 0)
(4, 215, 1)
(4, 215, 2)
(4, 215, 3)
(4, 215, 4)
(4, 215, 5)
(4, 215, 6)
(4, 215, 7)
(4, 216, 0)
(4, 216, 1)
(4, 216, 2)
(4, 216, 3)
(4, 216, 4)
(4, 216, 5)
(4, 216, 6)
(4, 216, 7)
(4, 217, 0)
(4, 217, 1)
(4, 217, 2)
(4, 217, 3)
(4, 217, 4)
(4, 217, 5)
(4, 217, 6)
(4, 217, 7)
(4, 218, 0)
(4, 218, 1)
(4, 218, 2)
(4, 218, 3)
(4, 218, 4)
(4, 218, 5)
(4, 218, 6)
(4, 218, 7)
(4, 219, 0)
(4, 219, 1)
(4, 219, 2)
(4, 219, 3)
(4, 219, 4)
(4, 219, 5)
(4, 219, 6)
(4, 219, 7)
(4, 220, 0)
(4, 220, 1)
(4, 220, 2)
(4, 220, 3)
(4, 220, 4)
(4, 220, 5)
(4, 220, 6)
(4, 220, 7)
(4, 221, 0)
(4, 221, 1)
(4, 221, 2)
(4, 221, 3)
(4, 221, 4)
(4, 221, 5)
(4, 221, 6)
(4, 221, 7)
(4, 222, 0)
(4, 222, 1)
(4, 222, 2)
(4, 222, 3)
(4, 222, 4)
(4, 222, 5)
(4, 222, 6)
(4, 222, 7)
(4, 223, 0)
(4, 223, 1)
(4, 223, 2)
(4, 223, 3)
(4, 223, 4)
(4, 223, 5)
(4, 223, 6)
(4, 223, 7)
(4, 224, 0)
(4, 224, 1)
(4, 224, 2)
(4, 224, 3)
(4, 224, 4)
(4, 224, 5)
(4, 224, 6)
(4, 224, 7)
(4, 225, 0)
(4, 225, 1)
(4, 225, 2)
(4, 225, 3)
(4, 225, 4)
(4, 225, 5)
(4, 225, 6)
(4, 225, 7)
(4, 226, 0)
(4, 226, 1)
(4, 226, 2)
(4, 226, 3)
(4, 226, 4)
(4, 226, 5)
(4, 226, 6)
(4, 226, 7)
(4, 227, 0)
(4, 227, 1)
(4, 227, 2)
(4, 227, 3)
(4, 227, 4)
(4, 227, 5)
(4, 227, 6)
(4, 227, 7)
(4, 228, 0)
(4, 228, 1)
(4, 228, 2)
(4, 228, 3)
(4, 228, 4)
(4, 228, 5)
(4, 228, 6)
(4, 228, 7)
(4, 229, 0)
(4, 229, 1)
(4, 229, 2)
(4, 229, 3)
(4, 229, 4)
(4, 229, 5)
(4, 229, 6)
(4, 229, 7)
(4, 230, 0)
(4, 230, 1)
(4, 230, 2)
(4, 230, 3)
(4, 230, 4)
(4, 230, 5)
(4, 230, 6)
(4, 230, 7)
(4, 231, 0)
(4, 231, 1)
(4, 231, 2)
(4, 231, 3)
(4, 231, 4)
(4, 231, 5)
(4, 231, 6)
(4, 231, 7)
(4, 232, 0)
(4, 232, 1)
(4, 232, 2)
(4, 232, 3)
(4, 232, 4)
(4, 232, 5)
(4, 232, 6)
(4, 232, 7)
(4, 233, 0)
(4, 233, 1)
(4, 233, 2)
(4, 233, 3)
(4, 233, 4)
(4, 233, 5)
(4, 233, 6)
(4, 233, 7)
(4, 234, 0)
(4, 234, 1)
(4, 234, 2)
(4, 234, 3)
(4, 234, 4)
(4, 234, 5)
(4, 234, 6)
(4, 234, 7)
(4, 235, 0)
(4, 235, 1)
(4, 235, 2)
(4, 235, 3)
(4, 235, 4)
(4, 235, 5)
(4, 235, 6)
(4, 235, 7)
(4, 236, 0)
(4, 236, 1)
(4, 236, 2)
(4, 236, 3)
(4, 236, 4)
(4, 236, 5)
(4, 236, 6)
(4, 236, 7)
(4, 237, 0)
(4, 237, 1)
(4, 237, 2)
(4, 237, 3)
(4, 237, 4)
(4, 237, 5)
(4, 237, 6)
(4, 237, 7)
(4, 238, 0)
(4, 238, 1)
(4, 238, 2)
(4, 238, 3)
(4, 238, 4)
(4, 238, 5)
(4, 238, 6)
(4, 238, 7)
(4, 239, 0)
(4, 239, 1)
(4, 239, 2)
(4, 239, 3)
(4, 239, 4)
(4, 239, 5)
(4, 239, 6)
(4, 239, 7)
(4, 240, 0)
(4, 240, 1)
(4, 240, 2)
(4, 240, 3)
(4, 240, 4)
(4, 240, 5)
(4, 240, 6)
(4, 240, 7)
(4, 241, 0)
(4, 241, 1)
(4, 241, 2)
(4, 241, 3)
(4, 241, 4)
(4, 241, 5)
(4, 241, 6)
(4, 241, 7)
(4, 242, 0)
(4, 242, 1)
(4, 242, 2)
(4, 242, 3)
(4, 242, 4)
(4, 242, 5)
(4, 242, 6)
(4, 242, 7)
(4, 243, 0)
(4, 243, 1)
(4, 243, 2)
(4, 243, 3)
(4, 243, 4)
(4, 243, 5)
(4, 243, 6)
(4, 243, 7)
(4, 244, 0)
(4, 244, 1)
(4, 244, 2)
(4, 244, 3)
(4, 244, 4)
(4, 244, 5)
(4, 244, 6)
(4, 244, 7)
(4, 245, 0)
(4, 245, 1)
(4, 245, 2)
(4, 245, 3)
(4, 245, 4)
(4, 245, 5)
(4, 245, 6)
(4, 245, 7)
(4, 246, 0)
(4, 246, 1)
(4, 246, 2)
(4, 246, 3)
(4, 246, 4)
(4, 246, 5)
(4, 246, 6)
(4, 246, 7)
(4, 247, 0)
(4, 247, 1)
(4, 247, 2)
(4, 247, 3)
(4, 247, 4)
(4, 247, 5)
(4, 247, 6)
(4, 247, 7)
(4, 248, 0)
(4, 248, 1)
(4, 248, 2)
(4, 248, 3)
(4, 248, 4)
(4, 248, 5)
(4, 248, 6)
(4, 248, 7)
(4, 249, 0)
(4, 249, 1)
(4, 249, 2)
(4, 249, 3)
(4, 249, 4)
(4, 249, 5)
(4, 249, 6)
(4, 249, 7)
(4, 250, 0)
(4, 250, 1)
(4, 250, 2)
(4, 250, 3)
(4, 250, 4)
(4, 250, 5)
(4, 250, 6)
(4, 250, 7)
(4, 251, 0)
(4, 251, 1)
(4, 251, 2)
(4, 251, 3)
(4, 251, 4)
(4, 251, 5)
(4, 251, 6)
(4, 251, 7)
(4, 252, 0)
(4, 252, 1)
(4, 252, 2)
(4, 252, 3)
(4, 252, 4)
(4, 252, 5)
(4, 252, 6)
(4, 252, 7)
(4, 253, 0)
(4, 253, 1)
(4, 253, 2)
(4, 253, 3)
(4, 253, 4)
(4, 253, 5)
(4, 253, 6)
(4, 253, 7)
(4, 254, 0)
(4, 254, 1)
(4, 254, 2)
(4, 254, 3)
(4, 254, 4)
(4, 254, 5)
(4, 254, 6)
(4, 254, 7)
(4, 255, 0)
(4, 255, 1)
(4, 255, 2)
(4, 255, 3)
(4, 255, 4)
(4, 255, 5)
(4, 255, 6)
(4, 255, 7)
(5, 0, 0)
(5, 0, 1)
(5, 0, 2)
(5, 0, 3)
(5, 0, 4)
(5, 0, 5)
(5, 0, 6)
(5, 0, 7)
(5, 1, 0)
(5, 1, 1)
(5, 1, 2)
(5, 1, 3)
(5, 1, 4)
(5, 1, 5)
(5, 1, 6)
(5, 1, 7)
(5, 2, 0)
(5, 2, 1)
(5, 2, 2)
(5, 2, 3)
(5, 2, 4)
(5, 2, 5)
(5, 2, 6)
(5, 2, 7)
(5, 3, 0)
(5, 3, 1)
(5, 3, 2)
(5, 3, 3)
(5, 3, 4)
(5, 3, 5)
(5, 3, 6)
(5, 3, 7)
(5, 4, 0)
(5, 4, 1)
(5, 4, 2)
(5, 4, 3)
(5, 4, 4)
(5, 4, 5)
(5, 4, 6)
(5, 4, 7)
(5, 5, 0)
(5, 5, 1)
(5, 5, 2)
(5, 5, 3)
(5, 5, 4)
(5, 5, 5)
(5, 5, 6)
(5, 5, 7)
(5, 6, 0)
(5, 6, 1)
(5, 6, 2)
(5, 6, 3)
(5, 6, 4)
(5, 6, 5)
(5, 6, 6)
(5, 6, 7)
(5, 7, 0)
(5, 7, 1)
(5, 7, 2)
(5, 7, 3)
(5, 7, 4)
(5, 7, 5)
(5, 7, 6)
(5, 7, 7)
(5, 8, 0)
(5, 8, 1)
(5, 8, 2)
(5, 8, 3)
(5, 8, 4)
(5, 8, 5)
(5, 8, 6)
(5, 8, 7)
(5, 9, 0)
(5, 9, 1)
(5, 9, 2)
(5, 9, 3)
(5, 9, 4)
(5, 9, 5)
(5, 9, 6)
(5, 9, 7)
(5, 10, 0)
(5, 10, 1)
(5, 10, 2)
(5, 10, 3)
(5, 10, 4)
(5, 10, 5)
(5, 10, 6)
(5, 10, 7)
(5, 11, 0)
(5, 11, 1)
(5, 11, 2)
(5, 11, 3)
(5, 11, 4)
(5, 11, 5)
(5, 11, 6)
(5, 11, 7)
(5, 12, 0)
(5, 12, 1)
(5, 12, 2)
(5, 12, 3)
(5, 12, 4)
(5, 12, 5)
(5, 12, 6)
(5, 12, 7)
(5, 13, 0)
(5, 13, 1)
(5, 13, 2)
(5, 13, 3)
(5, 13, 4)
(5, 13, 5)
(5, 13, 6)
(5, 13, 7)
(5, 14, 0)
(5, 14, 1)
(5, 14, 2)
(5, 14, 3)
(5, 14, 4)
(5, 14, 5)
(5, 14, 6)
(5, 14, 7)
(5, 15, 0)
(5, 15, 1)
(5, 15, 2)
(5, 15, 3)
(5, 15, 4)
(5, 15, 5)
(5, 15, 6)
(5, 15, 7)
(5, 16, 0)
(5, 16, 1)
(5, 16, 2)
(5, 16, 3)
(5, 16, 4)
(5, 16, 5)
(5, 16, 6)
(5, 16, 7)
(5, 17, 0)
(5, 17, 1)
(5, 17, 2)
(5, 17, 3)
(5, 17, 4)
(5, 17, 5)
(5, 17, 6)
(5, 17, 7)
(5, 18, 0)
(5, 18, 1)
(5, 18, 2)
(5, 18, 3)
(5, 18, 4)
(5, 18, 5)
(5, 18, 6)
(5, 18, 7)
(5, 19, 0)
(5, 19, 1)
(5, 19, 2)
(5, 19, 3)
(5, 19, 4)
(5, 19, 5)
(5, 19, 6)
(5, 19, 7)
(5, 20, 0)
(5, 20, 1)
(5, 20, 2)
(5, 20, 3)
(5, 20, 4)
(5, 20, 5)
(5, 20, 6)
(5, 20, 7)
(5, 21, 0)
(5, 21, 1)
(5, 21, 2)
(5, 21, 3)
(5, 21, 4)
(5, 21, 5)
(5, 21, 6)
(5, 21, 7)
(5, 22, 0)
(5, 22, 1)
(5, 22, 2)
(5, 22, 3)
(5, 22, 4)
(5, 22, 5)
(5, 22, 6)
(5, 22, 7)
(5, 23, 0)
(5, 23, 1)
(5, 23, 2)
(5, 23, 3)
(5, 23, 4)
(5, 23, 5)
(5, 23, 6)
(5, 23, 7)
(5, 24, 0)
(5, 24, 1)
(5, 24, 2)
(5, 24, 3)
(5, 24, 4)
(5, 24, 5)
(5, 24, 6)
(5, 24, 7)
(5, 25, 0)
(5, 25, 1)
(5, 25, 2)
(5, 25, 3)
(5, 25, 4)
(5, 25, 5)
(5, 25, 6)
(5, 25, 7)
(5, 26, 0)
(5, 26, 1)
(5, 26, 2)
(5, 26, 3)
(5, 26, 4)
(5, 26, 5)
(5, 26, 6)
(5, 26, 7)
(5, 27, 0)
(5, 27, 1)
(5, 27, 2)
(5, 27, 3)
(5, 27, 4)
(5, 27, 5)
(5, 27, 6)
(5, 27, 7)
(5, 28, 0)
(5, 28, 1)
(5, 28, 2)
(5, 28, 3)
(5, 28, 4)
(5, 28, 5)
(5, 28, 6)
(5, 28, 7)
(5, 29, 0)
(5, 29, 1)
(5, 29, 2)
(5, 29, 3)
(5, 29, 4)
(5, 29, 5)
(5, 29, 6)
(5, 29, 7)
(5, 30, 0)
(5, 30, 1)
(5, 30, 2)
(5, 30, 3)
(5, 30, 4)
(5, 30, 5)
(5, 30, 6)
(5, 30, 7)
(5, 31, 0)
(5, 31, 1)
(5, 31, 2)
(5, 31, 3)
(5, 31, 4)
(5, 31, 5)
(5, 31, 6)
(5, 31, 7)
(5, 32, 0)
(5, 32, 1)
(5, 32, 2)
(5, 32, 3)
(5, 32, 4)
(5, 32, 5)
(5, 32, 6)
(5, 32, 7)
(5, 33, 0)
(5, 33, 1)
(5, 33, 2)
(5, 33, 3)
(5, 33, 4)
(5, 33, 5)
(5, 33, 6)
(5, 33, 7)
(5, 34, 0)
(5, 34, 1)
(5, 34, 2)
(5, 34, 3)
(5, 34, 4)
(5, 34, 5)
(5, 34, 6)
(5, 34, 7)
(5, 35, 0)
(5, 35, 1)
(5, 35, 2)
(5, 35, 3)
(5, 35, 4)
(5, 35, 5)
(5, 35, 6)
(5, 35, 7)
(5, 36, 0)
(5, 36, 1)
(5, 36, 2)
(5, 36, 3)
(5, 36, 4)
(5, 36, 5)
(5, 36, 6)
(5, 36, 7)
(5, 37, 0)
(5, 37, 1)
(5, 37, 2)
(5, 37, 3)
(5, 37, 4)
(5, 37, 5)
(5, 37, 6)
(5, 37, 7)
(5, 38, 0)
(5, 38, 1)
(5, 38, 2)
(5, 38, 3)
(5, 38, 4)
(5, 38, 5)
(5, 38, 6)
(5, 38, 7)
(5, 39, 0)
(5, 39, 1)
(5, 39, 2)
(5, 39, 3)
(5, 39, 4)
(5, 39, 5)
(5, 39, 6)
(5, 39, 7)
(5, 40, 0)
(5, 40, 1)
(5, 40, 2)
(5, 40, 3)
(5, 40, 4)
(5, 40, 5)
(5, 40, 6)
(5, 40, 7)
(5, 41, 0)
(5, 41, 1)
(5, 41, 2)
(5, 41, 3)
(5, 41, 4)
(5, 41, 5)
(5, 41, 6)
(5, 41, 7)
(5, 42, 0)
(5, 42, 1)
(5, 42, 2)
(5, 42, 3)
(5, 42, 4)
(5, 42, 5)
(5, 42, 6)
(5, 42, 7)
(5, 43, 0)
(5, 43, 1)
(5, 43, 2)
(5, 43, 3)
(5, 43, 4)
(5, 43, 5)
(5, 43, 6)
(5, 43, 7)
(5, 44, 0)
(5, 44, 1)
(5, 44, 2)
(5, 44, 3)
(5, 44, 4)
(5, 44, 5)
(5, 44, 6)
(5, 44, 7)
(5, 45, 0)
(5, 45, 1)
(5, 45, 2)
(5, 45, 3)
(5, 45, 4)
(5, 45, 5)
(5, 45, 6)
(5, 45, 7)
(5, 46, 0)
(5, 46, 1)
(5, 46, 2)
(5, 46, 3)
(5, 46, 4)
(5, 46, 5)
(5, 46, 6)
(5, 46, 7)
(5, 47, 0)
(5, 47, 1)
(5, 47, 2)
(5, 47, 3)
(5, 47, 4)
(5, 47, 5)
(5, 47, 6)
(5, 47, 7)
(5, 48, 0)
(5, 48, 1)
(5, 48, 2)
(5, 48, 3)
(5, 48, 4)
(5, 48, 5)
(5, 48, 6)
(5, 48, 7)
(5, 49, 0)
(5, 49, 1)
(5, 49, 2)
(5, 49, 3)
(5, 49, 4)
(5, 49, 5)
(5, 49, 6)
(5, 49, 7)
(5, 50, 0)
(5, 50, 1)
(5, 50, 2)
(5, 50, 3)
(5, 50, 4)
(5, 50, 5)
(5, 50, 6)
(5, 50, 7)
(5, 51, 0)
(5, 51, 1)
(5, 51, 2)
(5, 51, 3)
(5, 51, 4)
(5, 51, 5)
(5, 51, 6)
(5, 51, 7)
(5, 52, 0)
(5, 52, 1)
(5, 52, 2)
(5, 52, 3)
(5, 52, 4)
(5, 52, 5)
(5, 52, 6)
(5, 52, 7)
(5, 53, 0)
(5, 53, 1)
(5, 53, 2)
(5, 53, 3)
(5, 53, 4)
(5, 53, 5)
(5, 53, 6)
(5, 53, 7)
(5, 54, 0)
(5, 54, 1)
(5, 54, 2)
(5, 54, 3)
(5, 54, 4)
(5, 54, 5)
(5, 54, 6)
(5, 54, 7)
(5, 55, 0)
(5, 55, 1)
(5, 55, 2)
(5, 55, 3)
(5, 55, 4)
(5, 55, 5)
(5, 55, 6)
(5, 55, 7)
(5, 56, 0)
(5, 56, 1)
(5, 56, 2)
(5, 56, 3)
(5, 56, 4)
(5, 56, 5)
(5, 56, 6)
(5, 56, 7)
(5, 57, 0)
(5, 57, 1)
(5, 57, 2)
(5, 57, 3)
(5, 57, 4)
(5, 57, 5)
(5, 57, 6)
(5, 57, 7)
(5, 58, 0)
(5, 58, 1)
(5, 58, 2)
(5, 58, 3)
(5, 58, 4)
(5, 58, 5)
(5, 58, 6)
(5, 58, 7)
(5, 59, 0)
(5, 59, 1)
(5, 59, 2)
(5, 59, 3)
(5, 59, 4)
(5, 59, 5)
(5, 59, 6)
(5, 59, 7)
(5, 60, 0)
(5, 60, 1)
(5, 60, 2)
(5, 60, 3)
(5, 60, 4)
(5, 60, 5)
(5, 60, 6)
(5, 60, 7)
(5, 61, 0)
(5, 61, 1)
(5, 61, 2)
(5, 61, 3)
(5, 61, 4)
(5, 61, 5)
(5, 61, 6)
(5, 61, 7)
(5, 62, 0)
(5, 62, 1)
(5, 62, 2)
(5, 62, 3)
(5, 62, 4)
(5, 62, 5)
(5, 62, 6)
(5, 62, 7)
(5, 63, 0)
(5, 63, 1)
(5, 63, 2)
(5, 63, 3)
(5, 63, 4)
(5, 63, 5)
(5, 63, 6)
(5, 63, 7)
(5, 64, 0)
(5, 64, 1)
(5, 64, 2)
(5, 64, 3)
(5, 64, 4)
(5, 64, 5)
(5, 64, 6)
(5, 64, 7)
(5, 65, 0)
(5, 65, 1)
(5, 65, 2)
(5, 65, 3)
(5, 65, 4)
(5, 65, 5)
(5, 65, 6)
(5, 65, 7)
(5, 66, 0)
(5, 66, 1)
(5, 66, 2)
(5, 66, 3)
(5, 66, 4)
(5, 66, 5)
(5, 66, 6)
(5, 66, 7)
(5, 67, 0)
(5, 67, 1)
(5, 67, 2)
(5, 67, 3)
(5, 67, 4)
(5, 67, 5)
(5, 67, 6)
(5, 67, 7)
(5, 68, 0)
(5, 68, 1)
(5, 68, 2)
(5, 68, 3)
(5, 68, 4)
(5, 68, 5)
(5, 68, 6)
(5, 68, 7)
(5, 69, 0)
(5, 69, 1)
(5, 69, 2)
(5, 69, 3)
(5, 69, 4)
(5, 69, 5)
(5, 69, 6)
(5, 69, 7)
(5, 70, 0)
(5, 70, 1)
(5, 70, 2)
(5, 70, 3)
(5, 70, 4)
(5, 70, 5)
(5, 70, 6)
(5, 70, 7)
(5, 71, 0)
(5, 71, 1)
(5, 71, 2)
(5, 71, 3)
(5, 71, 4)
(5, 71, 5)
(5, 71, 6)
(5, 71, 7)
(5, 72, 0)
(5, 72, 1)
(5, 72, 2)
(5, 72, 3)
(5, 72, 4)
(5, 72, 5)
(5, 72, 6)
(5, 72, 7)
(5, 73, 0)
(5, 73, 1)
(5, 73, 2)
(5, 73, 3)
(5, 73, 4)
(5, 73, 5)
(5, 73, 6)
(5, 73, 7)
(5, 74, 0)
(5, 74, 1)
(5, 74, 2)
(5, 74, 3)
(5, 74, 4)
(5, 74, 5)
(5, 74, 6)
(5, 74, 7)
(5, 75, 0)
(5, 75, 1)
(5, 75, 2)
(5, 75, 3)
(5, 75, 4)
(5, 75, 5)
(5, 75, 6)
(5, 75, 7)
(5, 76, 0)
(5, 76, 1)
(5, 76, 2)
(5, 76, 3)
(5, 76, 4)
(5, 76, 5)
(5, 76, 6)
(5, 76, 7)
(5, 77, 0)
(5, 77, 1)
(5, 77, 2)
(5, 77, 3)
(5, 77, 4)
(5, 77, 5)
(5, 77, 6)
(5, 77, 7)
(5, 78, 0)
(5, 78, 1)
(5, 78, 2)
(5, 78, 3)
(5, 78, 4)
(5, 78, 5)
(5, 78, 6)
(5, 78, 7)
(5, 79, 0)
(5, 79, 1)
(5, 79, 2)
(5, 79, 3)
(5, 79, 4)
(5, 79, 5)
(5, 79, 6)
(5, 79, 7)
(5, 80, 0)
(5, 80, 1)
(5, 80, 2)
(5, 80, 3)
(5, 80, 4)
(5, 80, 5)
(5, 80, 6)
(5, 80, 7)
(5, 81, 0)
(5, 81, 1)
(5, 81, 2)
(5, 81, 3)
(5, 81, 4)
(5, 81, 5)
(5, 81, 6)
(5, 81, 7)
(5, 82, 0)
(5, 82, 1)
(5, 82, 2)
(5, 82, 3)
(5, 82, 4)
(5, 82, 5)
(5, 82, 6)
(5, 82, 7)
(5, 83, 0)
(5, 83, 1)
(5, 83, 2)
(5, 83, 3)
(5, 83, 4)
(5, 83, 5)
(5, 83, 6)
(5, 83, 7)
(5, 84, 0)
(5, 84, 1)
(5, 84, 2)
(5, 84, 3)
(5, 84, 4)
(5, 84, 5)
(5, 84, 6)
(5, 84, 7)
(5, 85, 0)
(5, 85, 1)
(5, 85, 2)
(5, 85, 3)
(5, 85, 4)
(5, 85, 5)
(5, 85, 6)
(5, 85, 7)
(5, 86, 0)
(5, 86, 1)
(5, 86, 2)
(5, 86, 3)
(5, 86, 4)
(5, 86, 5)
(5, 86, 6)
(5, 86, 7)
(5, 87, 0)
(5, 87, 1)
(5, 87, 2)
(5, 87, 3)
(5, 87, 4)
(5, 87, 5)
(5, 87, 6)
(5, 87, 7)
(5, 88, 0)
(5, 88, 1)
(5, 88, 2)
(5, 88, 3)
(5, 88, 4)
(5, 88, 5)
(5, 88, 6)
(5, 88, 7)
(5, 89, 0)
(5, 89, 1)
(5, 89, 2)
(5, 89, 3)
(5, 89, 4)
(5, 89, 5)
(5, 89, 6)
(5, 89, 7)
(5, 90, 0)
(5, 90, 1)
(5, 90, 2)
(5, 90, 3)
(5, 90, 4)
(5, 90, 5)
(5, 90, 6)
(5, 90, 7)
(5, 91, 0)
(5, 91, 1)
(5, 91, 2)
(5, 91, 3)
(5, 91, 4)
(5, 91, 5)
(5, 91, 6)
(5, 91, 7)
(5, 92, 0)
(5, 92, 1)
(5, 92, 2)
(5, 92, 3)
(5, 92, 4)
(5, 92, 5)
(5, 92, 6)
(5, 92, 7)
(5, 93, 0)
(5, 93, 1)
(5, 93, 2)
(5, 93, 3)
(5, 93, 4)
(5, 93, 5)
(5, 93, 6)
(5, 93, 7)
(5, 94, 0)
(5, 94, 1)
(5, 94, 2)
(5, 94, 3)
(5, 94, 4)
(5, 94, 5)
(5, 94, 6)
(5, 94, 7)
(5, 95, 0)
(5, 95, 1)
(5, 95, 2)
(5, 95, 3)
(5, 95, 4)
(5, 95, 5)
(5, 95, 6)
(5, 95, 7)
(5, 96, 0)
(5, 96, 1)
(5, 96, 2)
(5, 96, 3)
(5, 96, 4)
(5, 96, 5)
(5, 96, 6)
(5, 96, 7)
(5, 97, 0)
(5, 97, 1)
(5, 97, 2)
(5, 97, 3)
(5, 97, 4)
(5, 97, 5)
(5, 97, 6)
(5, 97, 7)
(5, 98, 0)
(5, 98, 1)
(5, 98, 2)
(5, 98, 3)
(5, 98, 4)
(5, 98, 5)
(5, 98, 6)
(5, 98, 7)
(5, 99, 0)
(5, 99, 1)
(5, 99, 2)
(5, 99, 3)
(5, 99, 4)
(5, 99, 5)
(5, 99, 6)
(5, 99, 7)
(5, 100, 0)
(5, 100, 1)
(5, 100, 2)
(5, 100, 3)
(5, 100, 4)
(5, 100, 5)
(5, 100, 6)
(5, 100, 7)
(5, 101, 0)
(5, 101, 1)
(5, 101, 2)
(5, 101, 3)
(5, 101, 4)
(5, 101, 5)
(5, 101, 6)
(5, 101, 7)
(5, 102, 0)
(5, 102, 1)
(5, 102, 2)
(5, 102, 3)
(5, 102, 4)
(5, 102, 5)
(5, 102, 6)
(5, 102, 7)
(5, 103, 0)
(5, 103, 1)
(5, 103, 2)
(5, 103, 3)
(5, 103, 4)
(5, 103, 5)
(5, 103, 6)
(5, 103, 7)
(5, 104, 0)
(5, 104, 1)
(5, 104, 2)
(5, 104, 3)
(5, 104, 4)
(5, 104, 5)
(5, 104, 6)
(5, 104, 7)
(5, 105, 0)
(5, 105, 1)
(5, 105, 2)
(5, 105, 3)
(5, 105, 4)
(5, 105, 5)
(5, 105, 6)
(5, 105, 7)
(5, 106, 0)
(5, 106, 1)
(5, 106, 2)
(5, 106, 3)
(5, 106, 4)
(5, 106, 5)
(5, 106, 6)
(5, 106, 7)
(5, 107, 0)
(5, 107, 1)
(5, 107, 2)
(5, 107, 3)
(5, 107, 4)
(5, 107, 5)
(5, 107, 6)
(5, 107, 7)
(5, 108, 0)
(5, 108, 1)
(5, 108, 2)
(5, 108, 3)
(5, 108, 4)
(5, 108, 5)
(5, 108, 6)
(5, 108, 7)
(5, 109, 0)
(5, 109, 1)
(5, 109, 2)
(5, 109, 3)
(5, 109, 4)
(5, 109, 5)
(5, 109, 6)
(5, 109, 7)
(5, 110, 0)
(5, 110, 1)
(5, 110, 2)
(5, 110, 3)
(5, 110, 4)
(5, 110, 5)
(5, 110, 6)
(5, 110, 7)
(5, 111, 0)
(5, 111, 1)
(5, 111, 2)
(5, 111, 3)
(5, 111, 4)
(5, 111, 5)
(5, 111, 6)
(5, 111, 7)
(5, 112, 0)
(5, 112, 1)
(5, 112, 2)
(5, 112, 3)
(5, 112, 4)
(5, 112, 5)
(5, 112, 6)
(5, 112, 7)
(5, 113, 0)
(5, 113, 1)
(5, 113, 2)
(5, 113, 3)
(5, 113, 4)
(5, 113, 5)
(5, 113, 6)
(5, 113, 7)
(5, 114, 0)
(5, 114, 1)
(5, 114, 2)
(5, 114, 3)
(5, 114, 4)
(5, 114, 5)
(5, 114, 6)
(5, 114, 7)
(5, 115, 0)
(5, 115, 1)
(5, 115, 2)
(5, 115, 3)
(5, 115, 4)
(5, 115, 5)
(5, 115, 6)
(5, 115, 7)
(5, 116, 0)
(5, 116, 1)
(5, 116, 2)
(5, 116, 3)
(5, 116, 4)
(5, 116, 5)
(5, 116, 6)
(5, 116, 7)
(5, 117, 0)
(5, 117, 1)
(5, 117, 2)
(5, 117, 3)
(5, 117, 4)
(5, 117, 5)
(5, 117, 6)
(5, 117, 7)
(5, 118, 0)
(5, 118, 1)
(5, 118, 2)
(5, 118, 3)
(5, 118, 4)
(5, 118, 5)
(5, 118, 6)
(5, 118, 7)
(5, 119, 0)
(5, 119, 1)
(5, 119, 2)
(5, 119, 3)
(5, 119, 4)
(5, 119, 5)
(5, 119, 6)
(5, 119, 7)
(5, 120, 0)
(5, 120, 1)
(5, 120, 2)
(5, 120, 3)
(5, 120, 4)
(5, 120, 5)
(5, 120, 6)
(5, 120, 7)
(5, 121, 0)
(5, 121, 1)
(5, 121, 2)
(5, 121, 3)
(5, 121, 4)
(5, 121, 5)
(5, 121, 6)
(5, 121, 7)
(5, 122, 0)
(5, 122, 1)
(5, 122, 2)
(5, 122, 3)
(5, 122, 4)
(5, 122, 5)
(5, 122, 6)
(5, 122, 7)
(5, 123, 0)
(5, 123, 1)
(5, 123, 2)
(5, 123, 3)
(5, 123, 4)
(5, 123, 5)
(5, 123, 6)
(5, 123, 7)
(5, 124, 0)
(5, 124, 1)
(5, 124, 2)
(5, 124, 3)
(5, 124, 4)
(5, 124, 5)
(5, 124, 6)
(5, 124, 7)
(5, 125, 0)
(5, 125, 1)
(5, 125, 2)
(5, 125, 3)
(5, 125, 4)
(5, 125, 5)
(5, 125, 6)
(5, 125, 7)
(5, 126, 0)
(5, 126, 1)
(5, 126, 2)
(5, 126, 3)
(5, 126, 4)
(5, 126, 5)
(5, 126, 6)
(5, 126, 7)
(5, 127, 0)
(5, 127, 1)
(5, 127, 2)
(5, 127, 3)
(5, 127, 4)
(5, 127, 5)
(5, 127, 6)
(5, 127, 7)
(5, 128, 0)
(5, 128, 1)
(5, 128, 2)
(5, 128, 3)
(5, 128, 4)
(5, 128, 5)
(5, 128, 6)
(5, 128, 7)
(5, 129, 0)
(5, 129, 1)
(5, 129, 2)
(5, 129, 3)
(5, 129, 4)
(5, 129, 5)
(5, 129, 6)
(5, 129, 7)
(5, 130, 0)
(5, 130, 1)
(5, 130, 2)
(5, 130, 3)
(5, 130, 4)
(5, 130, 5)
(5, 130, 6)
(5, 130, 7)
(5, 131, 0)
(5, 131, 1)
(5, 131, 2)
(5, 131, 3)
(5, 131, 4)
(5, 131, 5)
(5, 131, 6)
(5, 131, 7)
(5, 132, 0)
(5, 132, 1)
(5, 132, 2)
(5, 132, 3)
(5, 132, 4)
(5, 132, 5)
(5, 132, 6)
(5, 132, 7)
(5, 133, 0)
(5, 133, 1)
(5, 133, 2)
(5, 133, 3)
(5, 133, 4)
(5, 133, 5)
(5, 133, 6)
(5, 133, 7)
(5, 134, 0)
(5, 134, 1)
(5, 134, 2)
(5, 134, 3)
(5, 134, 4)
(5, 134, 5)
(5, 134, 6)
(5, 134, 7)
(5, 135, 0)
(5, 135, 1)
(5, 135, 2)
(5, 135, 3)
(5, 135, 4)
(5, 135, 5)
(5, 135, 6)
(5, 135, 7)
(5, 136, 0)
(5, 136, 1)
(5, 136, 2)
(5, 136, 3)
(5, 136, 4)
(5, 136, 5)
(5, 136, 6)
(5, 136, 7)
(5, 137, 0)
(5, 137, 1)
(5, 137, 2)
(5, 137, 3)
(5, 137, 4)
(5, 137, 5)
(5, 137, 6)
(5, 137, 7)
(5, 138, 0)
(5, 138, 1)
(5, 138, 2)
(5, 138, 3)
(5, 138, 4)
(5, 138, 5)
(5, 138, 6)
(5, 138, 7)
(5, 139, 0)
(5, 139, 1)
(5, 139, 2)
(5, 139, 3)
(5, 139, 4)
(5, 139, 5)
(5, 139, 6)
(5, 139, 7)
(5, 140, 0)
(5, 140, 1)
(5, 140, 2)
(5, 140, 3)
(5, 140, 4)
(5, 140, 5)
(5, 140, 6)
(5, 140, 7)
(5, 141, 0)
(5, 141, 1)
(5, 141, 2)
(5, 141, 3)
(5, 141, 4)
(5, 141, 5)
(5, 141, 6)
(5, 141, 7)
(5, 142, 0)
(5, 142, 1)
(5, 142, 2)
(5, 142, 3)
(5, 142, 4)
(5, 142, 5)
(5, 142, 6)
(5, 142, 7)
(5, 143, 0)
(5, 143, 1)
(5, 143, 2)
(5, 143, 3)
(5, 143, 4)
(5, 143, 5)
(5, 143, 6)
(5, 143, 7)
(5, 144, 0)
(5, 144, 1)
(5, 144, 2)
(5, 144, 3)
(5, 144, 4)
(5, 144, 5)
(5, 144, 6)
(5, 144, 7)
(5, 145, 0)
(5, 145, 1)
(5, 145, 2)
(5, 145, 3)
(5, 145, 4)
(5, 145, 5)
(5, 145, 6)
(5, 145, 7)
(5, 146, 0)
(5, 146, 1)
(5, 146, 2)
(5, 146, 3)
(5, 146, 4)
(5, 146, 5)
(5, 146, 6)
(5, 146, 7)
(5, 147, 0)
(5, 147, 1)
(5, 147, 2)
(5, 147, 3)
(5, 147, 4)
(5, 147, 5)
(5, 147, 6)
(5, 147, 7)
(5, 148, 0)
(5, 148, 1)
(5, 148, 2)
(5, 148, 3)
(5, 148, 4)
(5, 148, 5)
(5, 148, 6)
(5, 148, 7)
(5, 149, 0)
(5, 149, 1)
(5, 149, 2)
(5, 149, 3)
(5, 149, 4)
(5, 149, 5)
(5, 149, 6)
(5, 149, 7)
(5, 150, 0)
(5, 150, 1)
(5, 150, 2)
(5, 150, 3)
(5, 150, 4)
(5, 150, 5)
(5, 150, 6)
(5, 150, 7)
(5, 151, 0)
(5, 151, 1)
(5, 151, 2)
(5, 151, 3)
(5, 151, 4)
(5, 151, 5)
(5, 151, 6)
(5, 151, 7)
(5, 152, 0)
(5, 152, 1)
(5, 152, 2)
(5, 152, 3)
(5, 152, 4)
(5, 152, 5)
(5, 152, 6)
(5, 152, 7)
(5, 153, 0)
(5, 153, 1)
(5, 153, 2)
(5, 153, 3)
(5, 153, 4)
(5, 153, 5)
(5, 153, 6)
(5, 153, 7)
(5, 154, 0)
(5, 154, 1)
(5, 154, 2)
(5, 154, 3)
(5, 154, 4)
(5, 154, 5)
(5, 154, 6)
(5, 154, 7)
(5, 155, 0)
(5, 155, 1)
(5, 155, 2)
(5, 155, 3)
(5, 155, 4)
(5, 155, 5)
(5, 155, 6)
(5, 155, 7)
(5, 156, 0)
(5, 156, 1)
(5, 156, 2)
(5, 156, 3)
(5, 156, 4)
(5, 156, 5)
(5, 156, 6)
(5, 156, 7)
(5, 157, 0)
(5, 157, 1)
(5, 157, 2)
(5, 157, 3)
(5, 157, 4)
(5, 157, 5)
(5, 157, 6)
(5, 157, 7)
(5, 158, 0)
(5, 158, 1)
(5, 158, 2)
(5, 158, 3)
(5, 158, 4)
(5, 158, 5)
(5, 158, 6)
(5, 158, 7)
(5, 159, 0)
(5, 159, 1)
(5, 159, 2)
(5, 159, 3)
(5, 159, 4)
(5, 159, 5)
(5, 159, 6)
(5, 159, 7)
(5, 160, 0)
(5, 160, 1)
(5, 160, 2)
(5, 160, 3)
(5, 160, 4)
(5, 160, 5)
(5, 160, 6)
(5, 160, 7)
(5, 161, 0)
(5, 161, 1)
(5, 161, 2)
(5, 161, 3)
(5, 161, 4)
(5, 161, 5)
(5, 161, 6)
(5, 161, 7)
(5, 162, 0)
(5, 162, 1)
(5, 162, 2)
(5, 162, 3)
(5, 162, 4)
(5, 162, 5)
(5, 162, 6)
(5, 162, 7)
(5, 163, 0)
(5, 163, 1)
(5, 163, 2)
(5, 163, 3)
(5, 163, 4)
(5, 163, 5)
(5, 163, 6)
(5, 163, 7)
(5, 164, 0)
(5, 164, 1)
(5, 164, 2)
(5, 164, 3)
(5, 164, 4)
(5, 164, 5)
(5, 164, 6)
(5, 164, 7)
(5, 165, 0)
(5, 165, 1)
(5, 165, 2)
(5, 165, 3)
(5, 165, 4)
(5, 165, 5)
(5, 165, 6)
(5, 165, 7)
(5, 166, 0)
(5, 166, 1)
(5, 166, 2)
(5, 166, 3)
(5, 166, 4)
(5, 166, 5)
(5, 166, 6)
(5, 166, 7)
(5, 167, 0)
(5, 167, 1)
(5, 167, 2)
(5, 167, 3)
(5, 167, 4)
(5, 167, 5)
(5, 167, 6)
(5, 167, 7)
(5, 168, 0)
(5, 168, 1)
(5, 168, 2)
(5, 168, 3)
(5, 168, 4)
(5, 168, 5)
(5, 168, 6)
(5, 168, 7)
(5, 169, 0)
(5, 169, 1)
(5, 169, 2)
(5, 169, 3)
(5, 169, 4)
(5, 169, 5)
(5, 169, 6)
(5, 169, 7)
(5, 170, 0)
(5, 170, 1)
(5, 170, 2)
(5, 170, 3)
(5, 170, 4)
(5, 170, 5)
(5, 170, 6)
(5, 170, 7)
(5, 171, 0)
(5, 171, 1)
(5, 171, 2)
(5, 171, 3)
(5, 171, 4)
(5, 171, 5)
(5, 171, 6)
(5, 171, 7)
(5, 172, 0)
(5, 172, 1)
(5, 172, 2)
(5, 172, 3)
(5, 172, 4)
(5, 172, 5)
(5, 172, 6)
(5, 172, 7)
(5, 173, 0)
(5, 173, 1)
(5, 173, 2)
(5, 173, 3)
(5, 173, 4)
(5, 173, 5)
(5, 173, 6)
(5, 173, 7)
(5, 174, 0)
(5, 174, 1)
(5, 174, 2)
(5, 174, 3)
(5, 174, 4)
(5, 174, 5)
(5, 174, 6)
(5, 174, 7)
(5, 175, 0)
(5, 175, 1)
(5, 175, 2)
(5, 175, 3)
(5, 175, 4)
(5, 175, 5)
(5, 175, 6)
(5, 175, 7)
(5, 176, 0)
(5, 176, 1)
(5, 176, 2)
(5, 176, 3)
(5, 176, 4)
(5, 176, 5)
(5, 176, 6)
(5, 176, 7)
(5, 177, 0)
(5, 177, 1)
(5, 177, 2)
(5, 177, 3)
(5, 177, 4)
(5, 177, 5)
(5, 177, 6)
(5, 177, 7)
(5, 178, 0)
(5, 178, 1)
(5, 178, 2)
(5, 178, 3)
(5, 178, 4)
(5, 178, 5)
(5, 178, 6)
(5, 178, 7)
(5, 179, 0)
(5, 179, 1)
(5, 179, 2)
(5, 179, 3)
(5, 179, 4)
(5, 179, 5)
(5, 179, 6)
(5, 179, 7)
(5, 180, 0)
(5, 180, 1)
(5, 180, 2)
(5, 180, 3)
(5, 180, 4)
(5, 180, 5)
(5, 180, 6)
(5, 180, 7)
(5, 181, 0)
(5, 181, 1)
(5, 181, 2)
(5, 181, 3)
(5, 181, 4)
(5, 181, 5)
(5, 181, 6)
(5, 181, 7)
(5, 182, 0)
(5, 182, 1)
(5, 182, 2)
(5, 182, 3)
(5, 182, 4)
(5, 182, 5)
(5, 182, 6)
(5, 182, 7)
(5, 183, 0)
(5, 183, 1)
(5, 183, 2)
(5, 183, 3)
(5, 183, 4)
(5, 183, 5)
(5, 183, 6)
(5, 183, 7)
(5, 184, 0)
(5, 184, 1)
(5, 184, 2)
(5, 184, 3)
(5, 184, 4)
(5, 184, 5)
(5, 184, 6)
(5, 184, 7)
(5, 185, 0)
(5, 185, 1)
(5, 185, 2)
(5, 185, 3)
(5, 185, 4)
(5, 185, 5)
(5, 185, 6)
(5, 185, 7)
(5, 186, 0)
(5, 186, 1)
(5, 186, 2)
(5, 186, 3)
(5, 186, 4)
(5, 186, 5)
(5, 186, 6)
(5, 186, 7)
(5, 187, 0)
(5, 187, 1)
(5, 187, 2)
(5, 187, 3)
(5, 187, 4)
(5, 187, 5)
(5, 187, 6)
(5, 187, 7)
(5, 188, 0)
(5, 188, 1)
(5, 188, 2)
(5, 188, 3)
(5, 188, 4)
(5, 188, 5)
(5, 188, 6)
(5, 188, 7)
(5, 189, 0)
(5, 189, 1)
(5, 189, 2)
(5, 189, 3)
(5, 189, 4)
(5, 189, 5)
(5, 189, 6)
(5, 189, 7)
(5, 190, 0)
(5, 190, 1)
(5, 190, 2)
(5, 190, 3)
(5, 190, 4)
(5, 190, 5)
(5, 190, 6)
(5, 190, 7)
(5, 191, 0)
(5, 191, 1)
(5, 191, 2)
(5, 191, 3)
(5, 191, 4)
(5, 191, 5)
(5, 191, 6)
(5, 191, 7)
(5, 192, 0)
(5, 192, 1)
(5, 192, 2)
(5, 192, 3)
(5, 192, 4)
(5, 192, 5)
(5, 192, 6)
(5, 192, 7)
(5, 193, 0)
(5, 193, 1)
(5, 193, 2)
(5, 193, 3)
(5, 193, 4)
(5, 193, 5)
(5, 193, 6)
(5, 193, 7)
(5, 194, 0)
(5, 194, 1)
(5, 194, 2)
(5, 194, 3)
(5, 194, 4)
(5, 194, 5)
(5, 194, 6)
(5, 194, 7)
(5, 195, 0)
(5, 195, 1)
(5, 195, 2)
(5, 195, 3)
(5, 195, 4)
(5, 195, 5)
(5, 195, 6)
(5, 195, 7)
(5, 196, 0)
(5, 196, 1)
(5, 196, 2)
(5, 196, 3)
(5, 196, 4)
(5, 196, 5)
(5, 196, 6)
(5, 196, 7)
(5, 197, 0)
(5, 197, 1)
(5, 197, 2)
(5, 197, 3)
(5, 197, 4)
(5, 197, 5)
(5, 197, 6)
(5, 197, 7)
(5, 198, 0)
(5, 198, 1)
(5, 198, 2)
(5, 198, 3)
(5, 198, 4)
(5, 198, 5)
(5, 198, 6)
(5, 198, 7)
(5, 199, 0)
(5, 199, 1)
(5, 199, 2)
(5, 199, 3)
(5, 199, 4)
(5, 199, 5)
(5, 199, 6)
(5, 199, 7)
(5, 200, 0)
(5, 200, 1)
(5, 200, 2)
(5, 200, 3)
(5, 200, 4)
(5, 200, 5)
(5, 200, 6)
(5, 200, 7)
(5, 201, 0)
(5, 201, 1)
(5, 201, 2)
(5, 201, 3)
(5, 201, 4)
(5, 201, 5)
(5, 201, 6)
(5, 201, 7)
(5, 202, 0)
(5, 202, 1)
(5, 202, 2)
(5, 202, 3)
(5, 202, 4)
(5, 202, 5)
(5, 202, 6)
(5, 202, 7)
(5, 203, 0)
(5, 203, 1)
(5, 203, 2)
(5, 203, 3)
(5, 203, 4)
(5, 203, 5)
(5, 203, 6)
(5, 203, 7)
(5, 204, 0)
(5, 204, 1)
(5, 204, 2)
(5, 204, 3)
(5, 204, 4)
(5, 204, 5)
(5, 204, 6)
(5, 204, 7)
(5, 205, 0)
(5, 205, 1)
(5, 205, 2)
(5, 205, 3)
(5, 205, 4)
(5, 205, 5)
(5, 205, 6)
(5, 205, 7)
(5, 206, 0)
(5, 206, 1)
(5, 206, 2)
(5, 206, 3)
(5, 206, 4)
(5, 206, 5)
(5, 206, 6)
(5, 206, 7)
(5, 207, 0)
(5, 207, 1)
(5, 207, 2)
(5, 207, 3)
(5, 207, 4)
(5, 207, 5)
(5, 207, 6)
(5, 207, 7)
(5, 208, 0)
(5, 208, 1)
(5, 208, 2)
(5, 208, 3)
(5, 208, 4)
(5, 208, 5)
(5, 208, 6)
(5, 208, 7)
(5, 209, 0)
(5, 209, 1)
(5, 209, 2)
(5, 209, 3)
(5, 209, 4)
(5, 209, 5)
(5, 209, 6)
(5, 209, 7)
(5, 210, 0)
(5, 210, 1)
(5, 210, 2)
(5, 210, 3)
(5, 210, 4)
(5, 210, 5)
(5, 210, 6)
(5, 210, 7)
(5, 211, 0)
(5, 211, 1)
(5, 211, 2)
(5, 211, 3)
(5, 211, 4)
(5, 211, 5)
(5, 211, 6)
(5, 211, 7)
(5, 212, 0)
(5, 212, 1)
(5, 212, 2)
(5, 212, 3)
(5, 212, 4)
(5, 212, 5)
(5, 212, 6)
(5, 212, 7)
(5, 213, 0)
(5, 213, 1)
(5, 213, 2)
(5, 213, 3)
(5, 213, 4)
(5, 213, 5)
(5, 213, 6)
(5, 213, 7)
(5, 214, 0)
(5, 214, 1)
(5, 214, 2)
(5, 214, 3)
(5, 214, 4)
(5, 214, 5)
(5, 214, 6)
(5, 214, 7)
(5, 215, 0)
(5, 215, 1)
(5, 215, 2)
(5, 215, 3)
(5, 215, 4)
(5, 215, 5)
(5, 215, 6)
(5, 215, 7)
(5, 216, 0)
(5, 216, 1)
(5, 216, 2)
(5, 216, 3)
(5, 216, 4)
(5, 216, 5)
(5, 216, 6)
(5, 216, 7)
(5, 217, 0)
(5, 217, 1)
(5, 217, 2)
(5, 217, 3)
(5, 217, 4)
(5, 217, 5)
(5, 217, 6)
(5, 217, 7)
(5, 218, 0)
(5, 218, 1)
(5, 218, 2)
(5, 218, 3)
(5, 218, 4)
(5, 218, 5)
(5, 218, 6)
(5, 218, 7)
(5, 219, 0)
(5, 219, 1)
(5, 219, 2)
(5, 219, 3)
(5, 219, 4)
(5, 219, 5)
(5, 219, 6)
(5, 219, 7)
(5, 220, 0)
(5, 220, 1)
(5, 220, 2)
(5, 220, 3)
(5, 220, 4)
(5, 220, 5)
(5, 220, 6)
(5, 220, 7)
(5, 221, 0)
(5, 221, 1)
(5, 221, 2)
(5, 221, 3)
(5, 221, 4)
(5, 221, 5)
(5, 221, 6)
(5, 221, 7)
(5, 222, 0)
(5, 222, 1)
(5, 222, 2)
(5, 222, 3)
(5, 222, 4)
(5, 222, 5)
(5, 222, 6)
(5, 222, 7)
(5, 223, 0)
(5, 223, 1)
(5, 223, 2)
(5, 223, 3)
(5, 223, 4)
(5, 223, 5)
(5, 223, 6)
(5, 223, 7)
(5, 224, 0)
(5, 224, 1)
(5, 224, 2)
(5, 224, 3)
(5, 224, 4)
(5, 224, 5)
(5, 224, 6)
(5, 224, 7)
(5, 225, 0)
(5, 225, 1)
(5, 225, 2)
(5, 225, 3)
(5, 225, 4)
(5, 225, 5)
(5, 225, 6)
(5, 225, 7)
(5, 226, 0)
(5, 226, 1)
(5, 226, 2)
(5, 226, 3)
(5, 226, 4)
(5, 226, 5)
(5, 226, 6)
(5, 226, 7)
(5, 227, 0)
(5, 227, 1)
(5, 227, 2)
(5, 227, 3)
(5, 227, 4)
(5, 227, 5)
(5, 227, 6)
(5, 227, 7)
(5, 228, 0)
(5, 228, 1)
(5, 228, 2)
(5, 228, 3)
(5, 228, 4)
(5, 228, 5)
(5, 228, 6)
(5, 228, 7)
(5, 229, 0)
(5, 229, 1)
(5, 229, 2)
(5, 229, 3)
(5, 229, 4)
(5, 229, 5)
(5, 229, 6)
(5, 229, 7)
(5, 230, 0)
(5, 230, 1)
(5, 230, 2)
(5, 230, 3)
(5, 230, 4)
(5, 230, 5)
(5, 230, 6)
(5, 230, 7)
(5, 231, 0)
(5, 231, 1)
(5, 231, 2)
(5, 231, 3)
(5, 231, 4)
(5, 231, 5)
(5, 231, 6)
(5, 231, 7)
(5, 232, 0)
(5, 232, 1)
(5, 232, 2)
(5, 232, 3)
(5, 232, 4)
(5, 232, 5)
(5, 232, 6)
(5, 232, 7)
(5, 233, 0)
(5, 233, 1)
(5, 233, 2)
(5, 233, 3)
(5, 233, 4)
(5, 233, 5)
(5, 233, 6)
(5, 233, 7)
(5, 234, 0)
(5, 234, 1)
(5, 234, 2)
(5, 234, 3)
(5, 234, 4)
(5, 234, 5)
(5, 234, 6)
(5, 234, 7)
(5, 235, 0)
(5, 235, 1)
(5, 235, 2)
(5, 235, 3)
(5, 235, 4)
(5, 235, 5)
(5, 235, 6)
(5, 235, 7)
(5, 236, 0)
(5, 236, 1)
(5, 236, 2)
(5, 236, 3)
(5, 236, 4)
(5, 236, 5)
(5, 236, 6)
(5, 236, 7)
(5, 237, 0)
(5, 237, 1)
(5, 237, 2)
(5, 237, 3)
(5, 237, 4)
(5, 237, 5)
(5, 237, 6)
(5, 237, 7)
(5, 238, 0)
(5, 238, 1)
(5, 238, 2)
(5, 238, 3)
(5, 238, 4)
(5, 238, 5)
(5, 238, 6)
(5, 238, 7)
(5, 239, 0)
(5, 239, 1)
(5, 239, 2)
(5, 239, 3)
(5, 239, 4)
(5, 239, 5)
(5, 239, 6)
(5, 239, 7)
(5, 240, 0)
(5, 240, 1)
(5, 240, 2)
(5, 240, 3)
(5, 240, 4)
(5, 240, 5)
(5, 240, 6)
(5, 240, 7)
(5, 241, 0)
(5, 241, 1)
(5, 241, 2)
(5, 241, 3)
(5, 241, 4)
(5, 241, 5)
(5, 241, 6)
(5, 241, 7)
(5, 242, 0)
(5, 242, 1)
(5, 242, 2)
(5, 242, 3)
(5, 242, 4)
(5, 242, 5)
(5, 242, 6)
(5, 242, 7)
(5, 243, 0)
(5, 243, 1)
(5, 243, 2)
(5, 243, 3)
(5, 243, 4)
(5, 243, 5)
(5, 243, 6)
(5, 243, 7)
(5, 244, 0)
(5, 244, 1)
(5, 244, 2)
(5, 244, 3)
(5, 244, 4)
(5, 244, 5)
(5, 244, 6)
(5, 244, 7)
(5, 245, 0)
(5, 245, 1)
(5, 245, 2)
(5, 245, 3)
(5, 245, 4)
(5, 245, 5)
(5, 245, 6)
(5, 245, 7)
(5, 246, 0)
(5, 246, 1)
(5, 246, 2)
(5, 246, 3)
(5, 246, 4)
(5, 246, 5)
(5, 246, 6)
(5, 246, 7)
(5, 247, 0)
(5, 247, 1)
(5, 247, 2)
(5, 247, 3)
(5, 247, 4)
(5, 247, 5)
(5, 247, 6)
(5, 247, 7)
(5, 248, 0)
(5, 248, 1)
(5, 248, 2)
(5, 248, 3)
(5, 248, 4)
(5, 248, 5)
(5, 248, 6)
(5, 248, 7)
(5, 249, 0)
(5, 249, 1)
(5, 249, 2)
(5, 249, 3)
(5, 249, 4)
(5, 249, 5)
(5, 249, 6)
(5, 249, 7)
(5, 250, 0)
(5, 250, 1)
(5, 250, 2)
(5, 250, 3)
(5, 250, 4)
(5, 250, 5)
(5, 250, 6)
(5, 250, 7)
(5, 251, 0)
(5, 251, 1)
(5, 251, 2)
(5, 251, 3)
(5, 251, 4)
(5, 251, 5)
(5, 251, 6)
(5, 251, 7)
(5, 252, 0)
(5, 252, 1)
(5, 252, 2)
(5, 252, 3)
(5, 252, 4)
(5, 252, 5)
(5, 252, 6)
(5, 252, 7)
(5, 253, 0)
(5, 253, 1)
(5, 253, 2)
(5, 253, 3)
(5, 253, 4)
(5, 253, 5)
(5, 253, 6)
(5, 253, 7)
(5, 254, 0)
(5, 254, 1)
(5, 254, 2)
(5, 254, 3)
(5, 254, 4)
(5, 254, 5)
(5, 254, 6)
(5, 254, 7)
(5, 255, 0)
(5, 255, 1)
(5, 255, 2)
(5, 255, 3)
(5, 255, 4)
(5, 255, 5)
(5, 255, 6)
(5, 255, 7)
(6, 0, 0)
(6, 0, 1)
(6, 0, 2)
(6, 0, 3)
(6, 0, 4)
(6, 0, 5)
(6, 0, 6)
(6, 0, 7)
(6, 1, 0)
(6, 1, 1)
(6, 1, 2)
(6, 1, 3)
(6, 1, 4)
(6, 1, 5)
(6, 1, 6)
(6, 1, 7)
(6, 2, 0)
(6, 2, 1)
(6, 2, 2)
(6, 2, 3)
(6, 2, 4)
(6, 2, 5)
(6, 2, 6)
(6, 2, 7)
(6, 3, 0)
(6, 3, 1)
(6, 3, 2)
(6, 3, 3)
(6, 3, 4)
(6, 3, 5)
(6, 3, 6)
(6, 3, 7)
(6, 4, 0)
(6, 4, 1)
(6, 4, 2)
(6, 4, 3)
(6, 4, 4)
(6, 4, 5)
(6, 4, 6)
(6, 4, 7)
(6, 5, 0)
(6, 5, 1)
(6, 5, 2)
(6, 5, 3)
(6, 5, 4)
(6, 5, 5)
(6, 5, 6)
(6, 5, 7)
(6, 6, 0)
(6, 6, 1)
(6, 6, 2)
(6, 6, 3)
(6, 6, 4)
(6, 6, 5)
(6, 6, 6)
(6, 6, 7)
(6, 7, 0)
(6, 7, 1)
(6, 7, 2)
(6, 7, 3)
(6, 7, 4)
(6, 7, 5)
(6, 7, 6)
(6, 7, 7)
(6, 8, 0)
(6, 8, 1)
(6, 8, 2)
(6, 8, 3)
(6, 8, 4)
(6, 8, 5)
(6, 8, 6)
(6, 8, 7)
(6, 9, 0)
(6, 9, 1)
(6, 9, 2)
(6, 9, 3)
(6, 9, 4)
(6, 9, 5)
(6, 9, 6)
(6, 9, 7)
(6, 10, 0)
(6, 10, 1)
(6, 10, 2)
(6, 10, 3)
(6, 10, 4)
(6, 10, 5)
(6, 10, 6)
(6, 10, 7)
(6, 11, 0)
(6, 11, 1)
(6, 11, 2)
(6, 11, 3)
(6, 11, 4)
(6, 11, 5)
(6, 11, 6)
(6, 11, 7)
(6, 12, 0)
(6, 12, 1)
(6, 12, 2)
(6, 12, 3)
(6, 12, 4)
(6, 12, 5)
(6, 12, 6)
(6, 12, 7)
(6, 13, 0)
(6, 13, 1)
(6, 13, 2)
(6, 13, 3)
(6, 13, 4)
(6, 13, 5)
(6, 13, 6)
(6, 13, 7)
(6, 14, 0)
(6, 14, 1)
(6, 14, 2)
(6, 14, 3)
(6, 14, 4)
(6, 14, 5)
(6, 14, 6)
(6, 14, 7)
(6, 15, 0)
(6, 15, 1)
(6, 15, 2)
(6, 15, 3)
(6, 15, 4)
(6, 15, 5)
(6, 15, 6)
(6, 15, 7)
(6, 16, 0)
(6, 16, 1)
(6, 16, 2)
(6, 16, 3)
(6, 16, 4)
(6, 16, 5)
(6, 16, 6)
(6, 16, 7)
(6, 17, 0)
(6, 17, 1)
(6, 17, 2)
(6, 17, 3)
(6, 17, 4)
(6, 17, 5)
(6, 17, 6)
(6, 17, 7)
(6, 18, 0)
(6, 18, 1)
(6, 18, 2)
(6, 18, 3)
(6, 18, 4)
(6, 18, 5)
(6, 18, 6)
(6, 18, 7)
(6, 19, 0)
(6, 19, 1)
(6, 19, 2)
(6, 19, 3)
(6, 19, 4)
(6, 19, 5)
(6, 19, 6)
(6, 19, 7)
(6, 20, 0)
(6, 20, 1)
(6, 20, 2)
(6, 20, 3)
(6, 20, 4)
(6, 20, 5)
(6, 20, 6)
(6, 20, 7)
(6, 21, 0)
(6, 21, 1)
(6, 21, 2)
(6, 21, 3)
(6, 21, 4)
(6, 21, 5)
(6, 21, 6)
(6, 21, 7)
(6, 22, 0)
(6, 22, 1)
(6, 22, 2)
(6, 22, 3)
(6, 22, 4)
(6, 22, 5)
(6, 22, 6)
(6, 22, 7)
(6, 23, 0)
(6, 23, 1)
(6, 23, 2)
(6, 23, 3)
(6, 23, 4)
(6, 23, 5)
(6, 23, 6)
(6, 23, 7)
(6, 24, 0)
(6, 24, 1)
(6, 24, 2)
(6, 24, 3)
(6, 24, 4)
(6, 24, 5)
(6, 24, 6)
(6, 24, 7)
(6, 25, 0)
(6, 25, 1)
(6, 25, 2)
(6, 25, 3)
(6, 25, 4)
(6, 25, 5)
(6, 25, 6)
(6, 25, 7)
(6, 26, 0)
(6, 26, 1)
(6, 26, 2)
(6, 26, 3)
(6, 26, 4)
(6, 26, 5)
(6, 26, 6)
(6, 26, 7)
(6, 27, 0)
(6, 27, 1)
(6, 27, 2)
(6, 27, 3)
(6, 27, 4)
(6, 27, 5)
(6, 27, 6)
(6, 27, 7)
(6, 28, 0)
(6, 28, 1)
(6, 28, 2)
(6, 28, 3)
(6, 28, 4)
(6, 28, 5)
(6, 28, 6)
(6, 28, 7)
(6, 29, 0)
(6, 29, 1)
(6, 29, 2)
(6, 29, 3)
(6, 29, 4)
(6, 29, 5)
(6, 29, 6)
(6, 29, 7)
(6, 30, 0)
(6, 30, 1)
(6, 30, 2)
(6, 30, 3)
(6, 30, 4)
(6, 30, 5)
(6, 30, 6)
(6, 30, 7)
(6, 31, 0)
(6, 31, 1)
(6, 31, 2)
(6, 31, 3)
(6, 31, 4)
(6, 31, 5)
(6, 31, 6)
(6, 31, 7)
(6, 32, 0)
(6, 32, 1)
(6, 32, 2)
(6, 32, 3)
(6, 32, 4)
(6, 32, 5)
(6, 32, 6)
(6, 32, 7)
(6, 33, 0)
(6, 33, 1)
(6, 33, 2)
(6, 33, 3)
(6, 33, 4)
(6, 33, 5)
(6, 33, 6)
(6, 33, 7)
(6, 34, 0)
(6, 34, 1)
(6, 34, 2)
(6, 34, 3)
(6, 34, 4)
(6, 34, 5)
(6, 34, 6)
(6, 34, 7)
(6, 35, 0)
(6, 35, 1)
(6, 35, 2)
(6, 35, 3)
(6, 35, 4)
(6, 35, 5)
(6, 35, 6)
(6, 35, 7)
(6, 36, 0)
(6, 36, 1)
(6, 36, 2)
(6, 36, 3)
(6, 36, 4)
(6, 36, 5)
(6, 36, 6)
(6, 36, 7)
(6, 37, 0)
(6, 37, 1)
(6, 37, 2)
(6, 37, 3)
(6, 37, 4)
(6, 37, 5)
(6, 37, 6)
(6, 37, 7)
(6, 38, 0)
(6, 38, 1)
(6, 38, 2)
(6, 38, 3)
(6, 38, 4)
(6, 38, 5)
(6, 38, 6)
(6, 38, 7)
(6, 39, 0)
(6, 39, 1)
(6, 39, 2)
(6, 39, 3)
(6, 39, 4)
(6, 39, 5)
(6, 39, 6)
(6, 39, 7)
(6, 40, 0)
(6, 40, 1)
(6, 40, 2)
(6, 40, 3)
(6, 40, 4)
(6, 40, 5)
(6, 40, 6)
(6, 40, 7)
(6, 41, 0)
(6, 41, 1)
(6, 41, 2)
(6, 41, 3)
(6, 41, 4)
(6, 41, 5)
(6, 41, 6)
(6, 41, 7)
(6, 42, 0)
(6, 42, 1)
(6, 42, 2)
(6, 42, 3)
(6, 42, 4)
(6, 42, 5)
(6, 42, 6)
(6, 42, 7)
(6, 43, 0)
(6, 43, 1)
(6, 43, 2)
(6, 43, 3)
(6, 43, 4)
(6, 43, 5)
(6, 43, 6)
(6, 43, 7)
(6, 44, 0)
(6, 44, 1)
(6, 44, 2)
(6, 44, 3)
(6, 44, 4)
(6, 44, 5)
(6, 44, 6)
(6, 44, 7)
(6, 45, 0)
(6, 45, 1)
(6, 45, 2)
(6, 45, 3)
(6, 45, 4)
(6, 45, 5)
(6, 45, 6)
(6, 45, 7)
(6, 46, 0)
(6, 46, 1)
(6, 46, 2)
(6, 46, 3)
(6, 46, 4)
(6, 46, 5)
(6, 46, 6)
(6, 46, 7)
(6, 47, 0)
(6, 47, 1)
(6, 47, 2)
(6, 47, 3)
(6, 47, 4)
(6, 47, 5)
(6, 47, 6)
(6, 47, 7)
(6, 48, 0)
(6, 48, 1)
(6, 48, 2)
(6, 48, 3)
(6, 48, 4)
(6, 48, 5)
(6, 48, 6)
(6, 48, 7)
(6, 49, 0)
(6, 49, 1)
(6, 49, 2)
(6, 49, 3)
(6, 49, 4)
(6, 49, 5)
(6, 49, 6)
(6, 49, 7)
(6, 50, 0)
(6, 50, 1)
(6, 50, 2)
(6, 50, 3)
(6, 50, 4)
(6, 50, 5)
(6, 50, 6)
(6, 50, 7)
(6, 51, 0)
(6, 51, 1)
(6, 51, 2)
(6, 51, 3)
(6, 51, 4)
(6, 51, 5)
(6, 51, 6)
(6, 51, 7)
(6, 52, 0)
(6, 52, 1)
(6, 52, 2)
(6, 52, 3)
(6, 52, 4)
(6, 52, 5)
(6, 52, 6)
(6, 52, 7)
(6, 53, 0)
(6, 53, 1)
(6, 53, 2)
(6, 53, 3)
(6, 53, 4)
(6, 53, 5)
(6, 53, 6)
(6, 53, 7)
(6, 54, 0)
(6, 54, 1)
(6, 54, 2)
(6, 54, 3)
(6, 54, 4)
(6, 54, 5)
(6, 54, 6)
(6, 54, 7)
(6, 55, 0)
(6, 55, 1)
(6, 55, 2)
(6, 55, 3)
(6, 55, 4)
(6, 55, 5)
(6, 55, 6)
(6, 55, 7)
(6, 56, 0)
(6, 56, 1)
(6, 56, 2)
(6, 56, 3)
(6, 56, 4)
(6, 56, 5)
(6, 56, 6)
(6, 56, 7)
(6, 57, 0)
(6, 57, 1)
(6, 57, 2)
(6, 57, 3)
(6, 57, 4)
(6, 57, 5)
(6, 57, 6)
(6, 57, 7)
(6, 58, 0)
(6, 58, 1)
(6, 58, 2)
(6, 58, 3)
(6, 58, 4)
(6, 58, 5)
(6, 58, 6)
(6, 58, 7)
(6, 59, 0)
(6, 59, 1)
(6, 59, 2)
(6, 59, 3)
(6, 59, 4)
(6, 59, 5)
(6, 59, 6)
(6, 59, 7)
(6, 60, 0)
(6, 60, 1)
(6, 60, 2)
(6, 60, 3)
(6, 60, 4)
(6, 60, 5)
(6, 60, 6)
(6, 60, 7)
(6, 61, 0)
(6, 61, 1)
(6, 61, 2)
(6, 61, 3)
(6, 61, 4)
(6, 61, 5)
(6, 61, 6)
(6, 61, 7)
(6, 62, 0)
(6, 62, 1)
(6, 62, 2)
(6, 62, 3)
(6, 62, 4)
(6, 62, 5)
(6, 62, 6)
(6, 62, 7)
(6, 63, 0)
(6, 63, 1)
(6, 63, 2)
(6, 63, 3)
(6, 63, 4)
(6, 63, 5)
(6, 63, 6)
(6, 63, 7)
(6, 64, 0)
(6, 64, 1)
(6, 64, 2)
(6, 64, 3)
(6, 64, 4)
(6, 64, 5)
(6, 64, 6)
(6, 64, 7)
(6, 65, 0)
(6, 65, 1)
(6, 65, 2)
(6, 65, 3)
(6, 65, 4)
(6, 65, 5)
(6, 65, 6)
(6, 65, 7)
(6, 66, 0)
(6, 66, 1)
(6, 66, 2)
(6, 66, 3)
(6, 66, 4)
(6, 66, 5)
(6, 66, 6)
(6, 66, 7)
(6, 67, 0)
(6, 67, 1)
(6, 67, 2)
(6, 67, 3)
(6, 67, 4)
(6, 67, 5)
(6, 67, 6)
(6, 67, 7)
(6, 68, 0)
(6, 68, 1)
(6, 68, 2)
(6, 68, 3)
(6, 68, 4)
(6, 68, 5)
(6, 68, 6)
(6, 68, 7)
(6, 69, 0)
(6, 69, 1)
(6, 69, 2)
(6, 69, 3)
(6, 69, 4)
(6, 69, 5)
(6, 69, 6)
(6, 69, 7)
(6, 70, 0)
(6, 70, 1)
(6, 70, 2)
(6, 70, 3)
(6, 70, 4)
(6, 70, 5)
(6, 70, 6)
(6, 70, 7)
(6, 71, 0)
(6, 71, 1)
(6, 71, 2)
(6, 71, 3)
(6, 71, 4)
(6, 71, 5)
(6, 71, 6)
(6, 71, 7)
(6, 72, 0)
(6, 72, 1)
(6, 72, 2)
(6, 72, 3)
(6, 72, 4)
(6, 72, 5)
(6, 72, 6)
(6, 72, 7)
(6, 73, 0)
(6, 73, 1)
(6, 73, 2)
(6, 73, 3)
(6, 73, 4)
(6, 73, 5)
(6, 73, 6)
(6, 73, 7)
(6, 74, 0)
(6, 74, 1)
(6, 74, 2)
(6, 74, 3)
(6, 74, 4)
(6, 74, 5)
(6, 74, 6)
(6, 74, 7)
(6, 75, 0)
(6, 75, 1)
(6, 75, 2)
(6, 75, 3)
(6, 75, 4)
(6, 75, 5)
(6, 75, 6)
(6, 75, 7)
(6, 76, 0)
(6, 76, 1)
(6, 76, 2)
(6, 76, 3)
(6, 76, 4)
(6, 76, 5)
(6, 76, 6)
(6, 76, 7)
(6, 77, 0)
(6, 77, 1)
(6, 77, 2)
(6, 77, 3)
(6, 77, 4)
(6, 77, 5)
(6, 77, 6)
(6, 77, 7)
(6, 78, 0)
(6, 78, 1)
(6, 78, 2)
(6, 78, 3)
(6, 78, 4)
(6, 78, 5)
(6, 78, 6)
(6, 78, 7)
(6, 79, 0)
(6, 79, 1)
(6, 79, 2)
(6, 79, 3)
(6, 79, 4)
(6, 79, 5)
(6, 79, 6)
(6, 79, 7)
(6, 80, 0)
(6, 80, 1)
(6, 80, 2)
(6, 80, 3)
(6, 80, 4)
(6, 80, 5)
(6, 80, 6)
(6, 80, 7)
(6, 81, 0)
(6, 81, 1)
(6, 81, 2)
(6, 81, 3)
(6, 81, 4)
(6, 81, 5)
(6, 81, 6)
(6, 81, 7)
(6, 82, 0)
(6, 82, 1)
(6, 82, 2)
(6, 82, 3)
(6, 82, 4)
(6, 82, 5)
(6, 82, 6)
(6, 82, 7)
(6, 83, 0)
(6, 83, 1)
(6, 83, 2)
(6, 83, 3)
(6, 83, 4)
(6, 83, 5)
(6, 83, 6)
(6, 83, 7)
(6, 84, 0)
(6, 84, 1)
(6, 84, 2)
(6, 84, 3)
(6, 84, 4)
(6, 84, 5)
(6, 84, 6)
(6, 84, 7)
(6, 85, 0)
(6, 85, 1)
(6, 85, 2)
(6, 85, 3)
(6, 85, 4)
(6, 85, 5)
(6, 85, 6)
(6, 85, 7)
(6, 86, 0)
(6, 86, 1)
(6, 86, 2)
(6, 86, 3)
(6, 86, 4)
(6, 86, 5)
(6, 86, 6)
(6, 86, 7)
(6, 87, 0)
(6, 87, 1)
(6, 87, 2)
(6, 87, 3)
(6, 87, 4)
(6, 87, 5)
(6, 87, 6)
(6, 87, 7)
(6, 88, 0)
(6, 88, 1)
(6, 88, 2)
(6, 88, 3)
(6, 88, 4)
(6, 88, 5)
(6, 88, 6)
(6, 88, 7)
(6, 89, 0)
(6, 89, 1)
(6, 89, 2)
(6, 89, 3)
(6, 89, 4)
(6, 89, 5)
(6, 89, 6)
(6, 89, 7)
(6, 90, 0)
(6, 90, 1)
(6, 90, 2)
(6, 90, 3)
(6, 90, 4)
(6, 90, 5)
(6, 90, 6)
(6, 90, 7)
(6, 91, 0)
(6, 91, 1)
(6, 91, 2)
(6, 91, 3)
(6, 91, 4)
(6, 91, 5)
(6, 91, 6)
(6, 91, 7)
(6, 92, 0)
(6, 92, 1)
(6, 92, 2)
(6, 92, 3)
(6, 92, 4)
(6, 92, 5)
(6, 92, 6)
(6, 92, 7)
(6, 93, 0)
(6, 93, 1)
(6, 93, 2)
(6, 93, 3)
(6, 93, 4)
(6, 93, 5)
(6, 93, 6)
(6, 93, 7)
(6, 94, 0)
(6, 94, 1)
(6, 94, 2)
(6, 94, 3)
(6, 94, 4)
(6, 94, 5)
(6, 94, 6)
(6, 94, 7)
(6, 95, 0)
(6, 95, 1)
(6, 95, 2)
(6, 95, 3)
(6, 95, 4)
(6, 95, 5)
(6, 95, 6)
(6, 95, 7)
(6, 96, 0)
(6, 96, 1)
(6, 96, 2)
(6, 96, 3)
(6, 96, 4)
(6, 96, 5)
(6, 96, 6)
(6, 96, 7)
(6, 97, 0)
(6, 97, 1)
(6, 97, 2)
(6, 97, 3)
(6, 97, 4)
(6, 97, 5)
(6, 97, 6)
(6, 97, 7)
(6, 98, 0)
(6, 98, 1)
(6, 98, 2)
(6, 98, 3)
(6, 98, 4)
(6, 98, 5)
(6, 98, 6)
(6, 98, 7)
(6, 99, 0)
(6, 99, 1)
(6, 99, 2)
(6, 99, 3)
(6, 99, 4)
(6, 99, 5)
(6, 99, 6)
(6, 99, 7)
(6, 100, 0)
(6, 100, 1)
(6, 100, 2)
(6, 100, 3)
(6, 100, 4)
(6, 100, 5)
(6, 100, 6)
(6, 100, 7)
(6, 101, 0)
(6, 101, 1)
(6, 101, 2)
(6, 101, 3)
(6, 101, 4)
(6, 101, 5)
(6, 101, 6)
(6, 101, 7)
(6, 102, 0)
(6, 102, 1)
(6, 102, 2)
(6, 102, 3)
(6, 102, 4)
(6, 102, 5)
(6, 102, 6)
(6, 102, 7)
(6, 103, 0)
(6, 103, 1)
(6, 103, 2)
(6, 103, 3)
(6, 103, 4)
(6, 103, 5)
(6, 103, 6)
(6, 103, 7)
(6, 104, 0)
(6, 104, 1)
(6, 104, 2)
(6, 104, 3)
(6, 104, 4)
(6, 104, 5)
(6, 104, 6)
(6, 104, 7)
(6, 105, 0)
(6, 105, 1)
(6, 105, 2)
(6, 105, 3)
(6, 105, 4)
(6, 105, 5)
(6, 105, 6)
(6, 105, 7)
(6, 106, 0)
(6, 106, 1)
(6, 106, 2)
(6, 106, 3)
(6, 106, 4)
(6, 106, 5)
(6, 106, 6)
(6, 106, 7)
(6, 107, 0)
(6, 107, 1)
(6, 107, 2)
(6, 107, 3)
(6, 107, 4)
(6, 107, 5)
(6, 107, 6)
(6, 107, 7)
(6, 108, 0)
(6, 108, 1)
(6, 108, 2)
(6, 108, 3)
(6, 108, 4)
(6, 108, 5)
(6, 108, 6)
(6, 108, 7)
(6, 109, 0)
(6, 109, 1)
(6, 109, 2)
(6, 109, 3)
(6, 109, 4)
(6, 109, 5)
(6, 109, 6)
(6, 109, 7)
(6, 110, 0)
(6, 110, 1)
(6, 110, 2)
(6, 110, 3)
(6, 110, 4)
(6, 110, 5)
(6, 110, 6)
(6, 110, 7)
(6, 111, 0)
(6, 111, 1)
(6, 111, 2)
(6, 111, 3)
(6, 111, 4)
(6, 111, 5)
(6, 111, 6)
(6, 111, 7)
(6, 112, 0)
(6, 112, 1)
(6, 112, 2)
(6, 112, 3)
(6, 112, 4)
(6, 112, 5)
(6, 112, 6)
(6, 112, 7)
(6, 113, 0)
(6, 113, 1)
(6, 113, 2)
(6, 113, 3)
(6, 113, 4)
(6, 113, 5)
(6, 113, 6)
(6, 113, 7)
(6, 114, 0)
(6, 114, 1)
(6, 114, 2)
(6, 114, 3)
(6, 114, 4)
(6, 114, 5)
(6, 114, 6)
(6, 114, 7)
(6, 115, 0)
(6, 115, 1)
(6, 115, 2)
(6, 115, 3)
(6, 115, 4)
(6, 115, 5)
(6, 115, 6)
(6, 115, 7)
(6, 116, 0)
(6, 116, 1)
(6, 116, 2)
(6, 116, 3)
(6, 116, 4)
(6, 116, 5)
(6, 116, 6)
(6, 116, 7)
(6, 117, 0)
(6, 117, 1)
(6, 117, 2)
(6, 117, 3)
(6, 117, 4)
(6, 117, 5)
(6, 117, 6)
(6, 117, 7)
(6, 118, 0)
(6, 118, 1)
(6, 118, 2)
(6, 118, 3)
(6, 118, 4)
(6, 118, 5)
(6, 118, 6)
(6, 118, 7)
(6, 119, 0)
(6, 119, 1)
(6, 119, 2)
(6, 119, 3)
(6, 119, 4)
(6, 119, 5)
(6, 119, 6)
(6, 119, 7)
(6, 120, 0)
(6, 120, 1)
(6, 120, 2)
(6, 120, 3)
(6, 120, 4)
(6, 120, 5)
(6, 120, 6)
(6, 120, 7)
(6, 121, 0)
(6, 121, 1)
(6, 121, 2)
(6, 121, 3)
(6, 121, 4)
(6, 121, 5)
(6, 121, 6)
(6, 121, 7)
(6, 122, 0)
(6, 122, 1)
(6, 122, 2)
(6, 122, 3)
(6, 122, 4)
(6, 122, 5)
(6, 122, 6)
(6, 122, 7)
(6, 123, 0)
(6, 123, 1)
(6, 123, 2)
(6, 123, 3)
(6, 123, 4)
(6, 123, 5)
(6, 123, 6)
(6, 123, 7)
(6, 124, 0)
(6, 124, 1)
(6, 124, 2)
(6, 124, 3)
(6, 124, 4)
(6, 124, 5)
(6, 124, 6)
(6, 124, 7)
(6, 125, 0)
(6, 125, 1)
(6, 125, 2)
(6, 125, 3)
(6, 125, 4)
(6, 125, 5)
(6, 125, 6)
(6, 125, 7)
(6, 126, 0)
(6, 126, 1)
(6, 126, 2)
(6, 126, 3)
(6, 126, 4)
(6, 126, 5)
(6, 126, 6)
(6, 126, 7)
(6, 127, 0)
(6, 127, 1)
(6, 127, 2)
(6, 127, 3)
(6, 127, 4)
(6, 127, 5)
(6, 127, 6)
(6, 127, 7)
(6, 128, 0)
(6, 128, 1)
(6, 128, 2)
(6, 128, 3)
(6, 128, 4)
(6, 128, 5)
(6, 128, 6)
(6, 128, 7)
(6, 129, 0)
(6, 129, 1)
(6, 129, 2)
(6, 129, 3)
(6, 129, 4)
(6, 129, 5)
(6, 129, 6)
(6, 129, 7)
(6, 130, 0)
(6, 130, 1)
(6, 130, 2)
(6, 130, 3)
(6, 130, 4)
(6, 130, 5)
(6, 130, 6)
(6, 130, 7)
(6, 131, 0)
(6, 131, 1)
(6, 131, 2)
(6, 131, 3)
(6, 131, 4)
(6, 131, 5)
(6, 131, 6)
(6, 131, 7)
(6, 132, 0)
(6, 132, 1)
(6, 132, 2)
(6, 132, 3)
(6, 132, 4)
(6, 132, 5)
(6, 132, 6)
(6, 132, 7)
(6, 133, 0)
(6, 133, 1)
(6, 133, 2)
(6, 133, 3)
(6, 133, 4)
(6, 133, 5)
(6, 133, 6)
(6, 133, 7)
(6, 134, 0)
(6, 134, 1)
(6, 134, 2)
(6, 134, 3)
(6, 134, 4)
(6, 134, 5)
(6, 134, 6)
(6, 134, 7)
(6, 135, 0)
(6, 135, 1)
(6, 135, 2)
(6, 135, 3)
(6, 135, 4)
(6, 135, 5)
(6, 135, 6)
(6, 135, 7)
(6, 136, 0)
(6, 136, 1)
(6, 136, 2)
(6, 136, 3)
(6, 136, 4)
(6, 136, 5)
(6, 136, 6)
(6, 136, 7)
(6, 137, 0)
(6, 137, 1)
(6, 137, 2)
(6, 137, 3)
(6, 137, 4)
(6, 137, 5)
(6, 137, 6)
(6, 137, 7)
(6, 138, 0)
(6, 138, 1)
(6, 138, 2)
(6, 138, 3)
(6, 138, 4)
(6, 138, 5)
(6, 138, 6)
(6, 138, 7)
(6, 139, 0)
(6, 139, 1)
(6, 139, 2)
(6, 139, 3)
(6, 139, 4)
(6, 139, 5)
(6, 139, 6)
(6, 139, 7)
(6, 140, 0)
(6, 140, 1)
(6, 140, 2)
(6, 140, 3)
(6, 140, 4)
(6, 140, 5)
(6, 140, 6)
(6, 140, 7)
(6, 141, 0)
(6, 141, 1)
(6, 141, 2)
(6, 141, 3)
(6, 141, 4)
(6, 141, 5)
(6, 141, 6)
(6, 141, 7)
(6, 142, 0)
(6, 142, 1)
(6, 142, 2)
(6, 142, 3)
(6, 142, 4)
(6, 142, 5)
(6, 142, 6)
(6, 142, 7)
(6, 143, 0)
(6, 143, 1)
(6, 143, 2)
(6, 143, 3)
(6, 143, 4)
(6, 143, 5)
(6, 143, 6)
(6, 143, 7)
(6, 144, 0)
(6, 144, 1)
(6, 144, 2)
(6, 144, 3)
(6, 144, 4)
(6, 144, 5)
(6, 144, 6)
(6, 144, 7)
(6, 145, 0)
(6, 145, 1)
(6, 145, 2)
(6, 145, 3)
(6, 145, 4)
(6, 145, 5)
(6, 145, 6)
(6, 145, 7)
(6, 146, 0)
(6, 146, 1)
(6, 146, 2)
(6, 146, 3)
(6, 146, 4)
(6, 146, 5)
(6, 146, 6)
(6, 146, 7)
(6, 147, 0)
(6, 147, 1)
(6, 147, 2)
(6, 147, 3)
(6, 147, 4)
(6, 147, 5)
(6, 147, 6)
(6, 147, 7)
(6, 148, 0)
(6, 148, 1)
(6, 148, 2)
(6, 148, 3)
(6, 148, 4)
(6, 148, 5)
(6, 148, 6)
(6, 148, 7)
(6, 149, 0)
(6, 149, 1)
(6, 149, 2)
(6, 149, 3)
(6, 149, 4)
(6, 149, 5)
(6, 149, 6)
(6, 149, 7)
(6, 150, 0)
(6, 150, 1)
(6, 150, 2)
(6, 150, 3)
(6, 150, 4)
(6, 150, 5)
(6, 150, 6)
(6, 150, 7)
(6, 151, 0)
(6, 151, 1)
(6, 151, 2)
(6, 151, 3)
(6, 151, 4)
(6, 151, 5)
(6, 151, 6)
(6, 151, 7)
(6, 152, 0)
(6, 152, 1)
(6, 152, 2)
(6, 152, 3)
(6, 152, 4)
(6, 152, 5)
(6, 152, 6)
(6, 152, 7)
(6, 153, 0)
(6, 153, 1)
(6, 153, 2)
(6, 153, 3)
(6, 153, 4)
(6, 153, 5)
(6, 153, 6)
(6, 153, 7)
(6, 154, 0)
(6, 154, 1)
(6, 154, 2)
(6, 154, 3)
(6, 154, 4)
(6, 154, 5)
(6, 154, 6)
(6, 154, 7)
(6, 155, 0)
(6, 155, 1)
(6, 155, 2)
(6, 155, 3)
(6, 155, 4)
(6, 155, 5)
(6, 155, 6)
(6, 155, 7)
(6, 156, 0)
(6, 156, 1)
(6, 156, 2)
(6, 156, 3)
(6, 156, 4)
(6, 156, 5)
(6, 156, 6)
(6, 156, 7)
(6, 157, 0)
(6, 157, 1)
(6, 157, 2)
(6, 157, 3)
(6, 157, 4)
(6, 157, 5)
(6, 157, 6)
(6, 157, 7)
(6, 158, 0)
(6, 158, 1)
(6, 158, 2)
(6, 158, 3)
(6, 158, 4)
(6, 158, 5)
(6, 158, 6)
(6, 158, 7)
(6, 159, 0)
(6, 159, 1)
(6, 159, 2)
(6, 159, 3)
(6, 159, 4)
(6, 159, 5)
(6, 159, 6)
(6, 159, 7)
(6, 160, 0)
(6, 160, 1)
(6, 160, 2)
(6, 160, 3)
(6, 160, 4)
(6, 160, 5)
(6, 160, 6)
(6, 160, 7)
(6, 161, 0)
(6, 161, 1)
(6, 161, 2)
(6, 161, 3)
(6, 161, 4)
(6, 161, 5)
(6, 161, 6)
(6, 161, 7)
(6, 162, 0)
(6, 162, 1)
(6, 162, 2)
(6, 162, 3)
(6, 162, 4)
(6, 162, 5)
(6, 162, 6)
(6, 162, 7)
(6, 163, 0)
(6, 163, 1)
(6, 163, 2)
(6, 163, 3)
(6, 163, 4)
(6, 163, 5)
(6, 163, 6)
(6, 163, 7)
(6, 164, 0)
(6, 164, 1)
(6, 164, 2)
(6, 164, 3)
(6, 164, 4)
(6, 164, 5)
(6, 164, 6)
(6, 164, 7)
(6, 165, 0)
(6, 165, 1)
(6, 165, 2)
(6, 165, 3)
(6, 165, 4)
(6, 165, 5)
(6, 165, 6)
(6, 165, 7)
(6, 166, 0)
(6, 166, 1)
(6, 166, 2)
(6, 166, 3)
(6, 166, 4)
(6, 166, 5)
(6, 166, 6)
(6, 166, 7)
(6, 167, 0)
(6, 167, 1)
(6, 167, 2)
(6, 167, 3)
(6, 167, 4)
(6, 167, 5)
(6, 167, 6)
(6, 167, 7)
(6, 168, 0)
(6, 168, 1)
(6, 168, 2)
(6, 168, 3)
(6, 168, 4)
(6, 168, 5)
(6, 168, 6)
(6, 168, 7)
(6, 169, 0)
(6, 169, 1)
(6, 169, 2)
(6, 169, 3)
(6, 169, 4)
(6, 169, 5)
(6, 169, 6)
(6, 169, 7)
(6, 170, 0)
(6, 170, 1)
(6, 170, 2)
(6, 170, 3)
(6, 170, 4)
(6, 170, 5)
(6, 170, 6)
(6, 170, 7)
(6, 171, 0)
(6, 171, 1)
(6, 171, 2)
(6, 171, 3)
(6, 171, 4)
(6, 171, 5)
(6, 171, 6)
(6, 171, 7)
(6, 172, 0)
(6, 172, 1)
(6, 172, 2)
(6, 172, 3)
(6, 172, 4)
(6, 172, 5)
(6, 172, 6)
(6, 172, 7)
(6, 173, 0)
(6, 173, 1)
(6, 173, 2)
(6, 173, 3)
(6, 173, 4)
(6, 173, 5)
(6, 173, 6)
(6, 173, 7)
(6, 174, 0)
(6, 174, 1)
(6, 174, 2)
(6, 174, 3)
(6, 174, 4)
(6, 174, 5)
(6, 174, 6)
(6, 174, 7)
(6, 175, 0)
(6, 175, 1)
(6, 175, 2)
(6, 175, 3)
(6, 175, 4)
(6, 175, 5)
(6, 175, 6)
(6, 175, 7)
(6, 176, 0)
(6, 176, 1)
(6, 176, 2)
(6, 176, 3)
(6, 176, 4)
(6, 176, 5)
(6, 176, 6)
(6, 176, 7)
(6, 177, 0)
(6, 177, 1)
(6, 177, 2)
(6, 177, 3)
(6, 177, 4)
(6, 177, 5)
(6, 177, 6)
(6, 177, 7)
(6, 178, 0)
(6, 178, 1)
(6, 178, 2)
(6, 178, 3)
(6, 178, 4)
(6, 178, 5)
(6, 178, 6)
(6, 178, 7)
(6, 179, 0)
(6, 179, 1)
(6, 179, 2)
(6, 179, 3)
(6, 179, 4)
(6, 179, 5)
(6, 179, 6)
(6, 179, 7)
(6, 180, 0)
(6, 180, 1)
(6, 180, 2)
(6, 180, 3)
(6, 180, 4)
(6, 180, 5)
(6, 180, 6)
(6, 180, 7)
(6, 181, 0)
(6, 181, 1)
(6, 181, 2)
(6, 181, 3)
(6, 181, 4)
(6, 181, 5)
(6, 181, 6)
(6, 181, 7)
(6, 182, 0)
(6, 182, 1)
(6, 182, 2)
(6, 182, 3)
(6, 182, 4)
(6, 182, 5)
(6, 182, 6)
(6, 182, 7)
(6, 183, 0)
(6, 183, 1)
(6, 183, 2)
(6, 183, 3)
(6, 183, 4)
(6, 183, 5)
(6, 183, 6)
(6, 183, 7)
(6, 184, 0)
(6, 184, 1)
(6, 184, 2)
(6, 184, 3)
(6, 184, 4)
(6, 184, 5)
(6, 184, 6)
(6, 184, 7)
(6, 185, 0)
(6, 185, 1)
(6, 185, 2)
(6, 185, 3)
(6, 185, 4)
(6, 185, 5)
(6, 185, 6)
(6, 185, 7)
(6, 186, 0)
(6, 186, 1)
(6, 186, 2)
(6, 186, 3)
(6, 186, 4)
(6, 186, 5)
(6, 186, 6)
(6, 186, 7)
(6, 187, 0)
(6, 187, 1)
(6, 187, 2)
(6, 187, 3)
(6, 187, 4)
(6, 187, 5)
(6, 187, 6)
(6, 187, 7)
(6, 188, 0)
(6, 188, 1)
(6, 188, 2)
(6, 188, 3)
(6, 188, 4)
(6, 188, 5)
(6, 188, 6)
(6, 188, 7)
(6, 189, 0)
(6, 189, 1)
(6, 189, 2)
(6, 189, 3)
(6, 189, 4)
(6, 189, 5)
(6, 189, 6)
(6, 189, 7)
(6, 190, 0)
(6, 190, 1)
(6, 190, 2)
(6, 190, 3)
(6, 190, 4)
(6, 190, 5)
(6, 190, 6)
(6, 190, 7)
(6, 191, 0)
(6, 191, 1)
(6, 191, 2)
(6, 191, 3)
(6, 191, 4)
(6, 191, 5)
(6, 191, 6)
(6, 191, 7)
(6, 192, 0)
(6, 192, 1)
(6, 192, 2)
(6, 192, 3)
(6, 192, 4)
(6, 192, 5)
(6, 192, 6)
(6, 192, 7)
(6, 193, 0)
(6, 193, 1)
(6, 193, 2)
(6, 193, 3)
(6, 193, 4)
(6, 193, 5)
(6, 193, 6)
(6, 193, 7)
(6, 194, 0)
(6, 194, 1)
(6, 194, 2)
(6, 194, 3)
(6, 194, 4)
(6, 194, 5)
(6, 194, 6)
(6, 194, 7)
(6, 195, 0)
(6, 195, 1)
(6, 195, 2)
(6, 195, 3)
(6, 195, 4)
(6, 195, 5)
(6, 195, 6)
(6, 195, 7)
(6, 196, 0)
(6, 196, 1)
(6, 196, 2)
(6, 196, 3)
(6, 196, 4)
(6, 196, 5)
(6, 196, 6)
(6, 196, 7)
(6, 197, 0)
(6, 197, 1)
(6, 197, 2)
(6, 197, 3)
(6, 197, 4)
(6, 197, 5)
(6, 197, 6)
(6, 197, 7)
(6, 198, 0)
(6, 198, 1)
(6, 198, 2)
(6, 198, 3)
(6, 198, 4)
(6, 198, 5)
(6, 198, 6)
(6, 198, 7)
(6, 199, 0)
(6, 199, 1)
(6, 199, 2)
(6, 199, 3)
(6, 199, 4)
(6, 199, 5)
(6, 199, 6)
(6, 199, 7)
(6, 200, 0)
(6, 200, 1)
(6, 200, 2)
(6, 200, 3)
(6, 200, 4)
(6, 200, 5)
(6, 200, 6)
(6, 200, 7)
(6, 201, 0)
(6, 201, 1)
(6, 201, 2)
(6, 201, 3)
(6, 201, 4)
(6, 201, 5)
(6, 201, 6)
(6, 201, 7)
(6, 202, 0)
(6, 202, 1)
(6, 202, 2)
(6, 202, 3)
(6, 202, 4)
(6, 202, 5)
(6, 202, 6)
(6, 202, 7)
(6, 203, 0)
(6, 203, 1)
(6, 203, 2)
(6, 203, 3)
(6, 203, 4)
(6, 203, 5)
(6, 203, 6)
(6, 203, 7)
(6, 204, 0)
(6, 204, 1)
(6, 204, 2)
(6, 204, 3)
(6, 204, 4)
(6, 204, 5)
(6, 204, 6)
(6, 204, 7)
(6, 205, 0)
(6, 205, 1)
(6, 205, 2)
(6, 205, 3)
(6, 205, 4)
(6, 205, 5)
(6, 205, 6)
(6, 205, 7)
(6, 206, 0)
(6, 206, 1)
(6, 206, 2)
(6, 206, 3)
(6, 206, 4)
(6, 206, 5)
(6, 206, 6)
(6, 206, 7)
(6, 207, 0)
(6, 207, 1)
(6, 207, 2)
(6, 207, 3)
(6, 207, 4)
(6, 207, 5)
(6, 207, 6)
(6, 207, 7)
(6, 208, 0)
(6, 208, 1)
(6, 208, 2)
(6, 208, 3)
(6, 208, 4)
(6, 208, 5)
(6, 208, 6)
(6, 208, 7)
(6, 209, 0)
(6, 209, 1)
(6, 209, 2)
(6, 209, 3)
(6, 209, 4)
(6, 209, 5)
(6, 209, 6)
(6, 209, 7)
(6, 210, 0)
(6, 210, 1)
(6, 210, 2)
(6, 210, 3)
(6, 210, 4)
(6, 210, 5)
(6, 210, 6)
(6, 210, 7)
(6, 211, 0)
(6, 211, 1)
(6, 211, 2)
(6, 211, 3)
(6, 211, 4)
(6, 211, 5)
(6, 211, 6)
(6, 211, 7)
(6, 212, 0)
(6, 212, 1)
(6, 212, 2)
(6, 212, 3)
(6, 212, 4)
(6, 212, 5)
(6, 212, 6)
(6, 212, 7)
(6, 213, 0)
(6, 213, 1)
(6, 213, 2)
(6, 213, 3)
(6, 213, 4)
(6, 213, 5)
(6, 213, 6)
(6, 213, 7)
(6, 214, 0)
(6, 214, 1)
(6, 214, 2)
(6, 214, 3)
(6, 214, 4)
(6, 214, 5)
(6, 214, 6)
(6, 214, 7)
(6, 215, 0)
(6, 215, 1)
(6, 215, 2)
(6, 215, 3)
(6, 215, 4)
(6, 215, 5)
(6, 215, 6)
(6, 215, 7)
(6, 216, 0)
(6, 216, 1)
(6, 216, 2)
(6, 216, 3)
(6, 216, 4)
(6, 216, 5)
(6, 216, 6)
(6, 216, 7)
(6, 217, 0)
(6, 217, 1)
(6, 217, 2)
(6, 217, 3)
(6, 217, 4)
(6, 217, 5)
(6, 217, 6)
(6, 217, 7)
(6, 218, 0)
(6, 218, 1)
(6, 218, 2)
(6, 218, 3)
(6, 218, 4)
(6, 218, 5)
(6, 218, 6)
(6, 218, 7)
(6, 219, 0)
(6, 219, 1)
(6, 219, 2)
(6, 219, 3)
(6, 219, 4)
(6, 219, 5)
(6, 219, 6)
(6, 219, 7)
(6, 220, 0)
(6, 220, 1)
(6, 220, 2)
(6, 220, 3)
(6, 220, 4)
(6, 220, 5)
(6, 220, 6)
(6, 220, 7)
(6, 221, 0)
(6, 221, 1)
(6, 221, 2)
(6, 221, 3)
(6, 221, 4)
(6, 221, 5)
(6, 221, 6)
(6, 221, 7)
(6, 222, 0)
(6, 222, 1)
(6, 222, 2)
(6, 222, 3)
(6, 222, 4)
(6, 222, 5)
(6, 222, 6)
(6, 222, 7)
(6, 223, 0)
(6, 223, 1)
(6, 223, 2)
(6, 223, 3)
(6, 223, 4)
(6, 223, 5)
(6, 223, 6)
(6, 223, 7)
(6, 224, 0)
(6, 224, 1)
(6, 224, 2)
(6, 224, 3)
(6, 224, 4)
(6, 224, 5)
(6, 224, 6)
(6, 224, 7)
(6, 225, 0)
(6, 225, 1)
(6, 225, 2)
(6, 225, 3)
(6, 225, 4)
(6, 225, 5)
(6, 225, 6)
(6, 225, 7)
(6, 226, 0)
(6, 226, 1)
(6, 226, 2)
(6, 226, 3)
(6, 226, 4)
(6, 226, 5)
(6, 226, 6)
(6, 226, 7)
(6, 227, 0)
(6, 227, 1)
(6, 227, 2)
(6, 227, 3)
(6, 227, 4)
(6, 227, 5)
(6, 227, 6)
(6, 227, 7)
(6, 228, 0)
(6, 228, 1)
(6, 228, 2)
(6, 228, 3)
(6, 228, 4)
(6, 228, 5)
(6, 228, 6)
(6, 228, 7)
(6, 229, 0)
(6, 229, 1)
(6, 229, 2)
(6, 229, 3)
(6, 229, 4)
(6, 229, 5)
(6, 229, 6)
(6, 229, 7)
(6, 230, 0)
(6, 230, 1)
(6, 230, 2)
(6, 230, 3)
(6, 230, 4)
(6, 230, 5)
(6, 230, 6)
(6, 230, 7)
(6, 231, 0)
(6, 231, 1)
(6, 231, 2)
(6, 231, 3)
(6, 231, 4)
(6, 231, 5)
(6, 231, 6)
(6, 231, 7)
(6, 232, 0)
(6, 232, 1)
(6, 232, 2)
(6, 232, 3)
(6, 232, 4)
(6, 232, 5)
(6, 232, 6)
(6, 232, 7)
(6, 233, 0)
(6, 233, 1)
(6, 233, 2)
(6, 233, 3)
(6, 233, 4)
(6, 233, 5)
(6, 233, 6)
(6, 233, 7)
(6, 234, 0)
(6, 234, 1)
(6, 234, 2)
(6, 234, 3)
(6, 234, 4)
(6, 234, 5)
(6, 234, 6)
(6, 234, 7)
(6, 235, 0)
(6, 235, 1)
(6, 235, 2)
(6, 235, 3)
(6, 235, 4)
(6, 235, 5)
(6, 235, 6)
(6, 235, 7)
(6, 236, 0)
(6, 236, 1)
(6, 236, 2)
(6, 236, 3)
(6, 236, 4)
(6, 236, 5)
(6, 236, 6)
(6, 236, 7)
(6, 237, 0)
(6, 237, 1)
(6, 237, 2)
(6, 237, 3)
(6, 237, 4)
(6, 237, 5)
(6, 237, 6)
(6, 237, 7)
(6, 238, 0)
(6, 238, 1)
(6, 238, 2)
(6, 238, 3)
(6, 238, 4)
(6, 238, 5)
(6, 238, 6)
(6, 238, 7)
(6, 239, 0)
(6, 239, 1)
(6, 239, 2)
(6, 239, 3)
(6, 239, 4)
(6, 239, 5)
(6, 239, 6)
(6, 239, 7)
(6, 240, 0)
(6, 240, 1)
(6, 240, 2)
(6, 240, 3)
(6, 240, 4)
(6, 240, 5)
(6, 240, 6)
(6, 240, 7)
(6, 241, 0)
(6, 241, 1)
(6, 241, 2)
(6, 241, 3)
(6, 241, 4)
(6, 241, 5)
(6, 241, 6)
(6, 241, 7)
(6, 242, 0)
(6, 242, 1)
(6, 242, 2)
(6, 242, 3)
(6, 242, 4)
(6, 242, 5)
(6, 242, 6)
(6, 242, 7)
(6, 243, 0)
(6, 243, 1)
(6, 243, 2)
(6, 243, 3)
(6, 243, 4)
(6, 243, 5)
(6, 243, 6)
(6, 243, 7)
(6, 244, 0)
(6, 244, 1)
(6, 244, 2)
(6, 244, 3)
(6, 244, 4)
(6, 244, 5)
(6, 244, 6)
(6, 244, 7)
(6, 245, 0)
(6, 245, 1)
(6, 245, 2)
(6, 245, 3)
(6, 245, 4)
(6, 245, 5)
(6, 245, 6)
(6, 245, 7)
(6, 246, 0)
(6, 246, 1)
(6, 246, 2)
(6, 246, 3)
(6, 246, 4)
(6, 246, 5)
(6, 246, 6)
(6, 246, 7)
(6, 247, 0)
(6, 247, 1)
(6, 247, 2)
(6, 247, 3)
(6, 247, 4)
(6, 247, 5)
(6, 247, 6)
(6, 247, 7)
(6, 248, 0)
(6, 248, 1)
(6, 248, 2)
(6, 248, 3)
(6, 248, 4)
(6, 248, 5)
(6, 248, 6)
(6, 248, 7)
(6, 249, 0)
(6, 249, 1)
(6, 249, 2)
(6, 249, 3)
(6, 249, 4)
(6, 249, 5)
(6, 249, 6)
(6, 249, 7)
(6, 250, 0)
(6, 250, 1)
(6, 250, 2)
(6, 250, 3)
(6, 250, 4)
(6, 250, 5)
(6, 250, 6)
(6, 250, 7)
(6, 251, 0)
(6, 251, 1)
(6, 251, 2)
(6, 251, 3)
(6, 251, 4)
(6, 251, 5)
(6, 251, 6)
(6, 251, 7)
(6, 252, 0)
(6, 252, 1)
(6, 252, 2)
(6, 252, 3)
(6, 252, 4)
(6, 252, 5)
(6, 252, 6)
(6, 252, 7)
(6, 253, 0)
(6, 253, 1)
(6, 253, 2)
(6, 253, 3)
(6, 253, 4)
(6, 253, 5)
(6, 253, 6)
(6, 253, 7)
(6, 254, 0)
(6, 254, 1)
(6, 254, 2)
(6, 254, 3)
(6, 254, 4)
(6, 254, 5)
(6, 254, 6)
(6, 254, 7)
(6, 255, 0)
(6, 255, 1)
(6, 255, 2)
(6, 255, 3)
(6, 255, 4)
(6, 255, 5)
(6, 255, 6)
(6, 255, 7)
(7, 0, 0)
(7, 0, 1)
(7, 0, 2)
(7, 0, 3)
(7, 0, 4)
(7, 0, 5)
(7, 0, 6)
(7, 0, 7)
(7, 1, 0)
(7, 1, 1)
(7, 1, 2)
(7, 1, 3)
(7, 1, 4)
(7, 1, 5)
(7, 1, 6)
(7, 1, 7)
(7, 2, 0)
(7, 2, 1)
(7, 2, 2)
(7, 2, 3)
(7, 2, 4)
(7, 2, 5)
(7, 2, 6)
(7, 2, 7)
(7, 3, 0)
(7, 3, 1)
(7, 3, 2)
(7, 3, 3)
(7, 3, 4)
(7, 3, 5)
(7, 3, 6)
(7, 3, 7)
(7, 4, 0)
(7, 4, 1)
(7, 4, 2)
(7, 4, 3)
(7, 4, 4)
(7, 4, 5)
(7, 4, 6)
(7, 4, 7)
(7, 5, 0)
(7, 5, 1)
(7, 5, 2)
(7, 5, 3)
(7, 5, 4)
(7, 5, 5)
(7, 5, 6)
(7, 5, 7)
(7, 6, 0)
(7, 6, 1)
(7, 6, 2)
(7, 6, 3)
(7, 6, 4)
(7, 6, 5)
(7, 6, 6)
(7, 6, 7)
(7, 7, 0)
(7, 7, 1)
(7, 7, 2)
(7, 7, 3)
(7, 7, 4)
(7, 7, 5)
(7, 7, 6)
(7, 7, 7)
(7, 8, 0)
(7, 8, 1)
(7, 8, 2)
(7, 8, 3)
(7, 8, 4)
(7, 8, 5)
(7, 8, 6)
(7, 8, 7)
(7, 9, 0)
(7, 9, 1)
(7, 9, 2)
(7, 9, 3)
(7, 9, 4)
(7, 9, 5)
(7, 9, 6)
(7, 9, 7)
(7, 10, 0)
(7, 10, 1)
(7, 10, 2)
(7, 10, 3)
(7, 10, 4)
(7, 10, 5)
(7, 10, 6)
(7, 10, 7)
(7, 11, 0)
(7, 11, 1)
(7, 11, 2)
(7, 11, 3)
(7, 11, 4)
(7, 11, 5)
(7, 11, 6)
(7, 11, 7)
(7, 12, 0)
(7, 12, 1)
(7, 12, 2)
(7, 12, 3)
(7, 12, 4)
(7, 12, 5)
(7, 12, 6)
(7, 12, 7)
(7, 13, 0)
(7, 13, 1)
(7, 13, 2)
(7, 13, 3)
(7, 13, 4)
(7, 13, 5)
(7, 13, 6)
(7, 13, 7)
(7, 14, 0)
(7, 14, 1)
(7, 14, 2)
(7, 14, 3)
(7, 14, 4)
(7, 14, 5)
(7, 14, 6)
(7, 14, 7)
(7, 15, 0)
(7, 15, 1)
(7, 15, 2)
(7, 15, 3)
(7, 15, 4)
(7, 15, 5)
(7, 15, 6)
(7, 15, 7)
(7, 16, 0)
(7, 16, 1)
(7, 16, 2)
(7, 16, 3)
(7, 16, 4)
(7, 16, 5)
(7, 16, 6)
(7, 16, 7)
(7, 17, 0)
(7, 17, 1)
(7, 17, 2)
(7, 17, 3)
(7, 17, 4)
(7, 17, 5)
(7, 17, 6)
(7, 17, 7)
(7, 18, 0)
(7, 18, 1)
(7, 18, 2)
(7, 18, 3)
(7, 18, 4)
(7, 18, 5)
(7, 18, 6)
(7, 18, 7)
(7, 19, 0)
(7, 19, 1)
(7, 19, 2)
(7, 19, 3)
(7, 19, 4)
(7, 19, 5)
(7, 19, 6)
(7, 19, 7)
(7, 20, 0)
(7, 20, 1)
(7, 20, 2)
(7, 20, 3)
(7, 20, 4)
(7, 20, 5)
(7, 20, 6)
(7, 20, 7)
(7, 21, 0)
(7, 21, 1)
(7, 21, 2)
(7, 21, 3)
(7, 21, 4)
(7, 21, 5)
(7, 21, 6)
(7, 21, 7)
(7, 22, 0)
(7, 22, 1)
(7, 22, 2)
(7, 22, 3)
(7, 22, 4)
(7, 22, 5)
(7, 22, 6)
(7, 22, 7)
(7, 23, 0)
(7, 23, 1)
(7, 23, 2)
(7, 23, 3)
(7, 23, 4)
(7, 23, 5)
(7, 23, 6)
(7, 23, 7)
(7, 24, 0)
(7, 24, 1)
(7, 24, 2)
(7, 24, 3)
(7, 24, 4)
(7, 24, 5)
(7, 24, 6)
(7, 24, 7)
(7, 25, 0)
(7, 25, 1)
(7, 25, 2)
(7, 25, 3)
(7, 25, 4)
(7, 25, 5)
(7, 25, 6)
(7, 25, 7)
(7, 26, 0)
(7, 26, 1)
(7, 26, 2)
(7, 26, 3)
(7, 26, 4)
(7, 26, 5)
(7, 26, 6)
(7, 26, 7)
(7, 27, 0)
(7, 27, 1)
(7, 27, 2)
(7, 27, 3)
(7, 27, 4)
(7, 27, 5)
(7, 27, 6)
(7, 27, 7)
(7, 28, 0)
(7, 28, 1)
(7, 28, 2)
(7, 28, 3)
(7, 28, 4)
(7, 28, 5)
(7, 28, 6)
(7, 28, 7)
(7, 29, 0)
(7, 29, 1)
(7, 29, 2)
(7, 29, 3)
(7, 29, 4)
(7, 29, 5)
(7, 29, 6)
(7, 29, 7)
(7, 30, 0)
(7, 30, 1)
(7, 30, 2)
(7, 30, 3)
(7, 30, 4)
(7, 30, 5)
(7, 30, 6)
(7, 30, 7)
(7, 31, 0)
(7, 31, 1)
(7, 31, 2)
(7, 31, 3)
(7, 31, 4)
(7, 31, 5)
(7, 31, 6)
(7, 31, 7)
(7, 32, 0)
(7, 32, 1)
(7, 32, 2)
(7, 32, 3)
(7, 32, 4)
(7, 32, 5)
(7, 32, 6)
(7, 32, 7)
(7, 33, 0)
(7, 33, 1)
(7, 33, 2)
(7, 33, 3)
(7, 33, 4)
(7, 33, 5)
(7, 33, 6)
(7, 33, 7)
(7, 34, 0)
(7, 34, 1)
(7, 34, 2)
(7, 34, 3)
(7, 34, 4)
(7, 34, 5)
(7, 34, 6)
(7, 34, 7)
(7, 35, 0)
(7, 35, 1)
(7, 35, 2)
(7, 35, 3)
(7, 35, 4)
(7, 35, 5)
(7, 35, 6)
(7, 35, 7)
(7, 36, 0)
(7, 36, 1)
(7, 36, 2)
(7, 36, 3)
(7, 36, 4)
(7, 36, 5)
(7, 36, 6)
(7, 36, 7)
(7, 37, 0)
(7, 37, 1)
(7, 37, 2)
(7, 37, 3)
(7, 37, 4)
(7, 37, 5)
(7, 37, 6)
(7, 37, 7)
(7, 38, 0)
(7, 38, 1)
(7, 38, 2)
(7, 38, 3)
(7, 38, 4)
(7, 38, 5)
(7, 38, 6)
(7, 38, 7)
(7, 39, 0)
(7, 39, 1)
(7, 39, 2)
(7, 39, 3)
(7, 39, 4)
(7, 39, 5)
(7, 39, 6)
(7, 39, 7)
(7, 40, 0)
(7, 40, 1)
(7, 40, 2)
(7, 40, 3)
(7, 40, 4)
(7, 40, 5)
(7, 40, 6)
(7, 40, 7)
(7, 41, 0)
(7, 41, 1)
(7, 41, 2)
(7, 41, 3)
(7, 41, 4)
(7, 41, 5)
(7, 41, 6)
(7, 41, 7)
(7, 42, 0)
(7, 42, 1)
(7, 42, 2)
(7, 42, 3)
(7, 42, 4)
(7, 42, 5)
(7, 42, 6)
(7, 42, 7)
(7, 43, 0)
(7, 43, 1)
(7, 43, 2)
(7, 43, 3)
(7, 43, 4)
(7, 43, 5)
(7, 43, 6)
(7, 43, 7)
(7, 44, 0)
(7, 44, 1)
(7, 44, 2)
(7, 44, 3)
(7, 44, 4)
(7, 44, 5)
(7, 44, 6)
(7, 44, 7)
(7, 45, 0)
(7, 45, 1)
(7, 45, 2)
(7, 45, 3)
(7, 45, 4)
(7, 45, 5)
(7, 45, 6)
(7, 45, 7)
(7, 46, 0)
(7, 46, 1)
(7, 46, 2)
(7, 46, 3)
(7, 46, 4)
(7, 46, 5)
(7, 46, 6)
(7, 46, 7)
(7, 47, 0)
(7, 47, 1)
(7, 47, 2)
(7, 47, 3)
(7, 47, 4)
(7, 47, 5)
(7, 47, 6)
(7, 47, 7)
(7, 48, 0)
(7, 48, 1)
(7, 48, 2)
(7, 48, 3)
(7, 48, 4)
(7, 48, 5)
(7, 48, 6)
(7, 48, 7)
(7, 49, 0)
(7, 49, 1)
(7, 49, 2)
(7, 49, 3)
(7, 49, 4)
(7, 49, 5)
(7, 49, 6)
(7, 49, 7)
(7, 50, 0)
(7, 50, 1)
(7, 50, 2)
(7, 50, 3)
(7, 50, 4)
(7, 50, 5)
(7, 50, 6)
(7, 50, 7)
(7, 51, 0)
(7, 51, 1)
(7, 51, 2)
(7, 51, 3)
(7, 51, 4)
(7, 51, 5)
(7, 51, 6)
(7, 51, 7)
(7, 52, 0)
(7, 52, 1)
(7, 52, 2)
(7, 52, 3)
(7, 52, 4)
(7, 52, 5)
(7, 52, 6)
(7, 52, 7)
(7, 53, 0)
(7, 53, 1)
(7, 53, 2)
(7, 53, 3)
(7, 53, 4)
(7, 53, 5)
(7, 53, 6)
(7, 53, 7)
(7, 54, 0)
(7, 54, 1)
(7, 54, 2)
(7, 54, 3)
(7, 54, 4)
(7, 54, 5)
(7, 54, 6)
(7, 54, 7)
(7, 55, 0)
(7, 55, 1)
(7, 55, 2)
(7, 55, 3)
(7, 55, 4)
(7, 55, 5)
(7, 55, 6)
(7, 55, 7)
(7, 56, 0)
(7, 56, 1)
(7, 56, 2)
(7, 56, 3)
(7, 56, 4)
(7, 56, 5)
(7, 56, 6)
(7, 56, 7)
(7, 57, 0)
(7, 57, 1)
(7, 57, 2)
(7, 57, 3)
(7, 57, 4)
(7, 57, 5)
(7, 57, 6)
(7, 57, 7)
(7, 58, 0)
(7, 58, 1)
(7, 58, 2)
(7, 58, 3)
(7, 58, 4)
(7, 58, 5)
(7, 58, 6)
(7, 58, 7)
(7, 59, 0)
(7, 59, 1)
(7, 59, 2)
(7, 59, 3)
(7, 59, 4)
(7, 59, 5)
(7, 59, 6)
(7, 59, 7)
(7, 60, 0)
(7, 60, 1)
(7, 60, 2)
(7, 60, 3)
(7, 60, 4)
(7, 60, 5)
(7, 60, 6)
(7, 60, 7)
(7, 61, 0)
(7, 61, 1)
(7, 61, 2)
(7, 61, 3)
(7, 61, 4)
(7, 61, 5)
(7, 61, 6)
(7, 61, 7)
(7, 62, 0)
(7, 62, 1)
(7, 62, 2)
(7, 62, 3)
(7, 62, 4)
(7, 62, 5)
(7, 62, 6)
(7, 62, 7)
(7, 63, 0)
(7, 63, 1)
(7, 63, 2)
(7, 63, 3)
(7, 63, 4)
(7, 63, 5)
(7, 63, 6)
(7, 63, 7)
(7, 64, 0)
(7, 64, 1)
(7, 64, 2)
(7, 64, 3)
(7, 64, 4)
(7, 64, 5)
(7, 64, 6)
(7, 64, 7)
(7, 65, 0)
(7, 65, 1)
(7, 65, 2)
(7, 65, 3)
(7, 65, 4)
(7, 65, 5)
(7, 65, 6)
(7, 65, 7)
(7, 66, 0)
(7, 66, 1)
(7, 66, 2)
(7, 66, 3)
(7, 66, 4)
(7, 66, 5)
(7, 66, 6)
(7, 66, 7)
(7, 67, 0)
(7, 67, 1)
(7, 67, 2)
(7, 67, 3)
(7, 67, 4)
(7, 67, 5)
(7, 67, 6)
(7, 67, 7)
(7, 68, 0)
(7, 68, 1)
(7, 68, 2)
(7, 68, 3)
(7, 68, 4)
(7, 68, 5)
(7, 68, 6)
(7, 68, 7)
(7, 69, 0)
(7, 69, 1)
(7, 69, 2)
(7, 69, 3)
(7, 69, 4)
(7, 69, 5)
(7, 69, 6)
(7, 69, 7)
(7, 70, 0)
(7, 70, 1)
(7, 70, 2)
(7, 70, 3)
(7, 70, 4)
(7, 70, 5)
(7, 70, 6)
(7, 70, 7)
(7, 71, 0)
(7, 71, 1)
(7, 71, 2)
(7, 71, 3)
(7, 71, 4)
(7, 71, 5)
(7, 71, 6)
(7, 71, 7)
(7, 72, 0)
(7, 72, 1)
(7, 72, 2)
(7, 72, 3)
(7, 72, 4)
(7, 72, 5)
(7, 72, 6)
(7, 72, 7)
(7, 73, 0)
(7, 73, 1)
(7, 73, 2)
(7, 73, 3)
(7, 73, 4)
(7, 73, 5)
(7, 73, 6)
(7, 73, 7)
(7, 74, 0)
(7, 74, 1)
(7, 74, 2)
(7, 74, 3)
(7, 74, 4)
(7, 74, 5)
(7, 74, 6)
(7, 74, 7)
(7, 75, 0)
(7, 75, 1)
(7, 75, 2)
(7, 75, 3)
(7, 75, 4)
(7, 75, 5)
(7, 75, 6)
(7, 75, 7)
(7, 76, 0)
(7, 76, 1)
(7, 76, 2)
(7, 76, 3)
(7, 76, 4)
(7, 76, 5)
(7, 76, 6)
(7, 76, 7)
(7, 77, 0)
(7, 77, 1)
(7, 77, 2)
(7, 77, 3)
(7, 77, 4)
(7, 77, 5)
(7, 77, 6)
(7, 77, 7)
(7, 78, 0)
(7, 78, 1)
(7, 78, 2)
(7, 78, 3)
(7, 78, 4)
(7, 78, 5)
(7, 78, 6)
(7, 78, 7)
(7, 79, 0)
(7, 79, 1)
(7, 79, 2)
(7, 79, 3)
(7, 79, 4)
(7, 79, 5)
(7, 79, 6)
(7, 79, 7)
(7, 80, 0)
(7, 80, 1)
(7, 80, 2)
(7, 80, 3)
(7, 80, 4)
(7, 80, 5)
(7, 80, 6)
(7, 80, 7)
(7, 81, 0)
(7, 81, 1)
(7, 81, 2)
(7, 81, 3)
(7, 81, 4)
(7, 81, 5)
(7, 81, 6)
(7, 81, 7)
(7, 82, 0)
(7, 82, 1)
(7, 82, 2)
(7, 82, 3)
(7, 82, 4)
(7, 82, 5)
(7, 82, 6)
(7, 82, 7)
(7, 83, 0)
(7, 83, 1)
(7, 83, 2)
(7, 83, 3)
(7, 83, 4)
(7, 83, 5)
(7, 83, 6)
(7, 83, 7)
(7, 84, 0)
(7, 84, 1)
(7, 84, 2)
(7, 84, 3)
(7, 84, 4)
(7, 84, 5)
(7, 84, 6)
(7, 84, 7)
(7, 85, 0)
(7, 85, 1)
(7, 85, 2)
(7, 85, 3)
(7, 85, 4)
(7, 85, 5)
(7, 85, 6)
(7, 85, 7)
(7, 86, 0)
(7, 86, 1)
(7, 86, 2)
(7, 86, 3)
(7, 86, 4)
(7, 86, 5)
(7, 86, 6)
(7, 86, 7)
(7, 87, 0)
(7, 87, 1)
(7, 87, 2)
(7, 87, 3)
(7, 87, 4)
(7, 87, 5)
(7, 87, 6)
(7, 87, 7)
(7, 88, 0)
(7, 88, 1)
(7, 88, 2)
(7, 88, 3)
(7, 88, 4)
(7, 88, 5)
(7, 88, 6)
(7, 88, 7)
(7, 89, 0)
(7, 89, 1)
(7, 89, 2)
(7, 89, 3)
(7, 89, 4)
(7, 89, 5)
(7, 89, 6)
(7, 89, 7)
(7, 90, 0)
(7, 90, 1)
(7, 90, 2)
(7, 90, 3)
(7, 90, 4)
(7, 90, 5)
(7, 90, 6)
(7, 90, 7)
(7, 91, 0)
(7, 91, 1)
(7, 91, 2)
(7, 91, 3)
(7, 91, 4)
(7, 91, 5)
(7, 91, 6)
(7, 91, 7)
(7, 92, 0)
(7, 92, 1)
(7, 92, 2)
(7, 92, 3)
(7, 92, 4)
(7, 92, 5)
(7, 92, 6)
(7, 92, 7)
(7, 93, 0)
(7, 93, 1)
(7, 93, 2)
(7, 93, 3)
(7, 93, 4)
(7, 93, 5)
(7, 93, 6)
(7, 93, 7)
(7, 94, 0)
(7, 94, 1)
(7, 94, 2)
(7, 94, 3)
(7, 94, 4)
(7, 94, 5)
(7, 94, 6)
(7, 94, 7)
(7, 95, 0)
(7, 95, 1)
(7, 95, 2)
(7, 95, 3)
(7, 95, 4)
(7, 95, 5)
(7, 95, 6)
(7, 95, 7)
(7, 96, 0)
(7, 96, 1)
(7, 96, 2)
(7, 96, 3)
(7, 96, 4)
(7, 96, 5)
(7, 96, 6)
(7, 96, 7)
(7, 97, 0)
(7, 97, 1)
(7, 97, 2)
(7, 97, 3)
(7, 97, 4)
(7, 97, 5)
(7, 97, 6)
(7, 97, 7)
(7, 98, 0)
(7, 98, 1)
(7, 98, 2)
(7, 98, 3)
(7, 98, 4)
(7, 98, 5)
(7, 98, 6)
(7, 98, 7)
(7, 99, 0)
(7, 99, 1)
(7, 99, 2)
(7, 99, 3)
(7, 99, 4)
(7, 99, 5)
(7, 99, 6)
(7, 99, 7)
(7, 100, 0)
(7, 100, 1)
(7, 100, 2)
(7, 100, 3)
(7, 100, 4)
(7, 100, 5)
(7, 100, 6)
(7, 100, 7)
(7, 101, 0)
(7, 101, 1)
(7, 101, 2)
(7, 101, 3)
(7, 101, 4)
(7, 101, 5)
(7, 101, 6)
(7, 101, 7)
(7, 102, 0)
(7, 102, 1)
(7, 102, 2)
(7, 102, 3)
(7, 102, 4)
(7, 102, 5)
(7, 102, 6)
(7, 102, 7)
(7, 103, 0)
(7, 103, 1)
(7, 103, 2)
(7, 103, 3)
(7, 103, 4)
(7, 103, 5)
(7, 103, 6)
(7, 103, 7)
(7, 104, 0)
(7, 104, 1)
(7, 104, 2)
(7, 104, 3)
(7, 104, 4)
(7, 104, 5)
(7, 104, 6)
(7, 104, 7)
(7, 105, 0)
(7, 105, 1)
(7, 105, 2)
(7, 105, 3)
(7, 105, 4)
(7, 105, 5)
(7, 105, 6)
(7, 105, 7)
(7, 106, 0)
(7, 106, 1)
(7, 106, 2)
(7, 106, 3)
(7, 106, 4)
(7, 106, 5)
(7, 106, 6)
(7, 106, 7)
(7, 107, 0)
(7, 107, 1)
(7, 107, 2)
(7, 107, 3)
(7, 107, 4)
(7, 107, 5)
(7, 107, 6)
(7, 107, 7)
(7, 108, 0)
(7, 108, 1)
(7, 108, 2)
(7, 108, 3)
(7, 108, 4)
(7, 108, 5)
(7, 108, 6)
(7, 108, 7)
(7, 109, 0)
(7, 109, 1)
(7, 109, 2)
(7, 109, 3)
(7, 109, 4)
(7, 109, 5)
(7, 109, 6)
(7, 109, 7)
(7, 110, 0)
(7, 110, 1)
(7, 110, 2)
(7, 110, 3)
(7, 110, 4)
(7, 110, 5)
(7, 110, 6)
(7, 110, 7)
(7, 111, 0)
(7, 111, 1)
(7, 111, 2)
(7, 111, 3)
(7, 111, 4)
(7, 111, 5)
(7, 111, 6)
(7, 111, 7)
(7, 112, 0)
(7, 112, 1)
(7, 112, 2)
(7, 112, 3)
(7, 112, 4)
(7, 112, 5)
(7, 112, 6)
(7, 112, 7)
(7, 113, 0)
(7, 113, 1)
(7, 113, 2)
(7, 113, 3)
(7, 113, 4)
(7, 113, 5)
(7, 113, 6)
(7, 113, 7)
(7, 114, 0)
(7, 114, 1)
(7, 114, 2)
(7, 114, 3)
(7, 114, 4)
(7, 114, 5)
(7, 114, 6)
(7, 114, 7)
(7, 115, 0)
(7, 115, 1)
(7, 115, 2)
(7, 115, 3)
(7, 115, 4)
(7, 115, 5)
(7, 115, 6)
(7, 115, 7)
(7, 116, 0)
(7, 116, 1)
(7, 116, 2)
(7, 116, 3)
(7, 116, 4)
(7, 116, 5)
(7, 116, 6)
(7, 116, 7)
(7, 117, 0)
(7, 117, 1)
(7, 117, 2)
(7, 117, 3)
(7, 117, 4)
(7, 117, 5)
(7, 117, 6)
(7, 117, 7)
(7, 118, 0)
(7, 118, 1)
(7, 118, 2)
(7, 118, 3)
(7, 118, 4)
(7, 118, 5)
(7, 118, 6)
(7, 118, 7)
(7, 119, 0)
(7, 119, 1)
(7, 119, 2)
(7, 119, 3)
(7, 119, 4)
(7, 119, 5)
(7, 119, 6)
(7, 119, 7)
(7, 120, 0)
(7, 120, 1)
(7, 120, 2)
(7, 120, 3)
(7, 120, 4)
(7, 120, 5)
(7, 120, 6)
(7, 120, 7)
(7, 121, 0)
(7, 121, 1)
(7, 121, 2)
(7, 121, 3)
(7, 121, 4)
(7, 121, 5)
(7, 121, 6)
(7, 121, 7)
(7, 122, 0)
(7, 122, 1)
(7, 122, 2)
(7, 122, 3)
(7, 122, 4)
(7, 122, 5)
(7, 122, 6)
(7, 122, 7)
(7, 123, 0)
(7, 123, 1)
(7, 123, 2)
(7, 123, 3)
(7, 123, 4)
(7, 123, 5)
(7, 123, 6)
(7, 123, 7)
(7, 124, 0)
(7, 124, 1)
(7, 124, 2)
(7, 124, 3)
(7, 124, 4)
(7, 124, 5)
(7, 124, 6)
(7, 124, 7)
(7, 125, 0)
(7, 125, 1)
(7, 125, 2)
(7, 125, 3)
(7, 125, 4)
(7, 125, 5)
(7, 125, 6)
(7, 125, 7)
(7, 126, 0)
(7, 126, 1)
(7, 126, 2)
(7, 126, 3)
(7, 126, 4)
(7, 126, 5)
(7, 126, 6)
(7, 126, 7)
(7, 127, 0)
(7, 127, 1)
(7, 127, 2)
(7, 127, 3)
(7, 127, 4)
(7, 127, 5)
(7, 127, 6)
(7, 127, 7)
(7, 128, 0)
(7, 128, 1)
(7, 128, 2)
(7, 128, 3)
(7, 128, 4)
(7, 128, 5)
(7, 128, 6)
(7, 128, 7)
(7, 129, 0)
(7, 129, 1)
(7, 129, 2)
(7, 129, 3)
(7, 129, 4)
(7, 129, 5)
(7, 129, 6)
(7, 129, 7)
(7, 130, 0)
(7, 130, 1)
(7, 130, 2)
(7, 130, 3)
(7, 130, 4)
(7, 130, 5)
(7, 130, 6)
(7, 130, 7)
(7, 131, 0)
(7, 131, 1)
(7, 131, 2)
(7, 131, 3)
(7, 131, 4)
(7, 131, 5)
(7, 131, 6)
(7, 131, 7)
(7, 132, 0)
(7, 132, 1)
(7, 132, 2)
(7, 132, 3)
(7, 132, 4)
(7, 132, 5)
(7, 132, 6)
(7, 132, 7)
(7, 133, 0)
(7, 133, 1)
(7, 133, 2)
(7, 133, 3)
(7, 133, 4)
(7, 133, 5)
(7, 133, 6)
(7, 133, 7)
(7, 134, 0)
(7, 134, 1)
(7, 134, 2)
(7, 134, 3)
(7, 134, 4)
(7, 134, 5)
(7, 134, 6)
(7, 134, 7)
(7, 135, 0)
(7, 135, 1)
(7, 135, 2)
(7, 135, 3)
(7, 135, 4)
(7, 135, 5)
(7, 135, 6)
(7, 135, 7)
(7, 136, 0)
(7, 136, 1)
(7, 136, 2)
(7, 136, 3)
(7, 136, 4)
(7, 136, 5)
(7, 136, 6)
(7, 136, 7)
(7, 137, 0)
(7, 137, 1)
(7, 137, 2)
(7, 137, 3)
(7, 137, 4)
(7, 137, 5)
(7, 137, 6)
(7, 137, 7)
(7, 138, 0)
(7, 138, 1)
(7, 138, 2)
(7, 138, 3)
(7, 138, 4)
(7, 138, 5)
(7, 138, 6)
(7, 138, 7)
(7, 139, 0)
(7, 139, 1)
(7, 139, 2)
(7, 139, 3)
(7, 139, 4)
(7, 139, 5)
(7, 139, 6)
(7, 139, 7)
(7, 140, 0)
(7, 140, 1)
(7, 140, 2)
(7, 140, 3)
(7, 140, 4)
(7, 140, 5)
(7, 140, 6)
(7, 140, 7)
(7, 141, 0)
(7, 141, 1)
(7, 141, 2)
(7, 141, 3)
(7, 141, 4)
(7, 141, 5)
(7, 141, 6)
(7, 141, 7)
(7, 142, 0)
(7, 142, 1)
(7, 142, 2)
(7, 142, 3)
(7, 142, 4)
(7, 142, 5)
(7, 142, 6)
(7, 142, 7)
(7, 143, 0)
(7, 143, 1)
(7, 143, 2)
(7, 143, 3)
(7, 143, 4)
(7, 143, 5)
(7, 143, 6)
(7, 143, 7)
(7, 144, 0)
(7, 144, 1)
(7, 144, 2)
(7, 144, 3)
(7, 144, 4)
(7, 144, 5)
(7, 144, 6)
(7, 144, 7)
(7, 145, 0)
(7, 145, 1)
(7, 145, 2)
(7, 145, 3)
(7, 145, 4)
(7, 145, 5)
(7, 145, 6)
(7, 145, 7)
(7, 146, 0)
(7, 146, 1)
(7, 146, 2)
(7, 146, 3)
(7, 146, 4)
(7, 146, 5)
(7, 146, 6)
(7, 146, 7)
(7, 147, 0)
(7, 147, 1)
(7, 147, 2)
(7, 147, 3)
(7, 147, 4)
(7, 147, 5)
(7, 147, 6)
(7, 147, 7)
(7, 148, 0)
(7, 148, 1)
(7, 148, 2)
(7, 148, 3)
(7, 148, 4)
(7, 148, 5)
(7, 148, 6)
(7, 148, 7)
(7, 149, 0)
(7, 149, 1)
(7, 149, 2)
(7, 149, 3)
(7, 149, 4)
(7, 149, 5)
(7, 149, 6)
(7, 149, 7)
(7, 150, 0)
(7, 150, 1)
(7, 150, 2)
(7, 150, 3)
(7, 150, 4)
(7, 150, 5)
(7, 150, 6)
(7, 150, 7)
(7, 151, 0)
(7, 151, 1)
(7, 151, 2)
(7, 151, 3)
(7, 151, 4)
(7, 151, 5)
(7, 151, 6)
(7, 151, 7)
(7, 152, 0)
(7, 152, 1)
(7, 152, 2)
(7, 152, 3)
(7, 152, 4)
(7, 152, 5)
(7, 152, 6)
(7, 152, 7)
(7, 153, 0)
(7, 153, 1)
(7, 153, 2)
(7, 153, 3)
(7, 153, 4)
(7, 153, 5)
(7, 153, 6)
(7, 153, 7)
(7, 154, 0)
(7, 154, 1)
(7, 154, 2)
(7, 154, 3)
(7, 154, 4)
(7, 154, 5)
(7, 154, 6)
(7, 154, 7)
(7, 155, 0)
(7, 155, 1)
(7, 155, 2)
(7, 155, 3)
(7, 155, 4)
(7, 155, 5)
(7, 155, 6)
(7, 155, 7)
(7, 156, 0)
(7, 156, 1)
(7, 156, 2)
(7, 156, 3)
(7, 156, 4)
(7, 156, 5)
(7, 156, 6)
(7, 156, 7)
(7, 157, 0)
(7, 157, 1)
(7, 157, 2)
(7, 157, 3)
(7, 157, 4)
(7, 157, 5)
(7, 157, 6)
(7, 157, 7)
(7, 158, 0)
(7, 158, 1)
(7, 158, 2)
(7, 158, 3)
(7, 158, 4)
(7, 158, 5)
(7, 158, 6)
(7, 158, 7)
(7, 159, 0)
(7, 159, 1)
(7, 159, 2)
(7, 159, 3)
(7, 159, 4)
(7, 159, 5)
(7, 159, 6)
(7, 159, 7)
(7, 160, 0)
(7, 160, 1)
(7, 160, 2)
(7, 160, 3)
(7, 160, 4)
(7, 160, 5)
(7, 160, 6)
(7, 160, 7)
(7, 161, 0)
(7, 161, 1)
(7, 161, 2)
(7, 161, 3)
(7, 161, 4)
(7, 161, 5)
(7, 161, 6)
(7, 161, 7)
(7, 162, 0)
(7, 162, 1)
(7, 162, 2)
(7, 162, 3)
(7, 162, 4)
(7, 162, 5)
(7, 162, 6)
(7, 162, 7)
(7, 163, 0)
(7, 163, 1)
(7, 163, 2)
(7, 163, 3)
(7, 163, 4)
(7, 163, 5)
(7, 163, 6)
(7, 163, 7)
(7, 164, 0)
(7, 164, 1)
(7, 164, 2)
(7, 164, 3)
(7, 164, 4)
(7, 164, 5)
(7, 164, 6)
(7, 164, 7)
(7, 165, 0)
(7, 165, 1)
(7, 165, 2)
(7, 165, 3)
(7, 165, 4)
(7, 165, 5)
(7, 165, 6)
(7, 165, 7)
(7, 166, 0)
(7, 166, 1)
(7, 166, 2)
(7, 166, 3)
(7, 166, 4)
(7, 166, 5)
(7, 166, 6)
(7, 166, 7)
(7, 167, 0)
(7, 167, 1)
(7, 167, 2)
(7, 167, 3)
(7, 167, 4)
(7, 167, 5)
(7, 167, 6)
(7, 167, 7)
(7, 168, 0)
(7, 168, 1)
(7, 168, 2)
(7, 168, 3)
(7, 168, 4)
(7, 168, 5)
(7, 168, 6)
(7, 168, 7)
(7, 169, 0)
(7, 169, 1)
(7, 169, 2)
(7, 169, 3)
(7, 169, 4)
(7, 169, 5)
(7, 169, 6)
(7, 169, 7)
(7, 170, 0)
(7, 170, 1)
(7, 170, 2)
(7, 170, 3)
(7, 170, 4)
(7, 170, 5)
(7, 170, 6)
(7, 170, 7)
(7, 171, 0)
(7, 171, 1)
(7, 171, 2)
(7, 171, 3)
(7, 171, 4)
(7, 171, 5)
(7, 171, 6)
(7, 171, 7)
(7, 172, 0)
(7, 172, 1)
(7, 172, 2)
(7, 172, 3)
(7, 172, 4)
(7, 172, 5)
(7, 172, 6)
(7, 172, 7)
(7, 173, 0)
(7, 173, 1)
(7, 173, 2)
(7, 173, 3)
(7, 173, 4)
(7, 173, 5)
(7, 173, 6)
(7, 173, 7)
(7, 174, 0)
(7, 174, 1)
(7, 174, 2)
(7, 174, 3)
(7, 174, 4)
(7, 174, 5)
(7, 174, 6)
(7, 174, 7)
(7, 175, 0)
(7, 175, 1)
(7, 175, 2)
(7, 175, 3)
(7, 175, 4)
(7, 175, 5)
(7, 175, 6)
(7, 175, 7)
(7, 176, 0)
(7, 176, 1)
(7, 176, 2)
(7, 176, 3)
(7, 176, 4)
(7, 176, 5)
(7, 176, 6)
(7, 176, 7)
(7, 177, 0)
(7, 177, 1)
(7, 177, 2)
(7, 177, 3)
(7, 177, 4)
(7, 177, 5)
(7, 177, 6)
(7, 177, 7)
(7, 178, 0)
(7, 178, 1)
(7, 178, 2)
(7, 178, 3)
(7, 178, 4)
(7, 178, 5)
(7, 178, 6)
(7, 178, 7)
(7, 179, 0)
(7, 179, 1)
(7, 179, 2)
(7, 179, 3)
(7, 179, 4)
(7, 179, 5)
(7, 179, 6)
(7, 179, 7)
(7, 180, 0)
(7, 180, 1)
(7, 180, 2)
(7, 180, 3)
(7, 180, 4)
(7, 180, 5)
(7, 180, 6)
(7, 180, 7)
(7, 181, 0)
(7, 181, 1)
(7, 181, 2)
(7, 181, 3)
(7, 181, 4)
(7, 181, 5)
(7, 181, 6)
(7, 181, 7)
(7, 182, 0)
(7, 182, 1)
(7, 182, 2)
(7, 182, 3)
(7, 182, 4)
(7, 182, 5)
(7, 182, 6)
(7, 182, 7)
(7, 183, 0)
(7, 183, 1)
(7, 183, 2)
(7, 183, 3)
(7, 183, 4)
(7, 183, 5)
(7, 183, 6)
(7, 183, 7)
(7, 184, 0)
(7, 184, 1)
(7, 184, 2)
(7, 184, 3)
(7, 184, 4)
(7, 184, 5)
(7, 184, 6)
(7, 184, 7)
(7, 185, 0)
(7, 185, 1)
(7, 185, 2)
(7, 185, 3)
(7, 185, 4)
(7, 185, 5)
(7, 185, 6)
(7, 185, 7)
(7, 186, 0)
(7, 186, 1)
(7, 186, 2)
(7, 186, 3)
(7, 186, 4)
(7, 186, 5)
(7, 186, 6)
(7, 186, 7)
(7, 187, 0)
(7, 187, 1)
(7, 187, 2)
(7, 187, 3)
(7, 187, 4)
(7, 187, 5)
(7, 187, 6)
(7, 187, 7)
(7, 188, 0)
(7, 188, 1)
(7, 188, 2)
(7, 188, 3)
(7, 188, 4)
(7, 188, 5)
(7, 188, 6)
(7, 188, 7)
(7, 189, 0)
(7, 189, 1)
(7, 189, 2)
(7, 189, 3)
(7, 189, 4)
(7, 189, 5)
(7, 189, 6)
(7, 189, 7)
(7, 190, 0)
(7, 190, 1)
(7, 190, 2)
(7, 190, 3)
(7, 190, 4)
(7, 190, 5)
(7, 190, 6)
(7, 190, 7)
(7, 191, 0)
(7, 191, 1)
(7, 191, 2)
(7, 191, 3)
(7, 191, 4)
(7, 191, 5)
(7, 191, 6)
(7, 191, 7)
(7, 192, 0)
(7, 192, 1)
(7, 192, 2)
(7, 192, 3)
(7, 192, 4)
(7, 192, 5)
(7, 192, 6)
(7, 192, 7)
(7, 193, 0)
(7, 193, 1)
(7, 193, 2)
(7, 193, 3)
(7, 193, 4)
(7, 193, 5)
(7, 193, 6)
(7, 193, 7)
(7, 194, 0)
(7, 194, 1)
(7, 194, 2)
(7, 194, 3)
(7, 194, 4)
(7, 194, 5)
(7, 194, 6)
(7, 194, 7)
(7, 195, 0)
(7, 195, 1)
(7, 195, 2)
(7, 195, 3)
(7, 195, 4)
(7, 195, 5)
(7, 195, 6)
(7, 195, 7)
(7, 196, 0)
(7, 196, 1)
(7, 196, 2)
(7, 196, 3)
(7, 196, 4)
(7, 196, 5)
(7, 196, 6)
(7, 196, 7)
(7, 197, 0)
(7, 197, 1)
(7, 197, 2)
(7, 197, 3)
(7, 197, 4)
(7, 197, 5)
(7, 197, 6)
(7, 197, 7)
(7, 198, 0)
(7, 198, 1)
(7, 198, 2)
(7, 198, 3)
(7, 198, 4)
(7, 198, 5)
(7, 198, 6)
(7, 198, 7)
(7, 199, 0)
(7, 199, 1)
(7, 199, 2)
(7, 199, 3)
(7, 199, 4)
(7, 199, 5)
(7, 199, 6)
(7, 199, 7)
(7, 200, 0)
(7, 200, 1)
(7, 200, 2)
(7, 200, 3)
(7, 200, 4)
(7, 200, 5)
(7, 200, 6)
(7, 200, 7)
(7, 201, 0)
(7, 201, 1)
(7, 201, 2)
(7, 201, 3)
(7, 201, 4)
(7, 201, 5)
(7, 201, 6)
(7, 201, 7)
(7, 202, 0)
(7, 202, 1)
(7, 202, 2)
(7, 202, 3)
(7, 202, 4)
(7, 202, 5)
(7, 202, 6)
(7, 202, 7)
(7, 203, 0)
(7, 203, 1)
(7, 203, 2)
(7, 203, 3)
(7, 203, 4)
(7, 203, 5)
(7, 203, 6)
(7, 203, 7)
(7, 204, 0)
(7, 204, 1)
(7, 204, 2)
(7, 204, 3)
(7, 204, 4)
(7, 204, 5)
(7, 204, 6)
(7, 204, 7)
(7, 205, 0)
(7, 205, 1)
(7, 205, 2)
(7, 205, 3)
(7, 205, 4)
(7, 205, 5)
(7, 205, 6)
(7, 205, 7)
(7, 206, 0)
(7, 206, 1)
(7, 206, 2)
(7, 206, 3)
(7, 206, 4)
(7, 206, 5)
(7, 206, 6)
(7, 206, 7)
(7, 207, 0)
(7, 207, 1)
(7, 207, 2)
(7, 207, 3)
(7, 207, 4)
(7, 207, 5)
(7, 207, 6)
(7, 207, 7)
(7, 208, 0)
(7, 208, 1)
(7, 208, 2)
(7, 208, 3)
(7, 208, 4)
(7, 208, 5)
(7, 208, 6)
(7, 208, 7)
(7, 209, 0)
(7, 209, 1)
(7, 209, 2)
(7, 209, 3)
(7, 209, 4)
(7, 209, 5)
(7, 209, 6)
(7, 209, 7)
(7, 210, 0)
(7, 210, 1)
(7, 210, 2)
(7, 210, 3)
(7, 210, 4)
(7, 210, 5)
(7, 210, 6)
(7, 210, 7)
(7, 211, 0)
(7, 211, 1)
(7, 211, 2)
(7, 211, 3)
(7, 211, 4)
(7, 211, 5)
(7, 211, 6)
(7, 211, 7)
(7, 212, 0)
(7, 212, 1)
(7, 212, 2)
(7, 212, 3)
(7, 212, 4)
(7, 212, 5)
(7, 212, 6)
(7, 212, 7)
(7, 213, 0)
(7, 213, 1)
(7, 213, 2)
(7, 213, 3)
(7, 213, 4)
(7, 213, 5)
(7, 213, 6)
(7, 213, 7)
(7, 214, 0)
(7, 214, 1)
(7, 214, 2)
(7, 214, 3)
(7, 214, 4)
(7, 214, 5)
(7, 214, 6)
(7, 214, 7)
(7, 215, 0)
(7, 215, 1)
(7, 215, 2)
(7, 215, 3)
(7, 215, 4)
(7, 215, 5)
(7, 215, 6)
(7, 215, 7)
(7, 216, 0)
(7, 216, 1)
(7, 216, 2)
(7, 216, 3)
(7, 216, 4)
(7, 216, 5)
(7, 216, 6)
(7, 216, 7)
(7, 217, 0)
(7, 217, 1)
(7, 217, 2)
(7, 217, 3)
(7, 217, 4)
(7, 217, 5)
(7, 217, 6)
(7, 217, 7)
(7, 218, 0)
(7, 218, 1)
(7, 218, 2)
(7, 218, 3)
(7, 218, 4)
(7, 218, 5)
(7, 218, 6)
(7, 218, 7)
(7, 219, 0)
(7, 219, 1)
(7, 219, 2)
(7, 219, 3)
(7, 219, 4)
(7, 219, 5)
(7, 219, 6)
(7, 219, 7)
(7, 220, 0)
(7, 220, 1)
(7, 220, 2)
(7, 220, 3)
(7, 220, 4)
(7, 220, 5)
(7, 220, 6)
(7, 220, 7)
(7, 221, 0)
(7, 221, 1)
(7, 221, 2)
(7, 221, 3)
(7, 221, 4)
(7, 221, 5)
(7, 221, 6)
(7, 221, 7)
(7, 222, 0)
(7, 222, 1)
(7, 222, 2)
(7, 222, 3)
(7, 222, 4)
(7, 222, 5)
(7, 222, 6)
(7, 222, 7)
(7, 223, 0)
(7, 223, 1)
(7, 223, 2)
(7, 223, 3)
(7, 223, 4)
(7, 223, 5)
(7, 223, 6)
(7, 223, 7)
(7, 224, 0)
(7, 224, 1)
(7, 224, 2)
(7, 224, 3)
(7, 224, 4)
(7, 224, 5)
(7, 224, 6)
(7, 224, 7)
(7, 225, 0)
(7, 225, 1)
(7, 225, 2)
(7, 225, 3)
(7, 225, 4)
(7, 225, 5)
(7, 225, 6)
(7, 225, 7)
(7, 226, 0)
(7, 226, 1)
(7, 226, 2)
(7, 226, 3)
(7, 226, 4)
(7, 226, 5)
(7, 226, 6)
(7, 226, 7)
(7, 227, 0)
(7, 227, 1)
(7, 227, 2)
(7, 227, 3)
(7, 227, 4)
(7, 227, 5)
(7, 227, 6)
(7, 227, 7)
(7, 228, 0)
(7, 228, 1)
(7, 228, 2)
(7, 228, 3)
(7, 228, 4)
(7, 228, 5)
(7, 228, 6)
(7, 228, 7)
(7, 229, 0)
(7, 229, 1)
(7, 229, 2)
(7, 229, 3)
(7, 229, 4)
(7, 229, 5)
(7, 229, 6)
(7, 229, 7)
(7, 230, 0)
(7, 230, 1)
(7, 230, 2)
(7, 230, 3)
(7, 230, 4)
(7, 230, 5)
(7, 230, 6)
(7, 230, 7)
(7, 231, 0)
(7, 231, 1)
(7, 231, 2)
(7, 231, 3)
(7, 231, 4)
(7, 231, 5)
(7, 231, 6)
(7, 231, 7)
(7, 232, 0)
(7, 232, 1)
(7, 232, 2)
(7, 232, 3)
(7, 232, 4)
(7, 232, 5)
(7, 232, 6)
(7, 232, 7)
(7, 233, 0)
(7, 233, 1)
(7, 233, 2)
(7, 233, 3)
(7, 233, 4)
(7, 233, 5)
(7, 233, 6)
(7, 233, 7)
(7, 234, 0)
(7, 234, 1)
(7, 234, 2)
(7, 234, 3)
(7, 234, 4)
(7, 234, 5)
(7, 234, 6)
(7, 234, 7)
(7, 235, 0)
(7, 235, 1)
(7, 235, 2)
(7, 235, 3)
(7, 235, 4)
(7, 235, 5)
(7, 235, 6)
(7, 235, 7)
(7, 236, 0)
(7, 236, 1)
(7, 236, 2)
(7, 236, 3)
(7, 236, 4)
(7, 236, 5)
(7, 236, 6)
(7, 236, 7)
(7, 237, 0)
(7, 237, 1)
(7, 237, 2)
(7, 237, 3)
(7, 237, 4)
(7, 237, 5)
(7, 237, 6)
(7, 237, 7)
(7, 238, 0)
(7, 238, 1)
(7, 238, 2)
(7, 238, 3)
(7, 238, 4)
(7, 238, 5)
(7, 238, 6)
(7, 238, 7)
(7, 239, 0)
(7, 239, 1)
(7, 239, 2)
(7, 239, 3)
(7, 239, 4)
(7, 239, 5)
(7, 239, 6)
(7, 239, 7)
(7, 240, 0)
(7, 240, 1)
(7, 240, 2)
(7, 240, 3)
(7, 240, 4)
(7, 240, 5)
(7, 240, 6)
(7, 240, 7)
(7, 241, 0)
(7, 241, 1)
(7, 241, 2)
(7, 241, 3)
(7, 241, 4)
(7, 241, 5)
(7, 241, 6)
(7, 241, 7)
(7, 242, 0)
(7, 242, 1)
(7, 242, 2)
(7, 242, 3)
(7, 242, 4)
(7, 242, 5)
(7, 242, 6)
(7, 242, 7)
(7, 243, 0)
(7, 243, 1)
(7, 243, 2)
(7, 243, 3)
(7, 243, 4)
(7, 243, 5)
(7, 243, 6)
(7, 243, 7)
(7, 244, 0)
(7, 244, 1)
(7, 244, 2)
(7, 244, 3)
(7, 244, 4)
(7, 244, 5)
(7, 244, 6)
(7, 244, 7)
(7, 245, 0)
(7, 245, 1)
(7, 245, 2)
(7, 245, 3)
(7, 245, 4)
(7, 245, 5)
(7, 245, 6)
(7, 245, 7)
(7, 246, 0)
(7, 246, 1)
(7, 246, 2)
(7, 246, 3)
(7, 246, 4)
(7, 246, 5)
(7, 246, 6)
(7, 246, 7)
(7, 247, 0)
(7, 247, 1)
(7, 247, 2)
(7, 247, 3)
(7, 247, 4)
(7, 247, 5)
(7, 247, 6)
(7, 247, 7)
(7, 248, 0)
(7, 248, 1)
(7, 248, 2)
(7, 248, 3)
(7, 248, 4)
(7, 248, 5)
(7, 248, 6)
(7, 248, 7)
(7, 249, 0)
(7, 249, 1)
(7, 249, 2)
(7, 249, 3)
(7, 249, 4)
(7, 249, 5)
(7, 249, 6)
(7, 249, 7)
(7, 250, 0)
(7, 250, 1)
(7, 250, 2)
(7, 250, 3)
(7, 250, 4)
(7, 250, 5)
(7, 250, 6)
(7, 250, 7)
(7, 251, 0)
(7, 251, 1)
(7, 251, 2)
(7, 251, 3)
(7, 251, 4)
(7, 251, 5)
(7, 251, 6)
(7, 251, 7)
(7, 252, 0)
(7, 252, 1)
(7, 252, 2)
(7, 252, 3)
(7, 252, 4)
(7, 252, 5)
(7, 252, 6)
(7, 252, 7)
(7, 253, 0)
(7, 253, 1)
(7, 253, 2)
(7, 253, 3)
(7, 253, 4)
(7, 253, 5)
(7, 253, 6)
(7, 253, 7)
(7, 254, 0)
(7, 254, 1)
(7, 254, 2)
(7, 254, 3)
(7, 254, 4)
(7, 254, 5)
(7, 254, 6)
(7, 254, 7)
(7, 255, 0)
(7, 255, 1)
(7, 255, 2)
(7, 255, 3)
(7, 255, 4)
(7, 255, 5)
(7, 255, 6)
(7, 255, 7)
(8, 0, 0)
(8, 0, 1)
(8, 0, 2)
(8, 0, 3)
(8, 0, 4)
(8, 0, 5)
(8, 0, 6)
(8, 0, 7)
(8, 1, 0)
(8, 1, 1)
(8, 1, 2)
(8, 1, 3)
(8, 1, 4)
(8, 1, 5)
(8, 1, 6)
(8, 1, 7)
(8, 2, 0)
(8, 2, 1)
(8, 2, 2)
(8, 2, 3)
(8, 2, 4)
(8, 2, 5)
(8, 2, 6)
(8, 2, 7)
(8, 3, 0)
(8, 3, 1)
(8, 3, 2)
(8, 3, 3)
(8, 3, 4)
(8, 3, 5)
(8, 3, 6)
(8, 3, 7)
(8, 4, 0)
(8, 4, 1)
(8, 4, 2)
(8, 4, 3)
(8, 4, 4)
(8, 4, 5)
(8, 4, 6)
(8, 4, 7)
(8, 5, 0)
(8, 5, 1)
(8, 5, 2)
(8, 5, 3)
(8, 5, 4)
(8, 5, 5)
(8, 5, 6)
(8, 5, 7)
(8, 6, 0)
(8, 6, 1)
(8, 6, 2)
(8, 6, 3)
(8, 6, 4)
(8, 6, 5)
(8, 6, 6)
(8, 6, 7)
(8, 7, 0)
(8, 7, 1)
(8, 7, 2)
(8, 7, 3)
(8, 7, 4)
(8, 7, 5)
(8, 7, 6)
(8, 7, 7)
(8, 8, 0)
(8, 8, 1)
(8, 8, 2)
(8, 8, 3)
(8, 8, 4)
(8, 8, 5)
(8, 8, 6)
(8, 8, 7)
(8, 9, 0)
(8, 9, 1)
(8, 9, 2)
(8, 9, 3)
(8, 9, 4)
(8, 9, 5)
(8, 9, 6)
(8, 9, 7)
(8, 10, 0)
(8, 10, 1)
(8, 10, 2)
(8, 10, 3)
(8, 10, 4)
(8, 10, 5)
(8, 10, 6)
(8, 10, 7)
(8, 11, 0)
(8, 11, 1)
(8, 11, 2)
(8, 11, 3)
(8, 11, 4)
(8, 11, 5)
(8, 11, 6)
(8, 11, 7)
(8, 12, 0)
(8, 12, 1)
(8, 12, 2)
(8, 12, 3)
(8, 12, 4)
(8, 12, 5)
(8, 12, 6)
(8, 12, 7)
(8, 13, 0)
(8, 13, 1)
(8, 13, 2)
(8, 13, 3)
(8, 13, 4)
(8, 13, 5)
(8, 13, 6)
(8, 13, 7)
(8, 14, 0)
(8, 14, 1)
(8, 14, 2)
(8, 14, 3)
(8, 14, 4)
(8, 14, 5)
(8, 14, 6)
(8, 14, 7)
(8, 15, 0)
(8, 15, 1)
(8, 15, 2)
(8, 15, 3)
(8, 15, 4)
(8, 15, 5)
(8, 15, 6)
(8, 15, 7)
(8, 16, 0)
(8, 16, 1)
(8, 16, 2)
(8, 16, 3)
(8, 16, 4)
(8, 16, 5)
(8, 16, 6)
(8, 16, 7)
(8, 17, 0)
(8, 17, 1)
(8, 17, 2)
(8, 17, 3)
(8, 17, 4)
(8, 17, 5)
(8, 17, 6)
(8, 17, 7)
(8, 18, 0)
(8, 18, 1)
(8, 18, 2)
(8, 18, 3)
(8, 18, 4)
(8, 18, 5)
(8, 18, 6)
(8, 18, 7)
(8, 19, 0)
(8, 19, 1)
(8, 19, 2)
(8, 19, 3)
(8, 19, 4)
(8, 19, 5)
(8, 19, 6)
(8, 19, 7)
(8, 20, 0)
(8, 20, 1)
(8, 20, 2)
(8, 20, 3)
(8, 20, 4)
(8, 20, 5)
(8, 20, 6)
(8, 20, 7)
(8, 21, 0)
(8, 21, 1)
(8, 21, 2)
(8, 21, 3)
(8, 21, 4)
(8, 21, 5)
(8, 21, 6)
(8, 21, 7)
(8, 22, 0)
(8, 22, 1)
(8, 22, 2)
(8, 22, 3)
(8, 22, 4)
(8, 22, 5)
(8, 22, 6)
(8, 22, 7)
(8, 23, 0)
(8, 23, 1)
(8, 23, 2)
(8, 23, 3)
(8, 23, 4)
(8, 23, 5)
(8, 23, 6)
(8, 23, 7)
(8, 24, 0)
(8, 24, 1)
(8, 24, 2)
(8, 24, 3)
(8, 24, 4)
(8, 24, 5)
(8, 24, 6)
(8, 24, 7)
(8, 25, 0)
(8, 25, 1)
(8, 25, 2)
(8, 25, 3)
(8, 25, 4)
(8, 25, 5)
(8, 25, 6)
(8, 25, 7)
(8, 26, 0)
(8, 26, 1)
(8, 26, 2)
(8, 26, 3)
(8, 26, 4)
(8, 26, 5)
(8, 26, 6)
(8, 26, 7)
(8, 27, 0)
(8, 27, 1)
(8, 27, 2)
(8, 27, 3)
(8, 27, 4)
(8, 27, 5)
(8, 27, 6)
(8, 27, 7)
(8, 28, 0)
(8, 28, 1)
(8, 28, 2)
(8, 28, 3)
(8, 28, 4)
(8, 28, 5)
(8, 28, 6)
(8, 28, 7)
(8, 29, 0)
(8, 29, 1)
(8, 29, 2)
(8, 29, 3)
(8, 29, 4)
(8, 29, 5)
(8, 29, 6)
(8, 29, 7)
(8, 30, 0)
(8, 30, 1)
(8, 30, 2)
(8, 30, 3)
(8, 30, 4)
(8, 30, 5)
(8, 30, 6)
(8, 30, 7)
(8, 31, 0)
(8, 31, 1)
(8, 31, 2)
(8, 31, 3)
(8, 31, 4)
(8, 31, 5)
(8, 31, 6)
(8, 31, 7)
(8, 32, 0)
(8, 32, 1)
(8, 32, 2)
(8, 32, 3)
(8, 32, 4)
(8, 32, 5)
(8, 32, 6)
(8, 32, 7)
(8, 33, 0)
(8, 33, 1)
(8, 33, 2)
(8, 33, 3)
(8, 33, 4)
(8, 33, 5)
(8, 33, 6)
(8, 33, 7)
(8, 34, 0)
(8, 34, 1)
(8, 34, 2)
(8, 34, 3)
(8, 34, 4)
(8, 34, 5)
(8, 34, 6)
(8, 34, 7)
(8, 35, 0)
(8, 35, 1)
(8, 35, 2)
(8, 35, 3)
(8, 35, 4)
(8, 35, 5)
(8, 35, 6)
(8, 35, 7)
(8, 36, 0)
(8, 36, 1)
(8, 36, 2)
(8, 36, 3)
(8, 36, 4)
(8, 36, 5)
(8, 36, 6)
(8, 36, 7)
(8, 37, 0)
(8, 37, 1)
(8, 37, 2)
(8, 37, 3)
(8, 37, 4)
(8, 37, 5)
(8, 37, 6)
(8, 37, 7)
(8, 38, 0)
(8, 38, 1)
(8, 38, 2)
(8, 38, 3)
(8, 38, 4)
(8, 38, 5)
(8, 38, 6)
(8, 38, 7)
(8, 39, 0)
(8, 39, 1)
(8, 39, 2)
(8, 39, 3)
(8, 39, 4)
(8, 39, 5)
(8, 39, 6)
(8, 39, 7)
(8, 40, 0)
(8, 40, 1)
(8, 40, 2)
(8, 40, 3)
(8, 40, 4)
(8, 40, 5)
(8, 40, 6)
(8, 40, 7)
(8, 41, 0)
(8, 41, 1)
(8, 41, 2)
(8, 41, 3)
(8, 41, 4)
(8, 41, 5)
(8, 41, 6)
(8, 41, 7)
(8, 42, 0)
(8, 42, 1)
(8, 42, 2)
(8, 42, 3)
(8, 42, 4)
(8, 42, 5)
(8, 42, 6)
(8, 42, 7)
(8, 43, 0)
(8, 43, 1)
(8, 43, 2)
(8, 43, 3)
(8, 43, 4)
(8, 43, 5)
(8, 43, 6)
(8, 43, 7)
(8, 44, 0)
(8, 44, 1)
(8, 44, 2)
(8, 44, 3)
(8, 44, 4)
(8, 44, 5)
(8, 44, 6)
(8, 44, 7)
(8, 45, 0)
(8, 45, 1)
(8, 45, 2)
(8, 45, 3)
(8, 45, 4)
(8, 45, 5)
(8, 45, 6)
(8, 45, 7)
(8, 46, 0)
(8, 46, 1)
(8, 46, 2)
(8, 46, 3)
(8, 46, 4)
(8, 46, 5)
(8, 46, 6)
(8, 46, 7)
(8, 47, 0)
(8, 47, 1)
(8, 47, 2)
(8, 47, 3)
(8, 47, 4)
(8, 47, 5)
(8, 47, 6)
(8, 47, 7)
(8, 48, 0)
(8, 48, 1)
(8, 48, 2)
(8, 48, 3)
(8, 48, 4)
(8, 48, 5)
(8, 48, 6)
(8, 48, 7)
(8, 49, 0)
(8, 49, 1)
(8, 49, 2)
(8, 49, 3)
(8, 49, 4)
(8, 49, 5)
(8, 49, 6)
(8, 49, 7)
(8, 50, 0)
(8, 50, 1)
(8, 50, 2)
(8, 50, 3)
(8, 50, 4)
(8, 50, 5)
(8, 50, 6)
(8, 50, 7)
(8, 51, 0)
(8, 51, 1)
(8, 51, 2)
(8, 51, 3)
(8, 51, 4)
(8, 51, 5)
(8, 51, 6)
(8, 51, 7)
(8, 52, 0)
(8, 52, 1)
(8, 52, 2)
(8, 52, 3)
(8, 52, 4)
(8, 52, 5)
(8, 52, 6)
(8, 52, 7)
(8, 53, 0)
(8, 53, 1)
(8, 53, 2)
(8, 53, 3)
(8, 53, 4)
(8, 53, 5)
(8, 53, 6)
(8, 53, 7)
(8, 54, 0)
(8, 54, 1)
(8, 54, 2)
(8, 54, 3)
(8, 54, 4)
(8, 54, 5)
(8, 54, 6)
(8, 54, 7)
(8, 55, 0)
(8, 55, 1)
(8, 55, 2)
(8, 55, 3)
(8, 55, 4)
(8, 55, 5)
(8, 55, 6)
(8, 55, 7)
(8, 56, 0)
(8, 56, 1)
(8, 56, 2)
(8, 56, 3)
(8, 56, 4)
(8, 56, 5)
(8, 56, 6)
(8, 56, 7)
(8, 57, 0)
(8, 57, 1)
(8, 57, 2)
(8, 57, 3)
(8, 57, 4)
(8, 57, 5)
(8, 57, 6)
(8, 57, 7)
(8, 58, 0)
(8, 58, 1)
(8, 58, 2)
(8, 58, 3)
(8, 58, 4)
(8, 58, 5)
(8, 58, 6)
(8, 58, 7)
(8, 59, 0)
(8, 59, 1)
(8, 59, 2)
(8, 59, 3)
(8, 59, 4)
(8, 59, 5)
(8, 59, 6)
(8, 59, 7)
(8, 60, 0)
(8, 60, 1)
(8, 60, 2)
(8, 60, 3)
(8, 60, 4)
(8, 60, 5)
(8, 60, 6)
(8, 60, 7)
(8, 61, 0)
(8, 61, 1)
(8, 61, 2)
(8, 61, 3)
(8, 61, 4)
(8, 61, 5)
(8, 61, 6)
(8, 61, 7)
(8, 62, 0)
(8, 62, 1)
(8, 62, 2)
(8, 62, 3)
(8, 62, 4)
(8, 62, 5)
(8, 62, 6)
(8, 62, 7)
(8, 63, 0)
(8, 63, 1)
(8, 63, 2)
(8, 63, 3)
(8, 63, 4)
(8, 63, 5)
(8, 63, 6)
(8, 63, 7)
(8, 64, 0)
(8, 64, 1)
(8, 64, 2)
(8, 64, 3)
(8, 64, 4)
(8, 64, 5)
(8, 64, 6)
(8, 64, 7)
(8, 65, 0)
(8, 65, 1)
(8, 65, 2)
(8, 65, 3)
(8, 65, 4)
(8, 65, 5)
(8, 65, 6)
(8, 65, 7)
(8, 66, 0)
(8, 66, 1)
(8, 66, 2)
(8, 66, 3)
(8, 66, 4)
(8, 66, 5)
(8, 66, 6)
(8, 66, 7)
(8, 67, 0)
(8, 67, 1)
(8, 67, 2)
(8, 67, 3)
(8, 67, 4)
(8, 67, 5)
(8, 67, 6)
(8, 67, 7)
(8, 68, 0)
(8, 68, 1)
(8, 68, 2)
(8, 68, 3)
(8, 68, 4)
(8, 68, 5)
(8, 68, 6)
(8, 68, 7)
(8, 69, 0)
(8, 69, 1)
(8, 69, 2)
(8, 69, 3)
(8, 69, 4)
(8, 69, 5)
(8, 69, 6)
(8, 69, 7)
(8, 70, 0)
(8, 70, 1)
(8, 70, 2)
(8, 70, 3)
(8, 70, 4)
(8, 70, 5)
(8, 70, 6)
(8, 70, 7)
(8, 71, 0)
(8, 71, 1)
(8, 71, 2)
(8, 71, 3)
(8, 71, 4)
(8, 71, 5)
(8, 71, 6)
(8, 71, 7)
(8, 72, 0)
(8, 72, 1)
(8, 72, 2)
(8, 72, 3)
(8, 72, 4)
(8, 72, 5)
(8, 72, 6)
(8, 72, 7)
(8, 73, 0)
(8, 73, 1)
(8, 73, 2)
(8, 73, 3)
(8, 73, 4)
(8, 73, 5)
(8, 73, 6)
(8, 73, 7)
(8, 74, 0)
(8, 74, 1)
(8, 74, 2)
(8, 74, 3)
(8, 74, 4)
(8, 74, 5)
(8, 74, 6)
(8, 74, 7)
(8, 75, 0)
(8, 75, 1)
(8, 75, 2)
(8, 75, 3)
(8, 75, 4)
(8, 75, 5)
(8, 75, 6)
(8, 75, 7)
(8, 76, 0)
(8, 76, 1)
(8, 76, 2)
(8, 76, 3)
(8, 76, 4)
(8, 76, 5)
(8, 76, 6)
(8, 76, 7)
(8, 77, 0)
(8, 77, 1)
(8, 77, 2)
(8, 77, 3)
(8, 77, 4)
(8, 77, 5)
(8, 77, 6)
(8, 77, 7)
(8, 78, 0)
(8, 78, 1)
(8, 78, 2)
(8, 78, 3)
(8, 78, 4)
(8, 78, 5)
(8, 78, 6)
(8, 78, 7)
(8, 79, 0)
(8, 79, 1)
(8, 79, 2)
(8, 79, 3)
(8, 79, 4)
(8, 79, 5)
(8, 79, 6)
(8, 79, 7)
(8, 80, 0)
(8, 80, 1)
(8, 80, 2)
(8, 80, 3)
(8, 80, 4)
(8, 80, 5)
(8, 80, 6)
(8, 80, 7)
(8, 81, 0)
(8, 81, 1)
(8, 81, 2)
(8, 81, 3)
(8, 81, 4)
(8, 81, 5)
(8, 81, 6)
(8, 81, 7)
(8, 82, 0)
(8, 82, 1)
(8, 82, 2)
(8, 82, 3)
(8, 82, 4)
(8, 82, 5)
(8, 82, 6)
(8, 82, 7)
(8, 83, 0)
(8, 83, 1)
(8, 83, 2)
(8, 83, 3)
(8, 83, 4)
(8, 83, 5)
(8, 83, 6)
(8, 83, 7)
(8, 84, 0)
(8, 84, 1)
(8, 84, 2)
(8, 84, 3)
(8, 84, 4)
(8, 84, 5)
(8, 84, 6)
(8, 84, 7)
(8, 85, 0)
(8, 85, 1)
(8, 85, 2)
(8, 85, 3)
(8, 85, 4)
(8, 85, 5)
(8, 85, 6)
(8, 85, 7)
(8, 86, 0)
(8, 86, 1)
(8, 86, 2)
(8, 86, 3)
(8, 86, 4)
(8, 86, 5)
(8, 86, 6)
(8, 86, 7)
(8, 87, 0)
(8, 87, 1)
(8, 87, 2)
(8, 87, 3)
(8, 87, 4)
(8, 87, 5)
(8, 87, 6)
(8, 87, 7)
(8, 88, 0)
(8, 88, 1)
(8, 88, 2)
(8, 88, 3)
(8, 88, 4)
(8, 88, 5)
(8, 88, 6)
(8, 88, 7)
(8, 89, 0)
(8, 89, 1)
(8, 89, 2)
(8, 89, 3)
(8, 89, 4)
(8, 89, 5)
(8, 89, 6)
(8, 89, 7)
(8, 90, 0)
(8, 90, 1)
(8, 90, 2)
(8, 90, 3)
(8, 90, 4)
(8, 90, 5)
(8, 90, 6)
(8, 90, 7)
(8, 91, 0)
(8, 91, 1)
(8, 91, 2)
(8, 91, 3)
(8, 91, 4)
(8, 91, 5)
(8, 91, 6)
(8, 91, 7)
(8, 92, 0)
(8, 92, 1)
(8, 92, 2)
(8, 92, 3)
(8, 92, 4)
(8, 92, 5)
(8, 92, 6)
(8, 92, 7)
(8, 93, 0)
(8, 93, 1)
(8, 93, 2)
(8, 93, 3)
(8, 93, 4)
(8, 93, 5)
(8, 93, 6)
(8, 93, 7)
(8, 94, 0)
(8, 94, 1)
(8, 94, 2)
(8, 94, 3)
(8, 94, 4)
(8, 94, 5)
(8, 94, 6)
(8, 94, 7)
(8, 95, 0)
(8, 95, 1)
(8, 95, 2)
(8, 95, 3)
(8, 95, 4)
(8, 95, 5)
(8, 95, 6)
(8, 95, 7)
(8, 96, 0)
(8, 96, 1)
(8, 96, 2)
(8, 96, 3)
(8, 96, 4)
(8, 96, 5)
(8, 96, 6)
(8, 96, 7)
(8, 97, 0)
(8, 97, 1)
(8, 97, 2)
(8, 97, 3)
(8, 97, 4)
(8, 97, 5)
(8, 97, 6)
(8, 97, 7)
(8, 98, 0)
(8, 98, 1)
(8, 98, 2)
(8, 98, 3)
(8, 98, 4)
(8, 98, 5)
(8, 98, 6)
(8, 98, 7)
(8, 99, 0)
(8, 99, 1)
(8, 99, 2)
(8, 99, 3)
(8, 99, 4)
(8, 99, 5)
(8, 99, 6)
(8, 99, 7)
(8, 100, 0)
(8, 100, 1)
(8, 100, 2)
(8, 100, 3)
(8, 100, 4)
(8, 100, 5)
(8, 100, 6)
(8, 100, 7)
(8, 101, 0)
(8, 101, 1)
(8, 101, 2)
(8, 101, 3)
(8, 101, 4)
(8, 101, 5)
(8, 101, 6)
(8, 101, 7)
(8, 102, 0)
(8, 102, 1)
(8, 102, 2)
(8, 102, 3)
(8, 102, 4)
(8, 102, 5)
(8, 102, 6)
(8, 102, 7)
(8, 103, 0)
(8, 103, 1)
(8, 103, 2)
(8, 103, 3)
(8, 103, 4)
(8, 103, 5)
(8, 103, 6)
(8, 103, 7)
(8, 104, 0)
(8, 104, 1)
(8, 104, 2)
(8, 104, 3)
(8, 104, 4)
(8, 104, 5)
(8, 104, 6)
(8, 104, 7)
(8, 105, 0)
(8, 105, 1)
(8, 105, 2)
(8, 105, 3)
(8, 105, 4)
(8, 105, 5)
(8, 105, 6)
(8, 105, 7)
(8, 106, 0)
(8, 106, 1)
(8, 106, 2)
(8, 106, 3)
(8, 106, 4)
(8, 106, 5)
(8, 106, 6)
(8, 106, 7)
(8, 107, 0)
(8, 107, 1)
(8, 107, 2)
(8, 107, 3)
(8, 107, 4)
(8, 107, 5)
(8, 107, 6)
(8, 107, 7)
(8, 108, 0)
(8, 108, 1)
(8, 108, 2)
(8, 108, 3)
(8, 108, 4)
(8, 108, 5)
(8, 108, 6)
(8, 108, 7)
(8, 109, 0)
(8, 109, 1)
(8, 109, 2)
(8, 109, 3)
(8, 109, 4)
(8, 109, 5)
(8, 109, 6)
(8, 109, 7)
(8, 110, 0)
(8, 110, 1)
(8, 110, 2)
(8, 110, 3)
(8, 110, 4)
(8, 110, 5)
(8, 110, 6)
(8, 110, 7)
(8, 111, 0)
(8, 111, 1)
(8, 111, 2)
(8, 111, 3)
(8, 111, 4)
(8, 111, 5)
(8, 111, 6)
(8, 111, 7)
(8, 112, 0)
(8, 112, 1)
(8, 112, 2)
(8, 112, 3)
(8, 112, 4)
(8, 112, 5)
(8, 112, 6)
(8, 112, 7)
(8, 113, 0)
(8, 113, 1)
(8, 113, 2)
(8, 113, 3)
(8, 113, 4)
(8, 113, 5)
(8, 113, 6)
(8, 113, 7)
(8, 114, 0)
(8, 114, 1)
(8, 114, 2)
(8, 114, 3)
(8, 114, 4)
(8, 114, 5)
(8, 114, 6)
(8, 114, 7)
(8, 115, 0)
(8, 115, 1)
(8, 115, 2)
(8, 115, 3)
(8, 115, 4)
(8, 115, 5)
(8, 115, 6)
(8, 115, 7)
(8, 116, 0)
(8, 116, 1)
(8, 116, 2)
(8, 116, 3)
(8, 116, 4)
(8, 116, 5)
(8, 116, 6)
(8, 116, 7)
(8, 117, 0)
(8, 117, 1)
(8, 117, 2)
(8, 117, 3)
(8, 117, 4)
(8, 117, 5)
(8, 117, 6)
(8, 117, 7)
(8, 118, 0)
(8, 118, 1)
(8, 118, 2)
(8, 118, 3)
(8, 118, 4)
(8, 118, 5)
(8, 118, 6)
(8, 118, 7)
(8, 119, 0)
(8, 119, 1)
(8, 119, 2)
(8, 119, 3)
(8, 119, 4)
(8, 119, 5)
(8, 119, 6)
(8, 119, 7)
(8, 120, 0)
(8, 120, 1)
(8, 120, 2)
(8, 120, 3)
(8, 120, 4)
(8, 120, 5)
(8, 120, 6)
(8, 120, 7)
(8, 121, 0)
(8, 121, 1)
(8, 121, 2)
(8, 121, 3)
(8, 121, 4)
(8, 121, 5)
(8, 121, 6)
(8, 121, 7)
(8, 122, 0)
(8, 122, 1)
(8, 122, 2)
(8, 122, 3)
(8, 122, 4)
(8, 122, 5)
(8, 122, 6)
(8, 122, 7)
(8, 123, 0)
(8, 123, 1)
(8, 123, 2)
(8, 123, 3)
(8, 123, 4)
(8, 123, 5)
(8, 123, 6)
(8, 123, 7)
(8, 124, 0)
(8, 124, 1)
(8, 124, 2)
(8, 124, 3)
(8, 124, 4)
(8, 124, 5)
(8, 124, 6)
(8, 124, 7)
(8, 125, 0)
(8, 125, 1)
(8, 125, 2)
(8, 125, 3)
(8, 125, 4)
(8, 125, 5)
(8, 125, 6)
(8, 125, 7)
(8, 126, 0)
(8, 126, 1)
(8, 126, 2)
(8, 126, 3)
(8, 126, 4)
(8, 126, 5)
(8, 126, 6)
(8, 126, 7)
(8, 127, 0)
(8, 127, 1)
(8, 127, 2)
(8, 127, 3)
(8, 127, 4)
(8, 127, 5)
(8, 127, 6)
(8, 127, 7)
(8, 128, 0)
(8, 128, 1)
(8, 128, 2)
(8, 128, 3)
(8, 128, 4)
(8, 128, 5)
(8, 128, 6)
(8, 128, 7)
(8, 129, 0)
(8, 129, 1)
(8, 129, 2)
(8, 129, 3)
(8, 129, 4)
(8, 129, 5)
(8, 129, 6)
(8, 129, 7)
(8, 130, 0)
(8, 130, 1)
(8, 130, 2)
(8, 130, 3)
(8, 130, 4)
(8, 130, 5)
(8, 130, 6)
(8, 130, 7)
(8, 131, 0)
(8, 131, 1)
(8, 131, 2)
(8, 131, 3)
(8, 131, 4)
(8, 131, 5)
(8, 131, 6)
(8, 131, 7)
(8, 132, 0)
(8, 132, 1)
(8, 132, 2)
(8, 132, 3)
(8, 132, 4)
(8, 132, 5)
(8, 132, 6)
(8, 132, 7)
(8, 133, 0)
(8, 133, 1)
(8, 133, 2)
(8, 133, 3)
(8, 133, 4)
(8, 133, 5)
(8, 133, 6)
(8, 133, 7)
(8, 134, 0)
(8, 134, 1)
(8, 134, 2)
(8, 134, 3)
(8, 134, 4)
(8, 134, 5)
(8, 134, 6)
(8, 134, 7)
(8, 135, 0)
(8, 135, 1)
(8, 135, 2)
(8, 135, 3)
(8, 135, 4)
(8, 135, 5)
(8, 135, 6)
(8, 135, 7)
(8, 136, 0)
(8, 136, 1)
(8, 136, 2)
(8, 136, 3)
(8, 136, 4)
(8, 136, 5)
(8, 136, 6)
(8, 136, 7)
(8, 137, 0)
(8, 137, 1)
(8, 137, 2)
(8, 137, 3)
(8, 137, 4)
(8, 137, 5)
(8, 137, 6)
(8, 137, 7)
(8, 138, 0)
(8, 138, 1)
(8, 138, 2)
(8, 138, 3)
(8, 138, 4)
(8, 138, 5)
(8, 138, 6)
(8, 138, 7)
(8, 139, 0)
(8, 139, 1)
(8, 139, 2)
(8, 139, 3)
(8, 139, 4)
(8, 139, 5)
(8, 139, 6)
(8, 139, 7)
(8, 140, 0)
(8, 140, 1)
(8, 140, 2)
(8, 140, 3)
(8, 140, 4)
(8, 140, 5)
(8, 140, 6)
(8, 140, 7)
(8, 141, 0)
(8, 141, 1)
(8, 141, 2)
(8, 141, 3)
(8, 141, 4)
(8, 141, 5)
(8, 141, 6)
(8, 141, 7)
(8, 142, 0)
(8, 142, 1)
(8, 142, 2)
(8, 142, 3)
(8, 142, 4)
(8, 142, 5)
(8, 142, 6)
(8, 142, 7)
(8, 143, 0)
(8, 143, 1)
(8, 143, 2)
(8, 143, 3)
(8, 143, 4)
(8, 143, 5)
(8, 143, 6)
(8, 143, 7)
(8, 144, 0)
(8, 144, 1)
(8, 144, 2)
(8, 144, 3)
(8, 144, 4)
(8, 144, 5)
(8, 144, 6)
(8, 144, 7)
(8, 145, 0)
(8, 145, 1)
(8, 145, 2)
(8, 145, 3)
(8, 145, 4)
(8, 145, 5)
(8, 145, 6)
(8, 145, 7)
(8, 146, 0)
(8, 146, 1)
(8, 146, 2)
(8, 146, 3)
(8, 146, 4)
(8, 146, 5)
(8, 146, 6)
(8, 146, 7)
(8, 147, 0)
(8, 147, 1)
(8, 147, 2)
(8, 147, 3)
(8, 147, 4)
(8, 147, 5)
(8, 147, 6)
(8, 147, 7)
(8, 148, 0)
(8, 148, 1)
(8, 148, 2)
(8, 148, 3)
(8, 148, 4)
(8, 148, 5)
(8, 148, 6)
(8, 148, 7)
(8, 149, 0)
(8, 149, 1)
(8, 149, 2)
(8, 149, 3)
(8, 149, 4)
(8, 149, 5)
(8, 149, 6)
(8, 149, 7)
(8, 150, 0)
(8, 150, 1)
(8, 150, 2)
(8, 150, 3)
(8, 150, 4)
(8, 150, 5)
(8, 150, 6)
(8, 150, 7)
(8, 151, 0)
(8, 151, 1)
(8, 151, 2)
(8, 151, 3)
(8, 151, 4)
(8, 151, 5)
(8, 151, 6)
(8, 151, 7)
(8, 152, 0)
(8, 152, 1)
(8, 152, 2)
(8, 152, 3)
(8, 152, 4)
(8, 152, 5)
(8, 152, 6)
(8, 152, 7)
(8, 153, 0)
(8, 153, 1)
(8, 153, 2)
(8, 153, 3)
(8, 153, 4)
(8, 153, 5)
(8, 153, 6)
(8, 153, 7)
(8, 154, 0)
(8, 154, 1)
(8, 154, 2)
(8, 154, 3)
(8, 154, 4)
(8, 154, 5)
(8, 154, 6)
(8, 154, 7)
(8, 155, 0)
(8, 155, 1)
(8, 155, 2)
(8, 155, 3)
(8, 155, 4)
(8, 155, 5)
(8, 155, 6)
(8, 155, 7)
(8, 156, 0)
(8, 156, 1)
(8, 156, 2)
(8, 156, 3)
(8, 156, 4)
(8, 156, 5)
(8, 156, 6)
(8, 156, 7)
(8, 157, 0)
(8, 157, 1)
(8, 157, 2)
(8, 157, 3)
(8, 157, 4)
(8, 157, 5)
(8, 157, 6)
(8, 157, 7)
(8, 158, 0)
(8, 158, 1)
(8, 158, 2)
(8, 158, 3)
(8, 158, 4)
(8, 158, 5)
(8, 158, 6)
(8, 158, 7)
(8, 159, 0)
(8, 159, 1)
(8, 159, 2)
(8, 159, 3)
(8, 159, 4)
(8, 159, 5)
(8, 159, 6)
(8, 159, 7)
(8, 160, 0)
(8, 160, 1)
(8, 160, 2)
(8, 160, 3)
(8, 160, 4)
(8, 160, 5)
(8, 160, 6)
(8, 160, 7)
(8, 161, 0)
(8, 161, 1)
(8, 161, 2)
(8, 161, 3)
(8, 161, 4)
(8, 161, 5)
(8, 161, 6)
(8, 161, 7)
(8, 162, 0)
(8, 162, 1)
(8, 162, 2)
(8, 162, 3)
(8, 162, 4)
(8, 162, 5)
(8, 162, 6)
(8, 162, 7)
(8, 163, 0)
(8, 163, 1)
(8, 163, 2)
(8, 163, 3)
(8, 163, 4)
(8, 163, 5)
(8, 163, 6)
(8, 163, 7)
(8, 164, 0)
(8, 164, 1)
(8, 164, 2)
(8, 164, 3)
(8, 164, 4)
(8, 164, 5)
(8, 164, 6)
(8, 164, 7)
(8, 165, 0)
(8, 165, 1)
(8, 165, 2)
(8, 165, 3)
(8, 165, 4)
(8, 165, 5)
(8, 165, 6)
(8, 165, 7)
(8, 166, 0)
(8, 166, 1)
(8, 166, 2)
(8, 166, 3)
(8, 166, 4)
(8, 166, 5)
(8, 166, 6)
(8, 166, 7)
(8, 167, 0)
(8, 167, 1)
(8, 167, 2)
(8, 167, 3)
(8, 167, 4)
(8, 167, 5)
(8, 167, 6)
(8, 167, 7)
(8, 168, 0)
(8, 168, 1)
(8, 168, 2)
(8, 168, 3)
(8, 168, 4)
(8, 168, 5)
(8, 168, 6)
(8, 168, 7)
(8, 169, 0)
(8, 169, 1)
(8, 169, 2)
(8, 169, 3)
(8, 169, 4)
(8, 169, 5)
(8, 169, 6)
(8, 169, 7)
(8, 170, 0)
(8, 170, 1)
(8, 170, 2)
(8, 170, 3)
(8, 170, 4)
(8, 170, 5)
(8, 170, 6)
(8, 170, 7)
(8, 171, 0)
(8, 171, 1)
(8, 171, 2)
(8, 171, 3)
(8, 171, 4)
(8, 171, 5)
(8, 171, 6)
(8, 171, 7)
(8, 172, 0)
(8, 172, 1)
(8, 172, 2)
(8, 172, 3)
(8, 172, 4)
(8, 172, 5)
(8, 172, 6)
(8, 172, 7)
(8, 173, 0)
(8, 173, 1)
(8, 173, 2)
(8, 173, 3)
(8, 173, 4)
(8, 173, 5)
(8, 173, 6)
(8, 173, 7)
(8, 174, 0)
(8, 174, 1)
(8, 174, 2)
(8, 174, 3)
(8, 174, 4)
(8, 174, 5)
(8, 174, 6)
(8, 174, 7)
(8, 175, 0)
(8, 175, 1)
(8, 175, 2)
(8, 175, 3)
(8, 175, 4)
(8, 175, 5)
(8, 175, 6)
(8, 175, 7)
(8, 176, 0)
(8, 176, 1)
(8, 176, 2)
(8, 176, 3)
(8, 176, 4)
(8, 176, 5)
(8, 176, 6)
(8, 176, 7)
(8, 177, 0)
(8, 177, 1)
(8, 177, 2)
(8, 177, 3)
(8, 177, 4)
(8, 177, 5)
(8, 177, 6)
(8, 177, 7)
(8, 178, 0)
(8, 178, 1)
(8, 178, 2)
(8, 178, 3)
(8, 178, 4)
(8, 178, 5)
(8, 178, 6)
(8, 178, 7)
(8, 179, 0)
(8, 179, 1)
(8, 179, 2)
(8, 179, 3)
(8, 179, 4)
(8, 179, 5)
(8, 179, 6)
(8, 179, 7)
(8, 180, 0)
(8, 180, 1)
(8, 180, 2)
(8, 180, 3)
(8, 180, 4)
(8, 180, 5)
(8, 180, 6)
(8, 180, 7)
(8, 181, 0)
(8, 181, 1)
(8, 181, 2)
(8, 181, 3)
(8, 181, 4)
(8, 181, 5)
(8, 181, 6)
(8, 181, 7)
(8, 182, 0)
(8, 182, 1)
(8, 182, 2)
(8, 182, 3)
(8, 182, 4)
(8, 182, 5)
(8, 182, 6)
(8, 182, 7)
(8, 183, 0)
(8, 183, 1)
(8, 183, 2)
(8, 183, 3)
(8, 183, 4)
(8, 183, 5)
(8, 183, 6)
(8, 183, 7)
(8, 184, 0)
(8, 184, 1)
(8, 184, 2)
(8, 184, 3)
(8, 184, 4)
(8, 184, 5)
(8, 184, 6)
(8, 184, 7)
(8, 185, 0)
(8, 185, 1)
(8, 185, 2)
(8, 185, 3)
(8, 185, 4)
(8, 185, 5)
(8, 185, 6)
(8, 185, 7)
(8, 186, 0)
(8, 186, 1)
(8, 186, 2)
(8, 186, 3)
(8, 186, 4)
(8, 186, 5)
(8, 186, 6)
(8, 186, 7)
(8, 187, 0)
(8, 187, 1)
(8, 187, 2)
(8, 187, 3)
(8, 187, 4)
(8, 187, 5)
(8, 187, 6)
(8, 187, 7)
(8, 188, 0)
(8, 188, 1)
(8, 188, 2)
(8, 188, 3)
(8, 188, 4)
(8, 188, 5)
(8, 188, 6)
(8, 188, 7)
(8, 189, 0)
(8, 189, 1)
(8, 189, 2)
(8, 189, 3)
(8, 189, 4)
(8, 189, 5)
(8, 189, 6)
(8, 189, 7)
(8, 190, 0)
(8, 190, 1)
(8, 190, 2)
(8, 190, 3)
(8, 190, 4)
(8, 190, 5)
(8, 190, 6)
(8, 190, 7)
(8, 191, 0)
(8, 191, 1)
(8, 191, 2)
(8, 191, 3)
(8, 191, 4)
(8, 191, 5)
(8, 191, 6)
(8, 191, 7)
(8, 192, 0)
(8, 192, 1)
(8, 192, 2)
(8, 192, 3)
(8, 192, 4)
(8, 192, 5)
(8, 192, 6)
(8, 192, 7)
(8, 193, 0)
(8, 193, 1)
(8, 193, 2)
(8, 193, 3)
(8, 193, 4)
(8, 193, 5)
(8, 193, 6)
(8, 193, 7)
(8, 194, 0)
(8, 194, 1)
(8, 194, 2)
(8, 194, 3)
(8, 194, 4)
(8, 194, 5)
(8, 194, 6)
(8, 194, 7)
(8, 195, 0)
(8, 195, 1)
(8, 195, 2)
(8, 195, 3)
(8, 195, 4)
(8, 195, 5)
(8, 195, 6)
(8, 195, 7)
(8, 196, 0)
(8, 196, 1)
(8, 196, 2)
(8, 196, 3)
(8, 196, 4)
(8, 196, 5)
(8, 196, 6)
(8, 196, 7)
(8, 197, 0)
(8, 197, 1)
(8, 197, 2)
(8, 197, 3)
(8, 197, 4)
(8, 197, 5)
(8, 197, 6)
(8, 197, 7)
(8, 198, 0)
(8, 198, 1)
(8, 198, 2)
(8, 198, 3)
(8, 198, 4)
(8, 198, 5)
(8, 198, 6)
(8, 198, 7)
(8, 199, 0)
(8, 199, 1)
(8, 199, 2)
(8, 199, 3)
(8, 199, 4)
(8, 199, 5)
(8, 199, 6)
(8, 199, 7)
(8, 200, 0)
(8, 200, 1)
(8, 200, 2)
(8, 200, 3)
(8, 200, 4)
(8, 200, 5)
(8, 200, 6)
(8, 200, 7)
(8, 201, 0)
(8, 201, 1)
(8, 201, 2)
(8, 201, 3)
(8, 201, 4)
(8, 201, 5)
(8, 201, 6)
(8, 201, 7)
(8, 202, 0)
(8, 202, 1)
(8, 202, 2)
(8, 202, 3)
(8, 202, 4)
(8, 202, 5)
(8, 202, 6)
(8, 202, 7)
(8, 203, 0)
(8, 203, 1)
(8, 203, 2)
(8, 203, 3)
(8, 203, 4)
(8, 203, 5)
(8, 203, 6)
(8, 203, 7)
(8, 204, 0)
(8, 204, 1)
(8, 204, 2)
(8, 204, 3)
(8, 204, 4)
(8, 204, 5)
(8, 204, 6)
(8, 204, 7)
(8, 205, 0)
(8, 205, 1)
(8, 205, 2)
(8, 205, 3)
(8, 205, 4)
(8, 205, 5)
(8, 205, 6)
(8, 205, 7)
(8, 206, 0)
(8, 206, 1)
(8, 206, 2)
(8, 206, 3)
(8, 206, 4)
(8, 206, 5)
(8, 206, 6)
(8, 206, 7)
(8, 207, 0)
(8, 207, 1)
(8, 207, 2)
(8, 207, 3)
(8, 207, 4)
(8, 207, 5)
(8, 207, 6)
(8, 207, 7)
(8, 208, 0)
(8, 208, 1)
(8, 208, 2)
(8, 208, 3)
(8, 208, 4)
(8, 208, 5)
(8, 208, 6)
(8, 208, 7)
(8, 209, 0)
(8, 209, 1)
(8, 209, 2)
(8, 209, 3)
(8, 209, 4)
(8, 209, 5)
(8, 209, 6)
(8, 209, 7)
(8, 210, 0)
(8, 210, 1)
(8, 210, 2)
(8, 210, 3)
(8, 210, 4)
(8, 210, 5)
(8, 210, 6)
(8, 210, 7)
(8, 211, 0)
(8, 211, 1)
(8, 211, 2)
(8, 211, 3)
(8, 211, 4)
(8, 211, 5)
(8, 211, 6)
(8, 211, 7)
(8, 212, 0)
(8, 212, 1)
(8, 212, 2)
(8, 212, 3)
(8, 212, 4)
(8, 212, 5)
(8, 212, 6)
(8, 212, 7)
(8, 213, 0)
(8, 213, 1)
(8, 213, 2)
(8, 213, 3)
(8, 213, 4)
(8, 213, 5)
(8, 213, 6)
(8, 213, 7)
(8, 214, 0)
(8, 214, 1)
(8, 214, 2)
(8, 214, 3)
(8, 214, 4)
(8, 214, 5)
(8, 214, 6)
(8, 214, 7)
(8, 215, 0)
(8, 215, 1)
(8, 215, 2)
(8, 215, 3)
(8, 215, 4)
(8, 215, 5)
(8, 215, 6)
(8, 215, 7)
(8, 216, 0)
(8, 216, 1)
(8, 216, 2)
(8, 216, 3)
(8, 216, 4)
(8, 216, 5)
(8, 216, 6)
(8, 216, 7)
(8, 217, 0)
(8, 217, 1)
(8, 217, 2)
(8, 217, 3)
(8, 217, 4)
(8, 217, 5)
(8, 217, 6)
(8, 217, 7)
(8, 218, 0)
(8, 218, 1)
(8, 218, 2)
(8, 218, 3)
(8, 218, 4)
(8, 218, 5)
(8, 218, 6)
(8, 218, 7)
(8, 219, 0)
(8, 219, 1)
(8, 219, 2)
(8, 219, 3)
(8, 219, 4)
(8, 219, 5)
(8, 219, 6)
(8, 219, 7)
(8, 220, 0)
(8, 220, 1)
(8, 220, 2)
(8, 220, 3)
(8, 220, 4)
(8, 220, 5)
(8, 220, 6)
(8, 220, 7)
(8, 221, 0)
(8, 221, 1)
(8, 221, 2)
(8, 221, 3)
(8, 221, 4)
(8, 221, 5)
(8, 221, 6)
(8, 221, 7)
(8, 222, 0)
(8, 222, 1)
(8, 222, 2)
(8, 222, 3)
(8, 222, 4)
(8, 222, 5)
(8, 222, 6)
(8, 222, 7)
(8, 223, 0)
(8, 223, 1)
(8, 223, 2)
(8, 223, 3)
(8, 223, 4)
(8, 223, 5)
(8, 223, 6)
(8, 223, 7)
(8, 224, 0)
(8, 224, 1)
(8, 224, 2)
(8, 224, 3)
(8, 224, 4)
(8, 224, 5)
(8, 224, 6)
(8, 224, 7)
(8, 225, 0)
(8, 225, 1)
(8, 225, 2)
(8, 225, 3)
(8, 225, 4)
(8, 225, 5)
(8, 225, 6)
(8, 225, 7)
(8, 226, 0)
(8, 226, 1)
(8, 226, 2)
(8, 226, 3)
(8, 226, 4)
(8, 226, 5)
(8, 226, 6)
(8, 226, 7)
(8, 227, 0)
(8, 227, 1)
(8, 227, 2)
(8, 227, 3)
(8, 227, 4)
(8, 227, 5)
(8, 227, 6)
(8, 227, 7)
(8, 228, 0)
(8, 228, 1)
(8, 228, 2)
(8, 228, 3)
(8, 228, 4)
(8, 228, 5)
(8, 228, 6)
(8, 228, 7)
(8, 229, 0)
(8, 229, 1)
(8, 229, 2)
(8, 229, 3)
(8, 229, 4)
(8, 229, 5)
(8, 229, 6)
(8, 229, 7)
(8, 230, 0)
(8, 230, 1)
(8, 230, 2)
(8, 230, 3)
(8, 230, 4)
(8, 230, 5)
(8, 230, 6)
(8, 230, 7)
(8, 231, 0)
(8, 231, 1)
(8, 231, 2)
(8, 231, 3)
(8, 231, 4)
(8, 231, 5)
(8, 231, 6)
(8, 231, 7)
(8, 232, 0)
(8, 232, 1)
(8, 232, 2)
(8, 232, 3)
(8, 232, 4)
(8, 232, 5)
(8, 232, 6)
(8, 232, 7)
(8, 233, 0)
(8, 233, 1)
(8, 233, 2)
(8, 233, 3)
(8, 233, 4)
(8, 233, 5)
(8, 233, 6)
(8, 233, 7)
(8, 234, 0)
(8, 234, 1)
(8, 234, 2)
(8, 234, 3)
(8, 234, 4)
(8, 234, 5)
(8, 234, 6)
(8, 234, 7)
(8, 235, 0)
(8, 235, 1)
(8, 235, 2)
(8, 235, 3)
(8, 235, 4)
(8, 235, 5)
(8, 235, 6)
(8, 235, 7)
(8, 236, 0)
(8, 236, 1)
(8, 236, 2)
(8, 236, 3)
(8, 236, 4)
(8, 236, 5)
(8, 236, 6)
(8, 236, 7)
(8, 237, 0)
(8, 237, 1)
(8, 237, 2)
(8, 237, 3)
(8, 237, 4)
(8, 237, 5)
(8, 237, 6)
(8, 237, 7)
(8, 238, 0)
(8, 238, 1)
(8, 238, 2)
(8, 238, 3)
(8, 238, 4)
(8, 238, 5)
(8, 238, 6)
(8, 238, 7)
(8, 239, 0)
(8, 239, 1)
(8, 239, 2)
(8, 239, 3)
(8, 239, 4)
(8, 239, 5)
(8, 239, 6)
(8, 239, 7)
(8, 240, 0)
(8, 240, 1)
(8, 240, 2)
(8, 240, 3)
(8, 240, 4)
(8, 240, 5)
(8, 240, 6)
(8, 240, 7)
(8, 241, 0)
(8, 241, 1)
(8, 241, 2)
(8, 241, 3)
(8, 241, 4)
(8, 241, 5)
(8, 241, 6)
(8, 241, 7)
(8, 242, 0)
(8, 242, 1)
(8, 242, 2)
(8, 242, 3)
(8, 242, 4)
(8, 242, 5)
(8, 242, 6)
(8, 242, 7)
(8, 243, 0)
(8, 243, 1)
(8, 243, 2)
(8, 243, 3)
(8, 243, 4)
(8, 243, 5)
(8, 243, 6)
(8, 243, 7)
(8, 244, 0)
(8, 244, 1)
(8, 244, 2)
(8, 244, 3)
(8, 244, 4)
(8, 244, 5)
(8, 244, 6)
(8, 244, 7)
(8, 245, 0)
(8, 245, 1)
(8, 245, 2)
(8, 245, 3)
(8, 245, 4)
(8, 245, 5)
(8, 245, 6)
(8, 245, 7)
(8, 246, 0)
(8, 246, 1)
(8, 246, 2)
(8, 246, 3)
(8, 246, 4)
(8, 246, 5)
(8, 246, 6)
(8, 246, 7)
(8, 247, 0)
(8, 247, 1)
(8, 247, 2)
(8, 247, 3)
(8, 247, 4)
(8, 247, 5)
(8, 247, 6)
(8, 247, 7)
(8, 248, 0)
(8, 248, 1)
(8, 248, 2)
(8, 248, 3)
(8, 248, 4)
(8, 248, 5)
(8, 248, 6)
(8, 248, 7)
(8, 249, 0)
(8, 249, 1)
(8, 249, 2)
(8, 249, 3)
(8, 249, 4)
(8, 249, 5)
(8, 249, 6)
(8, 249, 7)
(8, 250, 0)
(8, 250, 1)
(8, 250, 2)
(8, 250, 3)
(8, 250, 4)
(8, 250, 5)
(8, 250, 6)
(8, 250, 7)
(8, 251, 0)
(8, 251, 1)
(8, 251, 2)
(8, 251, 3)
(8, 251, 4)
(8, 251, 5)
(8, 251, 6)
(8, 251, 7)
(8, 252, 0)
(8, 252, 1)
(8, 252, 2)
(8, 252, 3)
(8, 252, 4)
(8, 252, 5)
(8, 252, 6)
(8, 252, 7)
(8, 253, 0)
(8, 253, 1)
(8, 253, 2)
(8, 253, 3)
(8, 253, 4)
(8, 253, 5)
(8, 253, 6)
(8, 253, 7)
(8, 254, 0)
(8, 254, 1)
(8, 254, 2)
(8, 254, 3)
(8, 254, 4)
(8, 254, 5)
(8, 254, 6)
(8, 254, 7)
(8, 255, 0)
(8, 255, 1)
(8, 255, 2)
(8, 255, 3)
(8, 255, 4)
(8, 255, 5)
(8, 255, 6)
(8, 255, 7)
(9, 0, 0)
(9, 0, 1)
(9, 0, 2)
(9, 0, 3)
(9, 0, 4)
(9, 0, 5)
(9, 0, 6)
(9, 0, 7)
(9, 1, 0)
(9, 1, 1)
(9, 1, 2)
(9, 1, 3)
(9, 1, 4)
(9, 1, 5)
(9, 1, 6)
(9, 1, 7)
(9, 2, 0)
(9, 2, 1)
(9, 2, 2)
(9, 2, 3)
(9, 2, 4)
(9, 2, 5)
(9, 2, 6)
(9, 2, 7)
(9, 3, 0)
(9, 3, 1)
(9, 3, 2)
(9, 3, 3)
(9, 3, 4)
(9, 3, 5)
(9, 3, 6)
(9, 3, 7)
(9, 4, 0)
(9, 4, 1)
(9, 4, 2)
(9, 4, 3)
(9, 4, 4)
(9, 4, 5)
(9, 4, 6)
(9, 4, 7)
(9, 5, 0)
(9, 5, 1)
(9, 5, 2)
(9, 5, 3)
(9, 5, 4)
(9, 5, 5)
(9, 5, 6)
(9, 5, 7)
(9, 6, 0)
(9, 6, 1)
(9, 6, 2)
(9, 6, 3)
(9, 6, 4)
(9, 6, 5)
(9, 6, 6)
(9, 6, 7)
(9, 7, 0)
(9, 7, 1)
(9, 7, 2)
(9, 7, 3)
(9, 7, 4)
(9, 7, 5)
(9, 7, 6)
(9, 7, 7)
(9, 8, 0)
(9, 8, 1)
(9, 8, 2)
(9, 8, 3)
(9, 8, 4)
(9, 8, 5)
(9, 8, 6)
(9, 8, 7)
(9, 9, 0)
(9, 9, 1)
(9, 9, 2)
(9, 9, 3)
(9, 9, 4)
(9, 9, 5)
(9, 9, 6)
(9, 9, 7)
(9, 10, 0)
(9, 10, 1)
(9, 10, 2)
(9, 10, 3)
(9, 10, 4)
(9, 10, 5)
(9, 10, 6)
(9, 10, 7)
(9, 11, 0)
(9, 11, 1)
(9, 11, 2)
(9, 11, 3)
(9, 11, 4)
(9, 11, 5)
(9, 11, 6)
(9, 11, 7)
(9, 12, 0)
(9, 12, 1)
(9, 12, 2)
(9, 12, 3)
(9, 12, 4)
(9, 12, 5)
(9, 12, 6)
(9, 12, 7)
(9, 13, 0)
(9, 13, 1)
(9, 13, 2)
(9, 13, 3)
(9, 13, 4)
(9, 13, 5)
(9, 13, 6)
(9, 13, 7)
(9, 14, 0)
(9, 14, 1)
(9, 14, 2)
(9, 14, 3)
(9, 14, 4)
(9, 14, 5)
(9, 14, 6)
(9, 14, 7)
(9, 15, 0)
(9, 15, 1)
(9, 15, 2)
(9, 15, 3)
(9, 15, 4)
(9, 15, 5)
(9, 15, 6)
(9, 15, 7)
(9, 16, 0)
(9, 16, 1)
(9, 16, 2)
(9, 16, 3)
(9, 16, 4)
(9, 16, 5)
(9, 16, 6)
(9, 16, 7)
(9, 17, 0)
(9, 17, 1)
(9, 17, 2)
(9, 17, 3)
(9, 17, 4)
(9, 17, 5)
(9, 17, 6)
(9, 17, 7)
(9, 18, 0)
(9, 18, 1)
(9, 18, 2)
(9, 18, 3)
(9, 18, 4)
(9, 18, 5)
(9, 18, 6)
(9, 18, 7)
(9, 19, 0)
(9, 19, 1)
(9, 19, 2)
(9, 19, 3)
(9, 19, 4)
(9, 19, 5)
(9, 19, 6)
(9, 19, 7)
(9, 20, 0)
(9, 20, 1)
(9, 20, 2)
(9, 20, 3)
(9, 20, 4)
(9, 20, 5)
(9, 20, 6)
(9, 20, 7)
(9, 21, 0)
(9, 21, 1)
(9, 21, 2)
(9, 21, 3)
(9, 21, 4)
(9, 21, 5)
(9, 21, 6)
(9, 21, 7)
(9, 22, 0)
(9, 22, 1)
(9, 22, 2)
(9, 22, 3)
(9, 22, 4)
(9, 22, 5)
(9, 22, 6)
(9, 22, 7)
(9, 23, 0)
(9, 23, 1)
(9, 23, 2)
(9, 23, 3)
(9, 23, 4)
(9, 23, 5)
(9, 23, 6)
(9, 23, 7)
(9, 24, 0)
(9, 24, 1)
(9, 24, 2)
(9, 24, 3)
(9, 24, 4)
(9, 24, 5)
(9, 24, 6)
(9, 24, 7)
(9, 25, 0)
(9, 25, 1)
(9, 25, 2)
(9, 25, 3)
(9, 25, 4)
(9, 25, 5)
(9, 25, 6)
(9, 25, 7)
(9, 26, 0)
(9, 26, 1)
(9, 26, 2)
(9, 26, 3)
(9, 26, 4)
(9, 26, 5)
(9, 26, 6)
(9, 26, 7)
(9, 27, 0)
(9, 27, 1)
(9, 27, 2)
(9, 27, 3)
(9, 27, 4)
(9, 27, 5)
(9, 27, 6)
(9, 27, 7)
(9, 28, 0)
(9, 28, 1)
(9, 28, 2)
(9, 28, 3)
(9, 28, 4)
(9, 28, 5)
(9, 28, 6)
(9, 28, 7)
(9, 29, 0)
(9, 29, 1)
(9, 29, 2)
(9, 29, 3)
(9, 29, 4)
(9, 29, 5)
(9, 29, 6)
(9, 29, 7)
(9, 30, 0)
(9, 30, 1)
(9, 30, 2)
(9, 30, 3)
(9, 30, 4)
(9, 30, 5)
(9, 30, 6)
(9, 30, 7)
(9, 31, 0)
(9, 31, 1)
(9, 31, 2)
(9, 31, 3)
(9, 31, 4)
(9, 31, 5)
(9, 31, 6)
(9, 31, 7)
(9, 32, 0)
(9, 32, 1)
(9, 32, 2)
(9, 32, 3)
(9, 32, 4)
(9, 32, 5)
(9, 32, 6)
(9, 32, 7)
(9, 33, 0)
(9, 33, 1)
(9, 33, 2)
(9, 33, 3)
(9, 33, 4)
(9, 33, 5)
(9, 33, 6)
(9, 33, 7)
(9, 34, 0)
(9, 34, 1)
(9, 34, 2)
(9, 34, 3)
(9, 34, 4)
(9, 34, 5)
(9, 34, 6)
(9, 34, 7)
(9, 35, 0)
(9, 35, 1)
(9, 35, 2)
(9, 35, 3)
(9, 35, 4)
(9, 35, 5)
(9, 35, 6)
(9, 35, 7)
(9, 36, 0)
(9, 36, 1)
(9, 36, 2)
(9, 36, 3)
(9, 36, 4)
(9, 36, 5)
(9, 36, 6)
(9, 36, 7)
(9, 37, 0)
(9, 37, 1)
(9, 37, 2)
(9, 37, 3)
(9, 37, 4)
(9, 37, 5)
(9, 37, 6)
(9, 37, 7)
(9, 38, 0)
(9, 38, 1)
(9, 38, 2)
(9, 38, 3)
(9, 38, 4)
(9, 38, 5)
(9, 38, 6)
(9, 38, 7)
(9, 39, 0)
(9, 39, 1)
(9, 39, 2)
(9, 39, 3)
(9, 39, 4)
(9, 39, 5)
(9, 39, 6)
(9, 39, 7)
(9, 40, 0)
(9, 40, 1)
(9, 40, 2)
(9, 40, 3)
(9, 40, 4)
(9, 40, 5)
(9, 40, 6)
(9, 40, 7)
(9, 41, 0)
(9, 41, 1)
(9, 41, 2)
(9, 41, 3)
(9, 41, 4)
(9, 41, 5)
(9, 41, 6)
(9, 41, 7)
(9, 42, 0)
(9, 42, 1)
(9, 42, 2)
(9, 42, 3)
(9, 42, 4)
(9, 42, 5)
(9, 42, 6)
(9, 42, 7)
(9, 43, 0)
(9, 43, 1)
(9, 43, 2)
(9, 43, 3)
(9, 43, 4)
(9, 43, 5)
(9, 43, 6)
(9, 43, 7)
(9, 44, 0)
(9, 44, 1)
(9, 44, 2)
(9, 44, 3)
(9, 44, 4)
(9, 44, 5)
(9, 44, 6)
(9, 44, 7)
(9, 45, 0)
(9, 45, 1)
(9, 45, 2)
(9, 45, 3)
(9, 45, 4)
(9, 45, 5)
(9, 45, 6)
(9, 45, 7)
(9, 46, 0)
(9, 46, 1)
(9, 46, 2)
(9, 46, 3)
(9, 46, 4)
(9, 46, 5)
(9, 46, 6)
(9, 46, 7)
(9, 47, 0)
(9, 47, 1)
(9, 47, 2)
(9, 47, 3)
(9, 47, 4)
(9, 47, 5)
(9, 47, 6)
(9, 47, 7)
(9, 48, 0)
(9, 48, 1)
(9, 48, 2)
(9, 48, 3)
(9, 48, 4)
(9, 48, 5)
(9, 48, 6)
(9, 48, 7)
(9, 49, 0)
(9, 49, 1)
(9, 49, 2)
(9, 49, 3)
(9, 49, 4)
(9, 49, 5)
(9, 49, 6)
(9, 49, 7)
(9, 50, 0)
(9, 50, 1)
(9, 50, 2)
(9, 50, 3)
(9, 50, 4)
(9, 50, 5)
(9, 50, 6)
(9, 50, 7)
(9, 51, 0)
(9, 51, 1)
(9, 51, 2)
(9, 51, 3)
(9, 51, 4)
(9, 51, 5)
(9, 51, 6)
(9, 51, 7)
(9, 52, 0)
(9, 52, 1)
(9, 52, 2)
(9, 52, 3)
(9, 52, 4)
(9, 52, 5)
(9, 52, 6)
(9, 52, 7)
(9, 53, 0)
(9, 53, 1)
(9, 53, 2)
(9, 53, 3)
(9, 53, 4)
(9, 53, 5)
(9, 53, 6)
(9, 53, 7)
(9, 54, 0)
(9, 54, 1)
(9, 54, 2)
(9, 54, 3)
(9, 54, 4)
(9, 54, 5)
(9, 54, 6)
(9, 54, 7)
(9, 55, 0)
(9, 55, 1)
(9, 55, 2)
(9, 55, 3)
(9, 55, 4)
(9, 55, 5)
(9, 55, 6)
(9, 55, 7)
(9, 56, 0)
(9, 56, 1)
(9, 56, 2)
(9, 56, 3)
(9, 56, 4)
(9, 56, 5)
(9, 56, 6)
(9, 56, 7)
(9, 57, 0)
(9, 57, 1)
(9, 57, 2)
(9, 57, 3)
(9, 57, 4)
(9, 57, 5)
(9, 57, 6)
(9, 57, 7)
(9, 58, 0)
(9, 58, 1)
(9, 58, 2)
(9, 58, 3)
(9, 58, 4)
(9, 58, 5)
(9, 58, 6)
(9, 58, 7)
(9, 59, 0)
(9, 59, 1)
(9, 59, 2)
(9, 59, 3)
(9, 59, 4)
(9, 59, 5)
(9, 59, 6)
(9, 59, 7)
(9, 60, 0)
(9, 60, 1)
(9, 60, 2)
(9, 60, 3)
(9, 60, 4)
(9, 60, 5)
(9, 60, 6)
(9, 60, 7)
(9, 61, 0)
(9, 61, 1)
(9, 61, 2)
(9, 61, 3)
(9, 61, 4)
(9, 61, 5)
(9, 61, 6)
(9, 61, 7)
(9, 62, 0)
(9, 62, 1)
(9, 62, 2)
(9, 62, 3)
(9, 62, 4)
(9, 62, 5)
(9, 62, 6)
(9, 62, 7)
(9, 63, 0)
(9, 63, 1)
(9, 63, 2)
(9, 63, 3)
(9, 63, 4)
(9, 63, 5)
(9, 63, 6)
(9, 63, 7)
(9, 64, 0)
(9, 64, 1)
(9, 64, 2)
(9, 64, 3)
(9, 64, 4)
(9, 64, 5)
(9, 64, 6)
(9, 64, 7)
(9, 65, 0)
(9, 65, 1)
(9, 65, 2)
(9, 65, 3)
(9, 65, 4)
(9, 65, 5)
(9, 65, 6)
(9, 65, 7)
(9, 66, 0)
(9, 66, 1)
(9, 66, 2)
(9, 66, 3)
(9, 66, 4)
(9, 66, 5)
(9, 66, 6)
(9, 66, 7)
(9, 67, 0)
(9, 67, 1)
(9, 67, 2)
(9, 67, 3)
(9, 67, 4)
(9, 67, 5)
(9, 67, 6)
(9, 67, 7)
(9, 68, 0)
(9, 68, 1)
(9, 68, 2)
(9, 68, 3)
(9, 68, 4)
(9, 68, 5)
(9, 68, 6)
(9, 68, 7)
(9, 69, 0)
(9, 69, 1)
(9, 69, 2)
(9, 69, 3)
(9, 69, 4)
(9, 69, 5)
(9, 69, 6)
(9, 69, 7)
(9, 70, 0)
(9, 70, 1)
(9, 70, 2)
(9, 70, 3)
(9, 70, 4)
(9, 70, 5)
(9, 70, 6)
(9, 70, 7)
(9, 71, 0)
(9, 71, 1)
(9, 71, 2)
(9, 71, 3)
(9, 71, 4)
(9, 71, 5)
(9, 71, 6)
(9, 71, 7)
(9, 72, 0)
(9, 72, 1)
(9, 72, 2)
(9, 72, 3)
(9, 72, 4)
(9, 72, 5)
(9, 72, 6)
(9, 72, 7)
(9, 73, 0)
(9, 73, 1)
(9, 73, 2)
(9, 73, 3)
(9, 73, 4)
(9, 73, 5)
(9, 73, 6)
(9, 73, 7)
(9, 74, 0)
(9, 74, 1)
(9, 74, 2)
(9, 74, 3)
(9, 74, 4)
(9, 74, 5)
(9, 74, 6)
(9, 74, 7)
(9, 75, 0)
(9, 75, 1)
(9, 75, 2)
(9, 75, 3)
(9, 75, 4)
(9, 75, 5)
(9, 75, 6)
(9, 75, 7)
(9, 76, 0)
(9, 76, 1)
(9, 76, 2)
(9, 76, 3)
(9, 76, 4)
(9, 76, 5)
(9, 76, 6)
(9, 76, 7)
(9, 77, 0)
(9, 77, 1)
(9, 77, 2)
(9, 77, 3)
(9, 77, 4)
(9, 77, 5)
(9, 77, 6)
(9, 77, 7)
(9, 78, 0)
(9, 78, 1)
(9, 78, 2)
(9, 78, 3)
(9, 78, 4)
(9, 78, 5)
(9, 78, 6)
(9, 78, 7)
(9, 79, 0)
(9, 79, 1)
(9, 79, 2)
(9, 79, 3)
(9, 79, 4)
(9, 79, 5)
(9, 79, 6)
(9, 79, 7)
(9, 80, 0)
(9, 80, 1)
(9, 80, 2)
(9, 80, 3)
(9, 80, 4)
(9, 80, 5)
(9, 80, 6)
(9, 80, 7)
(9, 81, 0)
(9, 81, 1)
(9, 81, 2)
(9, 81, 3)
(9, 81, 4)
(9, 81, 5)
(9, 81, 6)
(9, 81, 7)
(9, 82, 0)
(9, 82, 1)
(9, 82, 2)
(9, 82, 3)
(9, 82, 4)
(9, 82, 5)
(9, 82, 6)
(9, 82, 7)
(9, 83, 0)
(9, 83, 1)
(9, 83, 2)
(9, 83, 3)
(9, 83, 4)
(9, 83, 5)
(9, 83, 6)
(9, 83, 7)
(9, 84, 0)
(9, 84, 1)
(9, 84, 2)
(9, 84, 3)
(9, 84, 4)
(9, 84, 5)
(9, 84, 6)
(9, 84, 7)
(9, 85, 0)
(9, 85, 1)
(9, 85, 2)
(9, 85, 3)
(9, 85, 4)
(9, 85, 5)
(9, 85, 6)
(9, 85, 7)
(9, 86, 0)
(9, 86, 1)
(9, 86, 2)
(9, 86, 3)
(9, 86, 4)
(9, 86, 5)
(9, 86, 6)
(9, 86, 7)
(9, 87, 0)
(9, 87, 1)
(9, 87, 2)
(9, 87, 3)
(9, 87, 4)
(9, 87, 5)
(9, 87, 6)
(9, 87, 7)
(9, 88, 0)
(9, 88, 1)
(9, 88, 2)
(9, 88, 3)
(9, 88, 4)
(9, 88, 5)
(9, 88, 6)
(9, 88, 7)
(9, 89, 0)
(9, 89, 1)
(9, 89, 2)
(9, 89, 3)
(9, 89, 4)
(9, 89, 5)
(9, 89, 6)
(9, 89, 7)
(9, 90, 0)
(9, 90, 1)
(9, 90, 2)
(9, 90, 3)
(9, 90, 4)
(9, 90, 5)
(9, 90, 6)
(9, 90, 7)
(9, 91, 0)
(9, 91, 1)
(9, 91, 2)
(9, 91, 3)
(9, 91, 4)
(9, 91, 5)
(9, 91, 6)
(9, 91, 7)
(9, 92, 0)
(9, 92, 1)
(9, 92, 2)
(9, 92, 3)
(9, 92, 4)
(9, 92, 5)
(9, 92, 6)
(9, 92, 7)
(9, 93, 0)
(9, 93, 1)
(9, 93, 2)
(9, 93, 3)
(9, 93, 4)
(9, 93, 5)
(9, 93, 6)
(9, 93, 7)
(9, 94, 0)
(9, 94, 1)
(9, 94, 2)
(9, 94, 3)
(9, 94, 4)
(9, 94, 5)
(9, 94, 6)
(9, 94, 7)
(9, 95, 0)
(9, 95, 1)
(9, 95, 2)
(9, 95, 3)
(9, 95, 4)
(9, 95, 5)
(9, 95, 6)
(9, 95, 7)
(9, 96, 0)
(9, 96, 1)
(9, 96, 2)
(9, 96, 3)
(9, 96, 4)
(9, 96, 5)
(9, 96, 6)
(9, 96, 7)
(9, 97, 0)
(9, 97, 1)
(9, 97, 2)
(9, 97, 3)
(9, 97, 4)
(9, 97, 5)
(9, 97, 6)
(9, 97, 7)
(9, 98, 0)
(9, 98, 1)
(9, 98, 2)
(9, 98, 3)
(9, 98, 4)
(9, 98, 5)
(9, 98, 6)
(9, 98, 7)
(9, 99, 0)
(9, 99, 1)
(9, 99, 2)
(9, 99, 3)
(9, 99, 4)
(9, 99, 5)
(9, 99, 6)
(9, 99, 7)
(9, 100, 0)
(9, 100, 1)
(9, 100, 2)
(9, 100, 3)
(9, 100, 4)
(9, 100, 5)
(9, 100, 6)
(9, 100, 7)
(9, 101, 0)
(9, 101, 1)
(9, 101, 2)
(9, 101, 3)
(9, 101, 4)
(9, 101, 5)
(9, 101, 6)
(9, 101, 7)
(9, 102, 0)
(9, 102, 1)
(9, 102, 2)
(9, 102, 3)
(9, 102, 4)
(9, 102, 5)
(9, 102, 6)
(9, 102, 7)
(9, 103, 0)
(9, 103, 1)
(9, 103, 2)
(9, 103, 3)
(9, 103, 4)
(9, 103, 5)
(9, 103, 6)
(9, 103, 7)
(9, 104, 0)
(9, 104, 1)
(9, 104, 2)
(9, 104, 3)
(9, 104, 4)
(9, 104, 5)
(9, 104, 6)
(9, 104, 7)
(9, 105, 0)
(9, 105, 1)
(9, 105, 2)
(9, 105, 3)
(9, 105, 4)
(9, 105, 5)
(9, 105, 6)
(9, 105, 7)
(9, 106, 0)
(9, 106, 1)
(9, 106, 2)
(9, 106, 3)
(9, 106, 4)
(9, 106, 5)
(9, 106, 6)
(9, 106, 7)
(9, 107, 0)
(9, 107, 1)
(9, 107, 2)
(9, 107, 3)
(9, 107, 4)
(9, 107, 5)
(9, 107, 6)
(9, 107, 7)
(9, 108, 0)
(9, 108, 1)
(9, 108, 2)
(9, 108, 3)
(9, 108, 4)
(9, 108, 5)
(9, 108, 6)
(9, 108, 7)
(9, 109, 0)
(9, 109, 1)
(9, 109, 2)
(9, 109, 3)
(9, 109, 4)
(9, 109, 5)
(9, 109, 6)
(9, 109, 7)
(9, 110, 0)
(9, 110, 1)
(9, 110, 2)
(9, 110, 3)
(9, 110, 4)
(9, 110, 5)
(9, 110, 6)
(9, 110, 7)
(9, 111, 0)
(9, 111, 1)
(9, 111, 2)
(9, 111, 3)
(9, 111, 4)
(9, 111, 5)
(9, 111, 6)
(9, 111, 7)
(9, 112, 0)
(9, 112, 1)
(9, 112, 2)
(9, 112, 3)
(9, 112, 4)
(9, 112, 5)
(9, 112, 6)
(9, 112, 7)
(9, 113, 0)
(9, 113, 1)
(9, 113, 2)
(9, 113, 3)
(9, 113, 4)
(9, 113, 5)
(9, 113, 6)
(9, 113, 7)
(9, 114, 0)
(9, 114, 1)
(9, 114, 2)
(9, 114, 3)
(9, 114, 4)
(9, 114, 5)
(9, 114, 6)
(9, 114, 7)
(9, 115, 0)
(9, 115, 1)
(9, 115, 2)
(9, 115, 3)
(9, 115, 4)
(9, 115, 5)
(9, 115, 6)
(9, 115, 7)
(9, 116, 0)
(9, 116, 1)
(9, 116, 2)
(9, 116, 3)
(9, 116, 4)
(9, 116, 5)
(9, 116, 6)
(9, 116, 7)
(9, 117, 0)
(9, 117, 1)
(9, 117, 2)
(9, 117, 3)
(9, 117, 4)
(9, 117, 5)
(9, 117, 6)
(9, 117, 7)
(9, 118, 0)
(9, 118, 1)
(9, 118, 2)
(9, 118, 3)
(9, 118, 4)
(9, 118, 5)
(9, 118, 6)
(9, 118, 7)
(9, 119, 0)
(9, 119, 1)
(9, 119, 2)
(9, 119, 3)
(9, 119, 4)
(9, 119, 5)
(9, 119, 6)
(9, 119, 7)
(9, 120, 0)
(9, 120, 1)
(9, 120, 2)
(9, 120, 3)
(9, 120, 4)
(9, 120, 5)
(9, 120, 6)
(9, 120, 7)
(9, 121, 0)
(9, 121, 1)
(9, 121, 2)
(9, 121, 3)
(9, 121, 4)
(9, 121, 5)
(9, 121, 6)
(9, 121, 7)
(9, 122, 0)
(9, 122, 1)
(9, 122, 2)
(9, 122, 3)
(9, 122, 4)
(9, 122, 5)
(9, 122, 6)
(9, 122, 7)
(9, 123, 0)
(9, 123, 1)
(9, 123, 2)
(9, 123, 3)
(9, 123, 4)
(9, 123, 5)
(9, 123, 6)
(9, 123, 7)
(9, 124, 0)
(9, 124, 1)
(9, 124, 2)
(9, 124, 3)
(9, 124, 4)
(9, 124, 5)
(9, 124, 6)
(9, 124, 7)
(9, 125, 0)
(9, 125, 1)
(9, 125, 2)
(9, 125, 3)
(9, 125, 4)
(9, 125, 5)
(9, 125, 6)
(9, 125, 7)
(9, 126, 0)
(9, 126, 1)
(9, 126, 2)
(9, 126, 3)
(9, 126, 4)
(9, 126, 5)
(9, 126, 6)
(9, 126, 7)
(9, 127, 0)
(9, 127, 1)
(9, 127, 2)
(9, 127, 3)
(9, 127, 4)
(9, 127, 5)
(9, 127, 6)
(9, 127, 7)
(9, 128, 0)
(9, 128, 1)
(9, 128, 2)
(9, 128, 3)
(9, 128, 4)
(9, 128, 5)
(9, 128, 6)
(9, 128, 7)
(9, 129, 0)
(9, 129, 1)
(9, 129, 2)
(9, 129, 3)
(9, 129, 4)
(9, 129, 5)
(9, 129, 6)
(9, 129, 7)
(9, 130, 0)
(9, 130, 1)
(9, 130, 2)
(9, 130, 3)
(9, 130, 4)
(9, 130, 5)
(9, 130, 6)
(9, 130, 7)
(9, 131, 0)
(9, 131, 1)
(9, 131, 2)
(9, 131, 3)
(9, 131, 4)
(9, 131, 5)
(9, 131, 6)
(9, 131, 7)
(9, 132, 0)
(9, 132, 1)
(9, 132, 2)
(9, 132, 3)
(9, 132, 4)
(9, 132, 5)
(9, 132, 6)
(9, 132, 7)
(9, 133, 0)
(9, 133, 1)
(9, 133, 2)
(9, 133, 3)
(9, 133, 4)
(9, 133, 5)
(9, 133, 6)
(9, 133, 7)
(9, 134, 0)
(9, 134, 1)
(9, 134, 2)
(9, 134, 3)
(9, 134, 4)
(9, 134, 5)
(9, 134, 6)
(9, 134, 7)
(9, 135, 0)
(9, 135, 1)
(9, 135, 2)
(9, 135, 3)
(9, 135, 4)
(9, 135, 5)
(9, 135, 6)
(9, 135, 7)
(9, 136, 0)
(9, 136, 1)
(9, 136, 2)
(9, 136, 3)
(9, 136, 4)
(9, 136, 5)
(9, 136, 6)
(9, 136, 7)
(9, 137, 0)
(9, 137, 1)
(9, 137, 2)
(9, 137, 3)
(9, 137, 4)
(9, 137, 5)
(9, 137, 6)
(9, 137, 7)
(9, 138, 0)
(9, 138, 1)
(9, 138, 2)
(9, 138, 3)
(9, 138, 4)
(9, 138, 5)
(9, 138, 6)
(9, 138, 7)
(9, 139, 0)
(9, 139, 1)
(9, 139, 2)
(9, 139, 3)
(9, 139, 4)
(9, 139, 5)
(9, 139, 6)
(9, 139, 7)
(9, 140, 0)
(9, 140, 1)
(9, 140, 2)
(9, 140, 3)
(9, 140, 4)
(9, 140, 5)
(9, 140, 6)
(9, 140, 7)
(9, 141, 0)
(9, 141, 1)
(9, 141, 2)
(9, 141, 3)
(9, 141, 4)
(9, 141, 5)
(9, 141, 6)
(9, 141, 7)
(9, 142, 0)
(9, 142, 1)
(9, 142, 2)
(9, 142, 3)
(9, 142, 4)
(9, 142, 5)
(9, 142, 6)
(9, 142, 7)
(9, 143, 0)
(9, 143, 1)
(9, 143, 2)
(9, 143, 3)
(9, 143, 4)
(9, 143, 5)
(9, 143, 6)
(9, 143, 7)
(9, 144, 0)
(9, 144, 1)
(9, 144, 2)
(9, 144, 3)
(9, 144, 4)
(9, 144, 5)
(9, 144, 6)
(9, 144, 7)
(9, 145, 0)
(9, 145, 1)
(9, 145, 2)
(9, 145, 3)
(9, 145, 4)
(9, 145, 5)
(9, 145, 6)
(9, 145, 7)
(9, 146, 0)
(9, 146, 1)
(9, 146, 2)
(9, 146, 3)
(9, 146, 4)
(9, 146, 5)
(9, 146, 6)
(9, 146, 7)
(9, 147, 0)
(9, 147, 1)
(9, 147, 2)
(9, 147, 3)
(9, 147, 4)
(9, 147, 5)
(9, 147, 6)
(9, 147, 7)
(9, 148, 0)
(9, 148, 1)
(9, 148, 2)
(9, 148, 3)
(9, 148, 4)
(9, 148, 5)
(9, 148, 6)
(9, 148, 7)
(9, 149, 0)
(9, 149, 1)
(9, 149, 2)
(9, 149, 3)
(9, 149, 4)
(9, 149, 5)
(9, 149, 6)
(9, 149, 7)
(9, 150, 0)
(9, 150, 1)
(9, 150, 2)
(9, 150, 3)
(9, 150, 4)
(9, 150, 5)
(9, 150, 6)
(9, 150, 7)
(9, 151, 0)
(9, 151, 1)
(9, 151, 2)
(9, 151, 3)
(9, 151, 4)
(9, 151, 5)
(9, 151, 6)
(9, 151, 7)
(9, 152, 0)
(9, 152, 1)
(9, 152, 2)
(9, 152, 3)
(9, 152, 4)
(9, 152, 5)
(9, 152, 6)
(9, 152, 7)
(9, 153, 0)
(9, 153, 1)
(9, 153, 2)
(9, 153, 3)
(9, 153, 4)
(9, 153, 5)
(9, 153, 6)
(9, 153, 7)
(9, 154, 0)
(9, 154, 1)
(9, 154, 2)
(9, 154, 3)
(9, 154, 4)
(9, 154, 5)
(9, 154, 6)
(9, 154, 7)
(9, 155, 0)
(9, 155, 1)
(9, 155, 2)
(9, 155, 3)
(9, 155, 4)
(9, 155, 5)
(9, 155, 6)
(9, 155, 7)
(9, 156, 0)
(9, 156, 1)
(9, 156, 2)
(9, 156, 3)
(9, 156, 4)
(9, 156, 5)
(9, 156, 6)
(9, 156, 7)
(9, 157, 0)
(9, 157, 1)
(9, 157, 2)
(9, 157, 3)
(9, 157, 4)
(9, 157, 5)
(9, 157, 6)
(9, 157, 7)
(9, 158, 0)
(9, 158, 1)
(9, 158, 2)
(9, 158, 3)
(9, 158, 4)
(9, 158, 5)
(9, 158, 6)
(9, 158, 7)
(9, 159, 0)
(9, 159, 1)
(9, 159, 2)
(9, 159, 3)
(9, 159, 4)
(9, 159, 5)
(9, 159, 6)
(9, 159, 7)
(9, 160, 0)
(9, 160, 1)
(9, 160, 2)
(9, 160, 3)
(9, 160, 4)
(9, 160, 5)
(9, 160, 6)
(9, 160, 7)
(9, 161, 0)
(9, 161, 1)
(9, 161, 2)
(9, 161, 3)
(9, 161, 4)
(9, 161, 5)
(9, 161, 6)
(9, 161, 7)
(9, 162, 0)
(9, 162, 1)
(9, 162, 2)
(9, 162, 3)
(9, 162, 4)
(9, 162, 5)
(9, 162, 6)
(9, 162, 7)
(9, 163, 0)
(9, 163, 1)
(9, 163, 2)
(9, 163, 3)
(9, 163, 4)
(9, 163, 5)
(9, 163, 6)
(9, 163, 7)
(9, 164, 0)
(9, 164, 1)
(9, 164, 2)
(9, 164, 3)
(9, 164, 4)
(9, 164, 5)
(9, 164, 6)
(9, 164, 7)
(9, 165, 0)
(9, 165, 1)
(9, 165, 2)
(9, 165, 3)
(9, 165, 4)
(9, 165, 5)
(9, 165, 6)
(9, 165, 7)
(9, 166, 0)
(9, 166, 1)
(9, 166, 2)
(9, 166, 3)
(9, 166, 4)
(9, 166, 5)
(9, 166, 6)
(9, 166, 7)
(9, 167, 0)
(9, 167, 1)
(9, 167, 2)
(9, 167, 3)
(9, 167, 4)
(9, 167, 5)
(9, 167, 6)
(9, 167, 7)
(9, 168, 0)
(9, 168, 1)
(9, 168, 2)
(9, 168, 3)
(9, 168, 4)
(9, 168, 5)
(9, 168, 6)
(9, 168, 7)
(9, 169, 0)
(9, 169, 1)
(9, 169, 2)
(9, 169, 3)
(9, 169, 4)
(9, 169, 5)
(9, 169, 6)
(9, 169, 7)
(9, 170, 0)
(9, 170, 1)
(9, 170, 2)
(9, 170, 3)
(9, 170, 4)
(9, 170, 5)
(9, 170, 6)
(9, 170, 7)
(9, 171, 0)
(9, 171, 1)
(9, 171, 2)
(9, 171, 3)
(9, 171, 4)
(9, 171, 5)
(9, 171, 6)
(9, 171, 7)
(9, 172, 0)
(9, 172, 1)
(9, 172, 2)
(9, 172, 3)
(9, 172, 4)
(9, 172, 5)
(9, 172, 6)
(9, 172, 7)
(9, 173, 0)
(9, 173, 1)
(9, 173, 2)
(9, 173, 3)
(9, 173, 4)
(9, 173, 5)
(9, 173, 6)
(9, 173, 7)
(9, 174, 0)
(9, 174, 1)
(9, 174, 2)
(9, 174, 3)
(9, 174, 4)
(9, 174, 5)
(9, 174, 6)
(9, 174, 7)
(9, 175, 0)
(9, 175, 1)
(9, 175, 2)
(9, 175, 3)
(9, 175, 4)
(9, 175, 5)
(9, 175, 6)
(9, 175, 7)
(9, 176, 0)
(9, 176, 1)
(9, 176, 2)
(9, 176, 3)
(9, 176, 4)
(9, 176, 5)
(9, 176, 6)
(9, 176, 7)
(9, 177, 0)
(9, 177, 1)
(9, 177, 2)
(9, 177, 3)
(9, 177, 4)
(9, 177, 5)
(9, 177, 6)
(9, 177, 7)
(9, 178, 0)
(9, 178, 1)
(9, 178, 2)
(9, 178, 3)
(9, 178, 4)
(9, 178, 5)
(9, 178, 6)
(9, 178, 7)
(9, 179, 0)
(9, 179, 1)
(9, 179, 2)
(9, 179, 3)
(9, 179, 4)
(9, 179, 5)
(9, 179, 6)
(9, 179, 7)
(9, 180, 0)
(9, 180, 1)
(9, 180, 2)
(9, 180, 3)
(9, 180, 4)
(9, 180, 5)
(9, 180, 6)
(9, 180, 7)
(9, 181, 0)
(9, 181, 1)
(9, 181, 2)
(9, 181, 3)
(9, 181, 4)
(9, 181, 5)
(9, 181, 6)
(9, 181, 7)
(9, 182, 0)
(9, 182, 1)
(9, 182, 2)
(9, 182, 3)
(9, 182, 4)
(9, 182, 5)
(9, 182, 6)
(9, 182, 7)
(9, 183, 0)
(9, 183, 1)
(9, 183, 2)
(9, 183, 3)
(9, 183, 4)
(9, 183, 5)
(9, 183, 6)
(9, 183, 7)
(9, 184, 0)
(9, 184, 1)
(9, 184, 2)
(9, 184, 3)
(9, 184, 4)
(9, 184, 5)
(9, 184, 6)
(9, 184, 7)
(9, 185, 0)
(9, 185, 1)
(9, 185, 2)
(9, 185, 3)
(9, 185, 4)
(9, 185, 5)
(9, 185, 6)
(9, 185, 7)
(9, 186, 0)
(9, 186, 1)
(9, 186, 2)
(9, 186, 3)
(9, 186, 4)
(9, 186, 5)
(9, 186, 6)
(9, 186, 7)
(9, 187, 0)
(9, 187, 1)
(9, 187, 2)
(9, 187, 3)
(9, 187, 4)
(9, 187, 5)
(9, 187, 6)
(9, 187, 7)
(9, 188, 0)
(9, 188, 1)
(9, 188, 2)
(9, 188, 3)
(9, 188, 4)
(9, 188, 5)
(9, 188, 6)
(9, 188, 7)
(9, 189, 0)
(9, 189, 1)
(9, 189, 2)
(9, 189, 3)
(9, 189, 4)
(9, 189, 5)
(9, 189, 6)
(9, 189, 7)
(9, 190, 0)
(9, 190, 1)
(9, 190, 2)
(9, 190, 3)
(9, 190, 4)
(9, 190, 5)
(9, 190, 6)
(9, 190, 7)
(9, 191, 0)
(9, 191, 1)
(9, 191, 2)
(9, 191, 3)
(9, 191, 4)
(9, 191, 5)
(9, 191, 6)
(9, 191, 7)
(9, 192, 0)
(9, 192, 1)
(9, 192, 2)
(9, 192, 3)
(9, 192, 4)
(9, 192, 5)
(9, 192, 6)
(9, 192, 7)
(9, 193, 0)
(9, 193, 1)
(9, 193, 2)
(9, 193, 3)
(9, 193, 4)
(9, 193, 5)
(9, 193, 6)
(9, 193, 7)
(9, 194, 0)
(9, 194, 1)
(9, 194, 2)
(9, 194, 3)
(9, 194, 4)
(9, 194, 5)
(9, 194, 6)
(9, 194, 7)
(9, 195, 0)
(9, 195, 1)
(9, 195, 2)
(9, 195, 3)
(9, 195, 4)
(9, 195, 5)
(9, 195, 6)
(9, 195, 7)
(9, 196, 0)
(9, 196, 1)
(9, 196, 2)
(9, 196, 3)
(9, 196, 4)
(9, 196, 5)
(9, 196, 6)
(9, 196, 7)
(9, 197, 0)
(9, 197, 1)
(9, 197, 2)
(9, 197, 3)
(9, 197, 4)
(9, 197, 5)
(9, 197, 6)
(9, 197, 7)
(9, 198, 0)
(9, 198, 1)
(9, 198, 2)
(9, 198, 3)
(9, 198, 4)
(9, 198, 5)
(9, 198, 6)
(9, 198, 7)
(9, 199, 0)
(9, 199, 1)
(9, 199, 2)
(9, 199, 3)
(9, 199, 4)
(9, 199, 5)
(9, 199, 6)
(9, 199, 7)
(9, 200, 0)
(9, 200, 1)
(9, 200, 2)
(9, 200, 3)
(9, 200, 4)
(9, 200, 5)
(9, 200, 6)
(9, 200, 7)
(9, 201, 0)
(9, 201, 1)
(9, 201, 2)
(9, 201, 3)
(9, 201, 4)
(9, 201, 5)
(9, 201, 6)
(9, 201, 7)
(9, 202, 0)
(9, 202, 1)
(9, 202, 2)
(9, 202, 3)
(9, 202, 4)
(9, 202, 5)
(9, 202, 6)
(9, 202, 7)
(9, 203, 0)
(9, 203, 1)
(9, 203, 2)
(9, 203, 3)
(9, 203, 4)
(9, 203, 5)
(9, 203, 6)
(9, 203, 7)
(9, 204, 0)
(9, 204, 1)
(9, 204, 2)
(9, 204, 3)
(9, 204, 4)
(9, 204, 5)
(9, 204, 6)
(9, 204, 7)
(9, 205, 0)
(9, 205, 1)
(9, 205, 2)
(9, 205, 3)
(9, 205, 4)
(9, 205, 5)
(9, 205, 6)
(9, 205, 7)
(9, 206, 0)
(9, 206, 1)
(9, 206, 2)
(9, 206, 3)
(9, 206, 4)
(9, 206, 5)
(9, 206, 6)
(9, 206, 7)
(9, 207, 0)
(9, 207, 1)
(9, 207, 2)
(9, 207, 3)
(9, 207, 4)
(9, 207, 5)
(9, 207, 6)
(9, 207, 7)
(9, 208, 0)
(9, 208, 1)
(9, 208, 2)
(9, 208, 3)
(9, 208, 4)
(9, 208, 5)
(9, 208, 6)
(9, 208, 7)
(9, 209, 0)
(9, 209, 1)
(9, 209, 2)
(9, 209, 3)
(9, 209, 4)
(9, 209, 5)
(9, 209, 6)
(9, 209, 7)
(9, 210, 0)
(9, 210, 1)
(9, 210, 2)
(9, 210, 3)
(9, 210, 4)
(9, 210, 5)
(9, 210, 6)
(9, 210, 7)
(9, 211, 0)
(9, 211, 1)
(9, 211, 2)
(9, 211, 3)
(9, 211, 4)
(9, 211, 5)
(9, 211, 6)
(9, 211, 7)
(9, 212, 0)
(9, 212, 1)
(9, 212, 2)
(9, 212, 3)
(9, 212, 4)
(9, 212, 5)
(9, 212, 6)
(9, 212, 7)
(9, 213, 0)
(9, 213, 1)
(9, 213, 2)
(9, 213, 3)
(9, 213, 4)
(9, 213, 5)
(9, 213, 6)
(9, 213, 7)
(9, 214, 0)
(9, 214, 1)
(9, 214, 2)
(9, 214, 3)
(9, 214, 4)
(9, 214, 5)
(9, 214, 6)
(9, 214, 7)
(9, 215, 0)
(9, 215, 1)
(9, 215, 2)
(9, 215, 3)
(9, 215, 4)
(9, 215, 5)
(9, 215, 6)
(9, 215, 7)
(9, 216, 0)
(9, 216, 1)
(9, 216, 2)
(9, 216, 3)
(9, 216, 4)
(9, 216, 5)
(9, 216, 6)
(9, 216, 7)
(9, 217, 0)
(9, 217, 1)
(9, 217, 2)
(9, 217, 3)
(9, 217, 4)
(9, 217, 5)
(9, 217, 6)
(9, 217, 7)
(9, 218, 0)
(9, 218, 1)
(9, 218, 2)
(9, 218, 3)
(9, 218, 4)
(9, 218, 5)
(9, 218, 6)
(9, 218, 7)
(9, 219, 0)
(9, 219, 1)
(9, 219, 2)
(9, 219, 3)
(9, 219, 4)
(9, 219, 5)
(9, 219, 6)
(9, 219, 7)
(9, 220, 0)
(9, 220, 1)
(9, 220, 2)
(9, 220, 3)
(9, 220, 4)
(9, 220, 5)
(9, 220, 6)
(9, 220, 7)
(9, 221, 0)
(9, 221, 1)
(9, 221, 2)
(9, 221, 3)
(9, 221, 4)
(9, 221, 5)
(9, 221, 6)
(9, 221, 7)
(9, 222, 0)
(9, 222, 1)
(9, 222, 2)
(9, 222, 3)
(9, 222, 4)
(9, 222, 5)
(9, 222, 6)
(9, 222, 7)
(9, 223, 0)
(9, 223, 1)
(9, 223, 2)
(9, 223, 3)
(9, 223, 4)
(9, 223, 5)
(9, 223, 6)
(9, 223, 7)
(9, 224, 0)
(9, 224, 1)
(9, 224, 2)
(9, 224, 3)
(9, 224, 4)
(9, 224, 5)
(9, 224, 6)
(9, 224, 7)
(9, 225, 0)
(9, 225, 1)
(9, 225, 2)
(9, 225, 3)
(9, 225, 4)
(9, 225, 5)
(9, 225, 6)
(9, 225, 7)
(9, 226, 0)
(9, 226, 1)
(9, 226, 2)
(9, 226, 3)
(9, 226, 4)
(9, 226, 5)
(9, 226, 6)
(9, 226, 7)
(9, 227, 0)
(9, 227, 1)
(9, 227, 2)
(9, 227, 3)
(9, 227, 4)
(9, 227, 5)
(9, 227, 6)
(9, 227, 7)
(9, 228, 0)
(9, 228, 1)
(9, 228, 2)
(9, 228, 3)
(9, 228, 4)
(9, 228, 5)
(9, 228, 6)
(9, 228, 7)
(9, 229, 0)
(9, 229, 1)
(9, 229, 2)
(9, 229, 3)
(9, 229, 4)
(9, 229, 5)
(9, 229, 6)
(9, 229, 7)
(9, 230, 0)
(9, 230, 1)
(9, 230, 2)
(9, 230, 3)
(9, 230, 4)
(9, 230, 5)
(9, 230, 6)
(9, 230, 7)
(9, 231, 0)
(9, 231, 1)
(9, 231, 2)
(9, 231, 3)
(9, 231, 4)
(9, 231, 5)
(9, 231, 6)
(9, 231, 7)
(9, 232, 0)
(9, 232, 1)
(9, 232, 2)
(9, 232, 3)
(9, 232, 4)
(9, 232, 5)
(9, 232, 6)
(9, 232, 7)
(9, 233, 0)
(9, 233, 1)
(9, 233, 2)
(9, 233, 3)
(9, 233, 4)
(9, 233, 5)
(9, 233, 6)
(9, 233, 7)
(9, 234, 0)
(9, 234, 1)
(9, 234, 2)
(9, 234, 3)
(9, 234, 4)
(9, 234, 5)
(9, 234, 6)
(9, 234, 7)
(9, 235, 0)
(9, 235, 1)
(9, 235, 2)
(9, 235, 3)
(9, 235, 4)
(9, 235, 5)
(9, 235, 6)
(9, 235, 7)
(9, 236, 0)
(9, 236, 1)
(9, 236, 2)
(9, 236, 3)
(9, 236, 4)
(9, 236, 5)
(9, 236, 6)
(9, 236, 7)
(9, 237, 0)
(9, 237, 1)
(9, 237, 2)
(9, 237, 3)
(9, 237, 4)
(9, 237, 5)
(9, 237, 6)
(9, 237, 7)
(9, 238, 0)
(9, 238, 1)
(9, 238, 2)
(9, 238, 3)
(9, 238, 4)
(9, 238, 5)
(9, 238, 6)
(9, 238, 7)
(9, 239, 0)
(9, 239, 1)
(9, 239, 2)
(9, 239, 3)
(9, 239, 4)
(9, 239, 5)
(9, 239, 6)
(9, 239, 7)
(9, 240, 0)
(9, 240, 1)
(9, 240, 2)
(9, 240, 3)
(9, 240, 4)
(9, 240, 5)
(9, 240, 6)
(9, 240, 7)
(9, 241, 0)
(9, 241, 1)
(9, 241, 2)
(9, 241, 3)
(9, 241, 4)
(9, 241, 5)
(9, 241, 6)
(9, 241, 7)
(9, 242, 0)
(9, 242, 1)
(9, 242, 2)
(9, 242, 3)
(9, 242, 4)
(9, 242, 5)
(9, 242, 6)
(9, 242, 7)
(9, 243, 0)
(9, 243, 1)
(9, 243, 2)
(9, 243, 3)
(9, 243, 4)
(9, 243, 5)
(9, 243, 6)
(9, 243, 7)
(9, 244, 0)
(9, 244, 1)
(9, 244, 2)
(9, 244, 3)
(9, 244, 4)
(9, 244, 5)
(9, 244, 6)
(9, 244, 7)
(9, 245, 0)
(9, 245, 1)
(9, 245, 2)
(9, 245, 3)
(9, 245, 4)
(9, 245, 5)
(9, 245, 6)
(9, 245, 7)
(9, 246, 0)
(9, 246, 1)
(9, 246, 2)
(9, 246, 3)
(9, 246, 4)
(9, 246, 5)
(9, 246, 6)
(9, 246, 7)
(9, 247, 0)
(9, 247, 1)
(9, 247, 2)
(9, 247, 3)
(9, 247, 4)
(9, 247, 5)
(9, 247, 6)
(9, 247, 7)
(9, 248, 0)
(9, 248, 1)
(9, 248, 2)
(9, 248, 3)
(9, 248, 4)
(9, 248, 5)
(9, 248, 6)
(9, 248, 7)
(9, 249, 0)
(9, 249, 1)
(9, 249, 2)
(9, 249, 3)
(9, 249, 4)
(9, 249, 5)
(9, 249, 6)
(9, 249, 7)
(9, 250, 0)
(9, 250, 1)
(9, 250, 2)
(9, 250, 3)
(9, 250, 4)
(9, 250, 5)
(9, 250, 6)
(9, 250, 7)
(9, 251, 0)
(9, 251, 1)
(9, 251, 2)
(9, 251, 3)
(9, 251, 4)
(9, 251, 5)
(9, 251, 6)
(9, 251, 7)
(9, 252, 0)
(9, 252, 1)
(9, 252, 2)
(9, 252, 3)
(9, 252, 4)
(9, 252, 5)
(9, 252, 6)
(9, 252, 7)
(9, 253, 0)
(9, 253, 1)
(9, 253, 2)
(9, 253, 3)
(9, 253, 4)
(9, 253, 5)
(9, 253, 6)
(9, 253, 7)
(9, 254, 0)
(9, 254, 1)
(9, 254, 2)
(9, 254, 3)
(9, 254, 4)
(9, 254, 5)
(9, 254, 6)
(9, 254, 7)
(9, 255, 0)
(9, 255, 1)
(9, 255, 2)
(9, 255, 3)
(9, 255, 4)
(9, 255, 5)
(9, 255, 6)
(9, 255, 7)
(0, 32, 0)
(0, 32, 1)
(0, 32, 2)
(0, 32, 3)
(0, 32, 4)
(0, 32, 5)
(0, 32, 6)
(0, 32, 7)
(0, 33, 0)
(0, 33, 1)
(0, 33, 2)
(0, 33, 3)
(0, 33, 4)
(0, 33, 5)
(0, 33, 6)
(0, 33, 7)
(0, 34, 0)
(0, 34, 1)
(0, 34, 2)
(0, 34, 3)
(0, 34, 4)
(0, 34, 5)
(0, 34, 6)
(0, 34, 7)
(0, 35, 0)
(0, 35, 1)
(0, 35, 2)
(0, 35, 3)
(0, 35, 4)
(0, 35, 5)
(0, 35, 6)
(0, 35, 7)
(0, 36, 0)
(0, 36, 1)
(0, 36, 2)
(0, 36, 3)
(0, 36, 4)
(0, 36, 5)
(0, 36, 6)
(0, 36, 7)
(0, 37, 0)
(0, 37, 1)
(0, 37, 2)
(0, 37, 3)
(0, 37, 4)
(0, 37, 5)
(0, 37, 6)
(0, 37, 7)
(0, 38, 0)
(0, 38, 1)
(0, 38, 2)
(0, 38, 3)
(0, 38, 4)
(0, 38, 5)
(0, 38, 6)
(0, 38, 7)
(0, 39, 0)
(0, 39, 1)
(0, 39, 2)
(0, 39, 3)
(0, 39, 4)
(0, 40, 0)
(0, 40, 1)
(0, 40, 2)
(0, 40, 3)
(0, 40, 4)
(0, 40, 5)
(0, 40, 6)
(0, 40, 7)
(0, 41, 0)
(0, 41, 1)
(0, 41, 2)
(0, 41, 3)
(0, 41, 4)
(0, 41, 5)
(0, 41, 6)
(0, 41, 7)
(0, 42, 0)
(0, 42, 1)
(0, 42, 2)
(0, 42, 3)
Executed 241 commands from function 'wasmrunner:init'
Executed 28862 commands from function 'wasmrunner:_start'
Executed 30860 commands from function 'wasmrunner:wasm_13_11'
Executed 32858 commands from function 'wasmrunner:wasm_13_11'
Executed 34856 commands from function 'wasmrunner:wasm_13_11'
Executed 36732 commands from function 'wasmrunner:wasm_13_11'
Executed 43002 commands from function 'wasmrunner:wasm_13_11'
Executed 49272 commands from function 'wasmrunner:wasm_13_11'
Executed 51270 commands from function 'wasmrunner:wasm_13_11'
Executed 53563 commands from function 'wasmrunner:wasm_13_11'
Executed 55439 commands from function 'wasmrunner:wasm_13_11'
Executed 58419 commands from function 'wasmrunner:wasm_13_11'
Executed 61620 commands from function 'wasmrunner:wasm_13_11'
Executed 63665 commands from function 'wasmrunner:wasm_13_11'
Executed 65663 commands from function 'wasmrunner:wasm_13_11'
Executed 67661 commands from function 'wasmrunner:wasm_13_11'
Executed 77234 commands from function 'wasmrunner:wasm_13_11'
Executed 79264 commands from function 'wasmrunner:wasm_13_11'
Executed 81309 commands from function 'wasmrunner:wasm_13_11'
Executed 90882 commands from function 'wasmrunner:wasm_13_11'
Executed 92938 commands from function 'wasmrunner:wasm_13_11'
Executed 94936 commands from function 'wasmrunner:wasm_13_11'
Executed 96934 commands from function 'wasmrunner:wasm_13_11'
Executed 98932 commands from function 'wasmrunner:wasm_13_11'
Executed 101178 commands from function 'wasmrunner:wasm_13_11'
Executed 103493 commands from function 'wasmrunner:wasm_13_11'
Executed 105463 commands from function 'wasmrunner:wasm_13_11'
Executed 107343 commands from function 'wasmrunner:wasm_13_11'
Executed 109658 commands from function 'wasmrunner:wasm_13_11'
Executed 111628 commands from function 'wasmrunner:wasm_13_11'
Executed 113508 commands from function 'wasmrunner:wasm_13_11'
Executed 115823 commands from function 'wasmrunner:wasm_13_11'
Executed 117793 commands from function 'wasmrunner:wasm_13_11'
Executed 119673 commands from function 'wasmrunner:wasm_13_11'
Executed 121988 commands from function 'wasmrunner:wasm_13_11'
Executed 123958 commands from function 'wasmrunner:wasm_13_11'
Executed 125838 commands from function 'wasmrunner:wasm_13_11'
Executed 128153 commands from function 'wasmrunner:wasm_13_11'
Executed 130123 commands from function 'wasmrunner:wasm_13_11'
Executed 132003 commands from function 'wasmrunner:wasm_13_11'
Executed 134318 commands from function 'wasmrunner:wasm_13_11'
Executed 136288 commands from function 'wasmrunner:wasm_13_11'
Executed 138168 commands from function 'wasmrunner:wasm_13_11'
Executed 140483 commands from function 'wasmrunner:wasm_13_11'
Executed 142453 commands from function 'wasmrunner:wasm_13_11'
Executed 144333 commands from function 'wasmrunner:wasm_13_11'
Executed 146648 commands from function 'wasmrunner:wasm_13_11'
Executed 148618 commands from function 'wasmrunner:wasm_13_11'
Executed 150498 commands from function 'wasmrunner:wasm_13_11'
Executed 152813 commands from function 'wasmrunner:wasm_13_11'
Executed 154783 commands from function 'wasmrunner:wasm_13_11'
Executed 156663 commands from function 'wasmrunner:wasm_13_11'
Executed 158978 commands from function 'wasmrunner:wasm_13_11'
Executed 160948 commands from function 'wasmrunner:wasm_13_11'
Executed 162828 commands from function 'wasmrunner:wasm_13_11'
Executed 165143 commands from function 'wasmrunner:wasm_13_11'
Executed 167113 commands from function 'wasmrunner:wasm_13_11'
Executed 168993 commands from function 'wasmrunner:wasm_13_11'
Executed 171308 commands from function 'wasmrunner:wasm_13_11'
Executed 173278 commands from function 'wasmrunner:wasm_13_11'
Executed 175158 commands from function 'wasmrunner:wasm_13_11'
Executed 177473 commands from function 'wasmrunner:wasm_13_11'
Executed 179443 commands from function 'wasmrunner:wasm_13_11'
Executed 181323 commands from function 'wasmrunner:wasm_13_11'
Executed 183638 commands from function 'wasmrunner:wasm_13_11'
Executed 185608 commands from function 'wasmrunner:wasm_13_11'
Executed 187488 commands from function 'wasmrunner:wasm_13_11'
Executed 189803 commands from function 'wasmrunner:wasm_13_11'
Executed 191773 commands from function 'wasmrunner:wasm_13_11'
Executed 193653 commands from function 'wasmrunner:wasm_13_11'
Executed 195968 commands from function 'wasmrunner:wasm_13_11'
Executed 197938 commands from function 'wasmrunner:wasm_13_11'
Executed 199818 commands from function 'wasmrunner:wasm_13_11'
Executed 202133 commands from function 'wasmrunner:wasm_13_11'
Executed 204103 commands from function 'wasmrunner:wasm_13_11'
Executed 205983 commands from function 'wasmrunner:wasm_13_11'
Executed 208298 commands from function 'wasmrunner:wasm_13_11'
Executed 210268 commands from function 'wasmrunner:wasm_13_11'
Executed 212148 commands from function 'wasmrunner:wasm_13_11'
Executed 214463 commands from function 'wasmrunner:wasm_13_11'
Executed 216433 commands from function 'wasmrunner:wasm_13_11'
Executed 218313 commands from function 'wasmrunner:wasm_13_11'
Executed 220628 commands from function 'wasmrunner:wasm_13_11'
Executed 222598 commands from function 'wasmrunner:wasm_13_11'
Executed 224478 commands from function 'wasmrunner:wasm_13_11'
Executed 226793 commands from function 'wasmrunner:wasm_13_11'
Executed 228763 commands from function 'wasmrunner:wasm_13_11'
Executed 230643 commands from function 'wasmrunner:wasm_13_11'
Executed 232958 commands from function 'wasmrunner:wasm_13_11'
Executed 234928 commands from function 'wasmrunner:wasm_13_11'
Executed 236808 commands from function 'wasmrunner:wasm_13_11'
Executed 239123 commands from function 'wasmrunner:wasm_13_11'
Executed 241093 commands from function 'wasmrunner:wasm_13_11'
Executed 242973 commands from function 'wasmrunner:wasm_13_11'
Executed 245288 commands from function 'wasmrunner:wasm_13_11'
Executed 247258 commands from function 'wasmrunner:wasm_13_11'
Executed 249138 commands from function 'wasmrunner:wasm_13_11'
Executed 251453 commands from function 'wasmrunner:wasm_13_11'
Executed 253423 commands from function 'wasmrunner:wasm_13_11'
Executed 255303 commands from function 'wasmrunner:wasm_13_11'
Executed 257618 commands from function 'wasmrunner:wasm_13_11'
Executed 259588 commands from function 'wasmrunner:wasm_13_11'
Executed 261468 commands from function 'wasmrunner:wasm_13_11'
Executed 263783 commands from function 'wasmrunner:wasm_13_11'
Executed 265753 commands from function 'wasmrunner:wasm_13_11'
Executed 267633 commands from function 'wasmrunner:wasm_13_11'
Executed 269948 commands from function 'wasmrunner:wasm_13_11'
Executed 271918 commands from function 'wasmrunner:wasm_13_11'
Executed 273798 commands from function 'wasmrunner:wasm_13_11'
Executed 276113 commands from function 'wasmrunner:wasm_13_11'
Executed 278083 commands from function 'wasmrunner:wasm_13_11'
Executed 279963 commands from function 'wasmrunner:wasm_13_11'
Executed 282278 commands from function 'wasmrunner:wasm_13_11'
Executed 284248 commands from function 'wasmrunner:wasm_13_11'
Executed 286128 commands from function 'wasmrunner:wasm_13_11'
Executed 288443 commands from function 'wasmrunner:wasm_13_11'
Executed 290413 commands from function 'wasmrunner:wasm_13_11'
Executed 292293 commands from function 'wasmrunner:wasm_13_11'
Executed 294608 commands from function 'wasmrunner:wasm_13_11'
Executed 296578 commands from function 'wasmrunner:wasm_13_11'
Executed 298256 commands from function 'wasmrunner:wasm_13_11'
Executed 300369 commands from function 'wasmrunner:wasm_13_11'
Executed 302137 commands from function 'wasmrunner:wasm_13_11'
Executed 304096 commands from function 'wasmrunner:wasm_13_11'
Executed 306126 commands from function 'wasmrunner:wasm_13_11'
Executed 308124 commands from function 'wasmrunner:wasm_13_11'
Executed 310000 commands from function 'wasmrunner:wasm_13_11'
Executed 312940 commands from function 'wasmrunner:wasm_13_11'
Executed 314816 commands from function 'wasmrunner:wasm_13_11'
Executed 322460 commands from function 'wasmrunner:wasm_13_11'
Executed 330104 commands from function 'wasmrunner:wasm_13_11'
Executed 332102 commands from function 'wasmrunner:wasm_13_11'
Executed 333914 commands from function 'wasmrunner:wasm_13_11'
Executed 335912 commands from function 'wasmrunner:wasm_13_11'
Executed 337724 commands from function 'wasmrunner:wasm_13_11'
Executed 339722 commands from function 'wasmrunner:wasm_13_11'
Executed 342002 commands from function 'wasmrunner:wasm_13_11'
Executed 348272 commands from function 'wasmrunner:wasm_13_11'
Executed 350270 commands from function 'wasmrunner:wasm_13_11'
Executed 352082 commands from function 'wasmrunner:wasm_13_11'
Executed 354080 commands from function 'wasmrunner:wasm_13_11'
Executed 355892 commands from function 'wasmrunner:wasm_13_11'
Executed 357890 commands from function 'wasmrunner:wasm_13_11'
Executed 360170 commands from function 'wasmrunner:wasm_13_11'
Executed 366440 commands from function 'wasmrunner:wasm_13_11'
Executed 368316 commands from function 'wasmrunner:wasm_13_11'
Executed 371485 commands from function 'wasmrunner:wasm_13_11'
Executed 374218 commands from function 'wasmrunner:wasm_13_11'
Executed 376951 commands from function 'wasmrunner:wasm_13_11'
Executed 378949 commands from function 'wasmrunner:wasm_13_11'
Executed 381229 commands from function 'wasmrunner:wasm_13_11'
Executed 383227 commands from function 'wasmrunner:wasm_13_11'
Executed 385507 commands from function 'wasmrunner:wasm_13_11'
Executed 387275 commands from function 'wasmrunner:wasm_13_11'
Executed 389043 commands from function 'wasmrunner:wasm_13_11'
Executed 390811 commands from function 'wasmrunner:wasm_13_11'
Executed 392579 commands from function 'wasmrunner:wasm_13_11'
Executed 395519 commands from function 'wasmrunner:wasm_13_11'
Executed 397197 commands from function 'wasmrunner:wasm_13_11'
Executed 399073 commands from function 'wasmrunner:wasm_13_11'
Executed 406717 commands from function 'wasmrunner:wasm_13_11'
Executed 414361 commands from function 'wasmrunner:wasm_13_11'
Executed 416359 commands from function 'wasmrunner:wasm_13_11'
Executed 418171 commands from function 'wasmrunner:wasm_13_11'
Executed 420169 commands from function 'wasmrunner:wasm_13_11'
Executed 421981 commands from function 'wasmrunner:wasm_13_11'
Executed 423979 commands from function 'wasmrunner:wasm_13_11'
Executed 426259 commands from function 'wasmrunner:wasm_13_11'
Executed 432529 commands from function 'wasmrunner:wasm_13_11'
Executed 434527 commands from function 'wasmrunner:wasm_13_11'
Executed 436339 commands from function 'wasmrunner:wasm_13_11'
Executed 438337 commands from function 'wasmrunner:wasm_13_11'
Executed 440149 commands from function 'wasmrunner:wasm_13_11'
Executed 442147 commands from function 'wasmrunner:wasm_13_11'
Executed 444427 commands from function 'wasmrunner:wasm_13_11'
Executed 450697 commands from function 'wasmrunner:wasm_13_11'
Executed 452573 commands from function 'wasmrunner:wasm_13_11'
Executed 455742 commands from function 'wasmrunner:wasm_13_11'
Executed 458475 commands from function 'wasmrunner:wasm_13_11'
Executed 461208 commands from function 'wasmrunner:wasm_13_11'
Executed 463206 commands from function 'wasmrunner:wasm_13_11'
Executed 465486 commands from function 'wasmrunner:wasm_13_11'
Executed 467484 commands from function 'wasmrunner:wasm_13_11'
Executed 469764 commands from function 'wasmrunner:wasm_13_11'
Executed 471532 commands from function 'wasmrunner:wasm_13_11'
Executed 473300 commands from function 'wasmrunner:wasm_13_11'
Executed 475068 commands from function 'wasmrunner:wasm_13_11'
Executed 476836 commands from function 'wasmrunner:wasm_13_11'
Executed 479776 commands from function 'wasmrunner:wasm_13_11'
Executed 481454 commands from function 'wasmrunner:wasm_13_11'
Executed 483330 commands from function 'wasmrunner:wasm_13_11'
Executed 490974 commands from function 'wasmrunner:wasm_13_11'
Executed 498618 commands from function 'wasmrunner:wasm_13_11'
Executed 500616 commands from function 'wasmrunner:wasm_13_11'
Executed 502428 commands from function 'wasmrunner:wasm_13_11'
Executed 504426 commands from function 'wasmrunner:wasm_13_11'
Executed 506238 commands from function 'wasmrunner:wasm_13_11'
Executed 508236 commands from function 'wasmrunner:wasm_13_11'
Executed 510516 commands from function 'wasmrunner:wasm_13_11'
Executed 516786 commands from function 'wasmrunner:wasm_13_11'
Executed 518784 commands from function 'wasmrunner:wasm_13_11'
Executed 520596 commands from function 'wasmrunner:wasm_13_11'
Executed 522594 commands from function 'wasmrunner:wasm_13_11'
Executed 524406 commands from function 'wasmrunner:wasm_13_11'
Executed 526404 commands from function 'wasmrunner:wasm_13_11'
Executed 528684 commands from function 'wasmrunner:wasm_13_11'
Executed 534954 commands from function 'wasmrunner:wasm_13_11'
Executed 536830 commands from function 'wasmrunner:wasm_13_11'
Executed 539999 commands from function 'wasmrunner:wasm_13_11'
Executed 542732 commands from function 'wasmrunner:wasm_13_11'
Executed 545465 commands from function 'wasmrunner:wasm_13_11'
Executed 547463 commands from function 'wasmrunner:wasm_13_11'
Executed 549743 commands from function 'wasmrunner:wasm_13_11'
Executed 551741 commands from function 'wasmrunner:wasm_13_11'
Executed 554021 commands from function 'wasmrunner:wasm_13_11'
Executed 555789 commands from function 'wasmrunner:wasm_13_11'
Executed 557557 commands from function 'wasmrunner:wasm_13_11'
Executed 559325 commands from function 'wasmrunner:wasm_13_11'
Executed 561093 commands from function 'wasmrunner:wasm_13_11'
Executed 564033 commands from function 'wasmrunner:wasm_13_11'
Executed 565711 commands from function 'wasmrunner:wasm_13_11'
Executed 567587 commands from function 'wasmrunner:wasm_13_11'
Executed 575231 commands from function 'wasmrunner:wasm_13_11'
Executed 582875 commands from function 'wasmrunner:wasm_13_11'
Executed 584873 commands from function 'wasmrunner:wasm_13_11'
Executed 586685 commands from function 'wasmrunner:wasm_13_11'
Executed 588683 commands from function 'wasmrunner:wasm_13_11'
Executed 590495 commands from function 'wasmrunner:wasm_13_11'
Executed 592493 commands from function 'wasmrunner:wasm_13_11'
Executed 594773 commands from function 'wasmrunner:wasm_13_11'

TOTAL: 600000
intrinsic:and_inner: 158759
wasmrunner:__return_to_saved: 113752
intrinsic:setptr: 49456
intrinsic:and: 40931
intrinsic:or_inner: 36800
intrinsic:load_byte: 29502
intrinsic:xor_inner: 22880
wasmrunner:wasm_9_0: 20236
intrinsic:lshr/inner: 17840
intrinsic:store_byte: 12767
intrinsic:store_halfword: 7627
intrinsic:or: 7590
intrinsic:shl: 6768
wasmrunner:wasm_9_3: 4816
wasmrunner:wasm_13_14: 4809
intrinsic:xor: 4719
wasmrunner:wasm_9_176: 4351
wasmrunner:wasm_9_71: 4159
wasmrunner:wasm_13_4: 4139
intrinsic:load_halfword_unaligned: 3696
wasmrunner:wasm_9_7: 3306
intrinsic:lshr: 3276
wasmrunner:wasm_9_73: 2606
wasmrunner:wasm_8_4: 2232
wasmrunner:wasm_9_100: 2012
wasmrunner:wasm_9_74: 1779
wasmrunner:wasm_9_9: 1767
wasmrunner:wasm_11_11: 1740
wasmrunner:wasm_9_80: 1535
wasmrunner:wasm_9_92: 1535
wasmrunner:wasm_9_88: 1535
wasmrunner:wasm_9_76: 1535
wasmrunner:wasm_9_72: 1535
wasmrunner:wasm_9_84: 1535
wasmrunner:wasm_9_124: 1386
wasmrunner:wasm_9_16: 1368
wasmrunner:wasm_9_177: 1248
wasmrunner:wasm_9_96: 1178
wasmrunner:wasm_9_19: 957
wasmrunner:wasm_9_75: 918
wasmrunner:wasm_9_49: 871
wasmrunner:wasm_9_47: 780
wasmrunner:wasm_9_1: 687
wasmrunner:wasm_9_106: 546
wasmrunner:wasm_13_5: 458
wasmrunner:wasm_9_2: 458
wasmrunner:wasm_13_11: 457
wasmrunner:wasm_9_14: 437
wasmrunner:wasm_9_69: 389
wasmrunner:wasm_9_18: 348
wasmrunner:wasm_9_70: 337
wasmrunner:wasm_9_118: 254
intrinsic:load_word: 248
intrinsic:store_word: 248
wasmrunner:wasm_9_21: 245
wasmrunner:init: 241
wasmrunner:wasm_9_29: 224
wasmrunner:wasm_9_85: 220
wasmrunner:wasm_9_128: 192
wasmrunner:wasm_9_12: 170
wasmrunner:wasm_9_8: 168
wasmrunner:wasm_9_86: 150
wasmrunner:wasm_9_114: 98
wasmrunner:wasm_9_15: 92
wasmrunner:wasm_9_77: 88
wasmrunner:wasm_9_81: 88
wasmrunner:wasm_9_34: 84
wasmrunner:wasm_9_119: 76
wasmrunner:wasm_9_82: 60
wasmrunner:wasm_9_78: 60
wasmrunner:wasm_9_20: 51
wasmrunner:wasm_9_104: 51
wasmrunner:wasm_9_24: 42
wasmrunner:wasm_8_0: 39
wasmrunner:wasm_9_10: 36
wasmrunner:wasm_9_122: 36
wasmrunner:wasm_9_129: 32
wasmrunner:wasm_13_0: 28
wasmrunner:wasm_8_6: 24
wasmrunner:wasm_16_0: 24
wasmrunner:wasm_9_22: 23
wasmrunner:wasm_15_2: 18
wasmrunner:wasm_11_0: 16
wasmrunner:wasm_11_3: 15
wasmrunner:wasm_15_0: 15
wasmrunner:wasm_14_0: 12
wasmrunner:wasm_13_13: 12
wasmrunner:wasm_17_0: 12
wasmrunner:wasm_11_4: 12
wasmrunner:wasm_5_0: 12
wasmrunner:wasm_8_3: 12
wasmrunner:wasm_10_0: 11
wasmrunner:wasm_17_2: 10
wasmrunner:wasm_6_0: 9
wasmrunner:wasm_16_2: 9
wasmrunner:wasm_9_127: 9
wasmrunner:wasm_9_125: 8
wasmrunner:wasm_8_2: 7
wasmrunner:wasm_9_30: 7
wasmrunner:wasm_11_2: 5
wasmrunner:_start: 4
wasmrunner:wasm_11_6: 4
wasmrunner:wasm_11_1: 4
wasmrunner:wasm_10_1: 4
wasmrunner:wasm_6_1: 4
wasmrunner:wasm_8_1: 4
wasmrunner:wasm_16_1: 4
wasmrunner:wasm_15_3: 4
wasmrunner:wasm_5_2: 3
wasmrunner:wasm_15_1: 3
wasmrunner:wasm_5_1: 3
wasmrunner:wasm_13_3: 2
wasmrunner:wasm_8_5: 2
wasmrunner:wasm_11_10: 2
wasmrunner:wasm_11_12: 2
